
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'files', true, true);
Module['FS_createDataFile']('/files', 'MOCK_DATA.csv', [105, 100, 44, 99, 111, 117, 110, 116, 114, 121, 44, 110, 117, 109, 101, 114, 111, 10, 49, 44, 76, 105, 98, 121, 97, 44, 57, 56, 46, 50, 50, 10, 50, 44, 77, 97, 117, 114, 105, 116, 97, 110, 105, 97, 44, 55, 48, 46, 56, 52, 10, 51, 44, 71, 114, 101, 110, 97, 100, 97, 44, 50, 56, 46, 50, 51, 10, 52, 44, 77, 97, 121, 111, 116, 116, 101, 44, 52, 52, 46, 51, 50, 10, 53, 44, 77, 97, 108, 105, 44, 53, 56, 46, 53, 52, 10, 54, 44, 83, 101, 121, 99, 104, 101, 108, 108, 101, 115, 44, 54, 50, 46, 56, 10, 55, 44, 83, 105, 110, 103, 97, 112, 111, 114, 101, 44, 56, 53, 46, 56, 55, 10, 56, 44, 82, 111, 109, 97, 110, 105, 97, 44, 50, 54, 46, 50, 55, 10, 57, 44, 80, 97, 112, 117, 97, 32, 78, 101, 119, 32, 71, 117, 105, 110, 101, 97, 44, 50, 48, 46, 51, 10, 49, 48, 44, 84, 117, 114, 107, 101, 121, 44, 55, 53, 46, 51, 51, 10, 49, 49, 44, 80, 101, 114, 117, 44, 54, 50, 46, 53, 57, 10, 49, 50, 44, 83, 97, 105, 110, 116, 32, 66, 97, 114, 116, 104, 101, 108, 101, 109, 121, 44, 56, 54, 46, 55, 52, 10, 49, 51, 44, 70, 97, 114, 111, 101, 32, 73, 115, 108, 97, 110, 100, 115, 44, 53, 51, 46, 49, 53, 10, 49, 52, 44, 84, 117, 114, 107, 109, 101, 110, 105, 115, 116, 97, 110, 44, 57, 54, 46, 52, 10, 49, 53, 44, 65, 110, 103, 111, 108, 97, 44, 54, 54, 46, 55, 53, 10, 49, 54, 44, 80, 97, 114, 97, 103, 117, 97, 121, 44, 49, 56, 46, 50, 50, 10, 49, 55, 44, 87, 97, 108, 108, 105, 115, 32, 97, 110, 100, 32, 70, 117, 116, 117, 110, 97, 32, 73, 115, 108, 97, 110, 100, 115, 44, 55, 46, 54, 52, 10, 49, 56, 44, 83, 101, 114, 98, 105, 97, 44, 57, 57, 46, 49, 55, 10, 49, 57, 44, 65, 117, 115, 116, 114, 97, 108, 105, 97, 44, 56, 56, 46, 53, 52, 10, 50, 48, 44, 83, 118, 97, 108, 98, 97, 114, 100, 32, 97, 110, 100, 32, 74, 97, 110, 32, 77, 97, 121, 101, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 50, 56, 46, 55, 52, 10, 50, 49, 44, 66, 114, 105, 116, 105, 115, 104, 32, 86, 105, 114, 103, 105, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 52, 56, 46, 54, 56, 10, 50, 50, 44, 34, 80, 97, 108, 101, 115, 116, 105, 110, 105, 97, 110, 32, 84, 101, 114, 114, 105, 116, 111, 114, 121, 44, 32, 79, 99, 99, 117, 112, 105, 101, 100, 34, 44, 56, 49, 46, 54, 51, 10, 50, 51, 44, 83, 111, 109, 97, 108, 105, 97, 44, 52, 49, 46, 56, 54, 10, 50, 52, 44, 68, 111, 109, 105, 110, 105, 99, 97, 44, 53, 56, 46, 49, 56, 10, 50, 53, 44, 67, 111, 115, 116, 97, 32, 82, 105, 99, 97, 44, 56, 46, 49, 49, 10, 50, 54, 44, 72, 117, 110, 103, 97, 114, 121, 44, 52, 53, 46, 51, 10, 50, 55, 44, 69, 116, 104, 105, 111, 112, 105, 97, 44, 57, 48, 46, 54, 57, 10, 50, 56, 44, 84, 111, 107, 101, 108, 97, 117, 44, 49, 48, 46, 48, 50, 10, 50, 57, 44, 78, 97, 117, 114, 117, 44, 54, 50, 46, 51, 49, 10, 51, 48, 44, 66, 101, 108, 105, 122, 101, 44, 56, 55, 46, 57, 54, 10, 51, 49, 44, 66, 117, 108, 103, 97, 114, 105, 97, 44, 49, 53, 46, 51, 54, 10, 51, 50, 44, 83, 101, 121, 99, 104, 101, 108, 108, 101, 115, 44, 56, 49, 46, 48, 56, 10, 51, 51, 44, 71, 114, 101, 101, 99, 101, 44, 54, 57, 46, 56, 49, 10, 51, 52, 44, 86, 101, 110, 101, 122, 117, 101, 108, 97, 44, 55, 56, 46, 48, 57, 10, 51, 53, 44, 74, 97, 109, 97, 105, 99, 97, 44, 54, 56, 46, 52, 56, 10, 51, 54, 44, 34, 80, 97, 108, 101, 115, 116, 105, 110, 105, 97, 110, 32, 84, 101, 114, 114, 105, 116, 111, 114, 121, 44, 32, 79, 99, 99, 117, 112, 105, 101, 100, 34, 44, 56, 46, 51, 51, 10, 51, 55, 44, 83, 97, 105, 110, 116, 32, 72, 101, 108, 101, 110, 97, 44, 54, 46, 50, 10, 51, 56, 44, 66, 97, 110, 103, 108, 97, 100, 101, 115, 104, 44, 55, 53, 46, 52, 56, 10, 51, 57, 44, 76, 105, 101, 99, 104, 116, 101, 110, 115, 116, 101, 105, 110, 44, 57, 51, 46, 53, 51, 10, 52, 48, 44, 72, 101, 97, 114, 100, 32, 97, 110, 100, 32, 77, 99, 68, 111, 110, 97, 108, 100, 32, 73, 115, 108, 97, 110, 100, 115, 44, 51, 52, 46, 57, 10, 52, 49, 44, 68, 106, 105, 98, 111, 117, 116, 105, 44, 57, 54, 46, 53, 10, 52, 50, 44, 77, 97, 121, 111, 116, 116, 101, 44, 53, 46, 49, 55, 10, 52, 51, 44, 77, 97, 100, 97, 103, 97, 115, 99, 97, 114, 44, 56, 52, 46, 48, 52, 10, 52, 52, 44, 67, 97, 121, 109, 97, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 50, 56, 46, 53, 52, 10, 52, 53, 44, 71, 117, 105, 110, 101, 97, 45, 66, 105, 115, 115, 97, 117, 44, 55, 50, 46, 57, 50, 10, 52, 54, 44, 67, 97, 121, 109, 97, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 51, 49, 46, 49, 53, 10, 52, 55, 44, 83, 101, 121, 99, 104, 101, 108, 108, 101, 115, 44, 55, 54, 46, 54, 53, 10, 52, 56, 44, 83, 101, 114, 98, 105, 97, 44, 51, 54, 46, 52, 57, 10, 52, 57, 44, 84, 111, 107, 101, 108, 97, 117, 44, 56, 54, 46, 52, 50, 10, 53, 48, 44, 84, 117, 114, 107, 115, 32, 97, 110, 100, 32, 67, 97, 105, 99, 111, 115, 32, 73, 115, 108, 97, 110, 100, 115, 44, 52, 57, 46, 48, 49, 10, 53, 49, 44, 80, 97, 110, 97, 109, 97, 44, 51, 54, 46, 48, 54, 10, 53, 50, 44, 76, 101, 115, 111, 116, 104, 111, 44, 56, 54, 46, 48, 51, 10, 53, 51, 44, 76, 97, 116, 118, 105, 97, 44, 49, 54, 46, 57, 55, 10, 53, 52, 44, 74, 97, 112, 97, 110, 44, 50, 53, 46, 52, 57, 10, 53, 53, 44, 77, 97, 114, 116, 105, 110, 105, 113, 117, 101, 44, 57, 53, 46, 56, 54, 10, 53, 54, 44, 78, 105, 99, 97, 114, 97, 103, 117, 97, 44, 52, 54, 46, 54, 52, 10, 53, 55, 44, 84, 111, 110, 103, 97, 44, 53, 46, 54, 55, 10, 53, 56, 44, 83, 114, 105, 32, 76, 97, 110, 107, 97, 44, 53, 54, 46, 57, 51, 10, 53, 57, 44, 66, 97, 110, 103, 108, 97, 100, 101, 115, 104, 44, 53, 48, 46, 52, 49, 10, 54, 48, 44, 84, 97, 105, 119, 97, 110, 44, 55, 52, 46, 53, 55, 10, 54, 49, 44, 77, 111, 110, 116, 115, 101, 114, 114, 97, 116, 44, 57, 48, 46, 50, 52, 10, 54, 50, 44, 66, 104, 117, 116, 97, 110, 44, 51, 49, 46, 56, 54, 10, 54, 51, 44, 80, 105, 116, 99, 97, 105, 114, 110, 32, 73, 115, 108, 97, 110, 100, 44, 54, 53, 46, 51, 50, 10, 54, 52, 44, 70, 114, 101, 110, 99, 104, 32, 71, 117, 105, 97, 110, 97, 44, 55, 56, 46, 50, 10, 54, 53, 44, 80, 105, 116, 99, 97, 105, 114, 110, 32, 73, 115, 108, 97, 110, 100, 44, 57, 53, 46, 51, 50, 10, 54, 54, 44, 83, 111, 117, 116, 104, 32, 65, 102, 114, 105, 99, 97, 44, 52, 56, 46, 52, 49, 10, 54, 55, 44, 66, 97, 104, 97, 109, 97, 115, 44, 50, 57, 46, 49, 50, 10, 54, 56, 44, 66, 117, 108, 103, 97, 114, 105, 97, 44, 53, 57, 46, 54, 51, 10, 54, 57, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 53, 53, 46, 56, 55, 10, 55, 48, 44, 66, 101, 108, 103, 105, 117, 109, 44, 53, 52, 46, 50, 57, 10, 55, 49, 44, 74, 97, 109, 97, 105, 99, 97, 44, 53, 57, 46, 49, 55, 10, 55, 50, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 52, 51, 46, 56, 56, 10, 55, 51, 44, 71, 117, 105, 110, 101, 97, 44, 57, 51, 46, 54, 50, 10, 55, 52, 44, 70, 105, 110, 108, 97, 110, 100, 44, 54, 53, 46, 49, 51, 10, 55, 53, 44, 84, 111, 107, 101, 108, 97, 117, 44, 49, 48, 46, 56, 54, 10, 55, 54, 44, 74, 101, 114, 115, 101, 121, 44, 50, 52, 46, 52, 55, 10, 55, 55, 44, 76, 97, 111, 115, 44, 57, 48, 46, 54, 49, 10, 55, 56, 44, 78, 111, 114, 102, 111, 108, 107, 32, 73, 115, 108, 97, 110, 100, 44, 57, 57, 46, 54, 54, 10, 55, 57, 44, 83, 111, 117, 116, 104, 32, 65, 102, 114, 105, 99, 97, 44, 52, 48, 46, 55, 57, 10, 56, 48, 44, 65, 108, 103, 101, 114, 105, 97, 44, 56, 52, 46, 56, 55, 10, 56, 49, 44, 73, 114, 97, 113, 44, 50, 56, 46, 57, 50, 10, 56, 50, 44, 77, 97, 121, 111, 116, 116, 101, 44, 57, 49, 46, 53, 49, 10, 56, 51, 44, 84, 111, 103, 111, 44, 53, 53, 46, 56, 55, 10, 56, 52, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 49, 46, 48, 49, 10, 56, 53, 44, 65, 109, 101, 114, 105, 99, 97, 110, 32, 83, 97, 109, 111, 97, 44, 50, 56, 46, 56, 10, 56, 54, 44, 65, 117, 115, 116, 114, 97, 108, 105, 97, 44, 51, 46, 53, 49, 10, 56, 55, 44, 68, 111, 109, 105, 110, 105, 99, 97, 110, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 56, 48, 46, 51, 53, 10, 56, 56, 44, 74, 97, 112, 97, 110, 44, 57, 48, 46, 56, 57, 10, 56, 57, 44, 84, 117, 118, 97, 108, 117, 44, 50, 54, 46, 48, 50, 10, 57, 48, 44, 66, 111, 108, 105, 118, 105, 97, 44, 51, 52, 46, 54, 53, 10, 57, 49, 44, 83, 119, 101, 100, 101, 110, 44, 52, 50, 46, 57, 10, 57, 50, 44, 34, 75, 111, 114, 101, 97, 44, 32, 83, 111, 117, 116, 104, 34, 44, 52, 53, 46, 56, 52, 10, 57, 51, 44, 72, 97, 105, 116, 105, 44, 52, 57, 46, 48, 54, 10, 57, 52, 44, 67, 114, 111, 97, 116, 105, 97, 44, 55, 51, 46, 52, 50, 10, 57, 53, 44, 90, 97, 109, 98, 105, 97, 44, 55, 57, 46, 49, 52, 10, 57, 54, 44, 83, 97, 105, 110, 116, 32, 77, 97, 114, 116, 105, 110, 44, 50, 55, 46, 53, 52, 10, 57, 55, 44, 85, 110, 105, 116, 101, 100, 32, 65, 114, 97, 98, 32, 69, 109, 105, 114, 97, 116, 101, 115, 44, 49, 52, 46, 49, 54, 10, 57, 56, 44, 73, 114, 97, 110, 44, 50, 48, 46, 48, 53, 10, 57, 57, 44, 75, 101, 110, 121, 97, 44, 49, 55, 46, 54, 55, 10, 49, 48, 48, 44, 68, 111, 109, 105, 110, 105, 99, 97, 44, 49, 57, 46, 50, 52, 10, 49, 48, 49, 44, 84, 111, 103, 111, 44, 51, 52, 46, 57, 10, 49, 48, 50, 44, 77, 97, 100, 97, 103, 97, 115, 99, 97, 114, 44, 56, 49, 46, 56, 55, 10, 49, 48, 51, 44, 83, 97, 105, 110, 116, 32, 77, 97, 114, 116, 105, 110, 44, 54, 54, 46, 54, 54, 10, 49, 48, 52, 44, 84, 117, 114, 107, 115, 32, 97, 110, 100, 32, 67, 97, 105, 99, 111, 115, 32, 73, 115, 108, 97, 110, 100, 115, 44, 50, 50, 46, 51, 49, 10, 49, 48, 53, 44, 83, 101, 121, 99, 104, 101, 108, 108, 101, 115, 44, 49, 51, 46, 53, 56, 10, 49, 48, 54, 44, 74, 97, 112, 97, 110, 44, 55, 56, 46, 56, 52, 10, 49, 48, 55, 44, 84, 111, 107, 101, 108, 97, 117, 44, 51, 54, 46, 55, 56, 10, 49, 48, 56, 44, 83, 105, 101, 114, 114, 97, 32, 76, 101, 111, 110, 101, 44, 54, 49, 46, 51, 51, 10, 49, 48, 57, 44, 67, 111, 116, 101, 32, 100, 39, 73, 118, 111, 105, 114, 101, 44, 53, 49, 46, 52, 55, 10, 49, 49, 48, 44, 82, 119, 97, 110, 100, 97, 44, 55, 50, 46, 50, 55, 10, 49, 49, 49, 44, 66, 111, 108, 105, 118, 105, 97, 44, 56, 57, 46, 54, 52, 10, 49, 49, 50, 44, 67, 104, 105, 108, 101, 44, 53, 56, 46, 55, 51, 10, 49, 49, 51, 44, 66, 97, 104, 97, 109, 97, 115, 44, 49, 49, 46, 48, 51, 10, 49, 49, 52, 44, 67, 104, 97, 100, 44, 52, 55, 46, 54, 51, 10, 49, 49, 53, 44, 73, 115, 114, 97, 101, 108, 44, 55, 52, 46, 50, 10, 49, 49, 54, 44, 84, 104, 97, 105, 108, 97, 110, 100, 44, 54, 48, 46, 52, 55, 10, 49, 49, 55, 44, 71, 97, 109, 98, 105, 97, 44, 55, 51, 46, 57, 10, 49, 49, 56, 44, 80, 97, 114, 97, 103, 117, 97, 121, 44, 51, 46, 56, 55, 10, 49, 49, 57, 44, 83, 119, 97, 122, 105, 108, 97, 110, 100, 44, 52, 46, 48, 51, 10, 49, 50, 48, 44, 77, 111, 110, 97, 99, 111, 44, 57, 55, 46, 54, 55, 10, 49, 50, 49, 44, 84, 104, 97, 105, 108, 97, 110, 100, 44, 51, 55, 46, 56, 53, 10, 49, 50, 50, 44, 78, 101, 112, 97, 108, 44, 53, 49, 46, 53, 52, 10, 49, 50, 51, 44, 77, 97, 108, 116, 97, 44, 49, 55, 46, 55, 55, 10, 49, 50, 52, 44, 70, 97, 114, 111, 101, 32, 73, 115, 108, 97, 110, 100, 115, 44, 53, 51, 46, 55, 57, 10, 49, 50, 53, 44, 71, 104, 97, 110, 97, 44, 49, 57, 46, 51, 57, 10, 49, 50, 54, 44, 72, 111, 110, 103, 32, 75, 111, 110, 103, 44, 50, 46, 52, 50, 10, 49, 50, 55, 44, 67, 111, 108, 111, 109, 98, 105, 97, 44, 53, 57, 46, 52, 10, 49, 50, 56, 44, 85, 110, 105, 116, 101, 100, 32, 65, 114, 97, 98, 32, 69, 109, 105, 114, 97, 116, 101, 115, 44, 52, 57, 46, 49, 54, 10, 49, 50, 57, 44, 69, 99, 117, 97, 100, 111, 114, 44, 52, 54, 46, 53, 52, 10, 49, 51, 48, 44, 83, 97, 105, 110, 116, 32, 72, 101, 108, 101, 110, 97, 44, 51, 54, 46, 53, 10, 49, 51, 49, 44, 77, 101, 120, 105, 99, 111, 44, 51, 49, 46, 50, 51, 10, 49, 51, 50, 44, 66, 101, 108, 103, 105, 117, 109, 44, 50, 50, 46, 54, 55, 10, 49, 51, 51, 44, 66, 117, 114, 117, 110, 100, 105, 44, 55, 49, 46, 56, 49, 10, 49, 51, 52, 44, 77, 97, 99, 101, 100, 111, 110, 105, 97, 44, 56, 51, 46, 52, 10, 49, 51, 53, 44, 71, 104, 97, 110, 97, 44, 56, 54, 46, 56, 53, 10, 49, 51, 54, 44, 90, 97, 109, 98, 105, 97, 44, 51, 52, 46, 52, 56, 10, 49, 51, 55, 44, 85, 110, 105, 116, 101, 100, 32, 65, 114, 97, 98, 32, 69, 109, 105, 114, 97, 116, 101, 115, 44, 53, 56, 46, 53, 49, 10, 49, 51, 56, 44, 65, 110, 103, 111, 108, 97, 44, 51, 51, 46, 48, 54, 10, 49, 51, 57, 44, 71, 97, 109, 98, 105, 97, 44, 55, 48, 46, 51, 57, 10, 49, 52, 48, 44, 73, 114, 97, 113, 44, 49, 46, 55, 50, 10, 49, 52, 49, 44, 67, 111, 109, 111, 114, 111, 115, 44, 51, 57, 46, 53, 54, 10, 49, 52, 50, 44, 77, 111, 110, 116, 101, 110, 101, 103, 114, 111, 44, 57, 48, 46, 57, 50, 10, 49, 52, 51, 44, 85, 110, 105, 116, 101, 100, 32, 83, 116, 97, 116, 101, 115, 32, 111, 102, 32, 65, 109, 101, 114, 105, 99, 97, 44, 50, 57, 46, 50, 55, 10, 49, 52, 52, 44, 65, 110, 116, 97, 114, 99, 116, 105, 99, 97, 44, 55, 48, 46, 49, 57, 10, 49, 52, 53, 44, 77, 111, 108, 100, 111, 118, 97, 44, 57, 57, 46, 51, 55, 10, 49, 52, 54, 44, 87, 97, 108, 108, 105, 115, 32, 97, 110, 100, 32, 70, 117, 116, 117, 110, 97, 32, 73, 115, 108, 97, 110, 100, 115, 44, 57, 53, 46, 55, 56, 10, 49, 52, 55, 44, 83, 97, 105, 110, 116, 32, 76, 117, 99, 105, 97, 44, 55, 48, 46, 53, 49, 10, 49, 52, 56, 44, 34, 67, 111, 110, 103, 111, 44, 32, 68, 101, 109, 111, 99, 114, 97, 116, 105, 99, 32, 82, 101, 112, 117, 98, 108, 105, 99, 32, 111, 102, 34, 44, 49, 49, 46, 51, 51, 10, 49, 52, 57, 44, 75, 121, 114, 103, 121, 122, 115, 116, 97, 110, 44, 52, 51, 46, 51, 57, 10, 49, 53, 48, 44, 77, 111, 122, 97, 109, 98, 105, 113, 117, 101, 44, 55, 56, 46, 54, 50, 10, 49, 53, 49, 44, 77, 111, 110, 103, 111, 108, 105, 97, 44, 52, 46, 56, 50, 10, 49, 53, 50, 44, 74, 97, 109, 97, 105, 99, 97, 44, 53, 51, 46, 52, 50, 10, 49, 53, 51, 44, 73, 115, 108, 101, 32, 111, 102, 32, 77, 97, 110, 44, 55, 54, 46, 55, 51, 10, 49, 53, 52, 44, 75, 101, 110, 121, 97, 44, 50, 55, 46, 53, 49, 10, 49, 53, 53, 44, 90, 97, 109, 98, 105, 97, 44, 50, 52, 46, 57, 57, 10, 49, 53, 54, 44, 76, 101, 98, 97, 110, 111, 110, 44, 53, 46, 48, 10, 49, 53, 55, 44, 65, 110, 103, 117, 105, 108, 108, 97, 44, 50, 48, 46, 52, 55, 10, 49, 53, 56, 44, 67, 121, 112, 114, 117, 115, 44, 57, 50, 46, 57, 55, 10, 49, 53, 57, 44, 84, 117, 114, 107, 115, 32, 97, 110, 100, 32, 67, 97, 105, 99, 111, 115, 32, 73, 115, 108, 97, 110, 100, 115, 44, 52, 52, 46, 51, 54, 10, 49, 54, 48, 44, 68, 111, 109, 105, 110, 105, 99, 97, 110, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 56, 57, 46, 55, 51, 10, 49, 54, 49, 44, 73, 114, 101, 108, 97, 110, 100, 44, 54, 50, 46, 57, 50, 10, 49, 54, 50, 44, 67, 101, 110, 116, 114, 97, 108, 32, 65, 102, 114, 105, 99, 97, 110, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 52, 56, 46, 48, 54, 10, 49, 54, 51, 44, 66, 101, 108, 103, 105, 117, 109, 44, 54, 55, 46, 49, 53, 10, 49, 54, 52, 44, 73, 115, 114, 97, 101, 108, 44, 51, 57, 46, 57, 51, 10, 49, 54, 53, 44, 66, 117, 114, 117, 110, 100, 105, 44, 55, 54, 46, 55, 53, 10, 49, 54, 54, 44, 85, 110, 105, 116, 101, 100, 32, 75, 105, 110, 103, 100, 111, 109, 44, 49, 56, 46, 51, 52, 10, 49, 54, 55, 44, 83, 105, 110, 103, 97, 112, 111, 114, 101, 44, 55, 48, 46, 55, 51, 10, 49, 54, 56, 44, 85, 110, 105, 116, 101, 100, 32, 75, 105, 110, 103, 100, 111, 109, 44, 52, 56, 46, 53, 54, 10, 49, 54, 57, 44, 86, 97, 116, 105, 99, 97, 110, 32, 67, 105, 116, 121, 32, 83, 116, 97, 116, 101, 32, 40, 72, 111, 108, 121, 32, 83, 101, 101, 41, 44, 50, 54, 46, 48, 10, 49, 55, 48, 44, 73, 110, 100, 111, 110, 101, 115, 105, 97, 44, 50, 52, 46, 50, 57, 10, 49, 55, 49, 44, 83, 97, 105, 110, 116, 32, 72, 101, 108, 101, 110, 97, 44, 51, 57, 46, 53, 55, 10, 49, 55, 50, 44, 66, 114, 97, 122, 105, 108, 44, 49, 57, 46, 53, 49, 10, 49, 55, 51, 44, 65, 110, 100, 111, 114, 114, 97, 44, 57, 49, 46, 50, 54, 10, 49, 55, 52, 44, 65, 110, 103, 111, 108, 97, 44, 52, 52, 46, 56, 54, 10, 49, 55, 53, 44, 71, 97, 98, 111, 110, 44, 57, 57, 46, 57, 51, 10, 49, 55, 54, 44, 65, 122, 101, 114, 98, 97, 105, 106, 97, 110, 44, 56, 48, 46, 52, 53, 10, 49, 55, 55, 44, 79, 109, 97, 110, 44, 53, 48, 46, 53, 54, 10, 49, 55, 56, 44, 80, 117, 101, 114, 116, 111, 32, 82, 105, 99, 111, 44, 56, 46, 51, 51, 10, 49, 55, 57, 44, 75, 101, 110, 121, 97, 44, 51, 56, 46, 55, 55, 10, 49, 56, 48, 44, 70, 114, 97, 110, 99, 101, 44, 50, 49, 46, 48, 51, 10, 49, 56, 49, 44, 65, 110, 103, 111, 108, 97, 44, 53, 46, 56, 56, 10, 49, 56, 50, 44, 66, 114, 105, 116, 105, 115, 104, 32, 73, 110, 100, 105, 97, 110, 32, 79, 99, 101, 97, 110, 32, 84, 101, 114, 114, 105, 116, 111, 114, 121, 44, 51, 55, 46, 53, 53, 10, 49, 56, 51, 44, 71, 117, 105, 110, 101, 97, 44, 50, 48, 46, 51, 10, 49, 56, 52, 44, 67, 104, 114, 105, 115, 116, 109, 97, 115, 32, 73, 115, 108, 97, 110, 100, 44, 49, 53, 46, 54, 54, 10, 49, 56, 53, 44, 90, 97, 109, 98, 105, 97, 44, 52, 50, 46, 51, 52, 10, 49, 56, 54, 44, 70, 105, 110, 108, 97, 110, 100, 44, 53, 55, 46, 51, 10, 49, 56, 55, 44, 83, 97, 109, 111, 97, 44, 57, 50, 46, 49, 10, 49, 56, 56, 44, 76, 105, 116, 104, 117, 97, 110, 105, 97, 44, 54, 48, 46, 53, 52, 10, 49, 56, 57, 44, 75, 117, 119, 97, 105, 116, 44, 55, 48, 46, 51, 55, 10, 49, 57, 48, 44, 66, 97, 104, 97, 109, 97, 115, 44, 49, 52, 46, 57, 49, 10, 49, 57, 49, 44, 65, 122, 101, 114, 98, 97, 105, 106, 97, 110, 44, 53, 46, 49, 55, 10, 49, 57, 50, 44, 83, 101, 110, 101, 103, 97, 108, 44, 53, 49, 46, 50, 53, 10, 49, 57, 51, 44, 83, 117, 114, 105, 110, 97, 109, 101, 44, 49, 56, 46, 53, 53, 10, 49, 57, 52, 44, 83, 97, 105, 110, 116, 32, 72, 101, 108, 101, 110, 97, 44, 50, 49, 46, 54, 51, 10, 49, 57, 53, 44, 77, 97, 108, 97, 121, 115, 105, 97, 44, 55, 53, 46, 49, 56, 10, 49, 57, 54, 44, 73, 110, 100, 105, 97, 44, 51, 49, 46, 55, 51, 10, 49, 57, 55, 44, 73, 116, 97, 108, 121, 44, 55, 52, 46, 48, 53, 10, 49, 57, 56, 44, 83, 111, 117, 116, 104, 32, 65, 102, 114, 105, 99, 97, 44, 49, 52, 46, 55, 51, 10, 49, 57, 57, 44, 85, 122, 98, 101, 107, 105, 115, 116, 97, 110, 44, 49, 51, 46, 51, 57, 10, 50, 48, 48, 44, 80, 97, 108, 97, 117, 44, 49, 52, 46, 51, 53, 10, 50, 48, 49, 44, 84, 117, 114, 107, 109, 101, 110, 105, 115, 116, 97, 110, 44, 52, 52, 46, 52, 50, 10, 50, 48, 50, 44, 81, 97, 116, 97, 114, 44, 51, 55, 46, 53, 54, 10, 50, 48, 51, 44, 83, 117, 114, 105, 110, 97, 109, 101, 44, 52, 52, 46, 55, 57, 10, 50, 48, 52, 44, 77, 105, 99, 114, 111, 110, 101, 115, 105, 97, 44, 54, 56, 46, 52, 49, 10, 50, 48, 53, 44, 70, 97, 108, 107, 108, 97, 110, 100, 32, 73, 115, 108, 97, 110, 100, 115, 32, 40, 77, 97, 108, 118, 105, 110, 97, 115, 41, 44, 50, 55, 46, 57, 56, 10, 50, 48, 54, 44, 80, 111, 108, 97, 110, 100, 44, 49, 48, 46, 48, 55, 10, 50, 48, 55, 44, 67, 111, 99, 111, 115, 32, 40, 75, 101, 101, 108, 105, 110, 103, 41, 32, 73, 115, 108, 97, 110, 100, 44, 51, 51, 46, 48, 54, 10, 50, 48, 56, 44, 73, 99, 101, 108, 97, 110, 100, 44, 49, 51, 46, 57, 54, 10, 50, 48, 57, 44, 65, 114, 117, 98, 97, 44, 49, 53, 46, 54, 51, 10, 50, 49, 48, 44, 70, 97, 108, 107, 108, 97, 110, 100, 32, 73, 115, 108, 97, 110, 100, 115, 32, 40, 77, 97, 108, 118, 105, 110, 97, 115, 41, 44, 51, 46, 49, 52, 10, 50, 49, 49, 44, 83, 119, 101, 100, 101, 110, 44, 57, 52, 46, 55, 56, 10, 50, 49, 50, 44, 80, 97, 112, 117, 97, 32, 78, 101, 119, 32, 71, 117, 105, 110, 101, 97, 44, 53, 46, 50, 54, 10, 50, 49, 51, 44, 69, 116, 104, 105, 111, 112, 105, 97, 44, 51, 49, 46, 48, 57, 10, 50, 49, 52, 44, 84, 111, 103, 111, 44, 57, 52, 46, 52, 54, 10, 50, 49, 53, 44, 90, 105, 109, 98, 97, 98, 119, 101, 44, 52, 52, 46, 56, 53, 10, 50, 49, 54, 44, 69, 114, 105, 116, 114, 101, 97, 44, 52, 54, 46, 53, 49, 10, 50, 49, 55, 44, 78, 101, 119, 32, 67, 97, 108, 101, 100, 111, 110, 105, 97, 44, 53, 55, 46, 51, 51, 10, 50, 49, 56, 44, 83, 105, 110, 103, 97, 112, 111, 114, 101, 44, 55, 57, 46, 54, 52, 10, 50, 49, 57, 44, 66, 101, 110, 105, 110, 44, 53, 57, 46, 51, 57, 10, 50, 50, 48, 44, 83, 97, 111, 32, 84, 111, 109, 101, 32, 97, 110, 100, 32, 80, 114, 105, 110, 99, 105, 112, 101, 44, 49, 49, 46, 57, 49, 10, 50, 50, 49, 44, 83, 119, 105, 116, 122, 101, 114, 108, 97, 110, 100, 44, 49, 51, 46, 50, 57, 10, 50, 50, 50, 44, 70, 114, 101, 110, 99, 104, 32, 71, 117, 105, 97, 110, 97, 44, 51, 57, 46, 51, 56, 10, 50, 50, 51, 44, 83, 97, 105, 110, 116, 32, 80, 105, 101, 114, 114, 101, 32, 97, 110, 100, 32, 77, 105, 113, 117, 101, 108, 111, 110, 44, 51, 46, 57, 53, 10, 50, 50, 52, 44, 76, 105, 98, 121, 97, 44, 49, 57, 46, 57, 50, 10, 50, 50, 53, 44, 66, 101, 108, 97, 114, 117, 115, 44, 50, 49, 46, 56, 51, 10, 50, 50, 54, 44, 66, 101, 108, 105, 122, 101, 44, 56, 51, 46, 49, 10, 50, 50, 55, 44, 77, 111, 110, 116, 101, 110, 101, 103, 114, 111, 44, 55, 52, 46, 55, 54, 10, 50, 50, 56, 44, 70, 114, 101, 110, 99, 104, 32, 71, 117, 105, 97, 110, 97, 44, 50, 50, 46, 51, 55, 10, 50, 50, 57, 44, 74, 97, 109, 97, 105, 99, 97, 44, 49, 53, 46, 50, 53, 10, 50, 51, 48, 44, 66, 114, 105, 116, 105, 115, 104, 32, 73, 110, 100, 105, 97, 110, 32, 79, 99, 101, 97, 110, 32, 84, 101, 114, 114, 105, 116, 111, 114, 121, 44, 49, 51, 46, 54, 56, 10, 50, 51, 49, 44, 83, 121, 114, 105, 97, 44, 55, 57, 46, 51, 57, 10, 50, 51, 50, 44, 68, 111, 109, 105, 110, 105, 99, 97, 44, 50, 51, 46, 48, 55, 10, 50, 51, 51, 44, 34, 75, 111, 114, 101, 97, 44, 32, 78, 111, 114, 116, 104, 34, 44, 51, 56, 46, 52, 54, 10, 50, 51, 52, 44, 66, 111, 108, 105, 118, 105, 97, 44, 55, 55, 46, 50, 54, 10, 50, 51, 53, 44, 80, 97, 112, 117, 97, 32, 78, 101, 119, 32, 71, 117, 105, 110, 101, 97, 44, 50, 55, 46, 56, 49, 10, 50, 51, 54, 44, 85, 110, 105, 116, 101, 100, 32, 83, 116, 97, 116, 101, 115, 32, 86, 105, 114, 103, 105, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 50, 57, 46, 51, 55, 10, 50, 51, 55, 44, 67, 97, 109, 101, 114, 111, 111, 110, 44, 55, 54, 46, 56, 50, 10, 50, 51, 56, 44, 83, 97, 105, 110, 116, 32, 77, 97, 114, 116, 105, 110, 44, 53, 54, 46, 55, 50, 10, 50, 51, 57, 44, 85, 110, 105, 116, 101, 100, 32, 83, 116, 97, 116, 101, 115, 32, 86, 105, 114, 103, 105, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 52, 51, 46, 56, 54, 10, 50, 52, 48, 44, 72, 111, 110, 100, 117, 114, 97, 115, 44, 51, 50, 46, 53, 49, 10, 50, 52, 49, 44, 87, 97, 108, 108, 105, 115, 32, 97, 110, 100, 32, 70, 117, 116, 117, 110, 97, 32, 73, 115, 108, 97, 110, 100, 115, 44, 55, 56, 46, 56, 49, 10, 50, 52, 50, 44, 78, 111, 114, 119, 97, 121, 44, 53, 48, 46, 57, 10, 50, 52, 51, 44, 78, 105, 99, 97, 114, 97, 103, 117, 97, 44, 51, 57, 46, 51, 51, 10, 50, 52, 52, 44, 73, 114, 97, 110, 44, 49, 46, 57, 56, 10, 50, 52, 53, 44, 78, 101, 119, 32, 90, 101, 97, 108, 97, 110, 100, 44, 56, 46, 53, 52, 10, 50, 52, 54, 44, 71, 97, 109, 98, 105, 97, 44, 53, 51, 46, 49, 54, 10, 50, 52, 55, 44, 83, 97, 105, 110, 116, 32, 66, 97, 114, 116, 104, 101, 108, 101, 109, 121, 44, 52, 49, 46, 48, 52, 10, 50, 52, 56, 44, 67, 104, 105, 108, 101, 44, 57, 51, 46, 49, 52, 10, 50, 52, 57, 44, 65, 102, 103, 104, 97, 110, 105, 115, 116, 97, 110, 44, 52, 46, 51, 53, 10, 50, 53, 48, 44, 76, 97, 111, 115, 44, 54, 54, 46, 53, 10, 50, 53, 49, 44, 71, 117, 97, 100, 101, 108, 111, 117, 112, 101, 44, 55, 51, 46, 48, 50, 10, 50, 53, 50, 44, 66, 97, 104, 114, 97, 105, 110, 44, 50, 57, 46, 53, 51, 10, 50, 53, 51, 44, 90, 105, 109, 98, 97, 98, 119, 101, 44, 50, 52, 46, 54, 10, 50, 53, 52, 44, 86, 105, 101, 116, 110, 97, 109, 44, 51, 53, 46, 57, 49, 10, 50, 53, 53, 44, 71, 114, 101, 110, 97, 100, 97, 44, 49, 48, 46, 50, 54, 10, 50, 53, 54, 44, 66, 97, 110, 103, 108, 97, 100, 101, 115, 104, 44, 53, 49, 46, 55, 10, 50, 53, 55, 44, 84, 105, 109, 111, 114, 45, 76, 101, 115, 116, 101, 44, 55, 51, 46, 55, 50, 10, 50, 53, 56, 44, 67, 122, 101, 99, 104, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 53, 46, 50, 52, 10, 50, 53, 57, 44, 80, 111, 114, 116, 117, 103, 97, 108, 44, 54, 55, 46, 49, 56, 10, 50, 54, 48, 44, 77, 111, 122, 97, 109, 98, 105, 113, 117, 101, 44, 49, 46, 53, 52, 10, 50, 54, 49, 44, 75, 97, 122, 97, 107, 104, 115, 116, 97, 110, 44, 51, 54, 46, 51, 49, 10, 50, 54, 50, 44, 77, 111, 110, 97, 99, 111, 44, 56, 48, 46, 51, 50, 10, 50, 54, 51, 44, 66, 114, 117, 110, 101, 105, 32, 68, 97, 114, 117, 115, 115, 97, 108, 97, 109, 44, 56, 48, 46, 50, 52, 10, 50, 54, 52, 44, 83, 118, 97, 108, 98, 97, 114, 100, 32, 97, 110, 100, 32, 74, 97, 110, 32, 77, 97, 121, 101, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 50, 46, 56, 10, 50, 54, 53, 44, 80, 105, 116, 99, 97, 105, 114, 110, 32, 73, 115, 108, 97, 110, 100, 44, 49, 57, 46, 52, 50, 10, 50, 54, 54, 44, 67, 111, 109, 111, 114, 111, 115, 44, 53, 55, 46, 53, 51, 10, 50, 54, 55, 44, 85, 110, 105, 116, 101, 100, 32, 83, 116, 97, 116, 101, 115, 32, 86, 105, 114, 103, 105, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 53, 56, 46, 57, 49, 10, 50, 54, 56, 44, 75, 97, 122, 97, 107, 104, 115, 116, 97, 110, 44, 57, 52, 46, 50, 49, 10, 50, 54, 57, 44, 77, 97, 108, 100, 105, 118, 101, 115, 44, 49, 54, 46, 56, 52, 10, 50, 55, 48, 44, 80, 111, 108, 97, 110, 100, 44, 49, 50, 46, 55, 53, 10, 50, 55, 49, 44, 66, 101, 108, 105, 122, 101, 44, 53, 51, 46, 56, 54, 10, 50, 55, 50, 44, 65, 110, 103, 117, 105, 108, 108, 97, 44, 57, 46, 49, 49, 10, 50, 55, 51, 44, 72, 101, 97, 114, 100, 32, 97, 110, 100, 32, 77, 99, 68, 111, 110, 97, 108, 100, 32, 73, 115, 108, 97, 110, 100, 115, 44, 49, 52, 46, 53, 10, 50, 55, 52, 44, 78, 111, 114, 102, 111, 108, 107, 32, 73, 115, 108, 97, 110, 100, 44, 49, 46, 55, 57, 10, 50, 55, 53, 44, 83, 97, 105, 110, 116, 32, 86, 105, 110, 99, 101, 110, 116, 32, 97, 110, 100, 32, 116, 104, 101, 32, 71, 114, 101, 110, 97, 100, 105, 110, 101, 115, 44, 49, 50, 46, 55, 54, 10, 50, 55, 54, 44, 34, 75, 111, 114, 101, 97, 44, 32, 78, 111, 114, 116, 104, 34, 44, 51, 48, 46, 53, 53, 10, 50, 55, 55, 44, 70, 105, 106, 105, 44, 50, 46, 56, 52, 10, 50, 55, 56, 44, 71, 117, 97, 100, 101, 108, 111, 117, 112, 101, 44, 53, 50, 46, 52, 10, 50, 55, 57, 44, 67, 111, 116, 101, 32, 100, 39, 73, 118, 111, 105, 114, 101, 44, 57, 50, 46, 53, 56, 10, 50, 56, 48, 44, 71, 104, 97, 110, 97, 44, 50, 53, 46, 56, 55, 10, 50, 56, 49, 44, 67, 97, 121, 109, 97, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 52, 53, 46, 51, 49, 10, 50, 56, 50, 44, 67, 111, 109, 111, 114, 111, 115, 44, 54, 51, 46, 57, 10, 50, 56, 51, 44, 83, 119, 97, 122, 105, 108, 97, 110, 100, 44, 53, 56, 46, 57, 57, 10, 50, 56, 52, 44, 72, 101, 97, 114, 100, 32, 97, 110, 100, 32, 77, 99, 68, 111, 110, 97, 108, 100, 32, 73, 115, 108, 97, 110, 100, 115, 44, 54, 49, 46, 51, 51, 10, 50, 56, 53, 44, 83, 97, 105, 110, 116, 32, 77, 97, 114, 116, 105, 110, 44, 55, 55, 46, 49, 51, 10, 50, 56, 54, 44, 82, 117, 115, 115, 105, 97, 44, 51, 51, 46, 48, 52, 10, 50, 56, 55, 44, 68, 111, 109, 105, 110, 105, 99, 97, 44, 55, 51, 46, 55, 52, 10, 50, 56, 56, 44, 70, 97, 108, 107, 108, 97, 110, 100, 32, 73, 115, 108, 97, 110, 100, 115, 32, 40, 77, 97, 108, 118, 105, 110, 97, 115, 41, 44, 53, 52, 46, 49, 10, 50, 56, 57, 44, 83, 97, 105, 110, 116, 32, 86, 105, 110, 99, 101, 110, 116, 32, 97, 110, 100, 32, 116, 104, 101, 32, 71, 114, 101, 110, 97, 100, 105, 110, 101, 115, 44, 54, 54, 46, 57, 55, 10, 50, 57, 48, 44, 83, 97, 105, 110, 116, 32, 75, 105, 116, 116, 115, 32, 97, 110, 100, 32, 78, 101, 118, 105, 115, 44, 51, 48, 46, 52, 54, 10, 50, 57, 49, 44, 67, 111, 111, 107, 32, 73, 115, 108, 97, 110, 100, 115, 44, 51, 56, 46, 57, 10, 50, 57, 50, 44, 67, 121, 112, 114, 117, 115, 44, 50, 46, 57, 52, 10, 50, 57, 51, 44, 77, 97, 108, 97, 119, 105, 44, 50, 48, 46, 57, 50, 10, 50, 57, 52, 44, 69, 114, 105, 116, 114, 101, 97, 44, 55, 51, 46, 57, 54, 10, 50, 57, 53, 44, 66, 97, 110, 103, 108, 97, 100, 101, 115, 104, 44, 57, 56, 46, 54, 50, 10, 50, 57, 54, 44, 68, 101, 110, 109, 97, 114, 107, 44, 50, 56, 46, 48, 54, 10, 50, 57, 55, 44, 72, 111, 110, 103, 32, 75, 111, 110, 103, 44, 52, 49, 46, 50, 50, 10, 50, 57, 56, 44, 66, 111, 115, 110, 105, 97, 32, 97, 110, 100, 32, 72, 101, 114, 122, 101, 103, 111, 118, 105, 110, 97, 44, 57, 48, 46, 48, 52, 10, 50, 57, 57, 44, 34, 75, 111, 114, 101, 97, 44, 32, 83, 111, 117, 116, 104, 34, 44, 57, 55, 46, 54, 10, 51, 48, 48, 44, 77, 111, 122, 97, 109, 98, 105, 113, 117, 101, 44, 56, 50, 46, 56, 52, 10, 51, 48, 49, 44, 68, 111, 109, 105, 110, 105, 99, 97, 44, 49, 53, 46, 54, 57, 10, 51, 48, 50, 44, 83, 108, 111, 118, 97, 107, 105, 97, 44, 54, 55, 46, 54, 52, 10, 51, 48, 51, 44, 67, 97, 121, 109, 97, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 52, 49, 46, 55, 55, 10, 51, 48, 52, 44, 67, 104, 105, 108, 101, 44, 52, 56, 46, 54, 56, 10, 51, 48, 53, 44, 84, 114, 105, 110, 105, 100, 97, 100, 32, 97, 110, 100, 32, 84, 111, 98, 97, 103, 111, 44, 49, 56, 46, 50, 53, 10, 51, 48, 54, 44, 86, 97, 116, 105, 99, 97, 110, 32, 67, 105, 116, 121, 32, 83, 116, 97, 116, 101, 32, 40, 72, 111, 108, 121, 32, 83, 101, 101, 41, 44, 55, 48, 46, 53, 56, 10, 51, 48, 55, 44, 84, 97, 106, 105, 107, 105, 115, 116, 97, 110, 44, 55, 56, 46, 53, 53, 10, 51, 48, 56, 44, 71, 105, 98, 114, 97, 108, 116, 97, 114, 44, 55, 53, 46, 49, 10, 51, 48, 57, 44, 85, 122, 98, 101, 107, 105, 115, 116, 97, 110, 44, 52, 48, 46, 54, 54, 10, 51, 49, 48, 44, 78, 105, 103, 101, 114, 105, 97, 44, 50, 54, 46, 51, 50, 10, 51, 49, 49, 44, 83, 111, 108, 111, 109, 111, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 53, 46, 54, 50, 10, 51, 49, 50, 44, 78, 111, 114, 102, 111, 108, 107, 32, 73, 115, 108, 97, 110, 100, 44, 50, 53, 46, 51, 53, 10, 51, 49, 51, 44, 71, 114, 101, 101, 99, 101, 44, 56, 55, 46, 49, 53, 10, 51, 49, 52, 44, 67, 97, 110, 97, 100, 97, 44, 56, 51, 46, 53, 51, 10, 51, 49, 53, 44, 85, 103, 97, 110, 100, 97, 44, 54, 54, 46, 49, 53, 10, 51, 49, 54, 44, 69, 108, 32, 83, 97, 108, 118, 97, 100, 111, 114, 44, 49, 54, 46, 53, 54, 10, 51, 49, 55, 44, 70, 105, 106, 105, 44, 54, 55, 46, 50, 52, 10, 51, 49, 56, 44, 78, 105, 103, 101, 114, 105, 97, 44, 56, 55, 46, 50, 10, 51, 49, 57, 44, 71, 117, 105, 110, 101, 97, 44, 55, 54, 46, 51, 10, 51, 50, 48, 44, 83, 111, 117, 116, 104, 32, 71, 101, 111, 114, 103, 105, 97, 32, 97, 110, 100, 32, 116, 104, 101, 32, 83, 111, 117, 116, 104, 32, 83, 97, 110, 100, 119, 105, 99, 104, 32, 73, 115, 108, 97, 110, 100, 115, 44, 49, 57, 46, 49, 52, 10, 51, 50, 49, 44, 77, 111, 110, 116, 115, 101, 114, 114, 97, 116, 44, 49, 53, 46, 48, 54, 10, 51, 50, 50, 44, 80, 97, 114, 97, 103, 117, 97, 121, 44, 52, 52, 46, 56, 51, 10, 51, 50, 51, 44, 72, 111, 110, 100, 117, 114, 97, 115, 44, 56, 56, 46, 55, 55, 10, 51, 50, 52, 44, 67, 111, 109, 111, 114, 111, 115, 44, 57, 48, 46, 49, 54, 10, 51, 50, 53, 44, 66, 114, 117, 110, 101, 105, 32, 68, 97, 114, 117, 115, 115, 97, 108, 97, 109, 44, 49, 54, 46, 48, 50, 10, 51, 50, 54, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 53, 52, 46, 54, 51, 10, 51, 50, 55, 44, 85, 122, 98, 101, 107, 105, 115, 116, 97, 110, 44, 52, 52, 46, 57, 51, 10, 51, 50, 56, 44, 75, 121, 114, 103, 121, 122, 115, 116, 97, 110, 44, 52, 50, 46, 49, 56, 10, 51, 50, 57, 44, 84, 111, 103, 111, 44, 56, 46, 51, 54, 10, 51, 51, 48, 44, 76, 101, 115, 111, 116, 104, 111, 44, 53, 46, 49, 10, 51, 51, 49, 44, 71, 117, 105, 110, 101, 97, 45, 66, 105, 115, 115, 97, 117, 44, 54, 48, 46, 55, 50, 10, 51, 51, 50, 44, 66, 97, 104, 114, 97, 105, 110, 44, 51, 54, 46, 57, 49, 10, 51, 51, 51, 44, 84, 97, 106, 105, 107, 105, 115, 116, 97, 110, 44, 52, 50, 46, 56, 49, 10, 51, 51, 52, 44, 77, 97, 99, 97, 117, 44, 49, 48, 46, 54, 51, 10, 51, 51, 53, 44, 74, 101, 114, 115, 101, 121, 44, 56, 56, 46, 53, 55, 10, 51, 51, 54, 44, 83, 117, 114, 105, 110, 97, 109, 101, 44, 53, 52, 46, 54, 52, 10, 51, 51, 55, 44, 73, 114, 101, 108, 97, 110, 100, 44, 53, 46, 57, 55, 10, 51, 51, 56, 44, 65, 110, 100, 111, 114, 114, 97, 44, 49, 51, 46, 57, 53, 10, 51, 51, 57, 44, 67, 97, 121, 109, 97, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 55, 48, 46, 56, 54, 10, 51, 52, 48, 44, 66, 101, 110, 105, 110, 44, 54, 57, 46, 52, 55, 10, 51, 52, 49, 44, 74, 111, 114, 100, 97, 110, 44, 49, 54, 46, 55, 51, 10, 51, 52, 50, 44, 83, 101, 114, 98, 105, 97, 44, 53, 49, 46, 48, 57, 10, 51, 52, 51, 44, 70, 105, 110, 108, 97, 110, 100, 44, 52, 48, 46, 52, 57, 10, 51, 52, 52, 44, 72, 117, 110, 103, 97, 114, 121, 44, 52, 46, 53, 57, 10, 51, 52, 53, 44, 76, 105, 98, 101, 114, 105, 97, 44, 54, 48, 46, 52, 57, 10, 51, 52, 54, 44, 84, 104, 97, 105, 108, 97, 110, 100, 44, 52, 52, 46, 54, 10, 51, 52, 55, 44, 71, 117, 97, 100, 101, 108, 111, 117, 112, 101, 44, 49, 46, 54, 57, 10, 51, 52, 56, 44, 77, 97, 108, 97, 121, 115, 105, 97, 44, 51, 46, 54, 55, 10, 51, 52, 57, 44, 73, 114, 97, 110, 44, 56, 52, 46, 50, 53, 10, 51, 53, 48, 44, 69, 116, 104, 105, 111, 112, 105, 97, 44, 53, 52, 46, 50, 50, 10, 51, 53, 49, 44, 83, 119, 97, 122, 105, 108, 97, 110, 100, 44, 52, 56, 46, 48, 54, 10, 51, 53, 50, 44, 66, 114, 97, 122, 105, 108, 44, 55, 53, 46, 56, 49, 10, 51, 53, 51, 44, 70, 105, 106, 105, 44, 56, 57, 46, 51, 51, 10, 51, 53, 52, 44, 77, 97, 108, 116, 97, 44, 53, 54, 46, 52, 52, 10, 51, 53, 53, 44, 83, 97, 105, 110, 116, 32, 80, 105, 101, 114, 114, 101, 32, 97, 110, 100, 32, 77, 105, 113, 117, 101, 108, 111, 110, 44, 51, 51, 46, 53, 55, 10, 51, 53, 54, 44, 82, 119, 97, 110, 100, 97, 44, 57, 56, 46, 54, 51, 10, 51, 53, 55, 44, 80, 97, 110, 97, 109, 97, 44, 54, 50, 46, 57, 51, 10, 51, 53, 56, 44, 84, 97, 106, 105, 107, 105, 115, 116, 97, 110, 44, 56, 51, 46, 54, 50, 10, 51, 53, 57, 44, 67, 122, 101, 99, 104, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 49, 54, 46, 49, 10, 51, 54, 48, 44, 74, 97, 112, 97, 110, 44, 50, 52, 46, 54, 51, 10, 51, 54, 49, 44, 84, 111, 107, 101, 108, 97, 117, 44, 52, 51, 46, 57, 56, 10, 51, 54, 50, 44, 83, 97, 105, 110, 116, 32, 86, 105, 110, 99, 101, 110, 116, 32, 97, 110, 100, 32, 116, 104, 101, 32, 71, 114, 101, 110, 97, 100, 105, 110, 101, 115, 44, 54, 51, 46, 51, 49, 10, 51, 54, 51, 44, 67, 101, 110, 116, 114, 97, 108, 32, 65, 102, 114, 105, 99, 97, 110, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 49, 46, 49, 54, 10, 51, 54, 52, 44, 84, 105, 109, 111, 114, 45, 76, 101, 115, 116, 101, 44, 52, 48, 46, 53, 55, 10, 51, 54, 53, 44, 71, 117, 97, 109, 44, 51, 48, 46, 49, 53, 10, 51, 54, 54, 44, 71, 101, 114, 109, 97, 110, 121, 44, 49, 54, 46, 52, 52, 10, 51, 54, 55, 44, 70, 97, 108, 107, 108, 97, 110, 100, 32, 73, 115, 108, 97, 110, 100, 115, 32, 40, 77, 97, 108, 118, 105, 110, 97, 115, 41, 44, 54, 55, 46, 55, 10, 51, 54, 56, 44, 65, 117, 115, 116, 114, 97, 108, 105, 97, 44, 57, 49, 46, 55, 51, 10, 51, 54, 57, 44, 73, 110, 100, 105, 97, 44, 54, 46, 52, 54, 10, 51, 55, 48, 44, 67, 111, 111, 107, 32, 73, 115, 108, 97, 110, 100, 115, 44, 57, 49, 46, 56, 54, 10, 51, 55, 49, 44, 78, 101, 116, 104, 101, 114, 108, 97, 110, 100, 115, 32, 65, 110, 116, 105, 108, 108, 101, 115, 44, 49, 48, 46, 49, 49, 10, 51, 55, 50, 44, 71, 114, 101, 101, 99, 101, 44, 55, 48, 46, 51, 50, 10, 51, 55, 51, 44, 66, 97, 104, 114, 97, 105, 110, 44, 53, 53, 46, 55, 56, 10, 51, 55, 52, 44, 84, 114, 105, 110, 105, 100, 97, 100, 32, 97, 110, 100, 32, 84, 111, 98, 97, 103, 111, 44, 49, 48, 46, 52, 53, 10, 51, 55, 53, 44, 78, 105, 99, 97, 114, 97, 103, 117, 97, 44, 50, 55, 46, 54, 49, 10, 51, 55, 54, 44, 67, 111, 111, 107, 32, 73, 115, 108, 97, 110, 100, 115, 44, 51, 53, 46, 50, 52, 10, 51, 55, 55, 44, 80, 97, 107, 105, 115, 116, 97, 110, 44, 51, 49, 46, 49, 56, 10, 51, 55, 56, 44, 84, 97, 110, 122, 97, 110, 105, 97, 44, 57, 51, 46, 53, 53, 10, 51, 55, 57, 44, 78, 101, 119, 32, 90, 101, 97, 108, 97, 110, 100, 44, 49, 50, 46, 52, 55, 10, 51, 56, 48, 44, 80, 97, 107, 105, 115, 116, 97, 110, 44, 49, 55, 46, 51, 55, 10, 51, 56, 49, 44, 84, 117, 118, 97, 108, 117, 44, 56, 51, 46, 50, 10, 51, 56, 50, 44, 83, 117, 100, 97, 110, 44, 49, 49, 46, 52, 52, 10, 51, 56, 51, 44, 84, 117, 110, 105, 115, 105, 97, 44, 51, 54, 46, 56, 54, 10, 51, 56, 52, 44, 79, 109, 97, 110, 44, 50, 55, 46, 48, 53, 10, 51, 56, 53, 44, 76, 97, 116, 118, 105, 97, 44, 52, 54, 46, 57, 57, 10, 51, 56, 54, 44, 80, 105, 116, 99, 97, 105, 114, 110, 32, 73, 115, 108, 97, 110, 100, 44, 52, 56, 46, 50, 49, 10, 51, 56, 55, 44, 83, 111, 108, 111, 109, 111, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 52, 52, 46, 50, 54, 10, 51, 56, 56, 44, 70, 114, 101, 110, 99, 104, 32, 80, 111, 108, 121, 110, 101, 115, 105, 97, 44, 50, 55, 46, 50, 49, 10, 51, 56, 57, 44, 72, 117, 110, 103, 97, 114, 121, 44, 53, 48, 46, 50, 55, 10, 51, 57, 48, 44, 86, 97, 116, 105, 99, 97, 110, 32, 67, 105, 116, 121, 32, 83, 116, 97, 116, 101, 32, 40, 72, 111, 108, 121, 32, 83, 101, 101, 41, 44, 53, 50, 46, 52, 55, 10, 51, 57, 49, 44, 65, 122, 101, 114, 98, 97, 105, 106, 97, 110, 44, 49, 46, 53, 55, 10, 51, 57, 50, 44, 83, 97, 105, 110, 116, 32, 66, 97, 114, 116, 104, 101, 108, 101, 109, 121, 44, 55, 48, 46, 53, 54, 10, 51, 57, 51, 44, 83, 97, 105, 110, 116, 32, 66, 97, 114, 116, 104, 101, 108, 101, 109, 121, 44, 54, 57, 46, 54, 52, 10, 51, 57, 52, 44, 71, 117, 121, 97, 110, 97, 44, 54, 56, 46, 53, 53, 10, 51, 57, 53, 44, 34, 67, 111, 110, 103, 111, 44, 32, 68, 101, 109, 111, 99, 114, 97, 116, 105, 99, 32, 82, 101, 112, 117, 98, 108, 105, 99, 32, 111, 102, 34, 44, 49, 51, 46, 54, 52, 10, 51, 57, 54, 44, 77, 97, 108, 97, 121, 115, 105, 97, 44, 53, 52, 46, 52, 53, 10, 51, 57, 55, 44, 85, 122, 98, 101, 107, 105, 115, 116, 97, 110, 44, 52, 48, 46, 52, 50, 10, 51, 57, 56, 44, 83, 97, 105, 110, 116, 32, 72, 101, 108, 101, 110, 97, 44, 56, 55, 46, 48, 53, 10, 51, 57, 57, 44, 34, 67, 111, 110, 103, 111, 44, 32, 82, 101, 112, 117, 98, 108, 105, 99, 32, 111, 102, 34, 44, 56, 46, 52, 49, 10, 52, 48, 48, 44, 85, 83, 32, 77, 105, 110, 111, 114, 32, 79, 117, 116, 108, 121, 105, 110, 103, 32, 73, 115, 108, 97, 110, 100, 115, 44, 56, 52, 46, 51, 51, 10, 52, 48, 49, 44, 76, 105, 98, 121, 97, 44, 51, 49, 46, 56, 10, 52, 48, 50, 44, 65, 117, 115, 116, 114, 105, 97, 44, 53, 54, 46, 54, 55, 10, 52, 48, 51, 44, 66, 97, 104, 97, 109, 97, 115, 44, 54, 52, 46, 51, 52, 10, 52, 48, 52, 44, 82, 119, 97, 110, 100, 97, 44, 54, 51, 46, 49, 52, 10, 52, 48, 53, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 53, 46, 53, 55, 10, 52, 48, 54, 44, 66, 101, 108, 105, 122, 101, 44, 50, 51, 46, 49, 50, 10, 52, 48, 55, 44, 77, 97, 108, 100, 105, 118, 101, 115, 44, 55, 57, 46, 49, 56, 10, 52, 48, 56, 44, 66, 114, 97, 122, 105, 108, 44, 51, 53, 46, 52, 53, 10, 52, 48, 57, 44, 84, 111, 107, 101, 108, 97, 117, 44, 50, 48, 46, 53, 54, 10, 52, 49, 48, 44, 83, 97, 105, 110, 116, 32, 80, 105, 101, 114, 114, 101, 32, 97, 110, 100, 32, 77, 105, 113, 117, 101, 108, 111, 110, 44, 55, 52, 46, 54, 57, 10, 52, 49, 49, 44, 78, 101, 112, 97, 108, 44, 52, 56, 46, 49, 57, 10, 52, 49, 50, 44, 78, 101, 119, 32, 90, 101, 97, 108, 97, 110, 100, 44, 53, 51, 46, 49, 55, 10, 52, 49, 51, 44, 75, 97, 122, 97, 107, 104, 115, 116, 97, 110, 44, 50, 57, 46, 49, 52, 10, 52, 49, 52, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 53, 53, 46, 55, 52, 10, 52, 49, 53, 44, 72, 111, 110, 100, 117, 114, 97, 115, 44, 56, 51, 46, 52, 51, 10, 52, 49, 54, 44, 69, 114, 105, 116, 114, 101, 97, 44, 51, 55, 46, 55, 57, 10, 52, 49, 55, 44, 65, 114, 117, 98, 97, 44, 51, 53, 46, 54, 57, 10, 52, 49, 56, 44, 77, 105, 99, 114, 111, 110, 101, 115, 105, 97, 44, 53, 54, 46, 56, 57, 10, 52, 49, 57, 44, 83, 97, 109, 111, 97, 44, 50, 48, 46, 52, 50, 10, 52, 50, 48, 44, 34, 75, 111, 114, 101, 97, 44, 32, 83, 111, 117, 116, 104, 34, 44, 51, 57, 46, 51, 52, 10, 52, 50, 49, 44, 75, 97, 122, 97, 107, 104, 115, 116, 97, 110, 44, 57, 53, 46, 52, 57, 10, 52, 50, 50, 44, 80, 97, 114, 97, 103, 117, 97, 121, 44, 49, 50, 46, 55, 55, 10, 52, 50, 51, 44, 78, 105, 99, 97, 114, 97, 103, 117, 97, 44, 51, 55, 46, 53, 51, 10, 52, 50, 52, 44, 83, 97, 105, 110, 116, 32, 72, 101, 108, 101, 110, 97, 44, 52, 57, 46, 54, 56, 10, 52, 50, 53, 44, 76, 97, 116, 118, 105, 97, 44, 55, 52, 46, 55, 49, 10, 52, 50, 54, 44, 83, 111, 108, 111, 109, 111, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 49, 57, 46, 49, 51, 10, 52, 50, 55, 44, 74, 97, 112, 97, 110, 44, 56, 55, 46, 50, 54, 10, 52, 50, 56, 44, 77, 97, 100, 97, 103, 97, 115, 99, 97, 114, 44, 55, 50, 46, 51, 57, 10, 52, 50, 57, 44, 85, 110, 105, 116, 101, 100, 32, 65, 114, 97, 98, 32, 69, 109, 105, 114, 97, 116, 101, 115, 44, 49, 50, 46, 49, 53, 10, 52, 51, 48, 44, 85, 103, 97, 110, 100, 97, 44, 56, 50, 46, 53, 10, 52, 51, 49, 44, 70, 97, 114, 111, 101, 32, 73, 115, 108, 97, 110, 100, 115, 44, 50, 56, 46, 50, 51, 10, 52, 51, 50, 44, 77, 97, 121, 111, 116, 116, 101, 44, 57, 48, 46, 48, 55, 10, 52, 51, 51, 44, 195, 133, 108, 97, 110, 100, 44, 51, 51, 46, 50, 51, 10, 52, 51, 52, 44, 84, 111, 110, 103, 97, 44, 55, 57, 46, 49, 50, 10, 52, 51, 53, 44, 80, 97, 107, 105, 115, 116, 97, 110, 44, 56, 55, 46, 57, 50, 10, 52, 51, 54, 44, 83, 101, 114, 98, 105, 97, 44, 49, 48, 46, 52, 56, 10, 52, 51, 55, 44, 34, 75, 111, 114, 101, 97, 44, 32, 83, 111, 117, 116, 104, 34, 44, 53, 53, 46, 48, 51, 10, 52, 51, 56, 44, 84, 97, 110, 122, 97, 110, 105, 97, 44, 56, 51, 46, 49, 52, 10, 52, 51, 57, 44, 77, 97, 99, 97, 117, 44, 57, 51, 46, 54, 49, 10, 52, 52, 48, 44, 78, 105, 117, 101, 44, 54, 46, 52, 49, 10, 52, 52, 49, 44, 67, 104, 105, 108, 101, 44, 56, 50, 46, 48, 51, 10, 52, 52, 50, 44, 87, 101, 115, 116, 101, 114, 110, 32, 83, 97, 104, 97, 114, 97, 44, 49, 56, 46, 52, 54, 10, 52, 52, 51, 44, 71, 105, 98, 114, 97, 108, 116, 97, 114, 44, 57, 52, 46, 56, 54, 10, 52, 52, 52, 44, 83, 111, 108, 111, 109, 111, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 56, 56, 46, 49, 56, 10, 52, 52, 53, 44, 69, 114, 105, 116, 114, 101, 97, 44, 50, 50, 46, 49, 10, 52, 52, 54, 44, 85, 83, 32, 77, 105, 110, 111, 114, 32, 79, 117, 116, 108, 121, 105, 110, 103, 32, 73, 115, 108, 97, 110, 100, 115, 44, 56, 52, 46, 49, 52, 10, 52, 52, 55, 44, 83, 118, 97, 108, 98, 97, 114, 100, 32, 97, 110, 100, 32, 74, 97, 110, 32, 77, 97, 121, 101, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 52, 55, 46, 48, 56, 10, 52, 52, 56, 44, 83, 97, 109, 111, 97, 44, 52, 56, 46, 49, 53, 10, 52, 52, 57, 44, 78, 111, 114, 102, 111, 108, 107, 32, 73, 115, 108, 97, 110, 100, 44, 51, 53, 46, 55, 10, 52, 53, 48, 44, 65, 110, 116, 97, 114, 99, 116, 105, 99, 97, 44, 52, 55, 46, 53, 50, 10, 52, 53, 49, 44, 77, 111, 110, 97, 99, 111, 44, 57, 52, 46, 52, 51, 10, 52, 53, 50, 44, 66, 111, 116, 115, 119, 97, 110, 97, 44, 49, 49, 46, 51, 55, 10, 52, 53, 51, 44, 83, 114, 105, 32, 76, 97, 110, 107, 97, 44, 52, 48, 46, 54, 57, 10, 52, 53, 52, 44, 69, 116, 104, 105, 111, 112, 105, 97, 44, 55, 49, 46, 56, 55, 10, 52, 53, 53, 44, 78, 97, 109, 105, 98, 105, 97, 44, 57, 52, 46, 50, 55, 10, 52, 53, 54, 44, 85, 110, 105, 116, 101, 100, 32, 75, 105, 110, 103, 100, 111, 109, 44, 53, 54, 46, 53, 49, 10, 52, 53, 55, 44, 83, 108, 111, 118, 101, 110, 105, 97, 44, 49, 55, 46, 49, 56, 10, 52, 53, 56, 44, 66, 101, 108, 103, 105, 117, 109, 44, 56, 53, 46, 52, 49, 10, 52, 53, 57, 44, 83, 114, 105, 32, 76, 97, 110, 107, 97, 44, 50, 55, 46, 50, 50, 10, 52, 54, 48, 44, 68, 106, 105, 98, 111, 117, 116, 105, 44, 52, 54, 46, 51, 53, 10, 52, 54, 49, 44, 84, 117, 114, 107, 101, 121, 44, 55, 56, 46, 50, 54, 10, 52, 54, 50, 44, 74, 111, 114, 100, 97, 110, 44, 55, 50, 46, 57, 56, 10, 52, 54, 51, 44, 82, 111, 109, 97, 110, 105, 97, 44, 52, 57, 46, 56, 49, 10, 52, 54, 52, 44, 75, 97, 122, 97, 107, 104, 115, 116, 97, 110, 44, 54, 46, 55, 50, 10, 52, 54, 53, 44, 73, 110, 100, 111, 110, 101, 115, 105, 97, 44, 56, 50, 46, 48, 56, 10, 52, 54, 54, 44, 71, 117, 105, 110, 101, 97, 45, 66, 105, 115, 115, 97, 117, 44, 56, 53, 46, 56, 53, 10, 52, 54, 55, 44, 65, 109, 101, 114, 105, 99, 97, 110, 32, 83, 97, 109, 111, 97, 44, 52, 56, 46, 52, 55, 10, 52, 54, 56, 44, 66, 111, 115, 110, 105, 97, 32, 97, 110, 100, 32, 72, 101, 114, 122, 101, 103, 111, 118, 105, 110, 97, 44, 51, 50, 46, 49, 53, 10, 52, 54, 57, 44, 85, 110, 105, 116, 101, 100, 32, 75, 105, 110, 103, 100, 111, 109, 44, 52, 49, 46, 53, 53, 10, 52, 55, 48, 44, 34, 75, 111, 114, 101, 97, 44, 32, 83, 111, 117, 116, 104, 34, 44, 55, 54, 46, 56, 54, 10, 52, 55, 49, 44, 82, 117, 115, 115, 105, 97, 44, 53, 57, 46, 51, 10, 52, 55, 50, 44, 77, 111, 122, 97, 109, 98, 105, 113, 117, 101, 44, 49, 53, 46, 51, 54, 10, 52, 55, 51, 44, 84, 117, 114, 107, 115, 32, 97, 110, 100, 32, 67, 97, 105, 99, 111, 115, 32, 73, 115, 108, 97, 110, 100, 115, 44, 53, 48, 46, 53, 51, 10, 52, 55, 52, 44, 90, 97, 109, 98, 105, 97, 44, 50, 49, 46, 50, 10, 52, 55, 53, 44, 84, 97, 110, 122, 97, 110, 105, 97, 44, 57, 55, 46, 56, 53, 10, 52, 55, 54, 44, 75, 101, 110, 121, 97, 44, 50, 49, 46, 53, 51, 10, 52, 55, 55, 44, 71, 117, 97, 116, 101, 109, 97, 108, 97, 44, 51, 53, 46, 57, 54, 10, 52, 55, 56, 44, 80, 97, 108, 97, 117, 44, 52, 54, 46, 50, 56, 10, 52, 55, 57, 44, 77, 97, 99, 101, 100, 111, 110, 105, 97, 44, 51, 52, 46, 55, 50, 10, 52, 56, 48, 44, 85, 114, 117, 103, 117, 97, 121, 44, 54, 50, 46, 55, 57, 10, 52, 56, 49, 44, 76, 101, 98, 97, 110, 111, 110, 44, 51, 48, 46, 51, 56, 10, 52, 56, 50, 44, 71, 114, 101, 101, 99, 101, 44, 55, 56, 46, 48, 51, 10, 52, 56, 51, 44, 80, 105, 116, 99, 97, 105, 114, 110, 32, 73, 115, 108, 97, 110, 100, 44, 50, 57, 46, 50, 55, 10, 52, 56, 52, 44, 68, 106, 105, 98, 111, 117, 116, 105, 44, 53, 48, 46, 55, 55, 10, 52, 56, 53, 44, 85, 83, 32, 77, 105, 110, 111, 114, 32, 79, 117, 116, 108, 121, 105, 110, 103, 32, 73, 115, 108, 97, 110, 100, 115, 44, 55, 46, 56, 53, 10, 52, 56, 54, 44, 78, 105, 117, 101, 44, 52, 52, 46].concat([50, 57, 10, 52, 56, 55, 44, 83, 97, 111, 32, 84, 111, 109, 101, 32, 97, 110, 100, 32, 80, 114, 105, 110, 99, 105, 112, 101, 44, 56, 49, 46, 53, 54, 10, 52, 56, 56, 44, 74, 101, 114, 115, 101, 121, 44, 56, 57, 46, 55, 55, 10, 52, 56, 57, 44, 65, 114, 103, 101, 110, 116, 105, 110, 97, 44, 55, 49, 46, 56, 56, 10, 52, 57, 48, 44, 77, 97, 100, 97, 103, 97, 115, 99, 97, 114, 44, 52, 51, 46, 49, 49, 10, 52, 57, 49, 44, 74, 97, 112, 97, 110, 44, 49, 50, 46, 51, 51, 10, 52, 57, 50, 44, 80, 97, 110, 97, 109, 97, 44, 53, 56, 46, 54, 54, 10, 52, 57, 51, 44, 67, 97, 110, 97, 100, 97, 44, 56, 53, 46, 57, 51, 10, 52, 57, 52, 44, 87, 97, 108, 108, 105, 115, 32, 97, 110, 100, 32, 70, 117, 116, 117, 110, 97, 32, 73, 115, 108, 97, 110, 100, 115, 44, 51, 48, 46, 55, 54, 10, 52, 57, 53, 44, 82, 119, 97, 110, 100, 97, 44, 52, 51, 46, 56, 54, 10, 52, 57, 54, 44, 71, 117, 97, 100, 101, 108, 111, 117, 112, 101, 44, 54, 50, 46, 50, 51, 10, 52, 57, 55, 44, 83, 118, 97, 108, 98, 97, 114, 100, 32, 97, 110, 100, 32, 74, 97, 110, 32, 77, 97, 121, 101, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 51, 53, 46, 53, 55, 10, 52, 57, 56, 44, 85, 110, 105, 116, 101, 100, 32, 83, 116, 97, 116, 101, 115, 32, 86, 105, 114, 103, 105, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 57, 55, 46, 54, 10, 52, 57, 57, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 50, 53, 46, 53, 50, 10, 53, 48, 48, 44, 83, 117, 114, 105, 110, 97, 109, 101, 44, 54, 54, 46, 48, 53, 10, 53, 48, 49, 44, 84, 117, 114, 107, 101, 121, 44, 56, 54, 46, 50, 54, 10, 53, 48, 50, 44, 83, 97, 111, 32, 84, 111, 109, 101, 32, 97, 110, 100, 32, 80, 114, 105, 110, 99, 105, 112, 101, 44, 49, 54, 46, 53, 55, 10, 53, 48, 51, 44, 70, 114, 101, 110, 99, 104, 32, 80, 111, 108, 121, 110, 101, 115, 105, 97, 44, 56, 56, 46, 54, 50, 10, 53, 48, 52, 44, 71, 117, 97, 109, 44, 57, 54, 46, 54, 54, 10, 53, 48, 53, 44, 71, 117, 97, 109, 44, 50, 46, 53, 10, 53, 48, 54, 44, 78, 111, 114, 102, 111, 108, 107, 32, 73, 115, 108, 97, 110, 100, 44, 54, 53, 46, 54, 50, 10, 53, 48, 55, 44, 77, 97, 100, 97, 103, 97, 115, 99, 97, 114, 44, 52, 46, 57, 56, 10, 53, 48, 56, 44, 72, 111, 110, 103, 32, 75, 111, 110, 103, 44, 55, 56, 46, 57, 10, 53, 48, 57, 44, 78, 101, 112, 97, 108, 44, 55, 56, 46, 57, 55, 10, 53, 49, 48, 44, 82, 117, 115, 115, 105, 97, 44, 50, 51, 46, 55, 53, 10, 53, 49, 49, 44, 83, 111, 109, 97, 108, 105, 97, 44, 49, 49, 46, 50, 55, 10, 53, 49, 50, 44, 76, 97, 116, 118, 105, 97, 44, 49, 50, 46, 50, 53, 10, 53, 49, 51, 44, 71, 101, 114, 109, 97, 110, 121, 44, 51, 52, 46, 49, 10, 53, 49, 52, 44, 78, 97, 109, 105, 98, 105, 97, 44, 54, 51, 46, 53, 50, 10, 53, 49, 53, 44, 70, 114, 101, 110, 99, 104, 32, 71, 117, 105, 97, 110, 97, 44, 52, 54, 46, 51, 49, 10, 53, 49, 54, 44, 82, 101, 117, 110, 105, 111, 110, 44, 50, 54, 46, 54, 10, 53, 49, 55, 44, 67, 111, 111, 107, 32, 73, 115, 108, 97, 110, 100, 115, 44, 57, 53, 46, 56, 50, 10, 53, 49, 56, 44, 66, 97, 110, 103, 108, 97, 100, 101, 115, 104, 44, 49, 56, 46, 52, 53, 10, 53, 49, 57, 44, 76, 117, 120, 101, 109, 98, 111, 117, 114, 103, 44, 50, 49, 46, 51, 50, 10, 53, 50, 48, 44, 83, 108, 111, 118, 97, 107, 105, 97, 44, 50, 46, 54, 57, 10, 53, 50, 49, 44, 71, 117, 121, 97, 110, 97, 44, 55, 51, 46, 52, 56, 10, 53, 50, 50, 44, 75, 117, 119, 97, 105, 116, 44, 56, 50, 46, 57, 55, 10, 53, 50, 51, 44, 84, 117, 110, 105, 115, 105, 97, 44, 54, 51, 46, 51, 57, 10, 53, 50, 52, 44, 80, 105, 116, 99, 97, 105, 114, 110, 32, 73, 115, 108, 97, 110, 100, 44, 54, 55, 46, 53, 56, 10, 53, 50, 53, 44, 90, 97, 109, 98, 105, 97, 44, 54, 53, 46, 51, 53, 10, 53, 50, 54, 44, 72, 111, 110, 100, 117, 114, 97, 115, 44, 52, 48, 46, 56, 57, 10, 53, 50, 55, 44, 83, 97, 109, 111, 97, 44, 57, 54, 46, 49, 49, 10, 53, 50, 56, 44, 77, 111, 110, 116, 101, 110, 101, 103, 114, 111, 44, 55, 56, 46, 57, 49, 10, 53, 50, 57, 44, 71, 105, 98, 114, 97, 108, 116, 97, 114, 44, 52, 49, 46, 57, 54, 10, 53, 51, 48, 44, 66, 111, 116, 115, 119, 97, 110, 97, 44, 54, 53, 46, 55, 49, 10, 53, 51, 49, 44, 84, 111, 110, 103, 97, 44, 55, 54, 46, 50, 56, 10, 53, 51, 50, 44, 85, 110, 105, 116, 101, 100, 32, 83, 116, 97, 116, 101, 115, 32, 86, 105, 114, 103, 105, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 54, 54, 46, 50, 10, 53, 51, 51, 44, 85, 110, 105, 116, 101, 100, 32, 83, 116, 97, 116, 101, 115, 32, 111, 102, 32, 65, 109, 101, 114, 105, 99, 97, 44, 51, 56, 46, 57, 52, 10, 53, 51, 52, 44, 80, 101, 114, 117, 44, 54, 50, 46, 55, 55, 10, 53, 51, 53, 44, 80, 105, 116, 99, 97, 105, 114, 110, 32, 73, 115, 108, 97, 110, 100, 44, 50, 49, 46, 53, 52, 10, 53, 51, 54, 44, 86, 101, 110, 101, 122, 117, 101, 108, 97, 44, 56, 48, 46, 52, 10, 53, 51, 55, 44, 66, 114, 105, 116, 105, 115, 104, 32, 86, 105, 114, 103, 105, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 54, 55, 46, 49, 52, 10, 53, 51, 56, 44, 66, 117, 108, 103, 97, 114, 105, 97, 44, 56, 46, 53, 50, 10, 53, 51, 57, 44, 80, 111, 114, 116, 117, 103, 97, 108, 44, 55, 56, 46, 48, 56, 10, 53, 52, 48, 44, 67, 122, 101, 99, 104, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 52, 54, 46, 48, 56, 10, 53, 52, 49, 44, 65, 102, 103, 104, 97, 110, 105, 115, 116, 97, 110, 44, 57, 48, 46, 53, 51, 10, 53, 52, 50, 44, 66, 117, 114, 107, 105, 110, 97, 32, 70, 97, 115, 111, 44, 49, 53, 46, 56, 55, 10, 53, 52, 51, 44, 84, 117, 114, 107, 109, 101, 110, 105, 115, 116, 97, 110, 44, 56, 50, 46, 52, 55, 10, 53, 52, 52, 44, 84, 117, 118, 97, 108, 117, 44, 57, 56, 46, 50, 54, 10, 53, 52, 53, 44, 67, 97, 109, 98, 111, 100, 105, 97, 44, 49, 57, 46, 56, 52, 10, 53, 52, 54, 44, 77, 97, 108, 97, 121, 115, 105, 97, 44, 57, 51, 46, 52, 50, 10, 53, 52, 55, 44, 65, 110, 103, 117, 105, 108, 108, 97, 44, 56, 54, 46, 49, 10, 53, 52, 56, 44, 71, 105, 98, 114, 97, 108, 116, 97, 114, 44, 56, 51, 46, 56, 57, 10, 53, 52, 57, 44, 65, 115, 99, 101, 110, 115, 105, 111, 110, 32, 73, 115, 108, 97, 110, 100, 44, 49, 51, 46, 48, 57, 10, 53, 53, 48, 44, 86, 97, 110, 117, 97, 116, 117, 44, 53, 55, 46, 51, 53, 10, 53, 53, 49, 44, 83, 97, 105, 110, 116, 32, 77, 97, 114, 116, 105, 110, 44, 51, 56, 46, 57, 49, 10, 53, 53, 50, 44, 65, 110, 116, 97, 114, 99, 116, 105, 99, 97, 44, 56, 52, 46, 50, 10, 53, 53, 51, 44, 83, 119, 97, 122, 105, 108, 97, 110, 100, 44, 54, 48, 46, 50, 54, 10, 53, 53, 52, 44, 66, 117, 114, 107, 105, 110, 97, 32, 70, 97, 115, 111, 44, 55, 51, 46, 56, 51, 10, 53, 53, 53, 44, 69, 108, 32, 83, 97, 108, 118, 97, 100, 111, 114, 44, 51, 54, 46, 51, 50, 10, 53, 53, 54, 44, 77, 97, 117, 114, 105, 116, 97, 110, 105, 97, 44, 52, 46, 51, 10, 53, 53, 55, 44, 75, 97, 122, 97, 107, 104, 115, 116, 97, 110, 44, 52, 49, 46, 51, 54, 10, 53, 53, 56, 44, 66, 97, 104, 97, 109, 97, 115, 44, 56, 51, 46, 55, 55, 10, 53, 53, 57, 44, 66, 111, 117, 118, 101, 116, 32, 73, 115, 108, 97, 110, 100, 44, 49, 46, 49, 10, 53, 54, 48, 44, 77, 97, 114, 116, 105, 110, 105, 113, 117, 101, 44, 56, 53, 46, 55, 50, 10, 53, 54, 49, 44, 75, 97, 122, 97, 107, 104, 115, 116, 97, 110, 44, 51, 46, 55, 53, 10, 53, 54, 50, 44, 80, 105, 116, 99, 97, 105, 114, 110, 32, 73, 115, 108, 97, 110, 100, 44, 51, 51, 46, 54, 56, 10, 53, 54, 51, 44, 83, 97, 105, 110, 116, 32, 66, 97, 114, 116, 104, 101, 108, 101, 109, 121, 44, 56, 51, 46, 55, 56, 10, 53, 54, 52, 44, 84, 97, 110, 122, 97, 110, 105, 97, 44, 55, 53, 46, 56, 10, 53, 54, 53, 44, 89, 117, 103, 111, 115, 108, 97, 118, 105, 97, 44, 54, 50, 46, 54, 56, 10, 53, 54, 54, 44, 75, 97, 122, 97, 107, 104, 115, 116, 97, 110, 44, 52, 53, 46, 52, 52, 10, 53, 54, 55, 44, 78, 101, 119, 32, 67, 97, 108, 101, 100, 111, 110, 105, 97, 44, 57, 55, 46, 54, 10, 53, 54, 56, 44, 85, 103, 97, 110, 100, 97, 44, 52, 46, 56, 53, 10, 53, 54, 57, 44, 65, 115, 99, 101, 110, 115, 105, 111, 110, 32, 73, 115, 108, 97, 110, 100, 44, 56, 56, 46, 54, 52, 10, 53, 55, 48, 44, 67, 104, 105, 108, 101, 44, 57, 53, 46, 56, 51, 10, 53, 55, 49, 44, 77, 97, 100, 97, 103, 97, 115, 99, 97, 114, 44, 56, 51, 46, 49, 57, 10, 53, 55, 50, 44, 83, 118, 97, 108, 98, 97, 114, 100, 32, 97, 110, 100, 32, 74, 97, 110, 32, 77, 97, 121, 101, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 51, 49, 46, 53, 55, 10, 53, 55, 51, 44, 83, 97, 105, 110, 116, 32, 77, 97, 114, 116, 105, 110, 44, 53, 48, 46, 52, 57, 10, 53, 55, 52, 44, 66, 114, 97, 122, 105, 108, 44, 54, 55, 46, 50, 51, 10, 53, 55, 53, 44, 77, 97, 114, 116, 105, 110, 105, 113, 117, 101, 44, 55, 55, 46, 51, 56, 10, 53, 55, 54, 44, 76, 101, 98, 97, 110, 111, 110, 44, 56, 46, 48, 10, 53, 55, 55, 44, 78, 105, 99, 97, 114, 97, 103, 117, 97, 44, 50, 50, 46, 53, 10, 53, 55, 56, 44, 65, 114, 117, 98, 97, 44, 57, 57, 46, 48, 56, 10, 53, 55, 57, 44, 67, 97, 109, 98, 111, 100, 105, 97, 44, 55, 57, 46, 49, 51, 10, 53, 56, 48, 44, 72, 97, 105, 116, 105, 44, 53, 49, 46, 55, 55, 10, 53, 56, 49, 44, 77, 97, 114, 116, 105, 110, 105, 113, 117, 101, 44, 49, 57, 46, 54, 54, 10, 53, 56, 50, 44, 65, 110, 103, 117, 105, 108, 108, 97, 44, 53, 49, 46, 56, 10, 53, 56, 51, 44, 83, 105, 101, 114, 114, 97, 32, 76, 101, 111, 110, 101, 44, 56, 57, 46, 54, 51, 10, 53, 56, 52, 44, 77, 101, 120, 105, 99, 111, 44, 53, 55, 46, 57, 10, 53, 56, 53, 44, 77, 97, 114, 115, 104, 97, 108, 108, 32, 73, 115, 108, 97, 110, 100, 115, 44, 56, 57, 46, 52, 53, 10, 53, 56, 54, 44, 84, 117, 114, 107, 101, 121, 44, 53, 55, 46, 55, 52, 10, 53, 56, 55, 44, 72, 117, 110, 103, 97, 114, 121, 44, 50, 54, 46, 54, 52, 10, 53, 56, 56, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 49, 54, 46, 49, 54, 10, 53, 56, 57, 44, 71, 97, 109, 98, 105, 97, 44, 51, 55, 46, 57, 57, 10, 53, 57, 48, 44, 77, 97, 114, 116, 105, 110, 105, 113, 117, 101, 44, 56, 55, 46, 51, 56, 10, 53, 57, 49, 44, 78, 105, 103, 101, 114, 105, 97, 44, 50, 54, 46, 55, 51, 10, 53, 57, 50, 44, 80, 111, 114, 116, 117, 103, 97, 108, 44, 52, 51, 46, 56, 54, 10, 53, 57, 51, 44, 77, 105, 99, 114, 111, 110, 101, 115, 105, 97, 44, 52, 48, 46, 53, 52, 10, 53, 57, 52, 44, 84, 97, 106, 105, 107, 105, 115, 116, 97, 110, 44, 56, 53, 46, 56, 54, 10, 53, 57, 53, 44, 85, 110, 105, 116, 101, 100, 32, 75, 105, 110, 103, 100, 111, 109, 44, 56, 48, 46, 50, 50, 10, 53, 57, 54, 44, 77, 97, 114, 116, 105, 110, 105, 113, 117, 101, 44, 52, 57, 46, 49, 57, 10, 53, 57, 55, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 51, 56, 46, 50, 51, 10, 53, 57, 56, 44, 86, 101, 110, 101, 122, 117, 101, 108, 97, 44, 52, 48, 46, 48, 50, 10, 53, 57, 57, 44, 83, 112, 97, 105, 110, 44, 53, 50, 46, 51, 51, 10, 54, 48, 48, 44, 73, 115, 114, 97, 101, 108, 44, 50, 46, 48, 54, 10, 54, 48, 49, 44, 66, 101, 108, 105, 122, 101, 44, 52, 57, 46, 54, 50, 10, 54, 48, 50, 44, 66, 97, 104, 114, 97, 105, 110, 44, 49, 48, 46, 51, 52, 10, 54, 48, 51, 44, 34, 80, 97, 108, 101, 115, 116, 105, 110, 105, 97, 110, 32, 84, 101, 114, 114, 105, 116, 111, 114, 121, 44, 32, 79, 99, 99, 117, 112, 105, 101, 100, 34, 44, 55, 54, 46, 49, 54, 10, 54, 48, 52, 44, 34, 67, 111, 110, 103, 111, 44, 32, 82, 101, 112, 117, 98, 108, 105, 99, 32, 111, 102, 34, 44, 50, 53, 46, 50, 52, 10, 54, 48, 53, 44, 75, 97, 122, 97, 107, 104, 115, 116, 97, 110, 44, 55, 57, 46, 55, 51, 10, 54, 48, 54, 44, 65, 117, 115, 116, 114, 97, 108, 105, 97, 44, 51, 49, 46, 54, 56, 10, 54, 48, 55, 44, 83, 101, 114, 98, 105, 97, 44, 54, 49, 46, 48, 56, 10, 54, 48, 56, 44, 78, 111, 114, 119, 97, 121, 44, 50, 51, 46, 52, 57, 10, 54, 48, 57, 44, 65, 117, 115, 116, 114, 105, 97, 44, 49, 50, 46, 52, 53, 10, 54, 49, 48, 44, 71, 114, 101, 110, 97, 100, 97, 44, 57, 48, 46, 50, 57, 10, 54, 49, 49, 44, 71, 114, 101, 101, 99, 101, 44, 55, 46, 49, 10, 54, 49, 50, 44, 83, 101, 110, 101, 103, 97, 108, 44, 53, 48, 46, 50, 52, 10, 54, 49, 51, 44, 66, 101, 108, 97, 114, 117, 115, 44, 53, 49, 46, 54, 10, 54, 49, 52, 44, 82, 101, 117, 110, 105, 111, 110, 44, 56, 53, 46, 55, 57, 10, 54, 49, 53, 44, 83, 105, 110, 103, 97, 112, 111, 114, 101, 44, 49, 52, 46, 50, 56, 10, 54, 49, 54, 44, 72, 111, 110, 100, 117, 114, 97, 115, 44, 56, 56, 46, 53, 52, 10, 54, 49, 55, 44, 72, 111, 110, 103, 32, 75, 111, 110, 103, 44, 55, 48, 46, 57, 57, 10, 54, 49, 56, 44, 71, 114, 101, 101, 99, 101, 44, 55, 52, 46, 50, 56, 10, 54, 49, 57, 44, 84, 117, 114, 107, 101, 121, 44, 55, 49, 46, 50, 53, 10, 54, 50, 48, 44, 67, 104, 114, 105, 115, 116, 109, 97, 115, 32, 73, 115, 108, 97, 110, 100, 44, 52, 51, 46, 54, 50, 10, 54, 50, 49, 44, 67, 104, 105, 108, 101, 44, 49, 48, 46, 57, 50, 10, 54, 50, 50, 44, 71, 114, 101, 101, 99, 101, 44, 52, 54, 46, 49, 56, 10, 54, 50, 51, 44, 85, 110, 105, 116, 101, 100, 32, 83, 116, 97, 116, 101, 115, 32, 111, 102, 32, 65, 109, 101, 114, 105, 99, 97, 44, 55, 53, 46, 56, 10, 54, 50, 52, 44, 66, 97, 104, 97, 109, 97, 115, 44, 57, 56, 46, 57, 49, 10, 54, 50, 53, 44, 65, 110, 116, 97, 114, 99, 116, 105, 99, 97, 44, 57, 56, 46, 57, 55, 10, 54, 50, 54, 44, 80, 105, 116, 99, 97, 105, 114, 110, 32, 73, 115, 108, 97, 110, 100, 44, 53, 52, 46, 53, 57, 10, 54, 50, 55, 44, 83, 101, 121, 99, 104, 101, 108, 108, 101, 115, 44, 52, 57, 46, 51, 51, 10, 54, 50, 56, 44, 75, 117, 119, 97, 105, 116, 44, 55, 56, 46, 54, 55, 10, 54, 50, 57, 44, 84, 111, 110, 103, 97, 44, 56, 46, 53, 54, 10, 54, 51, 48, 44, 67, 104, 114, 105, 115, 116, 109, 97, 115, 32, 73, 115, 108, 97, 110, 100, 44, 49, 53, 46, 52, 55, 10, 54, 51, 49, 44, 66, 114, 105, 116, 105, 115, 104, 32, 73, 110, 100, 105, 97, 110, 32, 79, 99, 101, 97, 110, 32, 84, 101, 114, 114, 105, 116, 111, 114, 121, 44, 54, 55, 46, 55, 57, 10, 54, 51, 50, 44, 84, 105, 109, 111, 114, 45, 76, 101, 115, 116, 101, 44, 55, 53, 46, 54, 50, 10, 54, 51, 51, 44, 71, 101, 114, 109, 97, 110, 121, 44, 54, 54, 46, 51, 54, 10, 54, 51, 52, 44, 68, 111, 109, 105, 110, 105, 99, 97, 110, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 53, 56, 46, 55, 49, 10, 54, 51, 53, 44, 67, 111, 99, 111, 115, 32, 40, 75, 101, 101, 108, 105, 110, 103, 41, 32, 73, 115, 108, 97, 110, 100, 44, 53, 46, 54, 56, 10, 54, 51, 54, 44, 71, 117, 105, 110, 101, 97, 44, 55, 57, 46, 48, 50, 10, 54, 51, 55, 44, 77, 97, 99, 101, 100, 111, 110, 105, 97, 44, 55, 51, 46, 56, 10, 54, 51, 56, 44, 66, 101, 108, 103, 105, 117, 109, 44, 53, 56, 46, 56, 56, 10, 54, 51, 57, 44, 78, 105, 103, 101, 114, 44, 52, 57, 46, 50, 51, 10, 54, 52, 48, 44, 85, 83, 83, 82, 44, 49, 50, 46, 57, 50, 10, 54, 52, 49, 44, 71, 117, 101, 114, 110, 115, 101, 121, 44, 50, 48, 46, 52, 56, 10, 54, 52, 50, 44, 70, 105, 110, 108, 97, 110, 100, 44, 51, 53, 46, 57, 57, 10, 54, 52, 51, 44, 67, 97, 110, 97, 100, 97, 44, 49, 57, 46, 49, 55, 10, 54, 52, 52, 44, 70, 105, 106, 105, 44, 52, 54, 46, 48, 52, 10, 54, 52, 53, 44, 83, 97, 105, 110, 116, 32, 72, 101, 108, 101, 110, 97, 44, 55, 48, 46, 53, 54, 10, 54, 52, 54, 44, 74, 97, 112, 97, 110, 44, 54, 49, 46, 49, 56, 10, 54, 52, 55, 44, 78, 101, 116, 104, 101, 114, 108, 97, 110, 100, 115, 32, 65, 110, 116, 105, 108, 108, 101, 115, 44, 49, 52, 46, 57, 10, 54, 52, 56, 44, 77, 111, 110, 97, 99, 111, 44, 57, 51, 46, 54, 52, 10, 54, 52, 57, 44, 65, 108, 103, 101, 114, 105, 97, 44, 52, 49, 46, 54, 57, 10, 54, 53, 48, 44, 82, 101, 117, 110, 105, 111, 110, 44, 53, 48, 46, 56, 53, 10, 54, 53, 49, 44, 71, 104, 97, 110, 97, 44, 57, 56, 46, 48, 54, 10, 54, 53, 50, 44, 67, 111, 111, 107, 32, 73, 115, 108, 97, 110, 100, 115, 44, 53, 50, 46, 51, 55, 10, 54, 53, 51, 44, 72, 111, 110, 100, 117, 114, 97, 115, 44, 51, 54, 46, 49, 54, 10, 54, 53, 52, 44, 77, 111, 122, 97, 109, 98, 105, 113, 117, 101, 44, 55, 46, 50, 50, 10, 54, 53, 53, 44, 83, 97, 105, 110, 116, 32, 86, 105, 110, 99, 101, 110, 116, 32, 97, 110, 100, 32, 116, 104, 101, 32, 71, 114, 101, 110, 97, 100, 105, 110, 101, 115, 44, 53, 48, 46, 53, 52, 10, 54, 53, 54, 44, 83, 111, 108, 111, 109, 111, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 51, 46, 55, 10, 54, 53, 55, 44, 67, 111, 111, 107, 32, 73, 115, 108, 97, 110, 100, 115, 44, 51, 48, 46, 49, 56, 10, 54, 53, 56, 44, 77, 97, 114, 116, 105, 110, 105, 113, 117, 101, 44, 57, 46, 52, 51, 10, 54, 53, 57, 44, 84, 117, 114, 107, 101, 121, 44, 54, 49, 46, 57, 50, 10, 54, 54, 48, 44, 77, 97, 114, 116, 105, 110, 105, 113, 117, 101, 44, 55, 56, 46, 53, 56, 10, 54, 54, 49, 44, 68, 106, 105, 98, 111, 117, 116, 105, 44, 55, 53, 46, 54, 54, 10, 54, 54, 50, 44, 84, 105, 109, 111, 114, 45, 76, 101, 115, 116, 101, 44, 52, 53, 46, 49, 53, 10, 54, 54, 51, 44, 78, 101, 119, 32, 90, 101, 97, 108, 97, 110, 100, 44, 51, 54, 46, 49, 49, 10, 54, 54, 52, 44, 77, 105, 99, 114, 111, 110, 101, 115, 105, 97, 44, 51, 57, 46, 50, 55, 10, 54, 54, 53, 44, 85, 122, 98, 101, 107, 105, 115, 116, 97, 110, 44, 50, 51, 46, 54, 49, 10, 54, 54, 54, 44, 67, 122, 101, 99, 104, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 53, 57, 46, 57, 49, 10, 54, 54, 55, 44, 66, 111, 116, 115, 119, 97, 110, 97, 44, 50, 50, 46, 50, 49, 10, 54, 54, 56, 44, 71, 97, 109, 98, 105, 97, 44, 52, 55, 46, 54, 49, 10, 54, 54, 57, 44, 89, 117, 103, 111, 115, 108, 97, 118, 105, 97, 44, 50, 52, 46, 50, 53, 10, 54, 55, 48, 44, 68, 111, 109, 105, 110, 105, 99, 97, 110, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 55, 56, 46, 52, 55, 10, 54, 55, 49, 44, 85, 122, 98, 101, 107, 105, 115, 116, 97, 110, 44, 50, 54, 46, 49, 10, 54, 55, 50, 44, 67, 111, 108, 111, 109, 98, 105, 97, 44, 50, 55, 46, 48, 50, 10, 54, 55, 51, 44, 34, 75, 111, 114, 101, 97, 44, 32, 83, 111, 117, 116, 104, 34, 44, 51, 50, 46, 50, 53, 10, 54, 55, 52, 44, 65, 117, 115, 116, 114, 97, 108, 105, 97, 44, 53, 52, 46, 56, 51, 10, 54, 55, 53, 44, 71, 97, 98, 111, 110, 44, 51, 46, 55, 54, 10, 54, 55, 54, 44, 66, 97, 110, 103, 108, 97, 100, 101, 115, 104, 44, 53, 51, 46, 55, 49, 10, 54, 55, 55, 44, 76, 105, 101, 99, 104, 116, 101, 110, 115, 116, 101, 105, 110, 44, 49, 56, 46, 48, 53, 10, 54, 55, 56, 44, 84, 111, 110, 103, 97, 44, 53, 56, 46, 53, 51, 10, 54, 55, 57, 44, 83, 111, 109, 97, 108, 105, 97, 44, 56, 46, 52, 55, 10, 54, 56, 48, 44, 84, 105, 109, 111, 114, 45, 76, 101, 115, 116, 101, 44, 55, 55, 46, 52, 52, 10, 54, 56, 49, 44, 75, 97, 122, 97, 107, 104, 115, 116, 97, 110, 44, 55, 50, 46, 50, 54, 10, 54, 56, 50, 44, 87, 97, 108, 108, 105, 115, 32, 97, 110, 100, 32, 70, 117, 116, 117, 110, 97, 32, 73, 115, 108, 97, 110, 100, 115, 44, 56, 57, 46, 49, 50, 10, 54, 56, 51, 44, 80, 97, 114, 97, 103, 117, 97, 121, 44, 51, 49, 46, 53, 49, 10, 54, 56, 52, 44, 66, 97, 114, 98, 97, 100, 111, 115, 44, 54, 46, 57, 54, 10, 54, 56, 53, 44, 77, 97, 99, 97, 117, 44, 54, 56, 46, 55, 50, 10, 54, 56, 54, 44, 73, 114, 97, 113, 44, 53, 50, 46, 48, 52, 10, 54, 56, 55, 44, 90, 105, 109, 98, 97, 98, 119, 101, 44, 52, 54, 46, 54, 53, 10, 54, 56, 56, 44, 73, 114, 97, 113, 44, 49, 48, 46, 49, 55, 10, 54, 56, 57, 44, 66, 97, 104, 97, 109, 97, 115, 44, 57, 46, 54, 53, 10, 54, 57, 48, 44, 67, 111, 115, 116, 97, 32, 82, 105, 99, 97, 44, 53, 50, 46, 54, 52, 10, 54, 57, 49, 44, 85, 107, 114, 97, 105, 110, 101, 44, 57, 52, 46, 53, 50, 10, 54, 57, 50, 44, 83, 108, 111, 118, 101, 110, 105, 97, 44, 57, 46, 54, 55, 10, 54, 57, 51, 44, 85, 110, 105, 116, 101, 100, 32, 83, 116, 97, 116, 101, 115, 32, 111, 102, 32, 65, 109, 101, 114, 105, 99, 97, 44, 55, 57, 46, 54, 49, 10, 54, 57, 52, 44, 84, 114, 105, 110, 105, 100, 97, 100, 32, 97, 110, 100, 32, 84, 111, 98, 97, 103, 111, 44, 54, 50, 46, 57, 52, 10, 54, 57, 53, 44, 71, 117, 97, 116, 101, 109, 97, 108, 97, 44, 49, 56, 46, 49, 52, 10, 54, 57, 54, 44, 65, 102, 103, 104, 97, 110, 105, 115, 116, 97, 110, 44, 52, 57, 46, 57, 52, 10, 54, 57, 55, 44, 195, 133, 108, 97, 110, 100, 44, 52, 54, 46, 51, 51, 10, 54, 57, 56, 44, 66, 114, 117, 110, 101, 105, 32, 68, 97, 114, 117, 115, 115, 97, 108, 97, 109, 44, 54, 53, 46, 55, 52, 10, 54, 57, 57, 44, 71, 117, 97, 116, 101, 109, 97, 108, 97, 44, 56, 51, 46, 51, 52, 10, 55, 48, 48, 44, 67, 111, 111, 107, 32, 73, 115, 108, 97, 110, 100, 115, 44, 54, 56, 46, 57, 53, 10, 55, 48, 49, 44, 83, 112, 97, 105, 110, 44, 55, 55, 46, 51, 52, 10, 55, 48, 50, 44, 69, 116, 104, 105, 111, 112, 105, 97, 44, 54, 57, 46, 48, 55, 10, 55, 48, 51, 44, 69, 108, 32, 83, 97, 108, 118, 97, 100, 111, 114, 44, 52, 46, 49, 52, 10, 55, 48, 52, 44, 77, 97, 108, 100, 105, 118, 101, 115, 44, 49, 57, 46, 56, 49, 10, 55, 48, 53, 44, 74, 101, 114, 115, 101, 121, 44, 55, 56, 46, 48, 53, 10, 55, 48, 54, 44, 71, 101, 111, 114, 103, 105, 97, 44, 56, 49, 46, 55, 10, 55, 48, 55, 44, 72, 117, 110, 103, 97, 114, 121, 44, 51, 52, 46, 52, 50, 10, 55, 48, 56, 44, 65, 110, 116, 97, 114, 99, 116, 105, 99, 97, 44, 50, 46, 54, 10, 55, 48, 57, 44, 75, 97, 122, 97, 107, 104, 115, 116, 97, 110, 44, 49, 51, 46, 55, 51, 10, 55, 49, 48, 44, 70, 97, 114, 111, 101, 32, 73, 115, 108, 97, 110, 100, 115, 44, 50, 49, 46, 57, 56, 10, 55, 49, 49, 44, 81, 97, 116, 97, 114, 44, 51, 57, 46, 54, 52, 10, 55, 49, 50, 44, 85, 107, 114, 97, 105, 110, 101, 44, 56, 49, 46, 51, 49, 10, 55, 49, 51, 44, 77, 97, 114, 115, 104, 97, 108, 108, 32, 73, 115, 108, 97, 110, 100, 115, 44, 51, 46, 55, 49, 10, 55, 49, 52, 44, 86, 97, 116, 105, 99, 97, 110, 32, 67, 105, 116, 121, 32, 83, 116, 97, 116, 101, 32, 40, 72, 111, 108, 121, 32, 83, 101, 101, 41, 44, 53, 48, 46, 50, 50, 10, 55, 49, 53, 44, 77, 97, 100, 97, 103, 97, 115, 99, 97, 114, 44, 49, 57, 46, 54, 51, 10, 55, 49, 54, 44, 80, 117, 101, 114, 116, 111, 32, 82, 105, 99, 111, 44, 54, 56, 46, 54, 10, 55, 49, 55, 44, 65, 117, 115, 116, 114, 105, 97, 44, 53, 49, 46, 52, 57, 10, 55, 49, 56, 44, 67, 114, 111, 97, 116, 105, 97, 44, 56, 48, 46, 56, 54, 10, 55, 49, 57, 44, 65, 117, 115, 116, 114, 105, 97, 44, 54, 49, 46, 52, 53, 10, 55, 50, 48, 44, 83, 105, 110, 103, 97, 112, 111, 114, 101, 44, 49, 48, 46, 48, 50, 10, 55, 50, 49, 44, 76, 117, 120, 101, 109, 98, 111, 117, 114, 103, 44, 51, 50, 46, 52, 49, 10, 55, 50, 50, 44, 71, 101, 114, 109, 97, 110, 121, 44, 52, 51, 46, 48, 50, 10, 55, 50, 51, 44, 34, 75, 111, 114, 101, 97, 44, 32, 78, 111, 114, 116, 104, 34, 44, 49, 57, 46, 50, 49, 10, 55, 50, 52, 44, 71, 101, 111, 114, 103, 105, 97, 44, 54, 53, 46, 48, 57, 10, 55, 50, 53, 44, 80, 111, 114, 116, 117, 103, 97, 108, 44, 56, 52, 46, 55, 54, 10, 55, 50, 54, 44, 83, 97, 105, 110, 116, 32, 66, 97, 114, 116, 104, 101, 108, 101, 109, 121, 44, 49, 55, 46, 51, 56, 10, 55, 50, 55, 44, 83, 97, 105, 110, 116, 32, 66, 97, 114, 116, 104, 101, 108, 101, 109, 121, 44, 49, 49, 46, 51, 52, 10, 55, 50, 56, 44, 71, 117, 97, 100, 101, 108, 111, 117, 112, 101, 44, 55, 49, 46, 48, 56, 10, 55, 50, 57, 44, 83, 101, 110, 101, 103, 97, 108, 44, 50, 46, 56, 50, 10, 55, 51, 48, 44, 75, 117, 119, 97, 105, 116, 44, 52, 50, 46, 50, 50, 10, 55, 51, 49, 44, 85, 114, 117, 103, 117, 97, 121, 44, 57, 50, 46, 48, 51, 10, 55, 51, 50, 44, 71, 114, 101, 110, 97, 100, 97, 44, 50, 56, 46, 54, 56, 10, 55, 51, 51, 44, 83, 121, 114, 105, 97, 44, 50, 52, 46, 54, 56, 10, 55, 51, 52, 44, 78, 101, 112, 97, 108, 44, 50, 48, 46, 52, 10, 55, 51, 53, 44, 84, 111, 103, 111, 44, 57, 56, 46, 50, 57, 10, 55, 51, 54, 44, 69, 113, 117, 97, 116, 111, 114, 105, 97, 108, 32, 71, 117, 105, 110, 101, 97, 44, 49, 51, 46, 50, 56, 10, 55, 51, 55, 44, 85, 83, 83, 82, 44, 52, 50, 46, 50, 10, 55, 51, 56, 44, 83, 111, 108, 111, 109, 111, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 56, 56, 46, 48, 53, 10, 55, 51, 57, 44, 77, 97, 108, 97, 121, 115, 105, 97, 44, 52, 50, 46, 53, 51, 10, 55, 52, 48, 44, 84, 104, 97, 105, 108, 97, 110, 100, 44, 54, 56, 46, 50, 56, 10, 55, 52, 49, 44, 86, 97, 116, 105, 99, 97, 110, 32, 67, 105, 116, 121, 32, 83, 116, 97, 116, 101, 32, 40, 72, 111, 108, 121, 32, 83, 101, 101, 41, 44, 53, 57, 46, 51, 10, 55, 52, 50, 44, 67, 111, 116, 101, 32, 100, 39, 73, 118, 111, 105, 114, 101, 44, 55, 49, 46, 49, 52, 10, 55, 52, 51, 44, 84, 105, 109, 111, 114, 45, 76, 101, 115, 116, 101, 44, 54, 49, 46, 53, 57, 10, 55, 52, 52, 44, 66, 114, 117, 110, 101, 105, 32, 68, 97, 114, 117, 115, 115, 97, 108, 97, 109, 44, 57, 51, 46, 48, 52, 10, 55, 52, 53, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 53, 48, 46, 50, 10, 55, 52, 54, 44, 70, 114, 97, 110, 99, 101, 44, 56, 53, 46, 56, 50, 10, 55, 52, 55, 44, 65, 115, 99, 101, 110, 115, 105, 111, 110, 32, 73, 115, 108, 97, 110, 100, 44, 54, 49, 46, 54, 55, 10, 55, 52, 56, 44, 34, 67, 111, 110, 103, 111, 44, 32, 82, 101, 112, 117, 98, 108, 105, 99, 32, 111, 102, 34, 44, 49, 48, 46, 49, 50, 10, 55, 52, 57, 44, 67, 101, 110, 116, 114, 97, 108, 32, 65, 102, 114, 105, 99, 97, 110, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 57, 57, 46, 51, 53, 10, 55, 53, 48, 44, 74, 97, 109, 97, 105, 99, 97, 44, 55, 51, 46, 50, 55, 10, 55, 53, 49, 44, 71, 117, 105, 110, 101, 97, 44, 56, 46, 48, 57, 10, 55, 53, 50, 44, 83, 97, 111, 32, 84, 111, 109, 101, 32, 97, 110, 100, 32, 80, 114, 105, 110, 99, 105, 112, 101, 44, 50, 51, 46, 53, 50, 10, 55, 53, 51, 44, 77, 111, 110, 97, 99, 111, 44, 51, 46, 53, 10, 55, 53, 52, 44, 66, 101, 108, 97, 114, 117, 115, 44, 50, 55, 46, 55, 57, 10, 55, 53, 53, 44, 66, 114, 105, 116, 105, 115, 104, 32, 73, 110, 100, 105, 97, 110, 32, 79, 99, 101, 97, 110, 32, 84, 101, 114, 114, 105, 116, 111, 114, 121, 44, 50, 57, 46, 49, 51, 10, 55, 53, 54, 44, 83, 108, 111, 118, 97, 107, 105, 97, 44, 51, 49, 46, 50, 10, 55, 53, 55, 44, 78, 101, 119, 32, 67, 97, 108, 101, 100, 111, 110, 105, 97, 44, 50, 57, 46, 57, 54, 10, 55, 53, 56, 44, 85, 114, 117, 103, 117, 97, 121, 44, 55, 50, 46, 48, 10, 55, 53, 57, 44, 84, 117, 114, 107, 115, 32, 97, 110, 100, 32, 67, 97, 105, 99, 111, 115, 32, 73, 115, 108, 97, 110, 100, 115, 44, 57, 56, 46, 52, 51, 10, 55, 54, 48, 44, 68, 106, 105, 98, 111, 117, 116, 105, 44, 49, 46, 56, 57, 10, 55, 54, 49, 44, 66, 111, 117, 118, 101, 116, 32, 73, 115, 108, 97, 110, 100, 44, 57, 48, 46, 56, 49, 10, 55, 54, 50, 44, 69, 114, 105, 116, 114, 101, 97, 44, 54, 51, 46, 55, 53, 10, 55, 54, 51, 44, 67, 104, 114, 105, 115, 116, 109, 97, 115, 32, 73, 115, 108, 97, 110, 100, 44, 56, 50, 46, 51, 50, 10, 55, 54, 52, 44, 76, 105, 98, 101, 114, 105, 97, 44, 51, 48, 46, 52, 53, 10, 55, 54, 53, 44, 67, 104, 105, 110, 97, 44, 50, 55, 46, 57, 56, 10, 55, 54, 54, 44, 65, 110, 116, 97, 114, 99, 116, 105, 99, 97, 44, 49, 50, 46, 49, 50, 10, 55, 54, 55, 44, 83, 117, 100, 97, 110, 44, 49, 53, 46, 56, 50, 10, 55, 54, 56, 44, 71, 114, 101, 101, 99, 101, 44, 49, 57, 46, 49, 55, 10, 55, 54, 57, 44, 83, 119, 97, 122, 105, 108, 97, 110, 100, 44, 54, 50, 46, 57, 52, 10, 55, 55, 48, 44, 78, 105, 103, 101, 114, 105, 97, 44, 51, 46, 49, 55, 10, 55, 55, 49, 44, 34, 75, 111, 114, 101, 97, 44, 32, 83, 111, 117, 116, 104, 34, 44, 55, 55, 46, 52, 50, 10, 55, 55, 50, 44, 84, 97, 106, 105, 107, 105, 115, 116, 97, 110, 44, 53, 52, 46, 53, 54, 10, 55, 55, 51, 44, 69, 108, 32, 83, 97, 108, 118, 97, 100, 111, 114, 44, 56, 50, 46, 56, 50, 10, 55, 55, 52, 44, 83, 97, 110, 32, 77, 97, 114, 105, 110, 111, 44, 49, 50, 46, 48, 50, 10, 55, 55, 53, 44, 66, 117, 114, 117, 110, 100, 105, 44, 56, 53, 46, 54, 54, 10, 55, 55, 54, 44, 77, 97, 121, 111, 116, 116, 101, 44, 51, 55, 46, 53, 10, 55, 55, 55, 44, 82, 117, 115, 115, 105, 97, 44, 49, 52, 46, 48, 53, 10, 55, 55, 56, 44, 68, 111, 109, 105, 110, 105, 99, 97, 44, 54, 50, 46, 55, 52, 10, 55, 55, 57, 44, 80, 97, 114, 97, 103, 117, 97, 121, 44, 52, 49, 46, 49, 52, 10, 55, 56, 48, 44, 83, 117, 100, 97, 110, 44, 56, 53, 46, 54, 52, 10, 55, 56, 49, 44, 71, 105, 98, 114, 97, 108, 116, 97, 114, 44, 50, 46, 57, 49, 10, 55, 56, 50, 44, 84, 114, 105, 110, 105, 100, 97, 100, 32, 97, 110, 100, 32, 84, 111, 98, 97, 103, 111, 44, 50, 56, 46, 51, 50, 10, 55, 56, 51, 44, 80, 117, 101, 114, 116, 111, 32, 82, 105, 99, 111, 44, 57, 50, 46, 50, 50, 10, 55, 56, 52, 44, 78, 101, 116, 104, 101, 114, 108, 97, 110, 100, 115, 32, 65, 110, 116, 105, 108, 108, 101, 115, 44, 55, 55, 46, 55, 52, 10, 55, 56, 53, 44, 90, 97, 109, 98, 105, 97, 44, 53, 55, 46, 54, 10, 55, 56, 54, 44, 83, 97, 105, 110, 116, 32, 66, 97, 114, 116, 104, 101, 108, 101, 109, 121, 44, 51, 52, 46, 55, 51, 10, 55, 56, 55, 44, 83, 101, 114, 98, 105, 97, 44, 55, 53, 46, 57, 10, 55, 56, 56, 44, 85, 122, 98, 101, 107, 105, 115, 116, 97, 110, 44, 53, 48, 46, 49, 51, 10, 55, 56, 57, 44, 65, 114, 109, 101, 110, 105, 97, 44, 57, 51, 46, 56, 54, 10, 55, 57, 48, 44, 73, 115, 108, 101, 32, 111, 102, 32, 77, 97, 110, 44, 49, 57, 46, 52, 55, 10, 55, 57, 49, 44, 77, 97, 99, 101, 100, 111, 110, 105, 97, 44, 57, 55, 46, 50, 50, 10, 55, 57, 50, 44, 80, 111, 108, 97, 110, 100, 44, 49, 53, 46, 48, 56, 10, 55, 57, 51, 44, 81, 97, 116, 97, 114, 44, 54, 53, 46, 50, 50, 10, 55, 57, 52, 44, 83, 117, 114, 105, 110, 97, 109, 101, 44, 57, 50, 46, 48, 49, 10, 55, 57, 53, 44, 84, 117, 114, 107, 109, 101, 110, 105, 115, 116, 97, 110, 44, 56, 46, 49, 57, 10, 55, 57, 54, 44, 67, 97, 110, 97, 100, 97, 44, 49, 48, 46, 54, 10, 55, 57, 55, 44, 80, 111, 114, 116, 117, 103, 97, 108, 44, 52, 46, 54, 52, 10, 55, 57, 56, 44, 83, 97, 111, 32, 84, 111, 109, 101, 32, 97, 110, 100, 32, 80, 114, 105, 110, 99, 105, 112, 101, 44, 49, 49, 46, 51, 53, 10, 55, 57, 57, 44, 85, 83, 32, 77, 105, 110, 111, 114, 32, 79, 117, 116, 108, 121, 105, 110, 103, 32, 73, 115, 108, 97, 110, 100, 115, 44, 54, 48, 46, 55, 50, 10, 56, 48, 48, 44, 76, 101, 115, 111, 116, 104, 111, 44, 53, 52, 46, 56, 51, 10, 56, 48, 49, 44, 76, 105, 116, 104, 117, 97, 110, 105, 97, 44, 51, 50, 46, 50, 53, 10, 56, 48, 50, 44, 77, 97, 99, 97, 117, 44, 57, 54, 46, 57, 56, 10, 56, 48, 51, 44, 83, 97, 105, 110, 116, 32, 72, 101, 108, 101, 110, 97, 44, 56, 49, 46, 52, 53, 10, 56, 48, 52, 44, 83, 108, 111, 118, 101, 110, 105, 97, 44, 50, 48, 46, 57, 53, 10, 56, 48, 53, 44, 85, 110, 105, 116, 101, 100, 32, 65, 114, 97, 98, 32, 69, 109, 105, 114, 97, 116, 101, 115, 44, 56, 52, 46, 48, 55, 10, 56, 48, 54, 44, 70, 114, 101, 110, 99, 104, 32, 80, 111, 108, 121, 110, 101, 115, 105, 97, 44, 55, 50, 46, 54, 51, 10, 56, 48, 55, 44, 76, 105, 98, 101, 114, 105, 97, 44, 53, 57, 46, 48, 53, 10, 56, 48, 56, 44, 76, 117, 120, 101, 109, 98, 111, 117, 114, 103, 44, 52, 48, 46, 55, 53, 10, 56, 48, 57, 44, 67, 97, 109, 98, 111, 100, 105, 97, 44, 55, 51, 46, 55, 55, 10, 56, 49, 48, 44, 68, 111, 109, 105, 110, 105, 99, 97, 110, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 57, 55, 46, 51, 53, 10, 56, 49, 49, 44, 76, 97, 116, 118, 105, 97, 44, 56, 52, 46, 49, 51, 10, 56, 49, 50, 44, 87, 101, 115, 116, 101, 114, 110, 32, 83, 97, 104, 97, 114, 97, 44, 51, 55, 46, 50, 10, 56, 49, 51, 44, 80, 104, 105, 108, 105, 112, 112, 105, 110, 101, 115, 44, 56, 56, 46, 53, 54, 10, 56, 49, 52, 44, 83, 111, 108, 111, 109, 111, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 57, 46, 52, 53, 10, 56, 49, 53, 44, 84, 117, 118, 97, 108, 117, 44, 52, 48, 46, 54, 51, 10, 56, 49, 54, 44, 83, 119, 97, 122, 105, 108, 97, 110, 100, 44, 54, 50, 46, 53, 57, 10, 56, 49, 55, 44, 67, 111, 116, 101, 32, 100, 39, 73, 118, 111, 105, 114, 101, 44, 52, 57, 46, 54, 10, 56, 49, 56, 44, 83, 101, 110, 101, 103, 97, 108, 44, 52, 50, 46, 51, 10, 56, 49, 57, 44, 71, 117, 97, 100, 101, 108, 111, 117, 112, 101, 44, 50, 52, 46, 51, 56, 10, 56, 50, 48, 44, 77, 97, 117, 114, 105, 116, 97, 110, 105, 97, 44, 52, 49, 46, 54, 54, 10, 56, 50, 49, 44, 83, 117, 100, 97, 110, 44, 53, 54, 46, 57, 54, 10, 56, 50, 50, 44, 67, 104, 97, 100, 44, 53, 48, 46, 48, 52, 10, 56, 50, 51, 44, 66, 111, 108, 105, 118, 105, 97, 44, 52, 55, 46, 55, 53, 10, 56, 50, 52, 44, 77, 97, 117, 114, 105, 116, 97, 110, 105, 97, 44, 49, 50, 46, 55, 52, 10, 56, 50, 53, 44, 83, 111, 117, 116, 104, 32, 65, 102, 114, 105, 99, 97, 44, 51, 48, 46, 50, 53, 10, 56, 50, 54, 44, 83, 111, 117, 116, 104, 32, 71, 101, 111, 114, 103, 105, 97, 32, 97, 110, 100, 32, 116, 104, 101, 32, 83, 111, 117, 116, 104, 32, 83, 97, 110, 100, 119, 105, 99, 104, 32, 73, 115, 108, 97, 110, 100, 115, 44, 57, 48, 46, 51, 10, 56, 50, 55, 44, 80, 97, 110, 97, 109, 97, 44, 53, 50, 46, 53, 52, 10, 56, 50, 56, 44, 77, 121, 97, 110, 109, 97, 114, 44, 51, 53, 46, 57, 50, 10, 56, 50, 57, 44, 71, 117, 101, 114, 110, 115, 101, 121, 44, 51, 52, 46, 53, 55, 10, 56, 51, 48, 44, 83, 114, 105, 32, 76, 97, 110, 107, 97, 44, 53, 53, 46, 52, 53, 10, 56, 51, 49, 44, 71, 101, 111, 114, 103, 105, 97, 44, 49, 53, 46, 49, 55, 10, 56, 51, 50, 44, 83, 97, 110, 32, 77, 97, 114, 105, 110, 111, 44, 54, 57, 46, 50, 53, 10, 56, 51, 51, 44, 77, 97, 121, 111, 116, 116, 101, 44, 53, 50, 46, 53, 49, 10, 56, 51, 52, 44, 80, 97, 107, 105, 115, 116, 97, 110, 44, 54, 49, 46, 53, 52, 10, 56, 51, 53, 44, 77, 97, 114, 115, 104, 97, 108, 108, 32, 73, 115, 108, 97, 110, 100, 115, 44, 50, 46, 49, 49, 10, 56, 51, 54, 44, 73, 110, 100, 111, 110, 101, 115, 105, 97, 44, 49, 57, 46, 50, 55, 10, 56, 51, 55, 44, 77, 105, 99, 114, 111, 110, 101, 115, 105, 97, 44, 55, 55, 46, 49, 53, 10, 56, 51, 56, 44, 75, 101, 110, 121, 97, 44, 57, 49, 46, 48, 53, 10, 56, 51, 57, 44, 83, 121, 114, 105, 97, 44, 57, 50, 46, 52, 53, 10, 56, 52, 48, 44, 65, 114, 103, 101, 110, 116, 105, 110, 97, 44, 56, 56, 46, 51, 50, 10, 56, 52, 49, 44, 87, 101, 115, 116, 101, 114, 110, 32, 83, 97, 104, 97, 114, 97, 44, 53, 52, 46, 48, 54, 10, 56, 52, 50, 44, 68, 101, 110, 109, 97, 114, 107, 44, 56, 53, 46, 56, 50, 10, 56, 52, 51, 44, 65, 117, 115, 116, 114, 105, 97, 44, 56, 51, 46, 51, 56, 10, 56, 52, 52, 44, 67, 111, 111, 107, 32, 73, 115, 108, 97, 110, 100, 115, 44, 53, 54, 46, 53, 51, 10, 56, 52, 53, 44, 77, 97, 108, 97, 121, 115, 105, 97, 44, 53, 48, 46, 48, 52, 10, 56, 52, 54, 44, 86, 101, 110, 101, 122, 117, 101, 108, 97, 44, 52, 50, 46, 48, 57, 10, 56, 52, 55, 44, 66, 101, 114, 109, 117, 100, 97, 44, 52, 57, 46, 55, 50, 10, 56, 52, 56, 44, 66, 117, 114, 107, 105, 110, 97, 32, 70, 97, 115, 111, 44, 57, 56, 46, 56, 52, 10, 56, 52, 57, 44, 75, 121, 114, 103, 121, 122, 115, 116, 97, 110, 44, 51, 56, 46, 57, 49, 10, 56, 53, 48, 44, 67, 117, 98, 97, 44, 50, 46, 48, 57, 10, 56, 53, 49, 44, 70, 97, 114, 111, 101, 32, 73, 115, 108, 97, 110, 100, 115, 44, 57, 54, 46, 49, 57, 10, 56, 53, 50, 44, 85, 83, 83, 82, 44, 57, 54, 46, 50, 49, 10, 56, 53, 51, 44, 85, 103, 97, 110, 100, 97, 44, 49, 53, 46, 56, 52, 10, 56, 53, 52, 44, 76, 101, 98, 97, 110, 111, 110, 44, 49, 48, 46, 54, 52, 10, 56, 53, 53, 44, 85, 122, 98, 101, 107, 105, 115, 116, 97, 110, 44, 53, 53, 46, 52, 55, 10, 56, 53, 54, 44, 76, 105, 116, 104, 117, 97, 110, 105, 97, 44, 49, 55, 46, 54, 50, 10, 56, 53, 55, 44, 85, 114, 117, 103, 117, 97, 121, 44, 56, 53, 46, 55, 52, 10, 56, 53, 56, 44, 77, 97, 108, 97, 119, 105, 44, 50, 49, 46, 53, 50, 10, 56, 53, 57, 44, 80, 105, 116, 99, 97, 105, 114, 110, 32, 73, 115, 108, 97, 110, 100, 44, 49, 48, 46, 52, 49, 10, 56, 54, 48, 44, 67, 97, 121, 109, 97, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 52, 46, 50, 55, 10, 56, 54, 49, 44, 89, 101, 109, 101, 110, 44, 53, 53, 46, 53, 55, 10, 56, 54, 50, 44, 81, 97, 116, 97, 114, 44, 51, 57, 46, 55, 53, 10, 56, 54, 51, 44, 67, 121, 112, 114, 117, 115, 44, 56, 56, 46, 50, 49, 10, 56, 54, 52, 44, 71, 117, 97, 100, 101, 108, 111, 117, 112, 101, 44, 50, 49, 46, 56, 56, 10, 56, 54, 53, 44, 72, 111, 110, 100, 117, 114, 97, 115, 44, 49, 52, 46, 51, 52, 10, 56, 54, 54, 44, 66, 101, 108, 97, 114, 117, 115, 44, 52, 56, 46, 54, 55, 10, 56, 54, 55, 44, 67, 117, 98, 97, 44, 52, 54, 46, 53, 50, 10, 56, 54, 56, 44, 69, 116, 104, 105, 111, 112, 105, 97, 44, 55, 54, 46, 56, 50, 10, 56, 54, 57, 44, 80, 97, 112, 117, 97, 32, 78, 101, 119, 32, 71, 117, 105, 110, 101, 97, 44, 56, 53, 46, 52, 50, 10, 56, 55, 48, 44, 83, 114, 105, 32, 76, 97, 110, 107, 97, 44, 57, 46, 52, 52, 10, 56, 55, 49, 44, 76, 105, 98, 101, 114, 105, 97, 44, 50, 49, 46, 48, 53, 10, 56, 55, 50, 44, 72, 111, 110, 103, 32, 75, 111, 110, 103, 44, 53, 51, 46, 49, 52, 10, 56, 55, 51, 44, 80, 97, 114, 97, 103, 117, 97, 121, 44, 53, 50, 46, 53, 51, 10, 56, 55, 52, 44, 65, 108, 98, 97, 110, 105, 97, 44, 52, 49, 46, 55, 55, 10, 56, 55, 53, 44, 73, 110, 100, 105, 97, 44, 50, 56, 46, 49, 53, 10, 56, 55, 54, 44, 66, 97, 104, 114, 97, 105, 110, 44, 49, 50, 46, 49, 54, 10, 56, 55, 55, 44, 83, 119, 101, 100, 101, 110, 44, 50, 52, 46, 56, 55, 10, 56, 55, 56, 44, 83, 108, 111, 118, 97, 107, 105, 97, 44, 50, 54, 46, 53, 51, 10, 56, 55, 57, 44, 78, 111, 114, 102, 111, 108, 107, 32, 73, 115, 108, 97, 110, 100, 44, 49, 52, 46, 50, 50, 10, 56, 56, 48, 44, 85, 110, 105, 116, 101, 100, 32, 83, 116, 97, 116, 101, 115, 32, 111, 102, 32, 65, 109, 101, 114, 105, 99, 97, 44, 50, 50, 46, 48, 50, 10, 56, 56, 49, 44, 84, 97, 110, 122, 97, 110, 105, 97, 44, 53, 53, 46, 57, 10, 56, 56, 50, 44, 80, 111, 114, 116, 117, 103, 97, 108, 44, 54, 54, 46, 55, 49, 10, 56, 56, 51, 44, 89, 117, 103, 111, 115, 108, 97, 118, 105, 97, 44, 49, 52, 46, 50, 10, 56, 56, 52, 44, 84, 111, 107, 101, 108, 97, 117, 44, 50, 54, 46, 48, 10, 56, 56, 53, 44, 71, 117, 97, 116, 101, 109, 97, 108, 97, 44, 49, 48, 46, 57, 50, 10, 56, 56, 54, 44, 67, 111, 99, 111, 115, 32, 40, 75, 101, 101, 108, 105, 110, 103, 41, 32, 73, 115, 108, 97, 110, 100, 44, 50, 54, 46, 54, 50, 10, 56, 56, 55, 44, 77, 97, 100, 97, 103, 97, 115, 99, 97, 114, 44, 51, 52, 46, 52, 10, 56, 56, 56, 44, 67, 111, 109, 111, 114, 111, 115, 44, 49, 53, 46, 51, 53, 10, 56, 56, 57, 44, 70, 114, 101, 110, 99, 104, 32, 80, 111, 108, 121, 110, 101, 115, 105, 97, 44, 49, 54, 46, 51, 57, 10, 56, 57, 48, 44, 69, 108, 32, 83, 97, 108, 118, 97, 100, 111, 114, 44, 49, 54, 46, 50, 50, 10, 56, 57, 49, 44, 66, 101, 108, 105, 122, 101, 44, 51, 53, 46, 51, 57, 10, 56, 57, 50, 44, 80, 104, 105, 108, 105, 112, 112, 105, 110, 101, 115, 44, 51, 52, 46, 54, 53, 10, 56, 57, 51, 44, 85, 83, 32, 77, 105, 110, 111, 114, 32, 79, 117, 116, 108, 121, 105, 110, 103, 32, 73, 115, 108, 97, 110, 100, 115, 44, 56, 52, 46, 51, 51, 10, 56, 57, 52, 44, 70, 114, 97, 110, 99, 101, 44, 49, 49, 46, 56, 55, 10, 56, 57, 53, 44, 65, 110, 116, 97, 114, 99, 116, 105, 99, 97, 44, 57, 50, 46, 50, 10, 56, 57, 54, 44, 67, 111, 99, 111, 115, 32, 40, 75, 101, 101, 108, 105, 110, 103, 41, 32, 73, 115, 108, 97, 110, 100, 44, 56, 57, 46, 57, 53, 10, 56, 57, 55, 44, 90, 105, 109, 98, 97, 98, 119, 101, 44, 55, 54, 46, 57, 49, 10, 56, 57, 56, 44, 89, 101, 109, 101, 110, 44, 57, 49, 46, 49, 53, 10, 56, 57, 57, 44, 78, 101, 119, 32, 90, 101, 97, 108, 97, 110, 100, 44, 50, 55, 46, 51, 54, 10, 57, 48, 48, 44, 78, 105, 103, 101, 114, 105, 97, 44, 51, 57, 46, 48, 53, 10, 57, 48, 49, 44, 65, 102, 103, 104, 97, 110, 105, 115, 116, 97, 110, 44, 55, 54, 46, 53, 55, 10, 57, 48, 50, 44, 89, 101, 109, 101, 110, 44, 56, 50, 46, 53, 49, 10, 57, 48, 51, 44, 71, 105, 98, 114, 97, 108, 116, 97, 114, 44, 49, 51, 46, 49, 51, 10, 57, 48, 52, 44, 65, 117, 115, 116, 114, 97, 108, 105, 97, 44, 51, 53, 46, 49, 57, 10, 57, 48, 53, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 51, 46, 55, 55, 10, 57, 48, 54, 44, 71, 97, 98, 111, 110, 44, 55, 48, 46, 55, 57, 10, 57, 48, 55, 44, 78, 111, 114, 102, 111, 108, 107, 32, 73, 115, 108, 97, 110, 100, 44, 51, 48, 46, 52, 52, 10, 57, 48, 56, 44, 70, 114, 101, 110, 99, 104, 32, 83, 111, 117, 116, 104, 101, 114, 110, 32, 84, 101, 114, 114, 105, 116, 111, 114, 105, 101, 115, 44, 57, 52, 46, 48, 51, 10, 57, 48, 57, 44, 78, 101, 116, 104, 101, 114, 108, 97, 110, 100, 115, 44, 52, 53, 46, 54, 54, 10, 57, 49, 48, 44, 66, 111, 115, 110, 105, 97, 32, 97, 110, 100, 32, 72, 101, 114, 122, 101, 103, 111, 118, 105, 110, 97, 44, 52, 56, 46, 54, 57, 10, 57, 49, 49, 44, 85, 107, 114, 97, 105, 110, 101, 44, 54, 54, 46, 49, 49, 10, 57, 49, 50, 44, 83, 101, 121, 99, 104, 101, 108, 108, 101, 115, 44, 49, 50, 46, 57, 49, 10, 57, 49, 51, 44, 66, 111, 116, 115, 119, 97, 110, 97, 44, 56, 55, 46, 51, 52, 10, 57, 49, 52, 44, 67, 117, 98, 97, 44, 56, 53, 46, 55, 50, 10, 57, 49, 53, 44, 82, 117, 115, 115, 105, 97, 44, 50, 55, 46, 50, 52, 10, 57, 49, 54, 44, 73, 114, 97, 110, 44, 52, 46, 56, 54, 10, 57, 49, 55, 44, 65, 110, 100, 111, 114, 114, 97, 44, 54, 52, 46, 49, 49, 10, 57, 49, 56, 44, 77, 97, 99, 101, 100, 111, 110, 105, 97, 44, 51, 49, 46, 49, 57, 10, 57, 49, 57, 44, 195, 133, 108, 97, 110, 100, 44, 52, 57, 46, 48, 10, 57, 50, 48, 44, 71, 117, 97, 109, 44, 55, 51, 46, 48, 53, 10, 57, 50, 49, 44, 76, 101, 115, 111, 116, 104, 111, 44, 52, 57, 46, 57, 55, 10, 57, 50, 50, 44, 84, 111, 110, 103, 97, 44, 56, 48, 46, 50, 53, 10, 57, 50, 51, 44, 72, 111, 110, 100, 117, 114, 97, 115, 44, 56, 49, 46, 49, 57, 10, 57, 50, 52, 44, 65, 117, 115, 116, 114, 105, 97, 44, 54, 57, 46, 50, 51, 10, 57, 50, 53, 44, 83, 97, 111, 32, 84, 111, 109, 101, 32, 97, 110, 100, 32, 80, 114, 105, 110, 99, 105, 112, 101, 44, 55, 56, 46, 50, 49, 10, 57, 50, 54, 44, 71, 101, 114, 109, 97, 110, 121, 44, 56, 55, 46, 52, 55, 10, 57, 50, 55, 44, 72, 117, 110, 103, 97, 114, 121, 44, 50, 49, 46, 52, 54, 10, 57, 50, 56, 44, 75, 117, 119, 97, 105, 116, 44, 51, 57, 46, 53, 50, 10, 57, 50, 57, 44, 83, 101, 110, 101, 103, 97, 108, 44, 51, 46, 56, 56, 10, 57, 51, 48, 44, 73, 114, 97, 113, 44, 49, 50, 46, 55, 51, 10, 57, 51, 49, 44, 80, 104, 105, 108, 105, 112, 112, 105, 110, 101, 115, 44, 57, 52, 46, 52, 57, 10, 57, 51, 50, 44, 78, 105, 103, 101, 114, 44, 56, 53, 46, 48, 53, 10, 57, 51, 51, 44, 66, 101, 108, 105, 122, 101, 44, 54, 50, 46, 51, 52, 10, 57, 51, 52, 44, 65, 114, 109, 101, 110, 105, 97, 44, 51, 54, 46, 57, 51, 10, 57, 51, 53, 44, 77, 101, 120, 105, 99, 111, 44, 51, 46, 54, 51, 10, 57, 51, 54, 44, 66, 114, 105, 116, 105, 115, 104, 32, 86, 105, 114, 103, 105, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 52, 55, 46, 54, 50, 10, 57, 51, 55, 44, 71, 117, 105, 110, 101, 97, 45, 66, 105, 115, 115, 97, 117, 44, 49, 54, 46, 52, 54, 10, 57, 51, 56, 44, 70, 114, 101, 110, 99, 104, 32, 80, 111, 108, 121, 110, 101, 115, 105, 97, 44, 52, 54, 46, 55, 52, 10, 57, 51, 57, 44, 72, 111, 110, 100, 117, 114, 97, 115, 44, 50, 54, 46, 56, 53, 10, 57, 52, 48, 44, 70, 105, 110, 108, 97, 110, 100, 44, 53, 56, 46, 54, 57, 10, 57, 52, 49, 44, 66, 101, 108, 103, 105, 117, 109, 44, 50, 46, 52, 50, 10, 57, 52, 50, 44, 71, 97, 109, 98, 105, 97, 44, 57, 54, 46, 52, 55, 10, 57, 52, 51, 44, 66, 114, 97, 122, 105, 108, 44, 55, 55, 46, 51, 50, 10, 57, 52, 52, 44, 80, 97, 112, 117, 97, 32, 78, 101, 119, 32, 71, 117, 105, 110, 101, 97, 44, 50, 56, 46, 53, 56, 10, 57, 52, 53, 44, 76, 101, 115, 111, 116, 104, 111, 44, 55, 51, 46, 52, 52, 10, 57, 52, 54, 44, 86, 105, 101, 116, 110, 97, 109, 44, 53, 51, 46, 50, 50, 10, 57, 52, 55, 44, 77, 105, 99, 114, 111, 110, 101, 115, 105, 97, 44, 49, 49, 46, 51, 49, 10, 57, 52, 56, 44, 80, 97, 107, 105, 115, 116, 97, 110, 44, 55, 53, 46, 49, 53, 10, 57, 52, 57, 44, 83, 118, 97, 108, 98, 97, 114, 100, 32, 97, 110, 100, 32, 74, 97, 110, 32, 77, 97, 121, 101, 110, 32, 73, 115, 108, 97, 110, 100, 115, 44, 52, 52, 46, 51, 10, 57, 53, 48, 44, 34, 75, 111, 114, 101, 97, 44, 32, 83, 111, 117, 116, 104, 34, 44, 56, 56, 46, 49, 53, 10, 57, 53, 49, 44, 83, 111, 109, 97, 108, 105, 97, 44, 53, 46, 56, 51, 10, 57, 53, 50, 44, 34, 75, 111, 114, 101, 97, 44, 32, 78, 111, 114, 116, 104, 34, 44, 49, 46, 55, 50, 10, 57, 53, 51, 44, 80, 97, 108, 97, 117, 44, 57, 46, 55, 55, 10, 57, 53, 52, 44, 78, 101, 116, 104, 101, 114, 108, 97, 110, 100, 115, 32, 65, 110, 116, 105, 108, 108, 101, 115, 44, 56, 56, 46, 57, 57, 10, 57, 53, 53, 44, 78, 101, 119, 32, 67, 97, 108, 101, 100, 111, 110, 105, 97, 44, 56, 46, 52, 51, 10, 57, 53, 54, 44, 67, 104, 114, 105, 115, 116, 109, 97, 115, 32, 73, 115, 108, 97, 110, 100, 44, 55, 50, 46, 48, 56, 10, 57, 53, 55, 44, 71, 101, 114, 109, 97, 110, 121, 44, 57, 46, 48, 52, 10, 57, 53, 56, 44, 66, 111, 117, 118, 101, 116, 32, 73, 115, 108, 97, 110, 100, 44, 53, 54, 46, 51, 51, 10, 57, 53, 57, 44, 80, 105, 116, 99, 97, 105, 114, 110, 32, 73, 115, 108, 97, 110, 100, 44, 55, 50, 46, 55, 53, 10, 57, 54, 48, 44, 77, 97, 117, 114, 105, 116, 97, 110, 105, 97, 44, 55, 55, 46, 57, 49, 10, 57, 54, 49, 44, 83, 97, 105, 110, 116, 32, 77, 97, 114, 116, 105, 110, 44, 57, 48, 46, 51, 52, 10, 57, 54, 50, 44, 80, 97, 114, 97, 103, 117, 97, 121, 44, 52, 56, 46, 57, 52, 10, 57, 54, 51, 44, 73, 114, 97, 110, 44, 51, 56, 46, 52, 51, 10, 57, 54, 52, 44, 83, 119, 105, 116, 122, 101, 114, 108, 97, 110, 100, 44, 57, 49, 46, 50, 56, 10, 57, 54, 53, 44, 69, 114, 105, 116, 114, 101, 97, 44, 56, 46, 57, 52, 10, 57, 54, 54, 44, 87, 101, 115, 116, 101, 114, 110, 32, 83, 97, 104, 97, 114, 97, 44, 57, 53, 46, 50, 49, 10, 57, 54, 55, 44, 65, 108, 98, 97, 110, 105, 97, 44, 50, 54, 46, 49, 54, 10, 57, 54, 56, 44, 66, 111, 117, 118, 101, 116, 32, 73, 115, 108, 97, 110, 100, 44, 49, 54, 46, 51, 55, 10, 57, 54, 57, 44, 85, 110, 105, 116, 101, 100, 32, 83, 116, 97, 116, 101, 115, 32, 111, 102, 32, 65, 109, 101, 114, 105, 99, 97, 44, 49, 54, 46, 51, 52, 10, 57, 55, 48, 44, 78, 105, 117, 101, 44, 50, 51, 46, 54, 51, 10, 57, 55, 49, 44, 69, 108, 32, 83, 97, 108, 118, 97, 100, 111, 114, 44, 55, 48, 46, 51, 56, 10, 57, 55, 50, 44, 78, 111, 114, 102, 111, 108, 107, 32, 73, 115, 108, 97, 110, 100, 44, 52, 50, 46, 55, 54, 10, 57, 55, 51, 44, 66, 97, 104, 114, 97, 105, 110, 44, 53, 57, 46, 54, 50, 10, 57, 55, 52, 44, 83, 108, 111, 118, 97, 107, 105, 97, 44, 57, 54]).concat([46, 48, 10, 57, 55, 53, 44, 82, 101, 117, 110, 105, 111, 110, 44, 55, 54, 46, 57, 55, 10, 57, 55, 54, 44, 68, 106, 105, 98, 111, 117, 116, 105, 44, 55, 50, 46, 57, 49, 10, 57, 55, 55, 44, 34, 80, 97, 108, 101, 115, 116, 105, 110, 105, 97, 110, 32, 84, 101, 114, 114, 105, 116, 111, 114, 121, 44, 32, 79, 99, 99, 117, 112, 105, 101, 100, 34, 44, 56, 46, 55, 51, 10, 57, 55, 56, 44, 77, 121, 97, 110, 109, 97, 114, 44, 54, 48, 46, 51, 52, 10, 57, 55, 57, 44, 76, 105, 101, 99, 104, 116, 101, 110, 115, 116, 101, 105, 110, 44, 52, 48, 46, 54, 53, 10, 57, 56, 48, 44, 67, 104, 114, 105, 115, 116, 109, 97, 115, 32, 73, 115, 108, 97, 110, 100, 44, 57, 53, 46, 54, 51, 10, 57, 56, 49, 44, 71, 117, 97, 100, 101, 108, 111, 117, 112, 101, 44, 57, 57, 46, 54, 10, 57, 56, 50, 44, 71, 114, 101, 101, 110, 108, 97, 110, 100, 44, 52, 57, 46, 57, 54, 10, 57, 56, 51, 44, 67, 101, 110, 116, 114, 97, 108, 32, 65, 102, 114, 105, 99, 97, 110, 32, 82, 101, 112, 117, 98, 108, 105, 99, 44, 55, 50, 46, 49, 54, 10, 57, 56, 52, 44, 69, 115, 116, 111, 110, 105, 97, 44, 52, 46, 48, 56, 10, 57, 56, 53, 44, 71, 97, 109, 98, 105, 97, 44, 57, 56, 46, 57, 54, 10, 57, 56, 54, 44, 85, 110, 105, 116, 101, 100, 32, 75, 105, 110, 103, 100, 111, 109, 44, 54, 49, 46, 49, 56, 10, 57, 56, 55, 44, 80, 111, 114, 116, 117, 103, 97, 108, 44, 55, 56, 46, 49, 53, 10, 57, 56, 56, 44, 83, 97, 109, 111, 97, 44, 54, 49, 46, 49, 52, 10, 57, 56, 57, 44, 69, 103, 121, 112, 116, 44, 51, 50, 46, 54, 51, 10, 57, 57, 48, 44, 67, 97, 112, 101, 32, 86, 101, 114, 100, 101, 44, 57, 49, 46, 55, 55, 10, 57, 57, 49, 44, 77, 97, 100, 97, 103, 97, 115, 99, 97, 114, 44, 49, 46, 55, 49, 10, 57, 57, 50, 44, 71, 117, 97, 100, 101, 108, 111, 117, 112, 101, 44, 55, 55, 46, 57, 54, 10, 57, 57, 51, 44, 84, 114, 105, 110, 105, 100, 97, 100, 32, 97, 110, 100, 32, 84, 111, 98, 97, 103, 111, 44, 53, 56, 46, 48, 10, 57, 57, 52, 44, 66, 114, 97, 122, 105, 108, 44, 50, 52, 46, 57, 51, 10, 57, 57, 53, 44, 78, 105, 103, 101, 114, 105, 97, 44, 57, 48, 46, 49, 57, 10, 57, 57, 54, 44, 85, 107, 114, 97, 105, 110, 101, 44, 56, 53, 46, 53, 10, 57, 57, 55, 44, 80, 117, 101, 114, 116, 111, 32, 82, 105, 99, 111, 44, 57, 56, 46, 53, 56, 10, 57, 57, 56, 44, 78, 97, 117, 114, 117, 44, 52, 52, 46, 55, 54, 10, 57, 57, 57, 44, 77, 111, 114, 111, 99, 99, 111, 44, 53, 56, 46, 50, 10, 49, 48, 48, 48, 44, 80, 111, 108, 97, 110, 100, 44, 50, 50, 46, 57, 10]), true, true);
Module['FS_createDataFile']('/files', 'Table_1.1.gdt', [60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 48, 34, 63, 62, 10, 60, 33, 68, 79, 67, 84, 89, 80, 69, 32, 103, 114, 101, 116, 108, 100, 97, 116, 97, 32, 83, 89, 83, 84, 69, 77, 32, 34, 103, 114, 101, 116, 108, 100, 97, 116, 97, 46, 100, 116, 100, 34, 62, 10, 10, 60, 103, 114, 101, 116, 108, 100, 97, 116, 97, 32, 110, 97, 109, 101, 61, 34, 84, 97, 98, 108, 101, 95, 49, 46, 49, 34, 32, 102, 114, 101, 113, 117, 101, 110, 99, 121, 61, 34, 49, 34, 32, 115, 116, 97, 114, 116, 111, 98, 115, 61, 34, 49, 34, 32, 101, 110, 100, 111, 98, 115, 61, 34, 50, 53, 34, 32, 116, 121, 112, 101, 61, 34, 99, 114, 111, 115, 115, 45, 115, 101, 99, 116, 105, 111, 110, 34, 62, 10, 60, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 84, 97, 98, 108, 101, 32, 49, 46, 49, 10, 10, 85, 46, 83, 46, 32, 69, 103, 103, 32, 80, 114, 111, 100, 117, 99, 116, 105, 111, 110, 10, 32, 32, 83, 84, 65, 84, 69, 32, 61, 32, 83, 116, 97, 116, 101, 10, 32, 32, 89, 49, 32, 32, 32, 32, 61, 32, 69, 103, 103, 115, 32, 80, 114, 111, 100, 117, 99, 101, 100, 32, 105, 110, 32, 49, 57, 57, 48, 44, 32, 77, 105, 108, 108, 105, 111, 110, 115, 10, 32, 32, 89, 50, 32, 32, 32, 32, 61, 32, 69, 103, 103, 115, 32, 80, 114, 111, 100, 117, 99, 101, 100, 32, 105, 110, 32, 49, 57, 57, 49, 44, 32, 77, 105, 108, 108, 105, 111, 110, 115, 10, 32, 32, 88, 49, 32, 32, 32, 32, 61, 32, 80, 114, 105, 99, 101, 32, 80, 101, 114, 32, 68, 111, 122, 101, 110, 32, 105, 110, 32, 49, 57, 57, 48, 44, 32, 67, 101, 110, 116, 115, 10, 32, 32, 88, 50, 32, 32, 32, 32, 61, 32, 80, 114, 105, 99, 101, 32, 80, 101, 114, 32, 68, 111, 122, 101, 110, 32, 105, 110, 32, 49, 57, 57, 49, 44, 32, 67, 101, 110, 116, 115, 10, 10, 83, 111, 117, 114, 99, 101, 58, 32, 87, 111, 114, 108, 100, 32, 65, 108, 109, 97, 110, 97, 99, 44, 32, 49, 57, 57, 51, 44, 32, 112, 46, 32, 49, 49, 57, 46, 32, 32, 84, 104, 101, 32, 100, 97, 116, 97, 32, 97, 114, 101, 32, 102, 114, 111, 109, 32, 116, 104, 101, 10, 69, 99, 111, 110, 111, 109, 105, 99, 32, 82, 101, 115, 101, 97, 114, 99, 104, 32, 83, 101, 114, 118, 105, 99, 101, 44, 32, 85, 46, 83, 46, 32, 68, 101, 112, 97, 114, 116, 109, 101, 110, 116, 32, 111, 102, 32, 65, 103, 114, 105, 99, 117, 108, 116, 117, 114, 101, 46, 10, 60, 47, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 60, 118, 97, 114, 105, 97, 98, 108, 101, 115, 32, 99, 111, 117, 110, 116, 61, 34, 52, 34, 62, 10, 60, 118, 97, 114, 105, 97, 98, 108, 101, 32, 110, 97, 109, 101, 61, 34, 89, 49, 34, 10, 32, 108, 97, 98, 101, 108, 61, 34, 69, 103, 103, 115, 32, 80, 114, 111, 100, 117, 99, 101, 100, 32, 105, 110, 32, 49, 57, 57, 48, 44, 32, 77, 105, 108, 108, 105, 111, 110, 115, 34, 47, 62, 10, 60, 118, 97, 114, 105, 97, 98, 108, 101, 32, 110, 97, 109, 101, 61, 34, 89, 50, 34, 10, 32, 108, 97, 98, 101, 108, 61, 34, 69, 103, 103, 115, 32, 80, 114, 111, 100, 117, 99, 101, 100, 32, 105, 110, 32, 49, 57, 57, 49, 44, 32, 77, 105, 108, 108, 105, 111, 110, 115, 34, 47, 62, 10, 60, 118, 97, 114, 105, 97, 98, 108, 101, 32, 110, 97, 109, 101, 61, 34, 88, 49, 34, 10, 32, 108, 97, 98, 101, 108, 61, 34, 80, 114, 105, 99, 101, 32, 80, 101, 114, 32, 68, 111, 122, 101, 110, 32, 105, 110, 32, 49, 57, 57, 48, 44, 32, 67, 101, 110, 116, 115, 34, 47, 62, 10, 60, 118, 97, 114, 105, 97, 98, 108, 101, 32, 110, 97, 109, 101, 61, 34, 88, 50, 34, 10, 32, 108, 97, 98, 101, 108, 61, 34, 80, 114, 105, 99, 101, 32, 80, 101, 114, 32, 68, 111, 122, 101, 110, 32, 105, 110, 32, 49, 57, 57, 49, 44, 32, 67, 101, 110, 116, 115, 34, 47, 62, 10, 60, 47, 118, 97, 114, 105, 97, 98, 108, 101, 115, 62, 10, 60, 111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110, 115, 32, 99, 111, 117, 110, 116, 61, 34, 50, 53, 34, 32, 108, 97, 98, 101, 108, 115, 61, 34, 116, 114, 117, 101, 34, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 65, 76, 34, 62, 50, 50, 48, 54, 46, 48, 32, 50, 49, 56, 54, 46, 48, 32, 57, 50, 46, 55, 32, 57, 49, 46, 52, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 65, 75, 34, 62, 48, 46, 55, 32, 48, 46, 55, 32, 49, 53, 49, 46, 48, 32, 49, 52, 57, 46, 48, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 65, 90, 34, 62, 55, 51, 46, 48, 32, 55, 52, 46, 48, 32, 54, 49, 46, 48, 32, 53, 54, 46, 48, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 65, 82, 34, 62, 51, 54, 50, 48, 46, 48, 32, 51, 55, 51, 55, 46, 48, 32, 56, 54, 46, 51, 32, 57, 49, 46, 56, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 67, 65, 34, 62, 55, 52, 55, 50, 46, 48, 32, 55, 52, 52, 52, 46, 48, 32, 54, 51, 46, 52, 32, 53, 56, 46, 52, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 67, 79, 34, 62, 55, 56, 56, 46, 48, 32, 56, 55, 51, 46, 48, 32, 55, 55, 46, 56, 32, 55, 51, 46, 48, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 67, 84, 34, 62, 49, 48, 50, 57, 46, 48, 32, 57, 52, 56, 46, 48, 32, 49, 48, 54, 46, 48, 32, 49, 48, 52, 46, 48, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 68, 69, 34, 62, 49, 54, 56, 46, 48, 32, 49, 54, 52, 46, 48, 32, 49, 49, 55, 46, 48, 32, 49, 49, 51, 46, 48, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 70, 76, 34, 62, 50, 53, 54, 56, 46, 48, 32, 50, 53, 51, 55, 46, 48, 32, 54, 50, 46, 48, 32, 53, 55, 46, 50, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 71, 65, 34, 62, 52, 51, 48, 50, 46, 48, 32, 52, 51, 48, 49, 46, 48, 32, 56, 48, 46, 54, 32, 56, 48, 46, 56, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 72, 73, 34, 62, 50, 50, 55, 46, 53, 32, 50, 50, 52, 46, 53, 32, 56, 53, 46, 48, 32, 56, 53, 46, 53, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 73, 68, 34, 62, 49, 56, 55, 46, 48, 32, 50, 48, 51, 46, 48, 32, 55, 57, 46, 49, 32, 55, 50, 46, 57, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 73, 76, 34, 62, 55, 57, 51, 46, 48, 32, 56, 48, 57, 46, 48, 32, 54, 53, 46, 48, 32, 55, 48, 46, 53, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 73, 78, 34, 62, 53, 52, 52, 53, 46, 48, 32, 53, 50, 57, 48, 46, 48, 32, 54, 50, 46, 55, 32, 54, 48, 46, 49, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 73, 65, 34, 62, 50, 49, 53, 49, 46, 48, 32, 50, 50, 52, 55, 46, 48, 32, 53, 54, 46, 53, 32, 53, 51, 46, 48, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 75, 83, 34, 62, 52, 48, 52, 46, 48, 32, 51, 56, 57, 46, 48, 32, 53, 52, 46, 53, 32, 52, 55, 46, 56, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 75, 89, 34, 62, 52, 49, 50, 46, 48, 32, 52, 56, 51, 46, 48, 32, 54, 55, 46, 55, 32, 55, 51, 46, 53, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 76, 65, 34, 62, 50, 55, 51, 46, 48, 32, 50, 53, 52, 46, 48, 32, 49, 49, 53, 46, 48, 32, 49, 49, 53, 46, 48, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 77, 69, 34, 62, 49, 48, 54, 57, 46, 48, 32, 49, 48, 55, 48, 46, 48, 32, 49, 48, 49, 46, 48, 32, 57, 55, 46, 48, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 77, 68, 34, 62, 56, 56, 53, 46, 48, 32, 56, 57, 56, 46, 48, 32, 55, 54, 46, 54, 32, 55, 53, 46, 52, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 77, 65, 34, 62, 50, 51, 53, 46, 48, 32, 50, 51, 55, 46, 48, 32, 49, 48, 53, 46, 48, 32, 49, 48, 50, 46, 48, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 77, 73, 34, 62, 49, 52, 48, 54, 46, 48, 32, 49, 51, 57, 54, 46, 48, 32, 53, 56, 46, 48, 32, 53, 51, 46, 56, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 77, 78, 34, 62, 50, 52, 57, 57, 46, 48, 32, 50, 54, 57, 55, 46, 48, 32, 53, 55, 46, 55, 32, 53, 52, 46, 48, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 77, 83, 34, 62, 49, 52, 51, 52, 46, 48, 32, 49, 52, 54, 56, 46, 48, 32, 56, 55, 46, 56, 32, 56, 54, 46, 55, 32, 60, 47, 111, 98, 115, 62, 10, 60, 111, 98, 115, 32, 108, 97, 98, 101, 108, 61, 34, 77, 79, 34, 62, 49, 53, 56, 48, 46, 48, 32, 49, 54, 50, 50, 46, 48, 32, 53, 53, 46, 52, 32, 53, 49, 46, 53, 32, 60, 47, 111, 98, 115, 62, 10, 60, 47, 111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110, 115, 62, 10, 60, 47, 103, 114, 101, 116, 108, 100, 97, 116, 97, 62, 10], true, true);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. A convenient way to call C functions (in C files, or
  // defined with extern "C").
  //
  // Note: ccall/cwrap use the C stack for temporary values. If you pass a string
  //       then it is only alive until the call is complete. If the code being
  //       called saves the pointer to be used later, it may point to invalid
  //       data. If you need a string to live forever, you can create it (and
  //       must later delete it manually!) using malloc and writeStringToMemory,
  //       for example.
  //
  // Note: LLVM optimizations can inline and remove functions, after which you will not be
  //       able to call them. Closure can also do so. To avoid that, add your function to
  //       the exports using something like
  //
  //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
  //
  // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
  // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
  //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
  // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
  //                   except that 'array' is not possible (there is no way for us to know the length of the array)
  // @param args       An array of the arguments to the function, as native JS values (as in returnType)
  //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
  // @return           The return value, as a native JS value (as in returnType)
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }
  // Returns a native JS wrapper for a C function. This is similar to ccall, but
  // returns a function you can call repeatedly in a normal way. For example:
  //
  //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
  //   alert(my_function(5, 22));
  //   alert(my_function(99, 12));
  //
  cwrap = function cwrap(ident, returnType, argTypes) {
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(61315);
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([205,204,204,204,204,252,104,64,0,0,0,0,0,128,108,64,0,0,0,0,0,96,109,64,0,0,0,0,0,208,113,64,0,0,0,0,0,224,109,64,0,0,0,0,0,80,114,64,0,0,0,0,0,208,113,64,0,0,0,0,0,208,118,64,0,0,0,0,0,112,114,64,0,0,0,0,0,32,114,64,0,0,0,0,0,16,120,64,0,0,0,0,0,144,127,64,0,0,0,0,0,144,122,64,0,0,0,0,0,240,121,64,0,0,0,0,0,164,144,64,0,0,0,0,0,152,147,64,0,0,0,0,0,80,148,64,0,0,0,0,0,164,152,64,0,0,0,0,0,0,153,64,0,0,0,0,0,88,155,64,0,0,0,0,0,32,156,64,0,0,0,0,0,56,157,64,0,0,0,0,0,60,158,64,0,0,0,0,0,112,158,64,0,0,0,0,0,156,161,64,0,0,0,0,0,80,164,64,0,0,0,0,0,224,165,64,0,0,0,0,0,112,167,64,112,114,105,99,101,0,0,0,115,113,102,116,0,0,0,0,109,111,100,101,108,45,62,101,114,114,99,111,100,101,58,32,37,100,10,0,0,0,0,0,101,114,114,111,114,32,109,101,115,115,97,103,101,58,32,37,115,10,0,0,0,0,0,0,67,111,117,108,100,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,46,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,116,105,109,101,115,113,0,0,116,105,109,101,0,0,0,0,115,113,117,97,114,101,100,32,116,105,109,101,32,116,114,101,110,100,32,118,97,114,105,97,98,108,101,0,0,0,0,0,116,105,109,101,32,116,114,101,110,100,32,118,97,114,105,97,98,108,101,0,0,0,0,0,37,115,32,105,115,32,97,32,99,111,110,115,116,97,110,116,0,0,0,0,0,0,0,0,32,32,37,115,58,32,37,103,10,0,0,0,0,0,0,0,82,111,98,117,115,116,32,101,115,116,105,109,97,116,101,32,111,102,32,118,97,114,105,97,110,99,101,0,0,0,0,0,83,117,109,32,111,102,32,115,113,117,97,114,101,115,32,111,102,32,99,117,109,117,108,97,116,101,100,32,114,101,115,105,100,117,97,108,115,0,0,0,154,153,153,153,153,153,185,63,154,153,153,153,153,153,169,63,123,20,174,71,225,122,132,63,10,75,80,83,83,32,116,101,115,116,32,102,111,114,32,37,115,0,0,0,0,0,0,0,32,40,105,110,99,108,117,100,105,110,103,32,116,114,101,110,100,32,97,110,100,32,115,101,97,115,111,110,97,108,115,41,10,10,0,0,0,0,0,0,32,40,105,110,99,108,117,100,105,110,103,32,116,114,101,110,100,41,10,10,0,0,0,0,32,40,105,110,99,108,117,100,105,110,103,32,115,101,97,115,111,110,97,108,115,41,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,84,32,61,32,37,100,10,0,76,97,103,32,116,114,117,110,99,97,116,105,111,110,32,112,97,114,97,109,101,116,101,114,32,61,32,37,100,10,0,0,37,115,32,61,32,37,103,10,10,0,0,0,0,0,0,0,84,101,115,116,32,115,116,97,116,105,115,116,105,99,0,0,37,115,32,62,32,46,49,48,10,0,0,0,0,0,0,0,80,45,118,97,108,117,101,0,37,115,32,60,32,46,48,49,10,0,0,0,0,0,0,0,37,115,32,37,46,51,102,10,0,0,0,0,0,0,0,0,73,110,116,101,114,112,111,108,97,116,101,100,32,112,45,118,97,108,117,101,0,0,0,0,75,80,83,83,0,0,0,0,67,114,105,116,105,99,97,108,32,118,97,108,117,101,115,0,37,42,115,32,32,32,32,0,32,0,0,0,0,0,0,0,37,103,37,37,32,32,32,32,32,32,37,103,37,37,32,32,32,32,32,32,37,103,37,37,10,0,0,0,0,0,0,0,37,115,58,32,37,46,42,102,32,32,32,37,46,42,102,32,32,32,37,46,42,102,10,0,205,204,204,204,204,204,231,63,220,128,207,15,35,132,221,63,67,202,79,170,125,58,214,63,204,69,124,39,102,189,239,191,82,15,209,232,14,98,221,63,33,31,244,108,86,125,202,63,85,135,220,12,55,224,203,63,199,186,184,141,6,240,194,63,215,107,122,80,80,138,190,63,180,29,83,119,101,23,206,191,176,226,84,107,97,22,162,63,248,84,78,123,74,206,185,63,10,75,80,83,83,32,116,101,115,116,32,102,111,114,32,37,115,32,37,115,10,0,0,0,40,105,110,99,108,117,100,105,110,103,32,116,114,101,110,100,41,0,0,0,0,0,0,0,40,119,105,116,104,111,117,116,32,116,114,101,110,100,41,0,85,110,105,116,32,37,100,44,32,84,32,61,32,37,100,10,0,0,0,0,0,0,0,0,116,101,115,116,32,61,32,37,103,44,32,0,0,0,0,0,112,45,118,97,108,117,101,0,105,110,116,101,114,112,111,108,97,116,101,100,32,112,45,118,97,108,117,101,0,0,0,0,37,115,10,10,0,0,0,0,72,48,58,32,97,108,108,32,103,114,111,117,112,115,32,97,114,101,32,115,116,97,116,105,111,110,97,114,121,0,0,0,32,32,32,78,111,116,101,58,32,116,104,101,115,101,32,97,114,101,32,76,79,87,69,82,32,66,79,85,78,68,83,32,111,110,32,116,104,101,32,116,114,117,101,32,112,45,118,97,108,117,101,115,10,0,0,0,32,32,32,40,73,110,100,105,118,105,100,117,97,108,32,112,45,118,97,108,117,101,115,32,62,32,46,49,48,44,32,97,110,100,32,114,101,99,111,114,100,101,100,32,97,115,32,46,49,48,58,32,37,100,41,10,0,0,0,0,0,0,0,0,32,32,32,78,111,116,101,58,32,116,104,101,115,101,32,97,114,101,32,85,80,80,69,82,32,66,79,85,78,68,83,32,111,110,32,116,104,101,32,116,114,117,101,32,112,45,118,97,108,117,101,115,10,0,0,0,32,32,32,40,73,110,100,105,118,105,100,117,97,108,32,112,45,118,97,108,117,101,115,32,60,32,46,48,49,44,32,97,110,100,32,114,101,99,111,114,100,101,100,32,97,115,32,46,48,49,58,32,37,100,41,10,0,0,0,0,0,0,0,0,67,104,111,105,32,116,101,115,116,58,32,99,97,110,110,111,116,32,98,101,32,99,97,108,99,117,108,97,116,101,100,10,0,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,67,104,111,105,32,109,101,116,97,45,116,101,115,116,115,58,0,0,0,0,0,0,0,0,32,32,32,37,115,40,37,100,41,32,61,32,37,103,32,91,37,46,52,102,93,10,0,0,73,110,118,101,114,115,101,32,99,104,105,45,115,113,117,97,114,101,0,0,0,0,0,0,32,32,32,37,115,32,61,32,37,103,32,91,37,46,52,102,93,10,0,0,0,0,0,0,73,110,118,101,114,115,101,32,110,111,114,109,97,108,32,116,101,115,116,0,0,0,0,0,32,32,32,37,115,58,32,116,40,37,100,41,32,61,32,37,103,32,91,37,46,52,102,93,10,0,0,0,0,0,0,0,76,111,103,105,116,32,116,101,115,116,0,0,0,0,0,0,37,48,52,100,45,37,48,50,100,45,37,48,50,100,0,0,0,0,0,0,31,0,0,0,28,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,31,0,0,0,29,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,37,100,45,37,100,45,37,100,0,0,0,0,0,0,0,0,37,100,47,37,100,47,37,100,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,116,97,114,116,105,110,103,32,100,97,116,101,32,102,111,114,32,37,100,45,100,97,121,32,100,97,116,97,0,0,0,37,48,50,100,45,37,48,50,100,45,37,48,50,100,0,0,37,48,52,100,45,48,49,45,48,49,0,0,0,0,0,0,37,48,52,100,45,49,50,45,51,49,0,0,0,0,0,0,99,104,100,116,114,99,0,0,119,97,108,100,95,116,101,115,116,58,32,99,111,117,108,100,110,39,116,32,105,110,118,101,114,116,32,67,10,0,0,0,109,97,115,107,32,102,114,111,109,32,108,105,115,116,58,32,108,105,115,116,91,48,93,32,61,32,37,100,32,98,117,116,32,110,109,97,115,107,32,61,32,37,100,10,0,0,0,0,0,0,0,0,0,0,176,60,255,255,255,255,255,255,239,127,210,188,122,221,43,35,134,64,210,188,122,221,43,35,134,192,24,45,68,84,251,33,9,64,205,59,127,102,158,160,230,63,37,100,0,0,0,0,0,0,37,37,46,37,100,102,0,0,37,100,58,37,48,42,100,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,99,111,110,115,116,0,0,0,97,117,116,111,45,103,101,110,101,114,97,116,101,100,32,99,111,110,115,116,97,110,116,0,42,42,42,32,101,114,114,111,114,58,32,97,108,108,111,99,97,116,101,95,90,32,99,97,108,108,101,100,32,119,105,116,104,32,110,111,110,45,78,85,76,76,32,90,10,0,0,0,42,42,42,32,73,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,109,111,100,105,102,121,105,110,103,32,98,111,114,114,111,119,101,100,32,100,97,116,97,10,0,0,0,0,100,97,116,97,115,101,116,95,100,114,111,112,95,108,97,115,116,95,118,97,114,115,58,32,100,115,101,116,45,62,118,32,61,32,37,100,44,32,100,101,108,118,97,114,115,32,61,32,37,100,32,32,45,62,32,110,101,119,118,32,61,32,37,100,10,32,40,100,115,101,116,32,61,32,37,112,41,10,0,0,61,32,108,111,103,32,111,102,32,37,37,37,100,115,0,0,108,111,103,40,0,0,0,0,61,0,0,0,0,0,0,0,61,108,111,103,40,0,0,0,37,37,37,100,91,94,41,93,0,0,0,0,0,0,0,0,108,100,101,112,118,97,114,0,114,104,111,95,105,110,0,0,101,102,102,99,111,110,115,116,0,0,0,0,0,0,0,0,109,97,107,101,118,99,118,58,32,112,109,111,100,45,62,120,112,120,32,61,32,78,85,76,76,10,0,0,0,0,0,0,69,95,68,65,84,65,58,32,108,115,113,58,32,108,105,115,116,32,61,32,37,112,44,32,100,115,101,116,32,61,32,37,112,10,0,0,0,0,0,0,69,95,68,65,84,65,58,32,108,115,113,58,32,108,105,115,116,91,48,93,32,61,32,37,100,44,32,100,115,101,116,45,62,118,32,61,32,37,100,10,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,118,97,108,117,101,32,101,110,99,111,117,110,116,101,114,101,100,32,102,111,114,32,118,97,114,105,97,98,108,101,32,37,100,44,32,111,98,115,32,37,100,0,0,0,0,0,0,0,104,99,95,118,101,114,115,105,111,110,0,0,0,0,0,0,110,111,45,99,111,114,99,0,100,97,105,108,121,95,114,101,112,97,99,107,0,0,0,0,106,108,108,0,0,0,0,0,108,111,103,45,112,97,114,101,110,116,0,0,0,0,0,0,119,116,95,100,117,109,109,121,0,0,0,0,0,0,0,0,101,115,115,95,111,114,105,103,0,0,0,0,0,0,0,0,115,105,103,109,97,95,111,114,105,103,0,0,0,0,0,0,101,112,115,0,0,0,0,0,37,46,54,115,95,114,0,0,117,104,97,116,95,49,0,0,112,114,111,98,108,101,109,58,32,110,120,112,120,32,61,32,48,10,0,0,0,0,0,0,69,114,114,111,114,32,115,117,109,32,111,102,32,115,113,117,97,114,101,115,32,40,37,103,41,32,105,115,32,110,111,116,32,62,32,48,0,0,0,0,117,110,99,101,110,116,101,114,101,100,0,0,0,0,0,0,99,101,110,116,101,114,101,100,45,82,50,0,0,0,0,0,37,115,32,37,100,58,32,120,112,120,32,60,61,32,48,46,48,10,0,0,0,0,0,0,46,46,47,108,105,98,47,115,114,99,47,101,115,116,105,109,97,116,101,46,99,0,0,0,99,104,111,108,98,101,116,97,58,32,116,101,115,116,91,37,100,93,32,61,32,37,103,10,0,0,0,0,0,0,0,0,110,101,97,114,45,115,105,110,103,117,108,97,114,0,0,0,37,115,32,37,100,58,32,99,111,101,102,102,32,37,100,32,105,115,32,78,97,78,10,0,78,111,46,32,111,102,32,111,98,115,32,40,37,100,41,32,105,115,32,108,101,115,115,32,116,104,97,110,32,110,111,46,32,111,102,32,112,97,114,97,109,101,116,101,114,115,32,40,37,100,41,0,0,0,0,0,68,101,108,101,116,105,110,103,32,118,97,114,32,37,100,32,40,37,115,41,32,97,116,32,108,105,115,116,32,112,111,115,32,37,100,58,32,97,108,108,32,122,101,114,111,10,0,0,122,101,114,111,108,105,115,116,0,0,0,0,0,0,0,0,102,111,114,99,101,95,104,99,0,0,0,0,0,0,0,0,87,101,105,103,104,116,32,118,97,114,105,97,98,108,101,32,105,115,32,97,108,108,32,122,101,114,111,115,44,32,97,98,111,114,116,105,110,103,32,114,101,103,114,101,115,115,105,111,110,0,0,0,0,0,0,0,87,101,105,103,104,116,32,118,97,114,105,97,98,108,101,32,99,111,110,116,97,105,110,115,32,110,101,103,97,116,105,118,101,32,118,97,108,117,101,115,0,0,0,0,0,0,0,0,102,100,116,114,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,97,109,109,97,0,0,0,83,33,152,57,184,252,36,63,171,191,134,230,227,132,83,63,176,20,219,233,205,87,133,63,211,35,196,24,217,99,168,63,49,125,174,220,169,141,202,63,18,227,147,57,55,161,223,63,0,0,0,0,0,0,240,63,175,211,0,132,122,72,248,190,115,37,21,41,138,174,65,63,74,180,80,231,228,64,114,191,23,177,27,91,237,49,136,63,103,222,63,227,121,87,162,63,194,135,66,157,26,7,206,191,81,60,205,201,68,73,178,63,0,0,0,0,0,0,240,63,108,103,97,109,0,0,0,0,189,161,231,72,208,80,242,63,97,103,243,143,1,137,149,192,62,185,91,53,52,242,226,192,229,137,144,248,115,61,20,193,81,219,148,249,130,188,49,193,11,242,25,2,137,69,58,193,94,5,24,84,103,12,42,193,178,18,243,28,13,253,117,192,87,215,137,123,13,170,208,192,155,76,116,185,132,235,10,193,67,0,149,113,134,98,49,193,76,243,47,137,85,82,67,193,74,225,17,106,75,206,62,193,181,190,100,200,241,103,237,63,97,102,51,39,80,152,74,63,67,233,128,181,189,127,67,191,187,94,220,32,159,1,74,63,161,165,176,22,108,193,102,191,75,85,85,85,85,85,181,63,147,114,45,89,114,204,73,63,124,29,230,39,107,22,46,191,215,79,212,7,38,247,101,191,253,197,152,27,199,113,108,63,134,89,85,85,85,85,181,63,6,39,246,31,147,13,4,64,78,111,32,100,97,116,97,115,101,116,32,105,115,32,105,110,32,112,108,97,99,101,0,0,84,104,105,115,32,99,111,109,109,97,110,100,32,119,111,110,39,116,32,119,111,114,107,32,119,105,116,104,32,116,104,101,32,99,117,114,114,101,110,116,32,112,101,114,105,111,100,105,99,105,116,121,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,105,109,104,111,102,58,32,37,115,10,0,0,0,0,0,0,110,32,61,32,37,100,44,32,73,109,104,111,102,32,105,110,116,101,103,114,97,108,32,102,97,105,108,101,100,32,116,111,32,99,111,110,118,101,114,103,101,10,0,0,0,0,0,0,110,32,61,32,37,100,44,32,73,109,104,111,102,32,105,110,116,101,103,114,97,108,32,103,97,118,101,32,110,101,103,97,116,105,118,101,32,118,97,108,117,101,32,37,103,10,0,0,73,109,104,111,102,32,105,110,116,101,103,114,97,108,32,103,97,118,101,32,110,101,103,97,116,105,118,101,32,118,97,108,117,101,0,0,0,0,0,0,105,109,104,111,102,95,98,111,117,110,100,58,32,103,111,116,32,110,111,32,110,111,110,45,122,101,114,111,32,101,105,103,101,110,118,97,108,117,101,115,10,0,0,0,0,0,0,0,105,109,104,111,102,95,98,111,117,110,100,58,32,103,111,116,32,110,101,103,97,116,105,118,101,32,114,101,115,117,108,116,10,0,0,0,0,0,0,0,83,37,100,0,0,0,0,0,99,101,110,116,101,114,101,100,32,112,101,114,105,111,100,105,99,32,100,117,109,109,121,0,117,110,99,101,110,116,101,114,101,100,32,112,101,114,105,111,100,105,99,32,100,117,109,109,121,0,0,0,0,0,0,0,100,113,37,100,0,0,0,0,61,32,49,32,105,102,32,113,117,97,114,116,101,114,32,61,32,37,100,44,32,48,32,111,116,104,101,114,119,105,115,101,0,0,0,0,0,0,0,0,100,109,37,100,0,0,0,0,61,32,49,32,105,102,32,109,111,110,116,104,32,61,32,37,100,44,32,48,32,111,116,104,101,114,119,105,115,101,0,0,100,117,109,109,121,95,0,0,37,115,37,100,0,0,0,0,37,115,32,61,32,49,32,105,102,32,112,101,114,105,111,100,32,105,115,32,37,100,44,32,48,32,111,116,104,101,114,119,105,115,101,0,0,0,0,0,100,105,97,103,0,0,0,0,97,98,115,0,0,0,0,0,115,105,110,0,0,0,0,0,99,111,115,0,0,0,0,0,116,97,110,0,0,0,0,0,97,115,105,110,0,0,0,0,97,99,111,115,0,0,0,0,97,116,97,110,0,0,0,0,115,105,110,104,0,0,0,0,99,111,115,104,0,0,0,0,116,97,110,104,0,0,0,0,97,115,105,110,104,0,0,0,97,99,111,115,104,0,0,0,97,116,97,110,104,0,0,0,108,111,103,0,0,0,0,0,108,110,0,0,0,0,0,0,108,111,103,49,48,0,0,0,108,111,103,50,0,0,0,0,101,120,112,0,0,0,0,0,115,113,114,116,0,0,0,0,100,105,102,102,0,0,0,0,108,100,105,102,102,0,0,0,115,100,105,102,102,0,0,0,108,97,103,115,0,0,0,0,105,110,116,0,0,0,0,0,114,111,117,110,100,0,0,0,99,101,105,108,0,0,0,0,102,108,111,111,114,0,0,0,115,111,114,116,0,0,0,0,100,115,111,114,116,0,0,0,115,111,114,116,98,121,0,0,114,97,110,107,105,110,103,0,111,114,116,104,100,101,118,0,110,111,98,115,0,0,0,0,102,105,114,115,116,111,98,115,0,0,0,0,0,0,0,0,108,97,115,116,111,98,115,0,117,110,105,102,111,114,109,0,110,111,114,109,97,108,0,0,99,117,109,0,0,0,0,0,109,105,115,115,105,110,103,0,111,107,0,0,0,0,0,0,109,105,115,115,122,101,114,111,0,0,0,0,0,0,0,0,108,114,118,97,114,0,0,0,113,117,97,110,116,105,108,101,0,0,0,0,0,0,0,0,109,101,100,105,97,110,0,0,103,105,110,105,0,0,0,0,122,101,114,111,109,105,115,115,0,0,0,0,0,0,0,0,115,117,109,0,0,0,0,0,115,117,109,97,108,108,0,0,109,101,97,110,0,0,0,0,109,105,110,0,0,0,0,0,109,97,120,0,0,0,0,0,115,100,0,0,0,0,0,0,118,97,114,0,0,0,0,0,115,107,101,119,110,101,115,115,0,0,0,0,0,0,0,0,107,117,114,116,111,115,105,115,0,0,0,0,0,0,0,0,115,115,116,0,0,0,0,0,99,110,111,114,109,0,0,0,100,110,111,114,109,0,0,0,113,110,111,114,109,0,0,0,103,97,109,109,97,102,117,110,0,0,0,0,0,0,0,0,108,110,103,97,109,109,97,0,100,105,103,97,109,109,97,0,114,101,115,97,109,112,108,101,0,0,0,0,0,0,0,0,112,110,111,98,115,0,0,0,112,109,105,110,0,0,0,0,112,109,97,120,0,0,0,0,112,115,117,109,0,0,0,0,112,109,101,97,110,0,0,0,112,120,115,117,109,0,0,0,112,115,100,0,0,0,0,0,112,115,104,114,105,110,107,0,104,112,102,105,108,116,0,0,98,107,102,105,108,116,0,0,98,119,102,105,108,116,0,0,102,114,97,99,100,105,102,102,0,0,0,0,0,0,0,0,98,111,120,99,111,120,0,0,99,111,118,0,0,0,0,0,99,111,114,114,0,0,0,0,109,111,118,97,118,103,0,0,73,0,0,0,0,0,0,0,122,101,114,111,115,0,0,0,111,110,101,115,0,0,0,0,115,101,113,0,0,0,0,0,114,101,112,108,97,99,101,0,109,117,110,105,102,111,114,109,0,0,0,0,0,0,0,0,109,110,111,114,109,97,108,0,115,117,109,99,0,0,0,0,115,117,109,114,0,0,0,0,112,114,111,100,99,0,0,0,112,114,111,100,114,0,0,0,109,101,97,110,99,0,0,0,109,101,97,110,114,0,0,0,115,100,99,0,0,0,0,0,109,105,110,99,0,0,0,0,109,97,120,99,0,0,0,0,109,105,110,114,0,0,0,0,109,97,120,114,0,0,0,0,105,109,105,110,99,0,0,0,105,109,97,120,99,0,0,0,105,109,105,110,114,0,0,0,105,109,97,120,114,0,0,0,102,102,116,0,0,0,0,0,102,102,116,105,0,0,0,0,99,109,117,108,116,0,0,0,104,100,112,114,111,100,0,0,99,100,105,118,0,0,0,0,109,99,111,118,0,0,0,0,109,99,111,114,114,0,0,0,109,120,116,97,98,0,0,0,99,100,101,109,101,97,110,0,99,104,111,108,101,115,107,121,0,0,0,0,0,0,0,0,112,115,100,114,111,111,116,0,105,110,118,0,0,0,0,0,105,110,118,112,100,0,0,0,103,105,110,118,0,0,0,0,116,114,97,110,115,112,0,0,118,101,99,0,0,0,0,0,118,101,99,104,0,0,0,0,117,110,118,101,99,104,0,0,117,112,112,101,114,0,0,0,108,111,119,101,114,0,0,0,114,111,119,115,0,0,0,0,99,111,108,115,0,0,0,0,100,101,116,0,0,0,0,0,108,100,101,116,0,0,0,0,116,114,0,0,0,0,0,0,111,110,101,110,111,114,109,0,105,110,102,110,111,114,109,0,114,99,111,110,100,0,0,0,114,97,110,107,0,0,0,0,113,102,111,114,109,0,0,0,109,108,97,103,0,0,0,0,113,114,100,101,99,111,109,112,0,0,0,0,0,0,0,0,101,105,103,101,110,115,121,109,0,0,0,0,0,0,0,0,101,105,103,101,110,103,101,110,0,0,0,0,0,0,0,0,101,105,103,115,111,108,118,101,0,0,0,0,0,0,0,0,110,117,108,108,115,112,97,99,101,0,0,0,0,0,0,0,112,114,105,110,99,111,109,112,0,0,0,0,0,0,0,0,109,101,120,112,0,0,0,0,102,100,106,97,99,0,0,0,66,70,71,83,109,97,120,0,78,82,109,97,120,0,0,0,111,98,115,110,117,109,0,0,105,115,115,101,114,105,101,115,0,0,0,0,0,0,0,0,105,115,108,105,115,116,0,0,105,115,115,116,114,105,110,103,0,0,0,0,0,0,0,0,105,115,110,117,108,108,0,0,110,101,108,101,109,0,0,0,112,100,102,0,0,0,0,0,99,100,102,0,0,0,0,0,105,110,118,99,100,102,0,0,112,118,97,108,117,101,0,0,99,114,105,116,105,99,97,108,0,0,0,0,0,0,0,0,114,97,110,100,103,101,110,0,109,114,97,110,100,103,101,110,0,0,0,0,0,0,0,0,114,97,110,100,103,101,110,49,0,0,0,0,0,0,0,0,117,114,99,112,118,97,108,0,118,97,108,117,101,115,0,0,117,110,105,113,0,0,0,0,109,115,104,97,112,101,0,0,115,118,100,0,0,0,0,0,109,111,108,115,0,0,0,0,109,112,111,108,115,0,0,0,109,114,108,115,0,0,0,0,109,114,101,97,100,0,0,0,109,119,114,105,116,101,0,0,98,114,101,97,100,0,0,0,98,119,114,105,116,101,0,0,115,101,108,105,102,99,0,0,115,101,108,105,102,114,0,0,112,111,108,114,111,111,116,115,0,0,0,0,0,0,0,0,100,117,109,109,105,102,121,0,119,109,101,97,110,0,0,0,119,118,97,114,0,0,0,0,119,115,100,0,0,0,0,0,120,112,120,0,0,0,0,0,102,105,108,116,101,114,0,0,107,102,105,108,116,101,114,0,107,115,109,111,111,116,104,0,107,115,105,109,117,108,0,0,116,114,105,109,114,0,0,0,103,101,116,101,110,118,0,0,110,103,101,116,101,110,118,0,97,114,103,110,97,109,101,0,111,98,115,108,97,98,101,108,0,0,0,0,0,0,0,0,114,101,97,100,102,105,108,101,0,0,0,0,0,0,0,0,103,114,97,98,0,0,0,0,115,116,114,115,116,114,0,0,115,116,114,115,116,114,105,112,0,0,0,0,0,0,0,0,115,116,114,110,99,109,112,0,115,116,114,108,101,110,0,0,112,114,105,110,116,102,0,0,115,112,114,105,110,116,102,0,115,115,99,97,110,102,0,0,118,97,114,110,97,109,101,0,118,97,114,110,117,109,0,0,116,111,108,111,119,101,114,0,116,111,117,112,112,101,114,0,99,111,108,110,97,109,101,115,0,0,0,0,0,0,0,0,114,111,119,110,97,109,101,115,0,0,0,0,0,0,0,0,108,106,117,110,103,98,111,120,0,0,0,0,0,0,0,0,109,115,111,114,116,98,121,0,108,105,110,99,111,109,98,0,105,109,104,111,102,0,0,0,116,111,101,112,115,111,108,118,0,0,0,0,0,0,0,0,100,105,97,103,99,97,116,0,120,109,105,110,0,0,0,0,120,109,97,120,0,0,0,0,99,111,114,114,103,109,0,0,109,99,111,118,103,0,0,0,102,99,115,116,97,116,115,0,98,101,115,115,101,108,0,0,102,114,97,99,108,97,103,0,109,114,101,118,101,114,115,101,0,0,0,0,0,0,0,0,100,101,115,101,97,115,0,0,112,101,114,103,109,0,0,0,105,114,114,0,0,0,0,0,110,112,118,0,0,0,0,0,108,111,103,105,115,116,105,99,0,0,0,0,0,0,0,0,119,101,101,107,100,97,121,0,107,100,101,110,115,105,116,121,0,0,0,0,0,0,0,0,109,111,110,116,104,108,101,110,0,0,0,0,0,0,0,0,101,112,111,99,104,100,97,121,0,0,0,0,0,0,0,0,115,101,116,110,111,116,101,0,105,110,118,109,105,108,108,115,0,0,0,0,0,0,0,0,112,111,108,121,102,105,116,0,99,104,111,119,108,105,110,0,118,97,114,115,105,109,117,108,0,0,0,0,0,0,0,0,115,116,114,115,112,108,105,116,0,0,0,0,0,0,0,0,105,110,108,105,115,116,0,0,101,114,114,109,115,103,0,0,105,115,99,111,110,115,116,0,105,114,102,0,0,0,0,0,105,110,98,117,110,100,108,101,0,0,0,0,0,0,0,0,115,116,114,115,117,98,0,0,114,101,103,115,117,98,0,0,99,111,108,110,97,109,101,0,114,97,110,100,105,110,116,0,110,97,100,97,114,119,97,116,0,0,0,0,0,0,0,0,115,105,109,97,110,110,0,0,108,111,101,115,115,0,0,0,102,114,101,113,0,0,0,0,103,104,107,0,0,0,0,0,104,97,108,116,111,110,0,0,105,119,105,115,104,97,114,116,0,0,0,0,0,0,0,0,105,115,110,97,110,0,0,0,116,121,112,101,115,116,114,0,113,117,97,100,116,97,98,108,101,0,0,0,0,0,0,0,97,103,103,114,101,103,97,116,101,0,0,0,0,0,0,0,114,101,109,111,118,101,0,0,105,115,111,100,97,116,101,0,103,101,116,108,105,110,101,0,116,121,112,101,111,102,0,0,97,116,111,102,0,0,0,0,102,105,120,110,97,109,101,0,105,115,111,99,111,110,118,0,115,117,98,115,116,114,0,0,109,112,105,115,101,110,100,0,109,112,105,114,101,99,118,0,109,112,105,98,99,97,115,116,0,0,0,0,0,0,0,0,109,112,105,114,101,100,117,99,101,0,0,0,0,0,0,0,109,112,105,97,108,108,114,101,100,0,0,0,0,0,0,0,109,112,105,115,99,97,116,116,101,114,0,0,0,0,0,0,101,97,115,116,101,114,100,97,121,0,0,0,0,0,0,0,103,101,110,115,101,114,105,101,115,0,0,0,0,0,0,0,1,1,0,0,8,16,0,0,6,1,0,0,16,16,0,0,7,1,0,0,24,16,0,0,8,1,0,0,32,16,0,0,9,1,0,0,40,16,0,0,10,1,0,0,48,16,0,0,11,1,0,0,56,16,0,0,12,1,0,0,64,16,0,0,13,1,0,0,72,16,0,0,14,1,0,0,80,16,0,0,15,1,0,0,88,16,0,0,16,1,0,0,96,16,0,0,17,1,0,0,104,16,0,0,18,1,0,0,112,16,0,0,18,1,0,0,120,16,0,0,19,1,0,0,128,16,0,0,20,1,0,0,136,16,0,0,21,1,0,0,144,16,0,0,22,1,0,0,152,16,0,0,23,1,0,0,160,16,0,0,24,1,0,0,168,16,0,0,25,1,0,0,176,16,0,0,216,1,0,0,184,16,0,0,2,1,0,0,192,16,0,0,5,1,0,0,200,16,0,0,3,1,0,0,208,16,0,0,4,1,0,0,216,16,0,0,26,1,0,0,224,16,0,0,27,1,0,0,232,16,0,0,148,1,0,0,240,16,0,0,28,1,0,0,248,16,0,0,29,1,0,0,0,17,0,0,30,1,0,0,8,17,0,0,31,1,0,0,16,17,0,0,32,1,0,0,32,17,0,0,149,1,0,0,40,17,0,0,150,1,0,0,48,17,0,0,33,1,0,0,56,17,0,0,34,1,0,0,64,17,0,0,35,1,0,0,72,17,0,0,36,1,0,0,80,17,0,0,163,1,0,0,96,17,0,0,164,1,0,0,104,17,0,0,38,1,0,0,120,17,0,0,39,1,0,0,128,17,0,0,37,1,0,0,136,17,0,0,40,1,0,0,152,17,0,0,41,1,0,0,160,17,0,0,42,1,0,0,168,17,0,0,43,1,0,0,176,17,0,0,44,1,0,0,184,17,0,0,45,1,0,0,192,17,0,0,46,1,0,0,200,17,0,0,47,1,0,0,208,17,0,0,48,1,0,0,224,17,0,0,49,1,0,0,240,17,0,0,50,1,0,0,248,17,0,0,51,1,0,0,0,18,0,0,52,1,0,0,8,18,0,0,53,1,0,0,16,18,0,0,54,1,0,0,32,18,0,0,55,1,0,0,40,18,0,0,183,1,0,0,48,18,0,0,197,1,0,0,64,18,0,0,198,1,0,0,72,18,0,0,199,1,0,0,80,18,0,0,200,1,0,0,88,18,0,0,201,1,0,0,96,18,0,0,202,1,0,0,104,18,0,0,203,1,0,0,112,18,0,0,132,1,0,0,120,18,0,0,151,1,0,0,128,18,0,0,255,1,0,0,136,18,0,0,234,1,0,0,144,18,0,0,152,1,0,0,152,18,0,0,153,1,0,0,168,18,0,0,145,1,0,0,176,18,0,0,144,1,0,0,184,18,0,0,231,1,0,0,192,18,0,0,56,1,0,0,200,18,0,0,154,1,0,0,208,18,0,0,155,1,0,0,216,18,0,0,224,1,0,0,224,18,0,0,225,1,0,0,232,18,0,0,156,1,0,0,240,18,0,0,157,1,0,0,0,19,0,0,58,1,0,0,8,19,0,0,57,1,0,0,16,19,0,0,60,1,0,0,24,19,0,0,59,1,0,0,32,19,0,0,62,1,0,0,40,19,0,0,61,1,0,0,48,19,0,0,146,1,0,0,56,19,0,0,104,1,0,0,64,19,0,0,105,1,0,0,72,19,0,0,106,1,0,0,80,19,0,0,107,1,0,0,88,19,0,0,108,1,0,0,96,19,0,0,109,1,0,0,104,19,0,0,110,1,0,0,112,19,0,0,111,1,0,0,120,19,0,0,112,1,0,0,128,19,0,0,113,1,0,0,136,19,0,0,165,1,0,0,144,19,0,0,166,1,0,0,152,19,0,0,167,1,0,0,160,19,0,0,63,1,0,0,168,19,0,0,64,1,0,0,176,19,0,0,168,1,0,0,184,19,0,0,65,1,0,0,192,19,0,0,66,1,0,0,200,19,0,0,67,1,0,0,216,19,0,0,68,1,0,0,224,19,0,0,69,1,0,0,232,19,0,0,70,1,0,0,240,19,0,0,71,1,0,0,0,16,0,0,72,1,0,0,248,19,0,0,73,1,0,0,0,20,0,0,74,1,0,0,8,20,0,0,75,1,0,0,16,20,0,0,114,1,0,0,24,20,0,0,115,1,0,0,32,20,0,0,76,1,0,0,40,20,0,0,77,1,0,0,48,20,0,0,78,1,0,0,56,20,0,0,79,1,0,0,64,20,0,0,80,1,0,0,72,20,0,0,81,1,0,0,80,20,0,0,82,1,0,0,88,20,0,0,83,1,0,0,96,20,0,0,84,1,0,0,104,20,0,0,158,1,0,0,112,20,0,0,240,1,0,0,120,20,0,0,159,1,0,0,128,20,0,0,160,1,0,0,144,20,0,0,161,1,0,0,160,20,0,0,241,1,0,0,176,20,0,0,102,1,0,0,192,20,0,0,217,1,0,0,208,20,0,0,103,1,0,0,224,20,0,0,162,1,0,0,232,20,0,0,218,1,0,0,240,20,0,0,8,2,0,0,248,20,0,0,85,1,0,0,0,21,0,0,86,1,0,0,8,21,0,0,87,1,0,0,24,21,0,0,88,1,0,0,32,21,0,0,89,1,0,0,48,21,0,0,90,1,0,0,56,21,0,0,91,1,0,0,64,21,0,0,93,1,0,0,72,21,0,0,94,1,0,0,80,21,0,0,92,1,0,0,88,21,0,0,95,1,0,0,96,21,0,0,97,1,0,0,112,21,0,0,98,1,0,0,120,21,0,0,99,1,0,0,136,21,0,0,96,1,0,0,152,21,0,0,100,1,0,0,160,21,0,0,101,1,0,0,168,21,0,0,219,1,0,0,176,21,0,0,220,1,0,0,184,21,0,0,0,2,0,0,192,21,0,0,1,2,0,0,200,21,0,0,2,2,0,0,208,21,0,0,205,1,0,0,216,21,0,0,245,1,0,0,224,21,0,0,206,1,0,0,232,21,0,0,246,1,0,0,240,21,0,0,170,1,0,0,248,21,0,0,169,1,0,0,0,22,0,0,116,1,0,0,8,22,0,0,147,1,0,0,24,22,0,0,171,1,0,0,32,22,0,0,172,1,0,0,40,22,0,0,173,1,0,0,48,22,0,0,117,1,0,0,56,22,0,0,3,2,0,0,64,22,0,0,5,2,0,0,72,22,0,0,6,2,0,0,80,22,0,0,7,2,0,0,88,22,0,0,221,1,0,0,96,22,0,0,130,1,0,0,104,22,0,0,131,1,0,0,112,22,0,0,118,1,0,0,120,22,0,0,119,1,0,0,128,22,0,0,209,1,0,0,144,22,0,0,120,1,0,0,160,22,0,0,174,1,0,0,168,22,0,0,136,1,0,0,176,22,0,0,226,1,0,0,192,22,0,0,121,1,0,0,200,22,0,0,210,1,0,0,208,22,0,0,250,1,0,0,216,22,0,0,249,1,0,0,224,22,0,0,122,1,0,0,232,22,0,0,123,1,0,0,240,22,0,0,124,1,0,0,248,22,0,0,125,1,0,0,0,23,0,0,175,1,0,0,8,23,0,0,176,1,0,0,24,23,0,0,177,1,0,0,40,23,0,0,178,1,0,0,56,23,0,0,179,1,0,0,64,23,0,0,180,1,0,0,72,23,0,0,222,1,0,0,80,23,0,0,190,1,0,0,96,23,0,0,181,1,0,0,104,23,0,0,182,1,0,0,112,23,0,0,223,1,0,0,120,23,0,0,4,2,0,0,128,23,0,0,184,1,0,0,136,23,0,0,227,1,0,0,144,23,0,0,185,1,0,0,152,23,0,0,186,1,0,0,160,23,0,0,187,1,0,0,176,23,0,0,188,1,0,0,184,23,0,0,126,1,0,0,192,23,0,0,189,1,0,0,200,23,0,0,127,1,0,0,208,23,0,0,228,1,0,0,224,23,0,0,232,1,0,0,232,23,0,0,229,1,0,0,248,23,0,0,230,1,0,0,8,24,0,0,233,1,0,0,24,24,0,0,128,1,0,0,32,24,0,0,191,1,0,0,48,24,0,0,235,1,0,0,56,24,0,0,236,1,0,0,64,24,0,0,192,1,0,0,80,24,0,0,193,1,0,0,96,24,0,0,129,1,0,0,104,24,0,0,194,1,0,0,112,24,0,0,237,1,0,0,120,24,0,0,195,1,0,0,128,24,0,0,238,1,0,0,144,24,0,0,239,1,0,0,152,24,0,0,196,1,0,0,160,24,0,0,204,1,0,0,168,24,0,0,242,1,0,0,176,24,0,0,243,1,0,0,192,24,0,0,9,2,0,0,200,24,0,0,133,1,0,0,208,24,0,0,10,2,0,0,216,24,0,0,244,1,0,0,224,24,0,0,248,1,0,0,232,24,0,0,134,1,0,0,248,24,0,0,135,1,0,0,0,25,0,0,11,2,0,0,8,25,0,0,247,1,0,0,24,25,0,0,137,1,0,0,40,25,0,0,208,1,0,0,48,25,0,0,207,1,0,0,56,25,0,0,138,1,0,0,64,25,0,0,139,1,0,0,72,25,0,0,140,1,0,0,80,25,0,0,12,2,0,0,88,25,0,0,251,1,0,0,96,25,0,0,211,1,0,0,104,25,0,0,141,1,0,0,112,25,0,0,212,1,0,0,120,25,0,0,252,1,0,0,136,25,0,0,213,1,0,0,152,25,0,0,253,1,0,0,168,25,0,0,142,1,0,0,184,25,0,0,214,1,0,0,200,25,0,0,0,0,0,0,0,0,0,0,103,97,109,109,97,102,117,110,99,0,0,0,0,0,0,0,103,97,109,109,97,0,0,0,112,118,97,108,0,0,0,0,108,111,103,115,0,0,0,0,100,97,116,101,0,0,0,0,36,0,0,0,0,0,0,0,53,1,0,0,48,34,0,0,53,1,0,0,64,34,0,0,92,1,0,0,72,34,0,0,18,1,0,0,80,34,0,0,119,1,0,0,88,34,0,0,120,1,0,0,96,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,111,110,115,116,0,0,0,37,37,37,100,91,94,46,93,46,37,37,37,100,115,0,0,103,112,116,116,109,112,0,0,103,112,116,116,109,112,37,100,46,112,108,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([10,0,0,0,0,0,0,0,42,42,42,32,101,114,114,111,114,32,105,110,32,102,117,110,0,0,0,0,0,0,0,0,37,115,58,32,37,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,79,112,101,110,32,100,97,116,97,0,0,0,0,0,0,84,101,115,116,32,115,116,97,116,105,115,116,105,99,0,0,97,110,110,117,97,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,114,101,116,108,32,101,114,114,111,114,58,32,103,114,101,116,108,95,109,97,116,114,105,120,95,97,108,108,111,99,58,32,114,111,119,115,61,37,100,44,32,99,111,108,115,61,37,100,10,0,0,0,0,0,0,103,114,101,116,108,95,109,97,116,114,105,120,95,102,114,101,101,0,0,0,0,0,0,0,103,114,101,116,108,95,109,97,116,114,105,120,95,99,111,112,121,95,118,97,108,117,101,115,58,32,115,114,99,32,105,115,32,78,85,76,76,10,0,0,103,114,101,116,108,95,109,97,116,114,105,120,95,99,111,112,121,95,118,97,108,117,101,115,58,32,116,97,114,103,32,105,115,32,37,100,32,120,32,37,100,32,98,117,116,32,115,114,99,32,105,115,32,37,100,32,120,32,37,100,10,0,0,0,8,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,103,114,101,116,108,95,109,97,116,114,105,120,95,97,100,100,95,116,111,58,32,97,100,100,105,110,103,32,37,100,32,120,32,37,100,32,116,111,32,37,100,32,120,32,37,100,10,0,103,114,101,116,108,95,109,97,116,114,105,120,95,97,100,100,95,115,101,108,102,95,116,114,97,110,115,112,111,115,101,58,32,109,97,116,114,105,120,32,109,117,115,116,32,98,101,32,115,113,117,97,114,101,10,0,103,114,101,116,108,95,109,97,116,114,105,120,95,115,116,101,97,108,95,100,97,116,97,0,37,35,49,50,46,53,103,32,0,0,0,0,0,0,0,0,37,115,58,32,109,97,116,114,105,120,32,105,115,32,78,85,76,76,10,0,0,0,0,0,109,97,116,114,105,120,32,105,115,32,78,85,76,76,10,0,71,82,69,84,76,95,77,65,84,82,73,88,95,68,69,66,85,71,0,0,0,0,0,0,37,35,50,52,46,49,53,103,32,0,0,0,0,0,0,0,71,82,69,84,76,95,77,65,84,82,73,88,95,80,82,73,78,84,54,0,0,0,0,0,37,35,49,50,46,54,103,32,0,0,0,0,0,0,0,0,37,115,32,40,37,100,32,120,32,37,100,41,0,0,0,0,32,40,112,97,114,116,32,111,102,32,109,97,116,114,105,120,32,98,108,111,99,107,41,10,10,0,0,0,0,0,0,0,32,91,116,49,32,61,32,37,100,44,32,116,50,32,61,32,37,100,93,10,10,0,0,0,10,10,0,0,0,0,0,0,26,223,196,65,102,99,122,61,255,255,255,255,0,0,0,0,103,114,101,116,108,95,109,97,116,114,105,120,95,109,117,108,116,105,112,108,121,58,10,32,112,114,111,100,117,99,116,32,109,97,116,114,105,120,32,109,117,115,116,32,98,101,32,100,105,115,116,105,110,99,116,32,102,114,111,109,32,98,111,116,104,32,105,110,112,117,116,32,109,97,116,114,105,99,101,115,10,0,0,0,0,0,0,0,97,32,61,32,37,112,44,32,98,32,61,32,37,112,44,32,99,32,61,32,37,112,10,0,103,114,101,116,108,95,109,97,116,114,105,120,95,109,117,108,116,105,112,108,121,95,109,111,100,58,32,109,97,116,114,105,99,101,115,32,110,111,116,32,99,111,110,102,111,114,109,97,98,108,101,10,0,0,0,0,32,82,101,113,117,101,115,116,101,100,32,40,37,100,32,120,32,37,100,41,32,42,32,40,37,100,32,120,32,37,100,41,32,61,32,40,37,100,32,120,32,37,100,41,10,0,0,0,100,103,101,113,114,102,58,32,105,110,102,111,32,61,32,37,100,10,0,0,0,0,0,0,100,111,114,103,113,114,58,32,105,110,102,111,32,61,32,37,100,10,0,0,0,0,0,0,100,116,114,99,111,110,58,32,105,110,102,111,32,61,32,37,100,10,0,0,0,0,0,0,103,114,101,116,108,95,109,97,116,114,105,120,95,81,82,95,114,97,110,107,58,32,114,99,111,110,100,32,61,32,37,103,10,0,0,0,0,0,0,0,81,82,32,119,97,114,110,105,110,103,58,32,114,99,111,110,100,32,61,32,37,103,10,0,103,114,101,116,108,95,109,97,116,114,105,120,95,109,105,114,114,111,114,58,32,105,110,112,117,116,32,105,115,32,110,111,116,32,115,113,117,97,114,101,10,0,0,0,0,0,0,0,103,114,101,116,108,95,105,110,118,101,114,116,95,115,121,109,109,101,116,114,105,99,95,109,97,116,114,105,120,58,32,105,110,112,117,116,32,105,115,32,110,111,116,32,115,113,117,97,114,101,10,0,0,0,0,0,103,114,101,116,108,95,105,110,118,101,114,116,95,115,121,109,109,101,116,114,105,99,95,109,97,116,114,105,120,58,32,109,97,116,114,105,120,32,105,115,32,110,111,116,32,115,121,109,109,101,116,114,105,99,10,0,103,114,101,116,108,95,105,110,118,101,114,116,95,115,121,109,109,101,116,114,105,99,95,109,97,116,114,105,120,58,32,100,112,111,116,114,102,32,102,97,105,108,101,100,32,119,105,116,104,32,105,110,102,111,32,61,32,37,100,32,40,110,32,61,32,37,100,41,10,0,0,0,103,114,101,116,108,95,105,110,118,101,114,116,95,115,121,109,109,101,116,114,105,99,95,109,97,116,114,105,120,58,10,32,100,112,111,116,114,105,32,102,97,105,108,101,100,32,119,105,116,104,32,105,110,102,111,32,61,32,37,100,10,0,0,0,105,110,112,117,116,32,109,97,116,114,105,120,0,0,0,0,103,114,101,116,108,95,103,101,110,101,114,97,108,95,109,97,116,114,105,120,95,101,105,103,101,110,118,97,108,115,58,10,32,109,97,116,114,105,120,32,109,117,115,116,32,98,101,32,115,113,117,97,114,101,44,32,105,115,32,37,100,32,120,32,37,100,10,0,0,0,0,0,103,114,101,116,108,95,109,97,116,114,105,120,95,113,102,111,114,109,58,32,37,115,32,105,115,32,40,37,100,32,120,32,37,100,41,32,98,117,116,32,88,32,105,115,32,40,37,100,32,120,32,37,100,41,10,0,65,39,0,0,0,0,0,0,65,0,0,0,0,0,0,0,103,114,101,116,108,95,109,97,116,114,105,120,95,113,102,111,114,109,58,32,100,101,115,116,105,110,97,116,105,111,110,32,109,97,116,114,105,120,32,110,111,116,32,99,111,110,102,111,114,109,97,98,108,101,10,0,103,114,101,116,108,95,109,97,116,114,105,120,58,32,119,111,114,107,115,112,97,99,101,32,113,117,101,114,121,32,102,97,105,108,101,100,58,32,105,110,102,111,32,61,32,37,100,44,32,119,111,114,107,91,48,93,32,61,32,37,103,10,0,0,77,40,37,100,44,37,100,41,32,61,32,37,46,49,54,103,32,98,117,116,32,77,40,37,100,44,37,100,41,32,61,32,37,46,49,54,103,10,0,0,103,114,101,116,108,95,109,97,116,114,105,120,95,105,115,95,115,121,109,109,101,116,114,105,99,40,41,0,0,0,0,0,67,79,68,73,78,71,32,69,82,82,79,82,58,32,105,108,108,101,103,97,108,32,99,97,108,108,32,116,111,32,37,115,32,111,110,32,109,101,109,98,101,114,32,111,102,32,109,97,116,114,105,120,32,98,108,111,99,107,10,0,0,0,0,0,118,99,118,95,105,110,102,111,0,0,0,0,0,0,0,0,99,111,101,102,102,115,101,112,0,0,0,0,0,0,0,0,97,108,112,104,97,40,37,100,41,0,0,0,0,0,0,0,117,110,107,110,111,119,110,0,97,114,105,109,97,95,100,0,97,114,105,109,97,95,68,0,97,114,109,97,95,80,0,0,97,114,109,97,95,81,0,0,121,110,111,0,0,0,0,0,114,101,115,116,114,105,99,116,101,100,0,0,0,0,0,0,100,102,110,0,0,0,0,0,100,102,100,0,0,0,0,0,92,112,97,114,32,92,113,108,32,0,0,0,0,0,0,0,65,115,121,109,112,116,111,116,105,99,32,116,101,115,116,32,115,116,97,116,105,115,116,105,99,0,0,0,0,0,0,0,84,101,115,116,32,115,116,97,116,105,115,116,105,99,0,0,10,32,32,37,115,58,32,37,115,10,0,0,0,0,0,0,92,92,10,92,113,117,97,100,32,37,115,58,32,37,115,92,92,10,0,0,0,0,0,0,92,112,97,114,10,32,37,115,58,32,37,115,92,112,97,114,10,0,0,0,0,0,0,0,119,105,116,104,32,97,115,121,109,112,116,111,116,105,99,32,112,45,118,97,108,117,101,0,119,105,116,104,32,112,45,118,97,108,117,101,0,0,0,0,32,32,37,115,32,61,32,37,115,10,10,0,0,0,0,0,92,113,117,97,100,32,37,115,32,61,32,37,115,92,92,10,0,0,0,0,0,0,0,0,32,37,115,32,61,32,37,115,92,112,97,114,10,10,0,0,37,103,32,112,101,114,99,101,110,116,32,99,114,105,116,105,99,97,108,32,118,97,108,117,101,0,0,0,0,0,0,0,32,32,40,37,115,32,61,32,37,46,50,102,41,10,10,0,92,113,117,97,100,32,40,37,115,32,61,32,37,46,50,102,41,92,92,10,0,0,0,0,32,40,37,115,32,61,32,37,46,50,102,41,92,112,97,114,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,34,37,115,44,32,37,115,34,10,0,0,0,0,0,0,0,34,37,115,34,10,0,0,0,34,37,115,34,37,99,34,37,115,34,10,0,0,0,0,0,112,97,114,97,109,101,116,101,114,0,0,0,0,0,0,0,34,37,115,34,37,99,37,100,10,0,0,0,0,0,0,0,100,102,0,0,0,0,0,0,108,97,103,32,111,114,100,101,114,0,0,0,0,0,0,0,34,37,115,34,37,99,37,46,49,53,103,10,0,0,0,0,116,101,115,116,32,115,116,97,116,105,115,116,105,99,0,0,112,45,118,97,108,117,101,0,34,37,115,34,37,99,37,103,10,0,0,0,0,0,0,0,115,113,117,97,114,101,115,32,111,110,108,121,0,0,0,0,99,117,98,101,115,32,111,110,108,121,0,0,0,0,0,0,114,111,98,117,115,116,32,118,97,114,105,97,110,116,0,0,144,60,0,0,0,0,0,0,68,105,115,116,114,105,98,117,116,105,111,110,32,102,114,101,101,32,87,97,108,100,32,116,101,115,116,32,102,111,114,32,104,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,0,0,0,0,0,0,0,0,0,0,16,62,0,0,48,62,0,0,1,0,0,0,88,62,0,0,120,62,0,0,2,0,0,0,152,62,0,0,200,62,0,0,3,0,0,0,224,62,0,0,24,63,0,0,21,0,0,0,48,63,0,0,104,63,0,0,4,0,0,0,136,63,0,0,176,63,0,0,5,0,0,0,200,63,0,0,24,63,0,0,6,0,0,0,232,63,0,0,32,64,0,0,7,0,0,0,72,64,0,0,104,64,0,0,8,0,0,0,128,64,0,0,160,64,0,0,9,0,0,0,192,64,0,0,48,62,0,0,10,0,0,0,224,64,0,0,0,65,0,0,11,0,0,0,32,65,0,0,104,64,0,0,12,0,0,0,64,65,0,0,104,65,0,0,20,0,0,0,136,65,0,0,104,65,0,0,13,0,0,0,184,65,0,0,216,65,0,0,14,0,0,0,248,65,0,0,8,66,0,0,15,0,0,0,248,65,0,0,40,66,0,0,16,0,0,0,72,66,0,0,112,66,0,0,17,0,0,0,152,66,0,0,176,66,0,0,18,0,0,0,216,66,0,0,0,0,0,0,19,0,0,0,16,67,0,0,104,65,0,0,22,0,0,0,64,67,0,0,104,67,0,0,23,0,0,0,136,67,0,0,160,67,0,0,24,0,0,0,168,67,0,0,0,0,0,0,25,0,0,0,192,67,0,0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,101,115,116,32,102,111,114,32,97,100,100,105,116,105,111,110,32,111,102,32,118,97,114,105,97,98,108,101,115,0,0,112,97,114,97,109,101,116,101,114,115,32,97,114,101,32,122,101,114,111,32,102,111,114,32,116,104,101,32,118,97,114,105,97,98,108,101,115,0,0,0,84,101,115,116,32,102,111,114,32,65,82,67,72,32,111,102,32,111,114,100,101,114,32,37,115,0,0,0,0,0,0,0,110,111,32,65,82,67,72,32,101,102,102,101,99,116,32,105,115,32,112,114,101,115,101,110,116,0,0,0,0,0,0,0,76,77,32,116,101,115,116,32,102,111,114,32,97,117,116,111,99,111,114,114,101,108,97,116,105,111,110,32,117,112,32,116,111,32,111,114,100,101,114,32,37,115,0,0,0,0,0,0,110,111,32,97,117,116,111,99,111,114,114,101,108,97,116,105,111,110,0,0,0,0,0,0,67,104,111,119,32,116,101,115,116,32,102,111,114,32,115,116,114,117,99,116,117,114,97,108,32,98,114,101,97,107,32,97,116,32,111,98,115,101,114,118,97,116,105,111,110,32,37,115,0,0,0,0,0,0,0,0,110,111,32,115,116,114,117,99,116,117,114,97,108,32,98,114,101,97,107,0,0,0,0,0,67,104,111,119,32,116,101,115,116,32,102,111,114,32,115,116,114,117,99,116,117,114,97,108,32,100,105,102,102,101,114,101,110,99,101,32,119,105,116,104,32,114,101,115,112,101,99,116,32,116,111,32,37,115,0,0,110,111,32,115,116,114,117,99,116,117,114,97,108,32,100,105,102,102,101,114,101,110,99,101,0,0,0,0,0,0,0,0,67,85,83,85,77,32,116,101,115,116,32,102,111,114,32,112,97,114,97,109,101,116,101,114,32,115,116,97,98,105,108,105,116,121,0,0,0,0,0,0,110,111,32,99,104,97,110,103,101,32,105,110,32,112,97,114,97,109,101,116,101,114,115,0,81,76,82,32,116,101,115,116,32,102,111,114,32,115,116,114,117,99,116,117,114,97,108,32,98,114,101,97,107,0,0,0,76,105,107,101,108,105,104,111,111,100,32,114,97,116,105,111,32,116,101,115,116,32,102,111,114,32,103,114,111,117,112,119,105,115,101,32,104,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,0,0,116,104,101,32,117,110,105,116,115,32,104,97,118,101,32,97,32,99,111,109,109,111,110,32,101,114,114,111,114,32,118,97,114,105,97,110,99,101,0,0,78,111,110,45,108,105,110,101,97,114,105,116,121,32,116,101,115,116,32,40,108,111,103,115,41,0,0,0,0,0,0,0,114,101,108,97,116,105,111,110,115,104,105,112,32,105,115,32,108,105,110,101,97,114,0,0,84,101,115,116,32,102,111,114,32,110,111,114,109,97,108,105,116,121,32,111,102,32,114,101,115,105,100,117,97,108,0,0,101,114,114,111,114,32,105,115,32,110,111,114,109,97,108,108,121,32,100,105,115,116,114,105,98,117,116,101,100,0,0,0,84,101,115,116,32,102,111,114,32,111,109,105,115,115,105,111,110,32,111,102,32,118,97,114,105,97,98,108,101,115,0,0,82,69,83,69,84,32,116,101,115,116,32,102,111,114,32,115,112,101,99,105,102,105,99,97,116,105,111,110,0,0,0,0,115,112,101,99,105,102,105,99,97,116,105,111,110,32,105,115,32,97,100,101,113,117,97,116,101,0,0,0,0,0,0,0,78,111,110,45,108,105,110,101,97,114,105,116,121,32,116,101,115,116,32,40,115,113,117,97,114,101,115,41,0,0,0,0,87,104,105,116,101,39,115,32,116,101,115,116,32,102,111,114,32,104,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,0,0,0,0,0,104,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,32,110,111,116,32,112,114,101,115,101,110,116,0,0,66,114,101,117,115,99,104,45,80,97,103,97,110,32,116,101,115,116,32,102,111,114,32,104,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,0,0,0,0,0,0,0,83,97,114,103,97,110,32,111,118,101,114,45,105,100,101,110,116,105,102,105,99,97,116,105,111,110,32,116,101,115,116,0,97,108,108,32,105,110,115,116,114,117,109,101,110,116,115,32,97,114,101,32,118,97,108,105,100,0,0,0,0,0,0,0,72,97,117,115,109,97,110,32,116,101,115,116,0,0,0,0,79,76,83,32,101,115,116,105,109,97,116,101,115,32,97,114,101,32,99,111,110,115,105,115,116,101,110,116,0,0,0,0,71,76,83,32,101,115,116,105,109,97,116,101,115,32,97,114,101,32,99,111,110,115,105,115,116,101,110,116,0,0,0,0,84,101,115,116,32,102,111,114,32,100,105,102,102,101,114,105,110,103,32,103,114,111,117,112,32,105,110,116,101,114,99,101,112,116,115,0,0,0,0,0,84,104,101,32,103,114,111,117,112,115,32,104,97,118,101,32,97,32,99,111,109,109,111,110,32,105,110,116,101,114,99,101,112,116,0,0,0,0,0,0,66,114,101,117,115,99,104,45,80,97,103,97,110,32,116,101,115,116,0,0,0,0,0,0,86,97,114,105,97,110,99,101,32,111,102,32,116,104,101,32,117,110,105,116,45,115,112,101,99,105,102,105,99,32,101,114,114,111,114,32,61,32,48,0,87,97,108,100,32,116,101,115,116,32,102,111,114,32,106,111,105,110,116,32,115,105,103,110,105,102,105,99,97,110,99,101,32,111,102,32,116,105,109,101,32,100,117,109,109,105,101,115,0,0,0,0,0,0,0,0,80,101,115,97,114,97,110,45,84,97,121,108,111,114,32,116,101,115,116,32,102,111,114,32,104,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,0,0,0,0,0,0,84,101,115,116,32,111,102,32,99,111,109,109,111,110,32,102,97,99,116,111,114,32,114,101,115,116,114,105,99,116,105,111,110,0,0,0,0,0,0,0,114,101,115,116,114,105,99,116,105,111,110,32,105,115,32,97,99,99,101,112,116,97,98,108,101,0,0,0,0,0,0,0,84,101,115,116,32,111,102,32,105,110,100,101,112,101,110,100,101,110,99,101,0,0,0,0,114,104,111,32,61,32,48,0,76,82,32,116,101,115,116,32,102,111,114,32,114,104,111,32,61,32,48,0,0,0,0,0,74,111,105,110,116,32,116,101,115,116,32,111,110,32,110,97,109,101,100,32,114,101,103,114,101,115,115,111,114,115,0,0,36,80,36,40,36,92,99,104,105,94,50,40,37,100,41,32,62,36,32,37,103,41,32,61,32,37,103,0,0,0,0,0,80,40,37,115,40,37,100,41,32,62,32,37,103,41,32,61,32,37,103,0,0,0,0,0,67,104,105,45,115,113,117,97,114,101,0,0,0,0,0,0,36,80,36,40,36,70,40,37,100,44,32,37,100,41,32,62,36,32,37,103,41,32,61,32,37,103,0,0,0,0,0,0,80,40,70,40,37,100,44,32,37,100,41,32,62,32,37,103,41,32,61,32,37,103,0,0,80,40,70,40,37,100,44,37,100,41,32,62,32,37,103,41,32,61,32,37,103,0,0,0,36,80,36,40,36,116,95,123,37,100,125,32,62,36,32,37,103,41,32,61,32,37,103,0,80,40,116,40,37,100,41,32,62,32,37,103,41,32,61,32,37,103,0,0,0,0,0,0,78,65,0,0,0,0,0,0,37,103,0,0,0,0,0,0,76,77,32,61,32,37,103,0,36,70,40,37,100,44,32,37,100,41,36,32,61,32,37,103,0,0,0,0,0,0,0,0,70,40,37,100,44,32,37,100,41,32,61,32,37,103,0,0,109,97,120,32,36,92,99,104,105,94,50,40,37,100,41,36,32,61,32,37,103,32,40,37,115,41,0,0,0,0,0,0,99,104,105,45,115,113,117,97,114,101,40,37,100,41,32,61,32,37,103,32,97,116,32,111,98,115,101,114,118,97,116,105,111,110,32,37,115,0,0,0,76,77,70,32,61,32,37,103,0,0,0,0,0,0,0,0,72,97,114,118,101,121,45,45,67,111,108,108,105,101,114,32,36,116,40,37,100,41,36,32,61,32,37,103,0,0,0,0,72,97,114,118,101,121,45,67,111,108,108,105,101,114,32,116,40,37,100,41,32,61,32,37,103,0,0,0,0,0,0,0,36,92,99,104,105,94,50,40,50,41,36,32,61,32,37,103,0,0,0,0,0,0,0,0,37,115,40,50,41,32,61,32,37,103,0,0,0,0,0,0,36,92,99,104,105,94,50,40,37,100,41,36,32,61,32,78,65,32,40,37,115,41,0,0,102,97,105,108,101,100,0,0,36,92,99,104,105,94,50,40,37,100,41,36,32,61,32,37,103,0,0,0,0,0,0,0,37,115,40,37,100,41,32,61,32,78,65,32,40,37,115,41,0,0,0,0,0,0,0,0,37,115,40,37,100,41,32,61,32,37,103,0,0,0,0,0,36,122,36,32,61,32,37,103,0,0,0,0,0,0,0,0,122,32,61,32,37,103,0,0,32,45,0,0,0,0,0,0,10,32,32,37,115,58,32,0,78,117,108,108,32,104,121,112,111,116,104,101,115,105,115,0,92,92,10,92,113,117,97,100,32,37,115,58,32,0,0,0,36,92,114,104,111,32,61,32,48,36,0,0,0,0,0,0,92,112,97,114,10,32,37,115,58,32,0,0,0,0,0,0,10,32,32,32,32,0,0,0,92,92,10,32,92,113,113,117,97,100,32,0,0,0,0,0,92,112,97,114,10,32,32,32,32,0,0,0,0,0,0,0,112,70,0,0,120,70,0,0,136,70,0,0,0,0,0,0,32,40,37,115,41,0,0,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,97,114,109,97,95,100,101,112,118,97,114,95,112,111,115,10,0,0,0,0,0,0,117,95,37,100,0,0,0,0,117,116,94,50,40,45,37,100,41,0,0,0,0,0,0,0,121,101,97,114,0,0,0,0,112,101,114,105,111,100], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+13040);
/* memory initializer */ allocate([47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,82,69,84,76,95,80,76,85,71,73,78,95,80,65,84,72,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,108,105,98,0,0,103,114,101,116,108,45,103,116,107,50,47,0,0,0,0,0,120,49,51,0,0,0,0,0,103,114,101,116,108,95,112,114,105,110,116,95,110,101,119,58,32,110,101,101,100,115,32,97,32,102,105,108,101,110,97,109,101,10,0,0,0,0,0,0,64,105,110,105,116,0,0,0,92,92,10,0,0,0,0,0,92,112,97,114,10,0,0,0,119,98,0,0,0,0,0,0,37,115,112,114,110,116,109,112,46,88,88,88,88,88,88,0,119,0,0,0,0,0,0,0,103,114,101,116,108,100,105,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,111,116,100,105,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,111,114,107,100,105,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,110,117,112,108,111,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,49,50,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,49,50,97,100,105,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,114,97,109,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,114,97,109,111,100,105,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,101,97,116,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,104,101,108,108,100,105,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,98,105,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,108,105,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,107,103,100,105,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,239,127,255,255,255,255,255,255,239,127,255,255,255,255,255,255,239,127,37,115,32,116,101,115,116,0,112,45,118,97,108,117,101,32,102,111,114,32,37,115,32,116,101,115,116,0,0,0,0,0,108,111,103,45,108,105,107,101,108,105,104,111,111,100,32,102,111,114,32,37,115,32,116,101,115,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,67,0,0,0,0,0,0,176,60,105,103,97,109,0,0,0,0,105,110,99,98,101,116,0,0,0,0,0,0,0,0,48,67,0,0,0,0,0,0,176,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,82,69,84,76,95,77,80,95,66,73,84,83,0,0,0,102,111,114,99,101,95,104,99,0,0,0,0,0,0,0,0,101,99,104,111,0,0,0,0,99,115,118,95,100,105,103,105,116,115,0,0,0,0,0,0,109,101,115,115,97,103,101,115,0,0,0,0,0,0,0,0,119,97,114,110,105,110,103,115,0,0,0,0,0,0,0,0,102,111,114,99,101,95,100,101,99,112,111,105,110,116,0,0,104,97,108,116,95,111,110,95,101,114,114,111,114,0,0,0,109,97,120,95,118,101,114,98,111,115,101,0,0,0,0,0,108,98,102,103,115,0,0,0,112,99,115,101,0,0,0,0,104,97,99,95,112,114,101,119,104,105,116,101,110,0,0,0,115,118,100,0,0,0,0,0,115,104,101,108,108,95,111,107,0,0,0,0,0,0,0,0,117,115,101,95,99,119,100,0,102,99,112,0,0,0,0,0,115,107,105,112,95,109,105,115,115,105,110,103,0,0,0,0,82,95,102,117,110,99,116,105,111,110,115,0,0,0,0,0,82,95,108,105,98,0,0,0,98,102,103,115,95,114,105,99,104,97,114,100,115,111,110,0,100,112,100,115,116,121,108,101,0,0,0,0,0,0,0,0,117,115,101,95,100,99,109,116,0,0,0,0,0,0,0,0,111,112,101,110,109,112,0,0,104,117,103,101,0,0,0,0,98,102,103,115,95,116,111,108,101,114,0,0,0,0,0,0,98,102,103,115,95,109,97,120,103,114,97,100,0,0,0,0,98,104,104,104,95,116,111,108,101,114,0,0,0,0,0,0,110,108,115,95,116,111,108,101,114,0,0,0,0,0,0,0,113,115,95,98,97,110,100,119,105,100,116,104,0,0,0,0,110,97,100,97,114,119,97,116,95,116,114,105,109,0,0,0,100,101,102,97,117,108,116,0,104,111,114,105,122,111,110,0,103,97,114,99,104,95,118,99,118,0,0,0,0,0,0,0,97,114,109,97,95,118,99,118,0,0,0,0,0,0,0,0,104,97,99,95,107,101,114,110,101,108,0,0,0,0,0,0,104,99,95,118,101,114,115,105,111,110,0,0,0,0,0,0,118,101,99,109,95,110,111,114,109,0,0,0,0,0,0,0,111,112,116,105,109,105,122,101,114,0,0,0,0,0,0,0,111,112,116,105,109,95,115,116,101,112,108,101,110,0,0,0,98,102,103,115,95,109,97,120,105,116,101,114,0,0,0,0,98,102,103,115,95,118,101,114,98,115,107,105,112,0,0,0,98,104,104,104,95,109,97,120,105,116,101,114,0,0,0,0,103,109,109,95,109,97,120,105,116,101,114,0,0,0,0,0,108,98,102,103,115,95,109,101,109,0,0,0,0,0,0,0,98,111,111,116,114,101,112,0,108,111,111,112,95,109,97,120,105,116,101,114,0,0,0,0,114,113,95,109,97,120,105,116,101,114,0,0,0,0,0,0,100,101,98,117,103,0,0,0,98,108,97,115,95,109,110,107,95,109,105,110,0,0,0,0,111,109,112,95,109,110,107,95,109,105,110,0,0,0,0,0,109,112,95,109,110,107,95,109,105,110,0,0,0,0,0,0,111,109,112,95,110,117,109,95,116,104,114,101,97,100,115,0,115,105,109,100,95,107,95,109,97,120,0,0,0,0,0,0,115,105,109,100,95,109,110,95,109,105,110,0,0,0,0,0,102,100,106,97,99,95,113,117,97,108,105,116,121,0,0,0,108,105,98,115,101,116,95,103,101,116,95,100,111,117,98,108,101,58,32,117,110,114,101,99,111,103,110,105,122,101,100,32,118,97,114,105,97,98,108,101,32,39,37,115,39,10,0,0,103,97,114,99,104,95,114,111,98,117,115,116,95,118,99,118,0,0,0,0,0,0,0,0,128,56,1,0,0,0,0,0,247,255,255,255,0,0,0,0,108,105,98,115,101,116,95,103,101,116,95,105,110,116,58,32,117,110,114,101,99,111,103,110,105,122,101,100,32,118,97,114,105,97,98,108,101,32,39,37,115,39,10,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,108,105,98,115,101,116,95,103,101,116,95,98,111,111,108,58,32,117,110,114,101,99,111,103,110,105,122,101,100,32,118,97,114,105,97,98,108,101,32,39,37,115,39,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,65,0,0,0,0,0,0,71,82,69,84,76,95,85,83,69,95,83,86,68,0,0,0,71,82,69,84,76,95,85,83,69,95,76,66,70,71,83,0,71,82,69,84,76,95,75,69,69,80,95,71,79,73,78,71,0,0,0,0,0,0,0,0,100,97,105,108,121,95,114,101,112,97,99,107,0,0,0,0,109,105,115,115,111,98,115,0,119,116,95,100,117,109,109,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,105,108,100,114,101,116,104,45,45,76,117,0,0,0,0,72,105,108,100,114,101,116,104,45,76,117,0,0,0,0,0,80,114,97,105,115,45,45,87,105,110,115,116,101,110,0,0,80,114,97,105,115,45,87,105,110,115,116,101,110,0,0,0,67,111,99,104,114,97,110,101,45,45,79,114,99,117,116,116,0,0,0,0,0,0,0,0,67,111,99,104,114,97,110,101,45,79,114,99,117,116,116,0,97,114,109,97,120,0,0,0,65,82,77,65,88,0,0,0,97,114,105,109,97,95,100,0,97,114,105,109,97,95,68,0,65,82,73,77,65,0,0,0,65,82,77,65,0,0,0,0,112,111,111,108,101,100,0,0,80,111,111,108,101,100,32,79,76,83,0,0,0,0,0,0,70,105,120,101,100,45,101,102,102,101,99,116,115,0,0,0,82,97,110,100,111,109,45,101,102,102,101,99,116,115,32,40,71,76,83,41,0,0,0,0,105,116,101,114,115,0,0,0,77,97,120,105,109,117,109,32,76,105,107,101,108,105,104,111,111,100,0,0,0,0,0,0,87,76,83,0,0,0,0,0,66,101,116,119,101,101,110,45,103,114,111,117,112,115,0,0,115,116,101,112,0,0,0,0,50,45,115,116,101,112,32,65,114,101,108,108,97,110,111,45,66,111,110,100,0,0,0,0,49,45,115,116,101,112,32,65,114,101,108,108,97,110,111,45,66,111,110,100,0,0,0,0,50,45,115,116,101,112,32,100,121,110,97,109,105,99,32,112,97,110,101,108,0,0,0,0,49,45,115,116,101,112,32,100,121,110,97,109,105,99,32,112,97,110,101,108,0,0,0,0,50,45,115,116,101,112,32,71,77,77,0,0,0,0,0,0,73,116,101,114,97,116,101,100,32,71,77,77,0,0,0,0,49,45,115,116,101,112,32,71,77,77,0,0,0,0,0,0,111,114,100,101,114,101,100,0,79,114,100,101,114,101,100,32,76,111,103,105,116,0,0,0,109,117,108,116,105,110,111,109,0,0,0,0,0,0,0,0,77,117,108,116,105,110,111,109,105,97,108,32,76,111,103,105,116,0,0,0,0,0,0,0,76,111,103,105,116,0,0,0,82,97,110,100,111,109,45,101,102,102,101,99,116,115,32,112,114,111,98,105,116,0,0,0,79,114,100,101,114,101,100,32,80,114,111,98,105,116,0,0,80,114,111,98,105,116,0,0,84,119,111,45,115,116,101,112,32,72,101,99,107,105,116,0,77,76,32,72,101,99,107,105,116,0,0,0,0,0,0,0,114,113,0,0,0,0,0,0,81,117,97,110,116,105,108,101,32,101,115,116,105,109,97,116,101,115,0,0,0,0,0,0,76,65,68,0,0,0,0,0,76,73,77,76,0,0,0,0,84,83,76,83,0,0,0,0,78,101,103,97,116,105,118,101,32,66,105,110,111,109,105,97,108,32,49,0,0,0,0,0,78,101,103,97,116,105,118,101,32,66,105,110,111,109,105,97,108,0,0,0,0,0,0,0,68,117,114,97,116,105,111,110,32,40,101,120,112,111,110,101,110,116,105,97,108,41,0,0,68,117,114,97,116,105,111,110,32,40,108,111,103,45,108,111,103,105,115,116,105,99,41,0,68,117,114,97,116,105,111,110,32,40,108,111,103,45,110,111,114,109,97,108,41,0,0,0,68,117,114,97,116,105,111,110,32,40,87,101,105,98,117,108,108,41,0,0,0,0,0,0,114,101,115,116,114,105,99,116,101,100,0,0,0,0,0,0,82,101,115,116,114,105,99,116,101,100,32,79,76,83,0,0,112,97,110,101,108,95,98,107,95,102,97,105,108,101,100,0,97,115,121,0,0,0,0,0,118,99,118,95,105,110,102,111,0,0,0,0,0,0,0,0,37,115,32,61,32,37,103,44,32,37,115,32,61,32,37,102,10,10,0,0,0,0,0,0,83,83,82,0,0,0,0,0,82,45,115,113,117,97,114,101,100,0,0,0,0,0,0,0,119,116,95,100,117,109,109,121,0,0,0,0,0,0,0,0,109,101,116,104,111,100,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,82,101,97,108,32,32,73,109,97,103,105,110,97,114,121,32,32,32,32,77,111,100,117,108,117,115,32,32,70,114,101,113,117,101,110,99,121,0,0,0,136,127,0,0,0,0,0,0,37,56,115,37,51,100,37,49,55,46,52,102,37,49,49,46,52,102,37,49,49,46,52,102,37,49,49,46,52,102,10,0,208,127,0,0,0,0,0,0,32,32,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,248,127,0,0,0,0,0,0,37,115,58,10,10,0,0,0,65,110,97,108,121,115,105,115,32,111,102,32,86,97,114,105,97,110,99,101,0,0,0,0,83,117,109,32,111,102,32,115,113,117,97,114,101,115,0,0,100,102,0,0,0,0,0,0,77,101,97,110,32,115,113,117,97,114,101,0,0,0,0,0,10,10,0,0,0,0,0,0,82,101,103,114,101,115,115,105,111,110,0,0,0,0,0,0,32,37,42,103,32,37,42,100,32,37,42,115,10,0,0,0,117,110,100,101,102,105,110,101,100,0,0,0,0,0,0,0,32,37,42,103,32,37,42,100,32,37,42,103,10,0,0,0,82,101,115,105,100,117,97,108,0,0,0,0,0,0,0,0,84,111,116,97,108,0,0,0,10,32,32,82,94,50,32,61,32,37,103,32,47,32,37,103,32,61,32,37,46,54,102,10,0,0,0,0,0,0,0,0,32,32,70,40,37,100,44,32,37,100,41,32,37,115,10,10,0,0,0,0,0,0,0,0,32,32,70,40,37,100,44,32,37,100,41,32,61,32,37,103,32,47,32,37,103,32,40,37,115,41,10,10,0,0,0,0,32,32,70,40,37,100,44,32,37,100,41,32,61,32,37,103,32,47,32,37,103,32,61,32,37,103,32,0,0,0,0,0,91,37,115,32,37,46,51,103,93,10,10,0,0,0,0,0,112,45,118,97,108,117,101,0,91,37,115,32,37,46,52,102,93,10,10,0,0,0,0,0,32,0,0,0,0,0,0,0,92,112,97,114,32,92,113,108,32,92,116,97,98,32,37,115,32,61,32,37,103,10,0,0,34,37,115,34,37,99,37,46,49,53,103,10,0,0,0,0,226,136,146,0,0,0,0,0,37,46,42,103,0,0,0,0,100,105,115,99,114,101,116,101,95,97,99,116,95,112,114,101,100,0,0,0,0,0,0,0,99,111,114,114,101,99,116,0,37,115,32,61,32,37,100,32,40,37,46,49,102,37,37,41,10,0,0,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,99,97,115,101,115,32,39,99,111,114,114,101,99,116,108,121,32,112,114,101,100,105,99,116,101,100,39,0,0,0,102,88,98,0,0,0,0,0,102,40,98,101,116,97,39,120,41,32,37,115,32,61,32,37,46,51,102,10,0,0,0,0,97,116,32,109,101,97,110,32,111,102,32,105,110,100,101,112,101,110,100,101,110,116,32,118,97,114,115,0,0,0,0,0,37,115,58,32,37,115,40,37,100,41,32,61,32,37,103,32,91,37,46,52,102,93,10,0,76,105,107,101,108,105,104,111,111,100,32,114,97,116,105,111,32,116,101,115,116,0,0,0,67,104,105,45,115,113,117,97,114,101,0,0,0,0,0,0,92,112,97,114,32,123,92,115,117,112,101,114,32,42,125,37,115,10,0,0,0,0,0,0,69,118,97,108,117,97,116,101,100,32,97,116,32,116,104,101,32,109,101,97,110,0,0,0,92,112,97,114,32,37,115,32,61,32,37,100,32,40,37,46,49,102,37,37,41,10,0,0,92,112,97,114,32,102,40,98,101,116,97,39,120,41,32,37,115,32,61,32,37,46,51,102,10,0,0,0,0,0,0,0,92,112,97,114,32,37,115,58,32,37,115,40,37,100,41,32,61,32,37,103,32,91,37,46,52,102,93,10,0,0,0,0,92,98,101,103,105,110,123,99,101,110,116,101,114,125,10,36,94,42,36,37,115,10,92,101,110,100,123,99,101,110,116,101,114,125,10,0,0,0,0,0,92,118,115,112,97,99,101,123,49,101,109,125,10,92,98,101,103,105,110,123,114,97,103,103,101,100,114,105,103,104,116,125,10,0,0,0,0,0,0,0,37,115,32,61,32,37,100,32,40,37,46,49,102,32,37,115,41,92,92,10,0,0,0,0,78,117,109,98,101,114,32,111,102,32,99,97,115,101,115,32,96,99,111,114,114,101,99,116,108,121,32,112,114,101,100,105,99,116,101,100,39,0,0,0,112,101,114,99,101,110,116,0,37,115,58,32,36,92,99,104,105,94,50,40,37,100,41,36,32,61,32,37,46,51,102,32,91,37,46,52,102,93,92,92,10,0,0,0,0,0,0,0,92,101,110,100,123,114,97,103,103,101,100,114,105,103,104,116,125,10,0,0,0,0,0,0,65,99,116,117,97,108,0,0,80,114,101,100,105,99,116,101,100,0,0,0,0,0,0,0,37,42,100,32,32,32,37,42,100,10,0,0,0,0,0,0,32,48,32,32,37,42,100,32,32,32,37,42,100,10,0,0,49,32,32,37,42,100,32,32,32,37,42,100,10,0,0,0,10,92,118,115,112,97,99,101,123,49,101,120,125,10,0,0,92,112,97,114,10,0,0,0,108,114,95,100,102,0,0,0,116,111,116,111,98,115,0,0,37,115,58,32,37,100,10,0,84,111,116,97,108,32,111,98,115,101,114,118,97,116,105,111,110,115,0,0,0,0,0,0,37,115,58,32,37,100,32,40,37,46,49,102,37,37,41,10,0,0,0,0,0,0,0,0,67,101,110,115,111,114,101,100,32,111,98,115,101,114,118,97,116,105,111,110,115,0,0,0,92,112,97,114,32,92,113,108,32,92,116,97,98,32,37,115,58,32,37,100,10,0,0,0,92,112,97,114,32,92,113,108,32,92,116,97,98,32,37,115,58,32,37,100,32,40,37,46,49,102,37,37,41,10,0,0,37,115,58,32,37,100,32,92,92,10,0,0,0,0,0,0,37,115,58,32,37,100,32,40,37,46,49,102,92,37,37,41,32,92,92,10,0,0,0,0,114,111,111,116,115,0,0,0,97,114,109,97,95,80,0,0,97,114,109,97,95,81,0,0,37,115,10,37,115,10,0,0,10,92,118,115,112,97,99,101,123,49,101,109,125,10,10,0,92,98,101,103,105,110,123,116,97,98,117,108,97,114,125,123,108,108,114,114,114,114,114,125,10,0,0,0,0,0,0,0,38,32,38,32,38,32,37,115,32,38,32,37,115,32,38,32,37,115,32,38,32,37,115,32,92,92,32,92,104,108,105,110,101,10,0,0,0,0,0,0,82,101,97,108,0,0,0,0,73,109,97,103,105,110,97,114,121,0,0,0,0,0,0,0,77,111,100,117,108,117,115,0,70,114,101,113,117,101,110,99,121,0,0,0,0,0,0,0,10,92,112,97,114,10,123,92,116,114,111,119,100,32,92,116,114,113,99,32,92,116,114,103,97,112,104,51,48,92,116,114,108,101,102,116,45,51,48,92,116,114,114,104,50,54,50,92,99,101,108,108,120,53,48,48,92,99,101,108,108,120,49,53,48,48,92,99,101,108,108,120,50,57,48,48,92,99,101,108,108,120,52,51,48,48,92,99,101,108,108,120,53,55,48,48,92,99,101,108,108,120,55,49,48,48,10,92,105,110,116,98,108,0,0,0,0,0,0,0,92,113,114,32,92,99,101,108,108,32,92,113,99,32,92,99,101,108,108,32,92,113,99,32,123,92,105,32,37,115,125,92,99,101,108,108,32,92,113,99,32,123,92,105,32,37,115,125,92,99,101,108,108,32,92,113,99,32,123,92,105,32,37,115,125,92,99,101,108,108,32,92,113,99,32,123,92,105,32,37,115,125,92,99,101,108,108,32,92,105,110,116,98,108,32,92,114,111,119,10,0,0,0,0,65,82,0,0,0,0,0,0,65,82,32,40,115,101,97,115,111,110,97,108,41,0,0,0,77,65,0,0,0,0,0,0,77,65,32,40,115,101,97,115,111,110,97,108,41,0,0,0,37,115,10,10,0,0,0,0,92,101,110,100,123,116,97,98,117,108,97,114,125,10,0,0,125,10,0,0,0,0,0,0,82,111,111,116,0,0,0,0,38,32,37,115,32,38,32,37,100,32,38,32,36,37,46,52,102,36,32,38,32,36,37,46,52,102,36,32,38,32,36,37,46,52,102,36,32,38,32,36,37,46,52,102,36,32,92,92,32,0,0,0,0,0,0,0,92,104,108,105,110,101,10,0,92,116,114,111,119,100,32,92,116,114,113,99,32,92,116,114,103,97,112,104,51,48,92,116,114,108,101,102,116,45,51,48,92,116,114,114,104,50,54,50,92,99,101,108,108,120,53,48,48,92,99,101,108,108,120,49,53,48,48,92,99,101,108,108,120,50,57,48,48,92,99,101,108,108,120,52,51,48,48,92,99,101,108,108,120,53,55,48,48,92,99,101,108,108,120,55,49,48,48,10,92,105,110,116,98,108,0,0,0,0,0,0,92,113,108,32,92,99,101,108,108,32,92,113,108,32,37,115,32,37,100,32,92,99,101,108,108,32,92,113,114,32,37,46,52,102,92,99,101,108,108,32,92,113,114,32,37,46,52,102,92,99,101,108,108,32,92,113,114,32,37,46,52,102,92,99,101,108,108,32,92,113,114,32,37,46,52,102,92,99,101,108,108,32,92,105,110,116,98,108,32,92,114,111,119,10,0,0,32,32,37,115,10,0,0,0,37,115,32,92,92,32,10,0,92,113,108,32,37,115,92,99,101,108,108,92,113,108,32,92,99,101,108,108,92,113,108,32,92,99,101,108,108,92,113,108,32,92,99,101,108,108,92,113,108,32,92,99,101,108,108,92,113,108,92,99,101,108,108,32,92,105,110,116,98,108,32,92,114,111,119,10,0,0,0,0,114,113,95,115,101,113,117,101,110,99,101,0,0,0,0,0,83,111,114,114,121,44,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,33,10,0,0,0,0,99,111,101,102,102,95,105,110,116,101,114,118,97,108,115,0,100,102,110,117,109,0,0,0,111,102,102,115,101,116,95,118,97,114,0,0,0,0,0,0,108,111,103,40,37,115,41,0,10,32,32,37,45,49,51,115,32,32,32,32,32,32,32,32,32,49,46,48,10,0,0,0,92,116,114,111,119,100,32,92,116,114,113,99,32,92,116,114,103,97,112,104,51,48,92,116,114,108,101,102,116,45,51,48,92,116,114,114,104,50,54,50,92,99,101,108,108,120,49,57,48,48,92,99,101,108,108,120,51,51,48,48,92,99,101,108,108,120,52,55,48,48,92,99,101,108,108,120,54,49,48,48,92,99,101,108,108,120,55,53,48,48,92,99,101,108,108,120,56,48,48,48,10,92,105,110,116,98,108,0,0,0,0,0,92,113,108,32,37,115,92,99,101,108,108,92,113,99,32,49,46,48,92,99,101,108,108,0,92,113,99,32,92,99,101,108,108,92,113,99,32,92,99,101,108,108,32,92,113,99,32,92,99,101,108,108,32,92,105,110,116,98,108,32,92,114,111,119,10,0,0,0,0,0,0,0,123,92,114,109,32,37,115,125,32,38,32,92,109,117,108,116,105,99,111,108,117,109,110,123,49,125,123,99,125,123,49,46,48,125,32,92,92,10,0,0,97,114,99,104,95,99,111,101,102,102,0,0,0,0,0,0,97,114,99,104,95,115,100,101,114,114,0,0,0,0,0,0,97,114,99,104,95,111,114,100,101,114,0,0,0,0,0,0,36,92,97,108,112,104,97,95,37,100,36,0,0,0,0,0,97,108,112,104,97,40,37,100,41,0,0,0,0,0,0,0,36,92,104,97,116,123,117,125,95,123,116,45,37,100,125,36,0,0,0,0,0,0,0,0,37,115,32,38,10,32,32,37,115,32,38,10,32,32,32,32,37,115,32,38,10,32,32,32,32,32,32,37,115,32,38,10,32,32,32,32,32,32,32,32,37,115,32,92,92,10,0,0,92,113,108,32,117,40,45,37,100,41,92,99,101,108,108,0,32,92,113,99,32,37,46,52,102,92,99,101,108,108,0,0,32,92,113,99,32,37,115,92,99,101,108,108,0,0,0,0,32,92,113,108,32,42,42,42,92,99,101,108,108,0,0,0,32,92,113,108,32,42,42,92,99,101,108,108,0,0,0,0,32,92,113,108,32,42,92,99,101,108,108,0,0,0,0,0,32,92,113,108,32,92,99,101,108,108,0,0,0,0,0,0,32,92,105,110,116,98,108,32,92,114,111,119,10,0,0,0,60,37,46,53,102,0,0,0,37,46,53,102,0,0,0,0,34,37,115,34,0,0,0,0,37,99,34,37,115,34,0,0,37,99,37,46,49,53,103,0,37,99,37,46,49,53,103,10,0,0,0,0,0,0,0,0,37,99,34,37,115,34,10,0,117,110,107,110,111,119,110,0,92,116,114,111,119,100,32,92,116,114,113,99,32,92,116,114,103,97,112,104,51,48,92,116,114,108,101,102,116,45,51,48,92,116,114,114,104,50,54,50,92,99,101,108,108,120,49,57,48,48,92,99,101,108,108,120,51,51,48,48,92,99,101,108,108,120,52,55,48,48,92,99,101,108,108,120,54,49,48,48,10,92,105,110,116,98,108,0,92,113,108,32,37,115,92,99,101,108,108,0,0,0,0,0,10,32,32,0,0,0,0,0,32,32,0,0,0,0,0,0,92,92,32,91,45,56,112,116,93,10,0,0,0,0,0,0,92,109,117,108,116,105,99,111,108,117,109,110,123,37,100,125,123,99,125,123,37,115,125,32,92,92,91,49,101,120,93,10,0,0,0,0,0,0,0,0,92,92,32,10,0,0,0,0,92,116,114,111,119,100,32,92,116,114,113,99,32,92,116,114,103,97,112,104,51,48,92,116,114,108,101,102,116,45,51,48,92,116,114,114,104,50,54,50,92,99,101,108,108,120,56,48,48,48,10,92,105,110,116,98,108,0,0,0,0,0,0,0,92,113,99,32,37,115,0,0,92,99,101,108,108,92,105,110,116,98,108,92,114,111,119,10,0,0,0,0,0,0,0,0,10,34,37,115,34,10,0,0,100,102,112,118,97,108,0,0,115,108,111,112,101,115,0,0,32,37,115,58,10,0,0,0,37,115,32,92,92,91,49,101,120,93,10,0,0,0,0,0,92,113,108,32,37,115,0,0,36,122,36,0,0,0,0,0,122,0,0,0,0,0,0,0,36,116,36,45,114,97,116,105,111,0,0,0,0,0,0,0,116,45,114,97,116,105,111,0,37,99,34,37,115,34,37,99,34,37,115,34,10,0,0,0,99,111,101,102,102,105,99,105,101,110,116,0,0,0,0,0,115,116,100,46,32,101,114,114,111,114,0,0,0,0,0,0,37,99,34,37,115,34,37,99,34,37,115,34,37,99,34,37,115,34,37,99,34,37,115,34,10,0,0,0,0,0,0,0,115,108,111,112,101,32,97,116,32,109,101,97,110,0,0,0,101,115,116,105,109,97,116,101,0,0,0,0,0,0,0,0,37,99,34,37,115,34,37,99,34,37,115,34,37,99,34,37,115,34,10,0,0,0,0,0,108,111,119,101,114,0,0,0,117,112,112,101,114,0,0,0,116,97,117,0,0,0,0,0,69,115,116,105,109,97,116,101,0,0,0,0,0,0,0,0,67,111,101,102,102,105,99,105,101,110,116,0,0,0,0,0,76,111,119,101,114,0,0,0,85,112,112,101,114,0,0,0,83,116,100,46,92,32,69,114,114,111,114,0,0,0,0,0,83,116,100,46,32,69,114,114,111,114,0,0,0,0,0,0,83,108,111,112,101,0,0,0,92,116,114,111,119,100,32,92,116,114,113,99,32,92,116,114,103,97,112,104,51,48,92,116,114,108,101,102,116,45,51,48,92,116,114,114,104,50,54,50,92,99,101,108,108,120,49,57,48,48,92,99,101,108,108,120,51,51,48,48,92,99,101,108,108,120,52,55,48,48,92,99,101,108,108,120,54,49,48,48,92,99,101,108,108,120,56,48,48,48,10,92,105,110,116,98,108,0,0,0,0,0,0,0,32,92,113,99,32,123,92,105,32,37,115,123,92,115,117,112,101,114,32,42,125,125,92,99,101,108,108,0,0,0,0,0,32,92,113,99,32,123,92,105,32,37,115,125,92,99,101,108,108,0,0,0,0,0,0,0,115,108,111,112,101,0,0,0,176,140,0,0,192,140,0,0,152,140,0,0,112,129,0,0,56,142,0,0,40,141,0,0,48,141,0,0,0,0,0,0,115,107,105,112,100,117,109,115,0,0,0,0,0,0,0,0,99,98,108,111,99,107,0,0,115,105,103,109,97,0,0,0,32,32,37,45,42,115,0,0,10,32,32,37,45,42,115,0,37,46,49,102,0,0,0,0,10,37,115,32,61,32,37,35,103,10,0,0,0,0,0,0,83,117,109,32,111,102,32,65,82,32,99,111,101,102,102,105,99,105,101,110,116,115,0,0,32,42,42,42,0,0,0,0,32,42,42,0,0,0,0,0,32,42,0,0,0,0,0,0,121,118,97,108,115,0,0,0,37,115,32,61,32,37,100,0,176,140,0,0,192,140,0,0,32,78,65,0,0,0,0,0,36,45,36,37,46,49,53,69,0,0,0,0,0,0,0,0,37,46,49,53,69,0,0,0,69,45,0,0,0,0,0,0,69,45,45,37,115,0,0,0,226,136,146,37,46,49,53,69,0,0,0,0,0,0,0,0,37,32,46,49,53,69,0,0,114,113,95,116,97,117,118,101,99,0,0,0,0,0,0,0,56,141,0,0,176,140,0,0,40,141,0,0,48,141,0,0,192,140,0,0,152,140,0,0,37,103,0,0,0,0,0,0,32,37,45,42,115,0,0,0,32,32,37,45,42,115,32,32,0,0,0,0,0,0,0,0,37,46,42,102,32,32,37,35,49,50,46,54,103,32,37,35,49,50,46,54,103,32,37,35,49,50,46,54,103,10,0,0,10,92,101,110,100,123,99,101,110,116,101,114,125,10,0,0,10,92,101,110,100,123,100,111,99,117,109,101,110,116,125,10,0,0,0,0,0,0,0,0,10,125,10,0,0,0,0,0,92,118,115,112,97,99,101,123,49,101,120,125,10,0,0,0,87,101,97,107,32,105,110,115,116,114,117,109,101,110,116,32,116,101,115,116,0,0,0,0,115,116,97,103,101,49,45,70,0,0,0,0,0,0,0,0,103,109,105,110,0,0,0,0,37,115,32,45,32,10,0,0,37,115,32,45,45,32,92,92,10,0,0,0,0,0,0,0,37,115,32,45,32,92,112,97,114,10,0,0,0,0,0,0,115,116,97,103,101,49,45,100,102,110,0,0,0,0,0,0,115,116,97,103,101,49,45,100,102,100,0,0,0,0,0,0,32,32,37,115,32,40,37,100,44,32,37,100,41,32,61,32,37,46,42,103,10,0,0,0,70,105,114,115,116,45,115,116,97,103,101,32,70,45,115,116,97,116,105,115,116,105,99,0,92,113,117,97,100,32,70,105,114,115,116,45,115,116,97,103,101,32,36,70,40,37,100,44,32,37,100,41,36,32,61,32,37,115,32,92,92,10,0,0,32,32,37,115,32,40,37,100,44,32,37,100,41,32,61,32,37,103,10,0,0,0,0,0,32,32,37,115,32,61,32,37,46,42,103,10,0,0,0,0,67,114,97,103,103,45,68,111,110,97,108,100,32,109,105,110,105,109,117,109,32,101,105,103,101,110,118,97,108,117,101,0,92,113,117,97,100,32,32,37,115,32,61,32,37,115,32,92,92,10,0,0,0,0,0,0,67,114,97,103,103,45,45,68,111,110,97,108,100,32,109,105,110,105,109,117,109,32,101,105,103,101,110,118,97,108,117,101,0,0,0,0,0,0,0,0,32,32,37,115,32,61,32,37,103,10,0,0,0,0,0,0,110,0,0,0,0,0,0,0,75,50,0,0,0,0,0,0,32,32,37,115,10,10,0,0,65,32,118,97,108,117,101,32,60,32,49,48,32,109,97,121,32,105,110,100,105,99,97,116,101,32,119,101,97,107,32,105,110,115,116,114,117,109,101,110,116,115,0,0,0,0,0,0,67,114,105,116,105,99,97,108,32,118,97,108,117,101,115,32,102,111,114,32,84,83,76,83,32,98,105,97,115,32,114,101,108,97,116,105,118,101,32,116,111,32,79,76,83,58,10,0,67,114,105,116,105,99,97,108,32,118,97,108,117,101,115,32,102,111,114,32,100,101,115,105,114,101,100,32,76,73,77,76,32,109,97,120,105,109,97,108,32,115,105,122,101,44,32,119,104,101,110,32,114,117,110,110,105,110,103,10,32,32,116,101,115,116,115,32,97,116,32,97,32,110,111,109,105,110,97,108,32,53,37,32,115,105,103,110,105,102,105,99,97,110,99,101,32,108,101,118,101,108,58,10,0,0,0,0,0,0,0,0,67,114,105,116,105,99,97,108,32,118,97,108,117,101,115,32,102,111,114,32,100,101,115,105,114,101,100,32,84,83,76,83,32,109,97,120,105,109,97,108,32,115,105,122,101,44,32,119,104,101,110,32,114,117,110,110,105,110,103,10,32,32,116,101,115,116,115,32,97,116,32,97,32,110,111,109,105,110,97,108,32,53,37,32,115,105,103,110,105,102,105,99,97,110,99,101,32,108,101,118,101,108,58,10,0,0,0,0,0,0,0,0,10,37,57,115,0,0,0,0,98,105,97,115,0,0,0,0,115,105,122,101,0,0,0,0,37,56,103,37,37,0,0,0,118,97,108,117,101,0,0,0,37,57,46,50,102,0,0,0,10,10,32,32,0,0,0,0,82,101,108,97,116,105,118,101,32,98,105,97,115,32,105,115,32,112,114,111,98,97,98,108,121,32,108,101,115,115,32,116,104,97,110,32,37,103,37,37,0,0,0,0,0,0,0,0,77,97,120,105,109,97,108,32,115,105,122,101,32,105,115,32,112,114,111,98,97,98,108,121,32,108,101,115,115,32,116,104,97,110,32,37,103,37,37,0,82,101,108,97,116,105,118,101,32,98,105,97,115,32,109,97,121,32,101,120,99,101,101,100,32,37,103,37,37,0,0,0,77,97,120,105,109,97,108,32,115,105,122,101,32,109,97,121,32,101,120,99,101,101,100,32,37,103,37,37,0,0,0,0,115,116,111,99,107,95,121,111,103,111,95,108,111,111,107,117,112,0,0,0,0,0,0,0,69,120,99,108,117,100,105,110,103,32,116,104,101,32,99,111,110,115,116,97,110,116,44,32,112,45,118,97,108,117,101,32,119,97,115,32,104,105,103,104,101,115,116,32,102,111,114,32,118,97,114,105,97,98,108,101,32,37,100,32,40,37,115,41,0,0,0,0,0,0,0,0,80,45,118,97,108,117,101,32,119,97,115,32,104,105,103,104,101,115,116,32,102,111,114,32,118,97,114,105,97,98,108,101,32,37,100,32,40,37,115,41,0,0,0,0,0,0,0,0,106,108,108,0,0,0,0,0,76,111,103,45,108,105,107,101,108,105,104,111,111,100,32,102,111,114,32,37,115,0,0,0,108,111,103,45,112,97,114,101,110,116,0,0,0,0,0,0,32,32,40,37,115,32,61,32,37,115,41,10,0,0,0,0,37,115,32,61,32,37,115,10,10,0,0,0,0,0,0,0,49,47,115,105,103,109,97,32,61,32,37,103,32,40,37,103,41,10,0,0,0,0,0,0,111,118,101,114,100,105,115,112,0,0,0,0,0,0,0,0,83,97,114,103,97,110,32,111,118,101,114,45,105,100,101,110,116,105,102,105,99,97,116,105,111,110,32,116,101,115,116,0,87,97,108,100,32,40,106,111,105,110,116,41,32,116,101,115,116,0,0,0,0,0,0,0,87,97,108,100,32,40,116,105,109,101,32,100,117,109,109,105,101,115,41,0,0,0,0,0,74,32,116,101,115,116,0,0,79,118,101,114,100,105,115,112,101,114,115,105,111,110,32,116,101,115,116,0,0,0,0,0,120,148,0,0,152,148,0,0,176,148,0,0,200,148,0,0,208,148,0,0,0,0,0,0,83,97,114,103,97,110,32,116,101,115,116,0,0,0,0,0,0,149,0,0,152,148,0,0,176,148,0,0,200,148,0,0,208,148,0,0,0,0,0,0,115,97,114,103,97,110,95,100,102,0,0,0,0,0,0,0,119,97,108,100,95,100,102,0,119,97,108,100,95,116,105,109,101,95,100,102,0,0,0,0,74,95,100,102,0,0,0,0,37,115,58,32,0,0,0,0,32,36,92,99,104,105,94,50,40,37,100,41,36,32,61,32,78,65,0,0,0,0,0,0,37,115,40,37,100,41,32,61,32,78,65,0,0,0,0,0,32,36,92,99,104,105,94,50,40,37,100,41,36,32,61,32,37,103,32,91,37,46,52,102,93,0,0,0,0,0,0,0,37,115,40,37,100,41,32,61,32,37,103,32,91,37,46,52,102,93,0,0,0,0,0,0,76,101,102,116,45,117,110,98,111,117,110,100,101,100,32,111,98,115,101,114,118,97,116,105,111,110,115,0,0,0,0,0,82,105,103,104,116,45,117,110,98,111,117,110,100,101,100,32,111,98,115,101,114,118,97,116,105,111,110,115,0,0,0,0,66,111,117,110,100,101,100,32,111,98,115,101,114,118,97,116,105,111,110,115,0,0,0,0,80,111,105,110,116,32,111,98,115,101,114,118,97,116,105,111,110,115,0,0,0,0,0,0,80,115,101,117,100,111,45,112,111,105,110,116,32,111,98,115,101,114,118,97,116,105,111,110,115,0,0,0,0,0,0,0,192,149,0,0,224,149,0,0,0,150,0,0,24,150,0,0,48,150,0,0,0,0,0,0,110,95,108,101,102,116,0,0,110,95,114,105,103,104,116,0,110,95,98,111,116,104,0,0,110,95,112,111,105,110,116,0,110,95,102,112,111,105,110,116,0,0,0,0,0,0,0,0,76,101,102,116,45,99,101,110,115,111,114,101,100,32,111,98,115,101,114,118,97,116,105,111,110,115,0,0,0,0,0,0,82,105,103,104,116,45,99,101,110,115,111,114,101,100,32,111,98,115,101,114,118,97,116,105,111,110,115,0,0,0,0,0,108,108,105,109,105,116,0,0,32,40,37,115,32,36,92,108,101,36,32,37,103,41,0,0,32,40,37,115,32,60,61,32,37,103,41,0,0,0,0,0,114,108,105,109,105,116,0,0,32,40,37,115,32,36,92,103,101,36,32,37,103,41,0,0,32,40,37,115,32,62,61,32,37,103,41,0,0,0,0,0,115,101,95,115,105,103,109,97,0,0,0,0,0,0,0,0,37,115,32,61,32,37,46,42,103,0,0,0,0,0,0,0,32,40,37,103,41,0,0,0,37,115,58,32,37,100,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,112,97,114,32,92,113,108,32,92,116,97,98,32,37,115,32,61,32,37,103,0,0,0,92,112,97,114,32,92,113,108,32,92,116,97,98,32,37,115,58,32,37,100,37,115,10,0,36,92,104,97,116,123,92,115,105,103,109,97,125,36,32,61,32,37,103,0,0,0,0,0,32,92,92,10,0,0,0,0,37,115,58,32,37,100,37,115,32,92,92,10,0,0,0,0,37,115,37,99,37,46,49,53,103,10,0,0,0,0,0,0,34,37,115,34,37,99,37,100,10,0,0,0,0,0,0,0,97,100,100,99,111,110,115,116,0,0,0,0,0,0,0,0,10,10,37,115,10,0,0,0,87,65,82,78,73,78,71,58,32,84,104,101,32,99,111,110,115,116,97,110,116,32,119,97,115,32,112,114,101,115,101,110,116,32,97,109,111,110,103,32,116,104,101,32,114,101,103,114,101,115,115,111,114,115,32,98,117,116,32,110,111,116,32,97,109,111,110,103,32,116,104,101,10,105,110,115,116,114,117,109,101,110,116,115,44,32,115,111,32,105,116,32,104,97,115,32,98,101,101,110,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,97,100,100,101,100,32,116,111,32,116,104,101,32,105,110,115,116,114,117,109,101,110,116,32,108,105,115,116,46,10,84,104,105,115,32,98,101,104,97,118,105,111,114,32,109,97,121,32,99,104,97,110,103,101,32,105,110,32,102,117,116,117,114,101,32,118,101,114,115,105,111,110,115,44,32,115,111,32,121,111,117,32,109,97,121,32,119,97,110,116,32,116,111,32,97,100,106,117,115,116,32,121,111,117,114,10,115,99,114,105,112,116,115,32,97,99,99,111,114,100,105,110,103,108,121,46,10,0,0,0,0,0,0,92,98,101,103,105,110,123,116,97,98,117,108,97,114,125,123,108,108,125,10,0,0,0,0,110,105,110,115,116,0,0,0,78,117,109,98,101,114,32,111,102,32,105,110,115,116,114,117,109,101,110,116,115,32,61,32,37,100,0,0,0,0,0,0,65,82,49,0,0,0,0,0,65,82,50,0,0,0,0,0,115,97,114,103,97,110,0,0,119,97,108,100,0,0,0,0,119,97,108,100,95,116,105,109,101,0,0,0,0,0,0,0,84,101,115,116,32,102,111,114,32,65,82,40,37,100,41,32,101,114,114,111,114,115,58,0,32,38,32,36,122,36,32,61,32,78,65,0,0,0,0,0,32,122,32,61,32,78,65,0,32,38,32,36,122,36,32,61,32,37,115,32,91,37,46,52,102,93,0,0,0,0,0,0,32,122,32,61,32,37,103,32,91,37,46,52,102,93,0,0,74,95,116,101,115,116,0,0,32,32,37,115,58,32,81,32,61,32,37,46,42,103,32,40,84,81,32,61,32,37,46,42,103,41,10,0,0,0,0,0,71,77,77,32,99,114,105,116,101,114,105,111,110,0,0,0,92,112,97,114,32,92,113,108,32,92,116,97,98,32,37,115,58,32,81,32,61,32,37,103,32,40,84,81,32,61,32,37,103,41,10,0,0,0,0,0,37,115,44,32,36,81,36,32,61,32,37,115,32,40,36,84,81,36,32,61,32,37,115,41,92,92,10,0,0,0,0,0,119,105,116,104,105,110,45,118,97,114,105,97,110,99,101,0,98,101,116,119,101,101,110,45,118,97,114,105,97,110,99,101,0,0,0,0,0,0,0,0,103,108,115,45,116,104,101,116,97,0,0,0,0,0,0,0,37,115,32,61,32,37,103,10,0,0,0,0,0,0,0,0,39,87,105,116,104,105,110,39,32,118,97,114,105,97,110,99,101,0,0,0,0,0,0,0,39,66,101,116,119,101,101,110,39,32,118,97,114,105,97,110,99,101,0,0,0,0,0,0,116,104,101,116,97,32,117,115,101,100,32,102,111,114,32,113,117,97,115,105,45,100,101,109,101,97,110,105,110,103,0,0,36,92,104,97,116,123,92,115,105,103,109,97,125,94,50,95,123,92,118,97,114,101,112,115,105,108,111,110,125,36,32,61,32,37,115,32,92,92,10,0,36,92,104,97,116,123,92,115,105,103,109,97,125,94,50,95,117,36,32,61,32,37,115,32,92,92,10,0,0,0,0,0,36,92,116,104,101,116,97,36,32,61,32,37,115,32,92,92,10,0,0,0,0,0,0,0,85,110,99,111,110,100,105,116,105,111,110,97,108,32,101,114,114,111,114,32,118,97,114,105,97,110,99,101,0,0,0,0,103,97,114,99,104,95,76,82,0,0,0,0,0,0,0,0,103,97,114,99,104,95,76,82,95,100,102,0,0,0,0,0,37,115,32,61,32,37,46,42,103,10,0,0,0,0,0,0,37,115,10,0,0,0,0,0,84,104,101,32,114,101,115,105,100,117,97,108,115,32,97,114,101,32,115,116,97,110,100,97,114,100,105,122,101,100], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+29608);
/* memory initializer */ allocate([37,115,58,10,0,0,0,0,76,105,107,101,108,105,104,111,111,100,32,114,97,116,105,111,32,116,101,115,116,32,102,111,114,32,40,71,41,65,82,67,72,32,116,101,114,109,115,0,32,32,37,115,40,37,100,41,32,61,32,37,103,32,91,37,103,93,10,0,0,0,0,0,37,115,32,61,32,37,103,32,92,92,10,0,0,0,0,0,108,109,105,110,0,0,0,0,105,100,102,0,0,0,0,0,37,115,32,61,32,37,103,92,92,10,0,0,0,0,0,0,83,109,97,108,108,101,115,116,32,101,105,103,101,110,118,97,108,117,101,0,0,0,0,0,37,115,58,32,36,92,99,104,105,94,50,40,37,100,41,36,32,61,32,37,103,32,91,37,46,52,102,93,32,92,92,10,0,0,0,0,0,0,0,0,76,82,32,111,118,101,114,45,105,100,101,110,116,105,102,105,99,97,116,105,111,110,32,116,101,115,116,0,0,0,0,0,37,115,40,37,100,41,32,61,32,37,103,32,91,37,46,52,102,93,10,10,0,0,0,0,69,113,117,97,116,105,111,110,32,105,115,32,106,117,115,116,32,105,100,101,110,116,105,102,105,101,100,0,0,0,0,0,36,92,104,97,116,123,92,115,105,103,109,97,125,95,117,36,32,61,32,37,46,53,102,10,0,0,0,0,0,0,0,0,115,105,103,109,97,95,117,32,61,32,37,103,10,0,0,0,36,92,104,97,116,123,92,114,104,111,125,36,32,61,32,36,45,36,37,46,53,102,10,0,36,92,104,97,116,123,92,114,104,111,125,36,32,61,32,37,46,53,102,10,0,0,0,0,114,104,111,32,61,32,37,103,10,0,0,0,0,0,0,0,110,111,116,101,32,111,110,32,109,111,100,101,108,32,115,116,97,116,105,115,116,105,99,115,32,97,98,98,114,101,118,105,97,116,105,111,110,115,32,104,101,114,101,0,0,0,0,0,77,101,97,110,32,100,101,112,101,110,100,101,110,116,32,118,97,114,0,0,0,0,0,0,83,46,68,46,32,100,101,112,101,110,100,101,110,116,32,118,97,114,0,0,0,0,0,0,83,117,109,32,115,113,117,97,114,101,100,32,114,101,115,105,100,0,0,0,0,0,0,0,83,46,69,46,32,111,102,32,114,101,103,114,101,115,115,105,111,110,0,0,0,0,0,0,65,100,106,117,115,116,101,100,32,82,45,115,113,117,97,114,101,100,0,0,0,0,0,0,70,45,115,116,97,116,105,115,116,105,99,0,0,0,0,0,80,45,118,97,108,117,101,40,70,41,0,0,0,0,0,0,76,111,103,45,108,105,107,101,108,105,104,111,111,100,0,0,65,107,97,105,107,101,32,99,114,105,116,101,114,105,111,110,0,0,0,0,0,0,0,0,83,99,104,119,97,114,122,32,99,114,105,116,101,114,105,111,110,0,0,0,0,0,0,0,72,97,110,110,97,110,45,81,117,105,110,110,0,0,0,0,114,104,111,0,0,0,0,0,68,117,114,98,105,110,45,87,97,116,115,111,110,0,0,0,96,157,0,0,120,157,0,0,144,157,0,0,168,157,0,0,96,127,0,0,192,157,0,0,216,157,0,0,232,157,0,0,248,157,0,0,8,158,0,0,32,158,0,0,56,158,0,0,72,158,0,0,80,158,0,0,36,82,94,50,36,0,0,0,65,100,106,117,115,116,101,100,32,36,82,94,50,36,0,0,80,45,118,97,108,117,101,40,36,70,36,41,0,0,0,0,72,97,110,110,97,110,45,45,81,117,105,110,110,0,0,0,36,92,104,97,116,123,92,114,104,111,125,36,0,0,0,0,68,117,114,98,105,110,45,45,87,97,116,115,111,110,0,0,36,70,40,37,100,44,32,37,100,41,36,0,0,0,0,0,76,83,68,86,32,70,40,37,100,44,32,37,100,41,0,0,70,40,37,100,44,32,37,100,41,0,0,0,0,0,0,0,37,115,40,37,100,41,0,0,117,110,99,101,110,116,101,114,101,100,0,0,0,0,0,0,85,110,99,101,110,116,101,114,101,100,32,36,82,94,50,36,0,0,0,0,0,0,0,0,85,110,99,101,110,116,101,114,101,100,32,82,45,115,113,117,97,114,101,100,0,0,0,0,67,101,110,116,101,114,101,100,32,36,82,94,50,36,0,0,67,101,110,116,101,114,101,100,32,82,45,115,113,117,97,114,101,100,0,0,0,0,0,0,99,101,110,116,101,114,101,100,45,82,50,0,0,0,0,0,77,99,70,97,100,100,101,110,32,36,82,94,50,36,0,0,77,99,70,97,100,100,101,110,32,82,45,115,113,117,97,114,101,100,0,0,0,0,0,0,76,83,68,86,32,36,82,94,50,36,0,0,0,0,0,0,76,83,68,86,32,82,45,115,113,117,97,114,101,100,0,0,87,105,116,104,105,110,32,36,82,94,50,36,0,0,0,0,87,105,116,104,105,110,32,82,45,115,113,117,97,114,101,100,0,0,0,0,0,0,0,0,77,101,97,110,32,111,102,32,105,110,110,111,118,97,116,105,111,110,115,0,0,0,0,0,109,101,97,110,95,101,114,114,111,114,0,0,0,0,0,0,83,46,68,46,32,111,102,32,105,110,110,111,118,97,116,105,111,110,115,0,0,0,0,0,77,101,100,105,97,110,32,100,101,112,101,110,100,46,32,118,97,114,0,0,0,0,0,0,121,109,101,100,105,97,110,0,83,117,109,32,97,98,115,111,108,117,116,101,32,114,101,115,105,100,0,0,0,0,0,0,108,97,100,115,117,109,0,0,36,92,104,97,116,123,92,115,105,103,109,97,125,36,0,0,108,100,101,112,118,97,114,0,68,117,114,98,105,110,39,115,32,36,104,36,0,0,0,0,68,117,114,98,105,110,39,115,32,104,0,0,0,0,0,0,101,115,115,95,111,114,105,103,0,0,0,0,0,0,0,0,115,105,103,109,97,95,111,114,105,103,0,0,0,0,0,0,92,98,101,103,105,110,123,116,97,98,117,108,97,114,125,123,108,114,125,10,0,0,0,0,92,98,101,103,105,110,123,116,97,98,117,108,97,114,125,123,108,114,108,114,125,10,0,0,92,112,97,114,10,123,0,0,37,45,50,48,115,37,115,32,32,32,37,45,50,48,115,37,115,10,0,0,0,0,0,0,92,101,110,100,123,116,97,98,117,108,97,114,125,10,10,0,125,10,10,0,0,0,0,0,37,115,32,38,32,37,115,32,92,92,10,37,115,32,38,32,37,115,32,92,92,10,0,0,37,115,32,38,32,37,115,32,38,32,37,115,32,38,32,37,115,32,92,92,10,0,0,0,92,116,114,111,119,100,32,92,116,114,113,99,32,92,116,114,103,97,112,104,51,48,92,116,114,108,101,102,116,45,51,48,92,116,114,114,104,50,54,50,92,99,101,108,108,120,50,53,48,48,92,99,101,108,108,120,54,48,48,48,10,0,0,0,92,105,110,116,98,108,92,113,108,32,37,115,92,99,101,108,108,92,113,114,32,37,115,92,99,101,108,108,92,105,110,116,98,108,92,114,111,119,10,0,92,116,114,111,119,100,32,92,116,114,113,99,32,92,116,114,103,97,112,104,51,48,92,116,114,108,101,102,116,45,51,48,92,116,114,114,104,50,54,50,92,99,101,108,108,120,50,53,48,48,92,99,101,108,108,120,51,56,48,48,92,99,101,108,108,120,52,50,48,48,92,99,101,108,108,120,54,55,48,48,92,99,101,108,108,120,56,48,48,48,10,0,0,0,0,0,92,105,110,116,98,108,92,113,108,32,37,115,92,99,101,108,108,92,113,114,32,37,115,92,99,101,108,108,32,92,113,99,32,92,99,101,108,108,92,113,108,32,37,115,92,99,101,108,108,92,113,114,32,37,115,92,99,101,108,108,92,105,110,116,98,108,92,114,111,119,10,0,34,37,115,34,37,99,37,115,37,99,34,37,115,34,37,99,37,115,10,0,0,0,0,0,32,32,37,37,45,37,100,115,32,32,37,37,115,10,32,32,37,37,45,37,100,115,32,32,37,37,115,10,0,0,0,0,37,37,45,37,100,115,37,37,115,32,32,32,37,37,45,37,100,115,37,37,115,10,0,0,78,65,0,0,0,0,0,0,37,46,49,53,103,0,0,0,37,57,100,0,0,0,0,0,37,57,115,0,0,0,0,0,37,57,46,54,102,0,0,0,37,46,48,102,0,0,0,0,37,35,46,51,103,0,0,0,37,56,46,54,102,0,0,0,37,35,46,50,103,0,0,0,37,56,46,42,102,0,0,0,32,226,136,146,0,0,0,0,36,45,36,0,0,0,0,0,32,45,0,0,0,0,0,0,45,0,0,0,0,0,0,0,67,97,110,39,116,32,109,97,107,101,32,99,111,109,112,97,99,116,32,109,111,100,101,108,32,115,116,97,116,115,32,116,97,98,108,101,32,45,45,32,116,104,101,32,109,97,120,10,108,101,110,103,116,104,32,116,114,97,110,115,108,97,116,101,100,32,115,116,114,105,110,103,32,105,115,32,37,100,32,99,104,97,114,115,44,32,115,104,111,117,108,100,32,98,101,32,60,32,50,51,10,0,0,0,111,102,102,101,110,100,105,110,103,32,115,116,114,105,110,103,58,32,39,37,115,39,32,45,62,10,32,39,37,115,39,10,0,0,0,0,0,0,0,0,77,101,97,110,32,111,102,32,100,101,112,101,110,100,101,110,116,32,118,97,114,105,97,98,108,101,0,0,0,0,0,0,83,116,97,110,100,97,114,100,32,100,101,118,105,97,116,105,111,110,32,111,102,32,100,101,112,46,32,118,97,114,46,0,83,117,109,32,111,102,32,115,113,117,97,114,101,100,32,114,101,115,105,100,117,97,108,115,0,0,0,0,0,0,0,0,83,116,97,110,100,97,114,100,32,101,114,114,111,114,32,111,102,32,116,104,101,32,114,101,103,114,101,115,115,105,111,110,0,0,0,0,0,0,0,0,85,110,97,100,106,117,115,116,101,100,32,82,45,115,113,117,97,114,101,100,0,0,0,0,65,107,97,105,107,101,32,105,110,102,111,114,109,97,116,105,111,110,32,99,114,105,116,101,114,105,111,110,0,0,0,0,83,99,104,119,97,114,122,32,66,97,121,101,115,105,97,110,32,99,114,105,116,101,114,105,111,110,0,0,0,0,0,0,72,97,110,110,97,110,45,81,117,105,110,110,32,73,110,102,111,114,109,97,116,105,111,110,32,67,114,105,116,101,114,105,111,110,0,0,0,0,0,0,224,163,0,0,0,164,0,0,32,164,0,0,64,164,0,0,104,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,164,0,0,160,164,0,0,192,164,0,0,0,0,0,0,0,0,0,0,83,116,97,116,105,115,116,105,99,115,32,98,97,115,101,100,32,111,110,32,116,104,101,32,111,114,105,103,105,110,97,108,32,100,97,116,97,0,0,0,83,116,97,116,105,115,116,105,99,115,32,98,97,115,101,100,32,111,110,32,116,104,101,32,119,101,105,103,104,116,101,100,32,100,97,116,97,0,0,0,83,116,97,116,105,115,116,105,99,115,32,98,97,115,101,100,32,111,110,32,116,104,101,32,114,104,111,45,100,105,102,102,101,114,101,110,99,101,100,32,100,97,116,97,0,0,0,0,83,116,97,116,105,115,116,105,99,115,32,98,97,115,101,100,32,111,110,32,116,104,101,32,116,114,97,110,115,102,111,114,109,101,100,32,100,97,116,97,0,0,0,0,0,0,0,0,32,165,0,0,72,165,0,0,112,165,0,0,160,165,0,0,92,118,115,112,97,99,101,123,49,101,109,125,37,115,58,10,10,0,0,0,0,0,0,0,34,37,115,34,10,0,0,0,92,112,97,114,32,92,113,99,10,37,115,58,10,10,0,0,66,80,76,77,0,0,0,0,10,37,115,58,32,76,77,32,61,32,37,102,44,10,0,0,84,101,115,116,32,115,116,97,116,105,115,116,105,99,0,0,37,115,32,61,32,80,40,37,115,40,37,100,41,32,62,32,37,102,41,32,61,32,37,102,10,10,0,0,0,0,0,0,119,105,116,104,32,112,45,118,97,108,117,101,0,0,0,0,92,112,97,114,32,92,113,108,10,37,115,58,32,76,77,32,61,32,37,102,44,10,0,0,37,115,32,61,32,36,80,36,40,36,92,99,104,105,94,50,40,37,100,41,36,32,62,32,37,102,41,32,61,32,37,102,10,10,0,0,0,0,0,0,69,120,112,108,97,105,110,101,100,32,115,117,109,32,111,102,32,115,113,117,97,114,101,115,0,0,0,0,0,0,0,0,10,37,115,58,32,84,82,94,50,32,61,32,37,102,44,10,0,0,0,0,0,0,0,0,92,112,97,114,32,92,113,108,10,37,115,58,32,84,82,123,92,115,117,112,101,114,32,50,125,32,61,32,37,102,44,10,0,0,0,0,0,0,0,0,10,37,115,58,32,36,84,82,94,50,36,32,61,32,37,102,44,10,0,0,0,0,0,0,10,37,115,58,32,72,69,84,95,49,32,61,32,124,37,102,124,32,47,32,37,102,32,61,32,37,102,44,10,0,0,0,37,115,32,61,32,50,32,42,32,80,40,122,32,62,32,37,102,41,32,61,32,37,46,51,103,10,10,0,0,0,0,0,92,112,97,114,32,92,113,108,10,37,115,58,32,72,69,84,95,49,32,61,32,37,102,44,10,0,0,0,0,0,0,0,10,37,115,58,32,11,101,114,98,124,72,69,84,95,49,124,32,61,32,37,102,44,10,0,37,115,32,61,32,36,50,32,9,105,109,101,115,32,80,36,40,36,122,36,32,62,32,37,102,41,32,61,32,37,102,10,10,0,0,0,0,0,0,0,32,32,37,115,32,61,32,37,102,10,0,0,0,0,0,0,65,73,67,0,0,0,0,0,66,73,67,0,0,0,0,0,72,81,67,0,0,0,0,0,208,167,0,0,216,167,0,0,224,167,0,0,0,0,0,0,32,32,37,115,58,32,37,103,0,0,0,0,0,0,0,0,101,103,45,114,101,115,105,100,115,0,0,0,0,0,0,0,110,101,97,114,45,115,105,110,103,117,108,97,114,0,0,0,87,97,114,110,105,110,103,58,32,100,97,116,97,32,109,97,116,114,105,120,32,99,108,111,115,101,32,116,111,32,115,105,110,103,117,108,97,114,105,116,121,33,0,0,0,0,0,0,66,71,95,111,114,100,101,114,0,0,0,0,0,0,0,0,84,101,115,116,32,102,111,114,32,65,82,67,72,32,111,102,32,111,114,100,101,114,32,37,100,0,0,0,0,0,0,0,37,115,32,37,100,58,32,0,69,113,117,97,116,105,111,110,0,0,0,0,0,0,0,0,10,37,115,32,37,100,58,32,0,0,0,0,0,0,0,0,34,37,115,58,34,10,0,0,10,37,115,58,10,0,0,0,10,37,115,58,32,0,0,0,34,37,115,32,37,100,58,32,0,0,0,0,0,0,0,0,77,111,100,101,108,0,0,0,37,115,44,32,117,115,105,110,103,32,111,98,115,101,114,118,97,116,105,111,110,115,32,37,115,37,115,37,115,0,0,0,37,115,44,32,111,98,115,46,32,37,115,37,115,37,115,0,45,45,0,0,0,0,0,0,37,115,58,32,37,100,0,0,77,105,115,115,105,110,103,32,111,114,32,105,110,99,111,109,112,108,101,116,101,32,111,98,115,101,114,118,97,116,105,111,110,115,32,100,114,111,112,112,101,100,0,0,0,0,0,0,110,95,105,110,99,108,117,100,101,100,95,117,110,105,116,115,0,0,0,0,0,0,0,0,84,109,105,110,0,0,0,0,84,109,97,120,0,0,0,0,37,115,44,32,117,115,105,110,103,32,37,100,32,111,98,115,101,114,118,97,116,105,111,110,115,0,0,0,0,0,0,0,85,115,105,110,103,32,78,101,114,108,111,118,101,39,115,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,0,0,73,110,99,108,117,100,101,100,32,37,100,32,99,114,111,115,115,45,115,101,99,116,105,111,110,97,108,32,117,110,105,116,115,0,0,0,0,0,0,0,84,105,109,101,45,115,101,114,105,101,115,32,108,101,110,103,116,104,32,61,32,37,100,0,84,105,109,101,45,115,101,114,105,101,115,32,108,101,110,103,116,104,58,32,109,105,110,105,109,117,109,32,37,100,44,32,109,97,120,105,109,117,109,32,37,100,0,0,0,0,0,0,73,110,99,108,117,100,105,110,103,32,101,113,117,97,116,105,111,110,115,32,105,110,32,108,101,118,101,108,115,0,0,0,72,45,109,97,116,114,105,120,32,97,115,32,112,101,114,32,79,120,47,68,80,68,0,0,37,115,58,32,37,115,0,0,68,101,112,101,110,100,101,110,116,32,118,97,114,105,97,98,108,101,0,0,0,0,0,0,36,92,104,97,116,123,117,125,36,0,0,0,0,0,0,0,117,104,97,116,0,0,0,0,36,92,104,97,116,123,117,125,94,50,36,0,0,0,0,0,117,104,97,116,94,50,0,0,115,99,97,108,101,100,32,37,115,32,40,75,111,101,110,107,101,114,32,114,111,98,117,115,116,32,118,97,114,105,97,110,116,41,0,0,0,0,0,0,115,99,97,108,101,100,32,37,115,0,0,0,0,0,0,0,36,117,95,116,94,50,36,0,117,116,94,50,0,0,0,0,92,118,101,114,98,33,37,115,33,0,0,0,0,0,0,0,36,92,116,97,117,36,32,61,32,37,103,0,0,0,0,0,116,97,117,32,61,32,37,103,0,0,0,0,0,0,0,0,83,101,108,101,99,116,105,111,110,32,118,97,114,105,97,98,108,101,0,0,0,0,0,0,36,92,114,104,111,36,32,61,32,37,103,0,0,0,0,0,114,104,111,32,61,32,37,103,0,0,0,0,0,0,0,0,113,117,97,100,112,111,105,110,116,115,0,0,0,0,0,0,85,115,105,110,103,32,37,100,32,113,117,97,100,114,97,116,117,114,101,32,112,111,105,110,116,115,0,0,0,0,0,0,92,92,10,0,0,0,0,0,65,108,108,111,119,105,110,103,32,102,111,114,32,103,114,111,117,112,119,105,115,101,32,104,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,0,0,0,0,0,0,0,87,101,105,103,104,116,115,32,98,97,115,101,100,32,111,110,32,112,101,114,45,117,110,105,116,32,101,114,114,111,114,32,118,97,114,105,97,110,99,101,115,0,0,0,0,0,0,0,86,97,114,105,97,98,108,101,32,117,115,101,100,32,97,115,32,119,101,105,103,104,116,0,36,49,47,92,104,97,116,123,92,115,105,103,109,97,125,95,116,36,0,0,0,0,0,0,49,47,115,105,103,109,97,0,36,92,104,97,116,123,92,114,104,111,125,36,32,61,32,37,103,10,0,0,0,0,0,0,114,104,111,95,105,110,0,0,36,92,104,97,116,123,121,125,32,61,32,37,103,32,47,32,40,49,32,43,32,101,94,123,45,88,92,104,97,116,123,92,98,101,116,97,125,125,41,36,10,0,0,0,0,0,0,0,108,109,97,120,0,0,0,0,121,104,97,116,32,61,32,37,103,32,47,32,40,49,32,43,32,101,120,112,40,45,88,42,98,41,41,10,0,0,0,0,105,110,115,116,95,100,114,111,112,108,105,115,116,0,0,0,122,101,114,111,108,105,115,116,0,0,0,0,0,0,0,0,100,114,111,112,108,105,115,116,0,0,0,0,0,0,0,0,37,115,32,37,100,10,0,0,87,101,105,103,104,116,32,118,97,114,32,105,115,32,97,32,100,117,109,109,121,32,118,97,114,105,97,98,108,101,44,32,101,102,102,101,99,116,105,118,101,32,111,98,115,32,61,0,104,101,115,115,45,101,114,114,111,114,0,0,0,0,0,0,87,97,114,110,105,110,103,58,32,99,111,117,108,100,110,39,116,32,99,111,109,112,117,116,101,32,110,117,109,101,114,105,99,97,108,32,72,101,115,115,105,97,110,0,0,0,0,0,110,111,110,45,112,100,45,104,101,115,115,0,0,0,0,0,87,97,114,110,105,110,103,58,32,110,111,110,45,112,100,32,72,101,115,115,105,97,110,32,40,98,117,116,32,115,116,105,108,108,32,110,111,110,115,105,110,103,117,108,97,114,41,0,110,111,110,117,110,105,113,117,101,0,0,0,0,0,0,0,87,97,114,110,105,110,103,58,32,115,111,108,117,116,105,111,110,32,105,115,32,112,114,111,98,97,98,108,121,32,110,111,116,32,117,110,105,113,117,101,0,0,0,0,0,0,0,0,79,109,105,116,116,101,100,32,100,117,101,32,116,111,32,101,120,97,99,116,32,99,111,108,108,105,110,101,97,114,105,116,121,58,0,0,0,0,0,0,32,37,115,0,0,0,0,0,32,37,100,0,0,0,0,0,79,109,105,116,116,101,100,32,98,101,99,97,117,115,101,32,97,108,108,32,118,97,108,117,101,115,32,119,101,114,101,32,122,101,114,111,58,0,0,0,82,101,100,117,110,100,97,110,116,32,105,110,115,116,114,117,109,101,110,116,115,58,0,0,73,110,115,116,114,117,109,101,110,116,101,100,0,0,0,0,73,110,115,116,114,117,109,101,110,116,115,0,0,0,0,0,72,174,0,0,88,174,0,0,101,110,100,111,108,105,115,116,0,0,0,0,0,0,0,0,112,114,105,110,116,95,105,118,114,101,103,95,105,110,115,116,114,117,109,101,110,116,115,58,32,98,97,100,32,118,97,114,110,117,109,32,37,100,10,0,37,115,32,0,0,0,0,0,110,111,110,101,63,63,0,0,36,92,68,101,108,116,97,36,37,115,0,0,0,0,0,0,100,95,37,49,51,115,0,0,108,111,118,97,114,0,0,0,104,105,118,97,114,0,0,0,76,111,119,101,114,32,108,105,109,105,116,0,0,0,0,0,44,32,37,115,58,32,37,115,0,0,0,0,0,0,0,0,85,112,112,101,114,32,108,105,109,105,116,0,0,0,0,0,36,0,0,0,0,0,0,0,40,49,45,76,41,0,0,0,40,49,45,76,41,94,50,0,40,49,45,76,94,115,41,0,40,49,45,76,94,115,41,94,50,0,0,0,0,0,0,0,40,49,45,76,115,41,0,0,40,49,45,76,115,41,94,50,0,0,0,0,0,0,0,0,97,114,109,97,95,102,108,97,103,115,0,0,0,0,0,0,69,115,116,105,109,97,116,101,100,32,117,115,105,110,103,32,88,45,49,51,45,65,82,73,77,65,0,0,0,0,0,0,69,115,116,105,109,97,116,101,100,32,117,115,105,110,103,32,88,45,49,50,45,65,82,73,77,65,0,0,0,0,0,0,32,40,0,0,0,0,0,0,101,120,97,99,116,32,77,76,0,0,0,0,0,0,0,0,99,111,110,100,105,116,105,111,110,97,108,32,77,76,0,0,41,10,0,0,0,0,0,0,69,115,116,105,109,97,116,101,100,32,117,115,105,110,103,32,108,101,97,115,116,32,115,113,117,97,114,101,115,0,0,0,61,32,77,76,69,0,0,0,69,115,116,105,109,97,116,101,100,32,117,115,105,110,103,32,75,97,108,109,97,110,32,102,105,108,116,101,114,0,0,0,69,115,116,105,109,97,116,101,100,32,117,115,105,110,103,32,66,72,72,72,32,109,101,116,104,111,100,0,0,0,0,0,49,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,72,145,0,0,72,176,0,0,32,40,36,37,115,36,32,61,32,37,100,41,0,0,0,0,32,40,37,115,32,61,32,37,100,41,0,0,0,0,0,0,71,111,100,102,114,101,121,32,40,49,57,57,52,41,32,116,101,115,116,32,102,111,114,32,97,117,116,111,99,111,114,114,101,108,97,116,105,111,110,32,117,112,32,116,111,32,111,114,100,101,114,32,37,100,0,0,71,111,100,102,114,101,121,32,40,49,57,57,52,41,32,116,101,115,116,32,102,111,114,32,102,105,114,115,116,45,111,114,100,101,114,32,97,117,116,111,99,111,114,114,101,108,97,116,105,111,110,0,0,0,0,0,66,114,101,117,115,99,104,45,71,111,100,102,114,101,121,32,116,101,115,116,32,102,111,114,32,97,117,116,111,99,111,114,114,101,108,97,116,105,111,110,32,117,112,32,116,111,32,111,114,100,101,114,32,37,100,0,66,114,101,117,115,99,104,45,71,111,100,102,114,101,121,32,116,101,115,116,32,102,111,114,32,102,105,114,115,116,45,111,114,100,101,114,32,97,117,116,111,99,111,114,114,101,108,97,116,105,111,110,0,0,0,0,65,117,120,105,108,105,97,114,121,32,114,101,103,114,101,115,115,105,111,110,32,102,111,114,32,110,111,110,45,108,105,110,101,97,114,105,116,121,32,116,101,115,116,32,40,115,113,117,97,114,101,100,32,116,101,114,109,115,41,0,0,0,0,0,65,117,120,105,108,105,97,114,121,32,114,101,103,114,101,115,115,105,111,110,32,102,111,114,32,110,111,110,45,108,105,110,101,97,114,105,116,121,32,116,101,115,116,32,40,108,111,103,32,116,101,114,109,115,41,0,65,117,120,105,108,105,97,114,121,32,114,101,103,114,101,115,115,105,111,110,32,102,111,114,32,97,100,100,101,100,32,118,97,114,105,97,98,108,101,115,0,0,0,0,0,0,0,0,87,104,105,116,101,39,115,32,116,101,115,116,32,102,111,114,32,104,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,0,0,0,0,0,32,40,37,115,41,0,0,0,115,113,117,97,114,101,115,32,111,110,108,121,0,0,0,0,66,114,101,117,115,99,104,45,80,97,103,97,110,32,116,101,115,116,32,102,111,114,32,104,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,0,0,0,0,0,0,0,80,101,115,97,114,97,110,45,84,97,121,108,111,114,32,116,101,115,116,32,102,111,114,32,104,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,0,0,0,0,0,0,65,117,103,109,101,110,116,101,100,32,114,101,103,114,101,115,115,105,111,110,32,102,111,114,32,67,104,111,119,32,116,101,115,116,0,0,0,0,0,0,67,111,105,110,116,101,103,114,97,116,105,110,103,32,114,101,103,114,101,115,115,105,111,110,32,45,45,32,0,0,0,0,67,111,105,110,116,101,103,114,97,116,105,110,103,32,114,101,103,114,101,115,115,105,111,110,32,45,32,0,0,0,0,0,65,117,103,109,101,110,116,101,100,32,68,105,99,107,101,121,45,45,70,117,108,108,101,114,32,114,101,103,114,101,115,115,105,111,110,0,0,0,0,0,65,117,103,109,101,110,116,101,100,32,68,105,99,107,101,121,45,70,117,108,108,101,114,32,114,101,103,114,101,115,115,105,111,110,0,0,0,0,0,0,68,105,99,107,101,121,45,45,70,117,108,108,101,114,32,114,101,103,114,101,115,115,105,111,110,0,0,0,0,0,0,0,68,105,99,107,101,121,45,70,117,108,108,101,114,32,114,101,103,114,101,115,115,105,111,110,0,0,0,0,0,0,0,0,75,80,83,83,32,114,101,103,114,101,115,115,105,111,110,0,65,117,120,105,108,105,97,114,121,32,114,101,103,114,101,115,115,105,111,110,32,102,111,114,32,82,69,83,69,84,32,115,112,101,99,105,102,105,99,97,116,105,111,110,32,116,101,115,116,0,0,0,0,0,0,0,71,114,111,117,112,119,105,115,101,32,104,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,0,0,0,0,65,117,103,109,101,110,116,101,100,32,114,101,103,114,101,115,115,105,111,110,32,102,111,114,32,99,111,109,109,111,110,32,102,97,99,116,111,114,32,116,101,115,116,0,0,0,0,0,34,10,0,0,0,0,0,0,58,0,0,0,0,0,0,0,92,98,101,103,105,110,123,99,101,110,116,101,114,125,10,0,123,92,114,116,102,49,92,112,97,114,10,92,113,99,32,0,92,112,97,114,10,92,113,99,32,0,0,0,0,0,0,0,67,111,110,118,101,114,103,101,110,99,101,32,97,99,104,105,101,118,101,100,32,97,102,116,101,114,32,37,100,32,105,116,101,114,97,116,105,111,110,115,10,0,0,0,0,0,0,0,102,110,99,111,117,110,116,0,103,114,99,111,117,110,116,0,70,117,110,99,116,105,111,110,32,101,118,97,108,117,97,116,105,111,110,115,58,32,37,100,10,0,0,0,0,0,0,0,69,118,97,108,117,97,116,105,111,110,115,32,111,102,32,103,114,97,100,105,101,110,116,58,32,37,100,10,0,0,0,0,110,95,99,108,117,115,116,101,114,115,0,0,0,0,0,0,83,116,97,110,100,97,114,100,32,101,114,114,111,114,115,32,99,108,117,115,116,101,114,101,100,32,98,121,32,37,100,32,118,97,108,117,101,115,32,111,102,32,37,115,0,0,0,0,67,108,117,115,116,101,114,101,100,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,0,0,0,0,0,82,111,98,117,115,116,32,40,72,65,67,41,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,0,0,66,101,99,107,45,75,97,116,122,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,0,0,0,0,0,66,101,99,107,45,45,75,97,116,122,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,0,0,0,0,83,116,97,110,100,97,114,100,32,101,114,114,111,114,115,32,98,97,115,101,100,32,111,110,32,72,101,115,115,105,97,110,0,0,0,0,0,0,0,0,83,116,97,110,100,97,114,100,32,101,114,114,111,114,115,32,98,97,115,101,100,32,111,110,32,73,110,102,111,114,109,97,116,105,111,110,32,77,97,116,114,105,120,0,0,0,0,0,83,116,97,110,100,97,114,100,32,101,114,114,111,114,115,32,98,97,115,101,100,32,111,110,32,79,117,116,101,114,32,80,114,111,100,117,99,116,115,32,109,97,116,114,105,120,0,0,81,77,76,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,0,0,0,66,111,108,108,101,114,115,108,101,118,45,45,87,111,111,108,100,114,105,100,103,101,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,66,111,108,108,101,114,115,108,101,118,45,87,111,111,108,100,114,105,100,103,101,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,0,87,97,114,110,105,110,103,58,32,99,111,117,108,100,32,110,111,116,32,99,111,109,112,117,116,101,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,0,0,0,0,66,97,114,116,108,101,116,116,32,107,101,114,110,101,108,0,80,97,114,122,101,110,32,107,101,114,110,101,108,0,0,0,81,83,32,107,101,114,110,101,108,0,0,0,0,0,0,0,208,182,0,0,224,182,0,0,240,182,0,0,0,0,0,0,72,65,67,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,44,32,98,97,110,100,119,105,100,116,104,32,37,46,50,102,0,0,0,0,0,72,65,67,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,44,32,98,97,110,100,119,105,100,116,104,32,37,100,0,0,0,0,0,0,0,32,40,37,115,0,0,0,0,44,32,37,115,0,0,0,0,112,114,101,119,104,105,116,101,110,101,100,0,0,0,0,0,37,115,44,32,37,115,37,115,72,67,37,100,37,115,0,0,72,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,45,114,111,98,117,115,116,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,0,0,0,0,0,118,97,114,105,97,110,116,0,32,40,106,97,99,107,107,110,105,102,101,41,0,0,0,0,65,115,121,109,112,116,111,116,105,99,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,99,111,109,112,117,116,101,32,66,101,99,107,45,75,97,116,122,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,0,0,0,114,113,95,110,105,100,0,0,114,113,95,97,108,112,104,97,0,0,0,0,0,0,0,0,87,105,116,104,32,114,111,98,117,115,116,32,37,103,32,112,101,114,99,101,110,116,32,99,111,110,102,105,100,101,110,99,101,32,105,110,116,101,114,118,97,108,115,0,0,0,0,0,87,105,116,104,32,37,103,32,112,101,114,99,101,110,116,32,99,111,110,102,105,100,101,110,99,101,32,105,110,116,101,114,118,97,108,115,0,0,0,0,82,111,98,117,115,116,32,40,115,97,110,100,119,105,99,104,41,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,0,0,0,0,0,0,0,65,115,121,109,112,116,111,116,105,99,32,115,116,97,110,100,97,114,100,32,101,114,114,111,114,115,32,97,115,115,117,109,105,110,103,32,73,73,68,32,101,114,114,111,114,115,0,0,37,115,0,0,0,0,0,0,79,76,83,0,0,0,0,0,87,76,83,32,40,65,82,67,72,41,0,0,0,0,0,0,72,101,116,101,114,111,115,107,101,100,97,115,116,105,99,105,116,121,45,99,111,114,114,101,99,116,101,100,0,0,0,0,72,105,103,104,45,80,114,101,99,105,115,105,111,110,32,79,76,83,0,0,0,0,0,0,84,111,98,105,116,0,0,0,72,101,99,107,105,116,0,0,80,111,105,115,115,111,110,0,68,117,114,97,116,105,111,110,0,0,0,0,0,0,0,0,78,76,83,0,0,0,0,0,77,76,0,0,0,0,0,0,71,77,77,0,0,0,0,0,76,111,103,105,115,116,105,99,0,0,0,0,0,0,0,0,71,65,82,67,72,0,0,0,73,110,116,101,114,118,97,108,32,101,115,116,105,109,97,116,101,115,0,0,0,0,0,0,68,121,110,97,109,105,99,32,112,97,110,101,108,0,0,0,66,105,118,97,114,105,97,116,101,32,112,114,111,98,105,116,0,0,0,0,0,0,0,0,65,114,101,108,108,97,110,111,45,45,66,111,110,100,0,0,65,114,101,108,108,97,110,111,45,66,111,110,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,32,0,0,0,0,0,37,115,32,101,114,114,111,114,32,40,97,114,103,32,61,32,37,103,41,10,0,0,0,0,104,186,0,0,120,186,0,0,128,186,0,0,144,186,0,0,160,186,0,0,176,186,0,0,200,186,0,0,232,186,0,0,37,115,32,101,114,114,111,114,10,0,0,0,0,0,0,0,110,111,32,101,114,114,111,114,0,0,0,0,0,0,0,0,100,111,109,97,105,110,0,0,115,105,110,103,117,108,97,114,105,116,121,0,0,0,0,0,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,117,110,100,101,114,102,108,111,119,0,0,0,0,0,0,0,116,111,116,97,108,32,108,111,115,115,32,111,102,32,112,114,101,99,105,115,105,111,110,0,112,97,114,116,105,97,108,32,108,111,115,115,32,111,102,32,112,114,101,99,105,115,105,111,110,0,0,0,0,0,0,0,117,110,107,110,111,119,110,0,136,93,55,30,191,53,35,64,127,6,158,78,170,129,86,64,183,53,180,188,2,112,161,64,144,239,114,60,83,91,187,64,220,19,66,164,9,37,235,64,186,166,239,63,230,199,64,64,238,58,198,20,221,74,128,64,18,253,128,230,82,242,177,64,10,124,1,1,64,25,214,64,103,245,200,157,108,14,232,64,121,100,79,162,36,235,240,61,136,52,54,70,215,13,226,63,196,109,197,222,83,218,29,64,102,186,173,172,143,81,72,64,247,32,224,169,170,144,104,64,88,207,100,194,143,115,128,64,216,52,116,108,58,52,141,64,42,151,214,33,53,14,144,64,179,255,232,93,72,108,129,64,204,35,124,253,213,116,42,64,101,115,225,254,66,173,85,64,13,97,111,36,1,47,118,64,208,65,246,2,171,125,142,64,81,113,164,252,162,127,156,64,255,244,250,218,172,140,161,64,226,237,146,1,167,226,153,64,214,66,196,96,72,108,129,64,98,155,66,80,215,13,226,63,166,197,184,235,230,103,244,63,26,167,54,244,129,19,20,64,12,12,221,88,14,164,24,64,14,150,24,151,147,163,29,64,103,3,71,10,184,212,7,64,33,206,23,9,144,21,2,64,253,76,216,33,197,202,34,64,77,44,5,127,16,25,40,64,245,127,156,149,217,20,49,64,193,38,99,170,202,55,35,64,144,45,182,90,222,243,10,64,110,100,116,114,105,0,0,0,45,20,94,14,79,251,77,192,217,237,161,158,17,128,88,64,186,219,6,136,144,86,76,192,253,193,215,59,206,220,43,64,126,202,246,142,159,211,243,191,249,116,32,210,149,69,255,63,182,229,23,132,130,180,18,64,212,129,11,53,14,151,85,64,95,54,194,86,206,46,108,192,255,203,233,168,83,8,105,64,217,183,141,231,97,130,84,192,99,117,4,193,173,207,47,64,213,205,191,250,220,238,242,191,6,39,246,31,147,13,4,64,219,142,60,154,199,56,16,64,130,121,213,146,109,134,63,64,191,127,166,66,215,148,76,64,169,27,238,16,78,10,70,64,62,70,255,147,178,94,45,64,161,191,108,122,57,126,1,64,119,150,141,68,233,243,193,191,199,65,99,238,21,241,161,191,143,231,203,108,222,24,76,191,27,212,59,161,90,143,47,64,111,41,238,137,4,178,70,64,28,70,140,34,154,168,68,64,69,216,135,157,199,21,46,64,32,186,60,168,133,9,4,64,50,2,219,205,12,51,194,191,29,179,109,69,78,127,163,191,30,6,125,121,191,148,78,191,116,213,147,231,232,230,9,64,11,120,39,195,49,169,27,64,172,176,43,243,174,130,15,64,12,154,231,24,28,84,245,63,81,38,94,243,69,202,201,63,77,53,105,144,80,86,137,63,18,24,206,232,178,195,51,63,52,34,12,76,41,76,198,62,249,143,88,48,172,204,58,62,40,232,139,86,218,24,24,64,22,56,210,170,77,112,13,64,0,98,175,42,71,8,246,63,155,60,214,95,167,173,203,63,139,199,182,173,39,124,139,63,3,41,255,101,43,127,53,63,247,204,246,243,140,67,200,62,61,107,118,184,229,41,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,114,101,116,108,95,111,98,106,101,99,116,95,117,110,114,101,102,58,32,37,112,58,32,98,97,100,32,111,98,106,101,99,116,32,116,121,112,101,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,120,99,101,108,95,105,109,112,111,114,116,0,0,0,0,120,108,115,120,95,105,109,112,111,114,116,0,0,0,0,0,103,110,117,109,101,114,105,99,95,105,109,112,111,114,116,0,111,100,115,95,105,109,112,111,114,116,0,0,0,0,0,0,106,111,104,97,110,115,101,110,0,0,0,0,0,0,0,0,118,105,102,0,0,0,0,0,108,101,118,101,114,97,103,101,0,0,0,0,0,0,0,0,109,112,95,111,108,115,0,0,112,99,97,0,0,0,0,0,112,114,111,103,114,101,115,115,95,98,97,114,0,0,0,0,114,97,110,103,101,45,109,101,97,110,0,0,0,0,0,0,115,116,97,116,115,95,116,97,98,108,101,115,0,0,0,0,115,121,115,101,115,116,0,0,116,114,97,109,111,45,120,49,50,97,0,0,0,0,0,0,110,105,115,116,99,104,101,99,107,0,0,0,0,0,0,0,97,114,109,97,0,0,0,0,97,114,109,97,95,120,49,50,0,0,0,0,0,0,0,0,103,97,114,99,104,0,0,0,97,117,100,105,111,0,0,0,117,114,99,100,105,115,116,0,107,101,114,110,101,108,0,0,102,114,97,99,116,97,108,115,0,0,0,0,0,0,0,0,112,111,105,115,115,111,110,0,109,97,105,108,101,114,0,0,101,118,105,101,119,115,95,105,109,112,111,114,116,0,0,0,115,116,97,116,97,95,105,109,112,111,114,116,0,0,0,0,115,112,115,115,95,105,109,112,111,114,116,0,0,0,0,0,115,97,115,95,105,109,112,111,114,116,0,0,0,0,0,0,106,109,117,108,116,105,95,105,109,112,111,114,116,0,0,0,103,114,101,116,108,122,105,112,0,0,0,0,0,0,0,0,97,114,98,111,110,100,0,0,104,101,99,107,105,116,0,0,111,100,98,99,95,105,109,112,111,114,116,0,0,0,0,0,113,117,97,110,116,114,101,103,0,0,0,0,0,0,0,0,105,110,116,101,114,118,97,108,0,0,0,0,0,0,0,0,97,110,111,118,97,0,0,0,100,117,114,97,116,105,111,110,0,0,0,0,0,0,0,0,105,110,116,101,114,112,111,108,97,116,101,0,0,0,0,0,98,105,112,114,111,98,105,116,0,0,0,0,0,0,0,0,114,101,112,114,111,98,105,116,0,0,0,0,0,0,0,0,112,97,110,117,114,99,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,190,0,0,2,0,0,0,80,190,0,0,3,0,0,0,96,190,0,0,4,0,0,0,112,190,0,0,5,0,0,0,128,190,0,0,6,0,0,0,144,190,0,0,7,0,0,0,152,190,0,0,8,0,0,0,168,190,0,0,9,0,0,0,176,190,0,0,10,0,0,0,184,190,0,0,11,0,0,0,200,190,0,0,12,0,0,0,216,190,0,0,13,0,0,0,232,190,0,0,14,0,0,0,240,190,0,0,15,0,0,0,0,191,0,0,16,0,0,0,16,191,0,0,17,0,0,0,24,191,0,0,18,0,0,0,40,191,0,0,19,0,0,0,48,191,0,0,20,0,0,0,56,191,0,0,21,0,0,0,64,191,0,0,22,0,0,0,72,191,0,0,23,0,0,0,88,191,0,0,24,0,0,0,96,191,0,0,25,0,0,0,104,191,0,0,26,0,0,0,120,191,0,0,27,0,0,0,136,191,0,0,28,0,0,0,152,191,0,0,29,0,0,0,168,191,0,0,30,0,0,0,184,191,0,0,31,0,0,0,200,191,0,0,32,0,0,0,208,191,0,0,33,0,0,0,216,191,0,0,34,0,0,0,232,191,0,0,35,0,0,0,248,191,0,0,36,0,0,0,8,192,0,0,37,0,0,0,16,192,0,0,38,0,0,0,32,192,0,0,39,0,0,0,48,192,0,0,40,0,0,0,64,192,0,0,41,0,0,0,80,192,0,0,120,108,115,95,103,101,116,95,100,97,116,97,0,0,0,0,120,108,115,120,95,103,101,116,95,100,97,116,97,0,0,0,103,110,117,109,101,114,105,99,95,103,101,116,95,100,97,116,97,0,0,0,0,0,0,0,111,100,115,95,103,101,116,95,100,97,116,97,0,0,0,0,119,102,49,95,103,101,116,95,100,97,116,97,0,0,0,0,100,116,97,95,103,101,116,95,100,97,116,97,0,0,0,0,115,97,118,95,103,101,116,95,100,97,116,97,0,0,0,0,120,112,111,114,116,95,103,101,116,95,100,97,116,97,0,0,106,109,117,108,116,105,95,103,101,116,95,100,97,116,97,0,106,111,104,97,110,115,101,110,95,99,111,105,110,116,95,116,101,115,116,0,0,0,0,0,106,111,104,97,110,115,101,110,95,101,115,116,105,109,97,116,101,0,0,0,0,0,0,0,106,111,104,97,110,115,101,110,95,98,111,111,116,95,114,111,117,110,100,0,0,0,0,0,118,101,99,109,95,116,101,115,116,95,114,101,115,116,114,105,99,116,105,111,110,0,0,0,116,114,97,99,101,95,112,118,97,108,117,101,0,0,0,0,109,111,100,101,108,95,108,101,118,101,114,97,103,101,0,0,108,101,118,101,114,97,103,101,95,100,97,116,97,95,100,105,97,108,111,103,0,0,0,0,112,114,105,110,116,95,118,105,102,115,0,0,0,0,0,0,109,112,108,115,113,0,0,0,109,97,116,114,105,120,95,109,112,95,111,108,115,0,0,0,109,112,95,118,101,99,116,111,114,95,114,97,105,115,101,95,116,111,95,112,111,119,101,114,0,0,0,0,0,0,0,0,109,112,95,98,119,95,102,105,108,116,101,114,0,0,0,0,112,99,97,95,102,114,111,109,95,99,109,97,116,114,105,120,0,0,0,0,0,0,0,0,115,104,111,119,95,112,114,111,103,114,101,115,115,0,0,0,114,97,110,103,101,95,109,101,97,110,95,103,114,97,112,104,0,0,0,0,0,0,0,0,100,119,95,108,111,111,107,117,112,0,0,0,0,0,0,0,114,97,110,107,95,115,117,109,95,108,111,111,107,117,112,0,115,116,111,99,107,95,121,111,103,111,95,108,111,111,107,117,112,0,0,0,0,0,0,0,103,101,116,95,73,80,83,95], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+39848);
/* memory initializer */ allocate([99,114,105,116,118,97,108,115,0,0,0,0,0,0,0,0,73,80,83,95,116,98,97,114,95,109,111,109,101,110,116,115,0,0,0,0,0,0,0,0,73,80,83,95,116,98,97,114,95,114,104,111,95,109,111,109,101,110,116,115,0,0,0,0,113,108,114,95,97,115,121,95,112,118,97,108,117,101,0,0,115,121,115,116,101,109,95,101,115,116,105,109,97,116,101,0,119,114,105,116,101,95,116,120,95,100,97,116,97,0,0,0,101,120,101,99,95,116,120,95,115,99,114,105,112,116,0,0,97,100,106,117,115,116,95,115,101,114,105,101,115,0,0,0,114,117,110,95,110,105,115,116,95,116,101,115,116,115,0,0,97,114,109,97,95,109,111,100,101,108,0,0,0,0,0,0,97,114,109,97,95,120,49,50,95,109,111,100,101,108,0,0,103,97,114,99,104,95,109,111,100,101,108,0,0,0,0,0,99,111,117,110,116,95,100,97,116,97,95,101,115,116,105,109,97,116,101,0,0,0,0,0,104,101,99,107,105,116,95,101,115,116,105,109,97,116,101,0,105,110,116,101,114,118,97,108,95,101,115,116,105,109,97,116,101,0,0,0,0,0,0,0,116,111,98,105,116,95,118,105,97,95,105,110,116,114,101,103,0,0,0,0,0,0,0,0,98,105,112,114,111,98,105,116,95,101,115,116,105,109,97,116,101,0,0,0,0,0,0,0,114,101,112,114,111,98,105,116,95,101,115,116,105,109,97,116,101,0,0,0,0,0,0,0,109,105,100,105,95,112,108,97,121,95,103,114,97,112,104,0,114,101,97,100,95,119,105,110,100,111,119,95,116,101,120,116,0,0,0,0,0,0,0,0,109,97,99,107,105,110,110,111,110,95,112,118,97,108,117,101,0,0,0,0,0,0,0,0,107,101,114,110,101,108,95,100,101,110,115,105,116,121,0,0,97,114,114,97,121,95,107,101,114,110,101,108,95,100,101,110,115,105,116,121,0,0,0,0,107,101,114,110,101,108,95,100,101,110,115,105,116,121,95,109,97,116,114,105,120,0,0,0,104,117,114,115,116,95,101,120,112,111,110,101,110,116,0,0,101,109,97,105,108,95,102,105,108,101,0,0,0,0,0,0,103,114,101,116,108,95,110,97,116,105,118,101,95,109,97,107,101,95,122,105,112,102,105,108,101,0,0,0,0,0,0,0,103,114,101,116,108,95,110,97,116,105,118,101,95,117,110,122,105,112,95,102,105,108,101,0,103,114,101,116,108,95,110,97,116,105,118,101,95,117,110,122,105,112,95,115,101,115,115,105,111,110,95,102,105,108,101,0,103,114,101,116,108,95,110,97,116,105,118,101,95,122,105,112,95,100,97,116,97,102,105,108,101,0,0,0,0,0,0,0,103,114,101,116,108,95,110,97,116,105,118,101,95,117,110,122,105,112,95,100,97,116,97,102,105,108,101,0,0,0,0,0,97,114,98,111,110,100,95,101,115,116,105,109,97,116,101,0,100,112,100,95,101,115,116,105,109,97,116,101,0,0,0,0,103,114,101,116,108,95,111,100,98,99,95,99,104,101,99,107,95,100,115,110,0,0,0,0,103,114,101,116,108,95,111,100,98,99,95,103,101,116,95,100,97,116,97,0,0,0,0,0,114,113,95,100,114,105,118,101,114,0,0,0,0,0,0,0,108,97,100,95,100,114,105,118,101,114,0,0,0,0,0,0,103,114,101,116,108,95,97,110,111,118,97,0,0,0,0,0,100,117,114,97,116,105,111,110,95,101,115,116,105,109,97,116,101,0,0,0,0,0,0,0,99,104,111,119,95,108,105,110,95,105,110,116,101,114,112,111,108,97,116,101,0,0,0,0,114,101,97,108,95,108,101,118,105,110,95,108,105,110,0,0,168,193,0,0,1,0,0,0,184,193,0,0,2,0,0,0,200,193,0,0,3,0,0,0,224,193,0,0,4,0,0,0,240,193,0,0,25,0,0,0,0,194,0,0,26,0,0,0,16,194,0,0,27,0,0,0,32,194,0,0,28,0,0,0,48,194,0,0,29,0,0,0,64,194,0,0,5,0,0,0,88,194,0,0,5,0,0,0,112,194,0,0,5,0,0,0,136,194,0,0,5,0,0,0,160,194,0,0,5,0,0,0,176,194,0,0,7,0,0,0,192,194,0,0,7,0,0,0,216,194,0,0,6,0,0,0,232,194,0,0,8,0,0,0,240,194,0,0,8,0,0,0,0,195,0,0,8,0,0,0,32,195,0,0,8,0,0,0,48,195,0,0,9,0,0,0,72,195,0,0,10,0,0,0,88,195,0,0,11,0,0,0,112,195,0,0,12,0,0,0,128,195,0,0,12,0,0,0,144,195,0,0,12,0,0,0,168,195,0,0,12,0,0,0,192,195,0,0,12,0,0,0,216,195,0,0,12,0,0,0,240,195,0,0,12,0,0,0,0,196,0,0,13,0,0,0,16,196,0,0,14,0,0,0,32,196,0,0,14,0,0,0,48,196,0,0,14,0,0,0,64,196,0,0,15,0,0,0,80,196,0,0,16,0,0,0,96,196,0,0,17,0,0,0,112,196,0,0,18,0,0,0,128,196,0,0,23,0,0,0,152,196,0,0,32,0,0,0,168,196,0,0,35,0,0,0,192,196,0,0,35,0,0,0,216,196,0,0,39,0,0,0,240,196,0,0,40,0,0,0,8,197,0,0,19,0,0,0,24,197,0,0,19,0,0,0,48,197,0,0,20,0,0,0,72,197,0,0,21,0,0,0,88,197,0,0,21,0,0,0,112,197,0,0,21,0,0,0,136,197,0,0,22,0,0,0,152,197,0,0,24,0,0,0,168,197,0,0,30,0,0,0,200,197,0,0,30,0,0,0,224,197,0,0,30,0,0,0,0,198,0,0,30,0,0,0,32,198,0,0,30,0,0,0,64,198,0,0,31,0,0,0,80,198,0,0,31,0,0,0,96,198,0,0,33,0,0,0,120,198,0,0,33,0,0,0,144,198,0,0,34,0,0,0,160,198,0,0,34,0,0,0,176,198,0,0,36,0,0,0,192,198,0,0,37,0,0,0,216,198,0,0,38,0,0,0,240,198,0,0,41,0,0,0,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,112,108,117,103,105,110,58,32,37,115,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,67,111,117,108,100,110,39,116,32,108,111,97,100,32,112,108,117,103,105,110,32,102,117,110,99,116,105,111,110,0,0,0,112,108,117,103,110,97,109,101,32,61,61,32,78,85,76,76,32,102,111,114,32,39,37,115,39,10,0,0,0,0,0,0,104,97,110,100,108,101,32,61,61,32,78,85,76,76,32,102,111,114,32,39,37,115,39,10,0,0,0,0,0,0,0,0,95,37,115,0,0,0,0,0,112,108,117,103,110,97,109,101,32,61,32,39,37,115,39,32,102,111,114,32,102,117,110,99,116,105,111,110,32,39,37,115,39,10,0,0,0,0,0,0,46,115,111,0,0,0,0,0,103,114,101,116,108,32,118,101,114,115,105,111,110,32,37,115,10,0,0,0,0,0,0,0,49,46,57,46,57,48,0,0,67,111,112,121,114,105,103,104,116,32,82,97,109,117,32,82,97,109,97,110,97,116,104,97,110,44,32,65,108,108,105,110,32,67,111,116,116,114,101,108,108,32,97,110,100,32,82,105,99,99,97,114,100,111,32,34,74,97,99,107,34,32,76,117,99,99,104,101,116,116,105,0,84,104,105,115,32,105,115,32,102,114,101,101,32,115,111,102,116,119,97,114,101,32,119,105,116,104,32,65,66,83,79,76,85,84,69,76,89,32,78,79,32,87,65,82,82,65,78,84,89,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,32,0,0,0,0,0,0,0,37,45,42,115,0,0,0,0,37,35,46,42,103,0,0,0,37,42,115,0,0,0,0,0,43,48,48,0,0,0,0,0,45,48,48,0,0,0,0,0,78,65,0,0,0,0,0,0,37,35,46,51,103,0,0,0,37,46,52,102,0,0,0,0,226,136,146,0,0,0,0,0,32,37,46,42,115,126,0,0,32,37,46,42,115,126,10,0,32,37,115,10,0,0,0,0,126,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,37,120,0,0,0,0,0,0,48,49,47,51,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,37,42,46,52,102,0,0,37,46,53,101,0,0,0,0,37,103,0,0,0,0,0,0,37,115,58,10,10,0,0,0,67,111,118,97,114,105,97,110,99,101,32,109,97,116,114,105,120,32,111,102,32,114,101,103,114,101,115,115,105,111,110,32,99,111,101,102,102,105,99,105,101,110,116,115,0,0,0,0,45,46,44,48,0,0,0,0,17,54,60,189,82,150,246,63,95,152,76,21,140,74,5,64,101,170,96,84,82,39,245,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,104,97,99,95,112,114,101,119,104,105,116,101,110,0,0,0,104,97,99,95,107,101,114,110,101,108,0,0,0,0,0,0,113,115,95,98,97,110,100,119,105,100,116,104,0,0,0,0,102,111,114,99,101,95,104,99,0,0,0,0,0,0,0,0,110,101,97,114,45,115,105,110,103,117,108,97,114,0,0,0,110,95,99,108,117,115,116,101,114,115,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,108,117,115,116,101,114,105,110,103,32,118,97,114,105,97,98,108,101,0,0,0,0,0,100,119,95,112,118,97,108,0,117,110,99,101,110,116,101,114,101,100,0,0,0,0,0,0,99,101,110,116,101,114,101,100,45,82,50,0,0,0,0,0,118,99,118,95,120,112,120,0,104,99,95,118,101,114,115,105,111,110,0,0,0,0,0,0,119,116,95,100,117,109,109,121,0,0,0,0,0,0,0,0,100,114,111,112,112,105,110,103,32,114,101,100,117,110,100,97,110,116,32,118,97,114,105,97,98,108,101,32,37,100,32,40,37,115,41,10,0,0,0,0,100,114,111,112,108,105,115,116,0,0,0,0,0,0,0,0,100,116,114,116,114,105,58,32,105,110,102,111,32,61,32,37,100,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,110,105,116,105,97,108,105,122,101,100,0,0,0,0,0,46,46,47,108,105,98,47,115,114,99,47,46,46,47,46,46,47,114,110,103,47,83,70,77,84,46,99,0,0,0,0,0,0,0,0,0,0,0,0,0,88,205,0,0,0,0,0,0,102,105,108,108,95,97,114,114,97,121,51,50,0,0,0,0,105,100,120,32,61,61,32,78,51,50,0,0,0,0,0,0,115,105,122,101,32,37,32,52,32,61,61,32,48,0,0,0,115,105,122,101,32,62,61,32,78,51,50], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+50088);
/* memory initializer */ allocate([112,111,115,105,120,95,109,101,109,97,108,105,103,110,58,32,101,114,114,32,61,32,37,100,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,132,230,201,19,115,116,100,116,114,0,0,0,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,48,49,50,51,52,53,54,55,56,57,95,0,95,37,100,0,0,0,0,0,109,97,107,101,95,118,97,114,110,97,109,101,95,117,110,105,113,117,101,58,32,117,110,114,101,115,111,108,118,101,100,32,99,111,110,102,108,105,99,116,33,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,85,82,0,0,0,0,0,51,83,76,83,0,0,0,0,70,73,77,76,0,0,0,0,76,73,77,76,0,0,0,0,79,76,83,0,0,0,0,0,84,83,76,83,0,0,0,0,87,76,83,0,0,0,0,0,16,216,0,0,24,216,0,0,32,216,0,0,40,216,0,0,48,216,0,0,56,216,0,0,64,216,0,0,0,0,0,0,109,101,116,104,111,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,101,120,95,101,115,99,97,112,101,58,32,115,114,99,32,105,115,32,78,85,76,76,10,0,0,0,0,0,0,0,0,36,37,115,36,0,0,0,0,92,109,117,108,116,105,99,111,108,117,109,110,123,50,125,123,99,125,123,125,0,0,0,0,36,45,36,37,46,42,102,0,37,46,42,102,0,0,0,0,38,0,0,0,0,0,0,0,92,116,101,120,116,114,109,123,101,37,115,37,115,125,0,0,45,45,0,0,0,0,0,0,43,0,0,0,0,0,0,0,36,45,36,37,35,46,42,103,0,0,0,0,0,0,0,0,37,35,46,42,103,0,0,0,32,0,0,0,0,0,0,0,37,115,32,38,32,37,115,32,38,32,37,115,32,92,92,10,0,0,0,0,0,0,0,0,92,109,117,108,116,105,99,111,108,117,109,110,123,50,125,123,99,125,123,92,114,109,32,37,115,125,0,0,0,0,0,0,117,110,100,101,102,105,110,101,100,0,0,0,0,0,0,0,37,115,32,38,10,32,32,37,115,32,38,10,32,32,32,32,37,115,32,38,10,0,0,0,32,32,32,32,32,32,37,115,32,38,10,32,32,32,32,32,32,32,32,37,115,32,92,92,10,0,0,0,0,0,0,0,32,32,32,32,32,32,37,115,32,92,92,10,0,0,0,0,92,118,115,112,97,99,101,123,49,101,109,125,10,10,0,0,92,98,101,103,105,110,123,116,97,98,117,108,97,114,125,123,108,0,0,0,0,0,0,0,114,64,123,37,99,125,108,0,125,10,37,115,32,38,10,0,92,109,117,108,116,105,99,111,108,117,109,110,123,37,100,125,123,99,125,123,37,115,37,115,125,32,37,115,10,0,0,0,36,94,42,36,0,0,0,0,92,92,91,49,101,120,93,0,92,101,110,100,123,116,97,98,117,108,97,114,125,10,10,0,114,0,0,0,0,0,0,0,32,38,32,0,0,0,0,0,125,10,0,0,0,0,0,0,76,65,78,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,111,99,117,109,101,110,116,99,108,97,115,115,0,0,0,103,114,101,116,108,116,101,120,58,32,117,115,105,110,103,32,112,114,101,97,109,98,108,101,32,102,105,108,101,10,32,37,115,10,0,0,0,0,0,0,108,101,116,116,101,114,112,97,112,101,114,0,0,0,0,0,97,52,112,97,112,101,114,0,112,100,102,116,101,120,0,0,100,118,105,112,115,0,0,0,109,97,114,103,105,110,61,50,99,109,44,0,0,0,0,0,92,100,111,99,117,109,101,110,116,99,108,97,115,115,0,0,91,108,97,110,100,115,99,97,112,101,93,0,0,0,0,0,91,49,49,112,116,44,108,97,110,100,115,99,97,112,101,93,0,0,0,0,0,0,0,0,91,49,49,112,116,93,0,0,123,97,114,116,105,99,108,101,125,10,0,0,0,0,0,0,114,117,0,0,0,0,0,0,92,117,115,101,112,97,99,107,97,103,101,91,114,117,115,115,105,97,110,93,123,98,97,98,101,108,125,10,0,0,0,0,92,117,115,101,112,97,99,107,97,103,101,91,37,115,44,37,115,37,115,93,123,103,101,111,109,101,116,114,121,125,10,0,92,117,115,101,112,97,99,107,97,103,101,123,97,109,115,109,97,116,104,125,10,0,0,0,92,117,115,101,112,97,99,107,97,103,101,123,108,111,110,103,116,97,98,108,101,125,10,0,10,92,98,101,103,105,110,123,100,111,99,117,109,101,110,116,125,10,10,92,116,104,105,115,112,97,103,101,115,116,121,108,101,123,101,109,112,116,121,125,10,10,0,0,0,0,0,0,92,109,98,111,120,123,37,115,125,0,0,0,0,0,0,0,108,97,110,100,115,99,97,112,101,0,0,0,0,0,0,0,44,108,97,110,100,115,99,97,112,101,37,115,0,0,0,0,91,108,97,110,100,115,99,97,112,101,93,37,115,0,0,0,37,115,32,38,32,0,0,0,92,109,117,108,116,105,99,111,108,117,109,110,123,49,125,123,99,125,123,37,115,125,32,38,10,0,0,0,0,0,0,0,92,109,117,108,116,105,99,111,108,117,109,110,123,49,125,123,99,125,123,37,115,125,0,0,32,92,92,10,0,0,0,0,32,38,10,0,0,0,0,0,92,109,117,108,116,105,99,111,108,117,109,110,123,49,125,123,99,125,123,92,114,109,32,37,115,125,0,0,0,0,0,0,92,109,117,108,116,105,99,111,108,117,109,110,123,49,125,123,99,125,123,125,0,0,0,0,36,45,36,37,46,49,53,69,0,0,0,0,0,0,0,0,37,46,49,53,69,0,0,0,69,45,0,0,0,0,0,0,69,45,45,37,115,0,0,0,37,37,37,100,91,94,94,93,94,37,37,100,0,0,0,0,37,115,36,94,123,37,100,125,36,0,0,0,0,0,0,0,92,109,98,111,120,123,37,115,125,94,37,100,0,0,0,0,100,95,37,49,49,91,94,95,93,95,37,100,0,0,0,0,36,92,68,101,108,116,97,36,37,115,36,95,123,116,45,37,100,125,36,0,0,0,0,0,37,49,49,91,94,95,93,95,37,100,0,0,0,0,0,0,37,115,36,95,123,116,45,37,100,125,36,0,0,0,0,0,37,37,37,100,91,94,40,93,40,37,37,100,41,0,0,0,36,92,37,115,95,123,37,100,125,36,0,0,0,0,0,0,92,37,115,95,123,37,100,125,0,0,0,0,0,0,0,0,112,104,105,95,37,100,0,0,36,92,112,104,105,95,123,37,100,125,36,0,0,0,0,0,92,112,104,105,95,123,37,100,125,0,0,0,0,0,0,0,80,104,105,95,37,100,0,0,36,92,80,104,105,95,123,37,100,125,36,0,0,0,0,0,92,80,104,105,95,123,37,100,125,0,0,0,0,0,0,0,116,104,101,116,97,95,37,100,0,0,0,0,0,0,0,0,36,92,116,104,101,116,97,95,123,37,100,125,36,0,0,0,92,116,104,101,116,97,95,123,37,100,125,0,0,0,0,0,84,104,101,116,97,95,37,100,0,0,0,0,0,0,0,0,36,92,84,104,101,116,97,95,123,37,100,125,36,0,0,0,92,84,104,101,116,97,95,123,37,100,125,0,0,0,0,0,40,45,0,0,0,0,0,0,37,37,37,100,91,94,40,93,40,45,37,37,100,41,0,0,121,0,0,0,0,0,0,0,37,115,95,123,116,45,37,100,125,0,0,0,0,0,0,0,36,117,95,123,116,45,37,100,125,94,50,36,0,0,0,0,97,108,112,104,97,0,0,0,92,97,108,112,104,97,0,0,98,101,116,97,0,0,0,0,92,98,101,116,97,0,0,0,103,97,109,109,97,0,0,0,92,103,97,109,109,97,0,0,100,101,108,116,97,0,0,0,92,100,101,108,116,97,0,0,101,112,115,105,108,111,110,0,92,101,112,115,105,108,111,110,0,0,0,0,0,0,0,0,99,104,105,0,0,0,0,0,92,99,104,105,0,0,0,0,112,105,0,0,0,0,0,0,92,112,105,0,0,0,0,0,112,104,105,0,0,0,0,0,92,112,104,105,0,0,0,0,112,115,105,0,0,0,0,0,92,112,115,105,0,0,0,0,108,97,109,98,100,97,0,0,92,108,97,109,98,100,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,32,37,115,32,116,105,109,101,115,32,37,115,0,0,0,100,117,109,109,121,32,102,111,114,32,37,115,32,61,32,39,37,115,39,0,0,0,0,0,100,117,109,109,121,32,102,111,114,32,37,115,32,61,32,37,103,0,0,0,0,0,0,0,100,95,0,0,0,0,0,0,108,100,95,0,0,0,0,0,115,100,95,0,0,0,0,0,111,95,0,0,0,0,0,0,108,95,0,0,0,0,0,0,115,113,95,0,0,0,0,0,95,37,100,0,0,0,0,0,37,100,0,0,0,0,0,0,68,0,0,0,0,0,0,0,105,95,0,0,0,0,0,0,95,0,0,0,0,0,0,0,61,32,102,105,114,115,116,32,100,105,102,102,101,114,101,110,99,101,32,111,102,32,37,115,0,0,0,0,0,0,0,0,61,32,108,111,103,32,100,105,102,102,101,114,101,110,99,101,32,111,102,32,37,115,0,0,61,32,115,101,97,115,111,110,97,108,32,100,105,102,102,101,114,101,110,99,101,32,111,102,32,37,115,0,0,0,0,0,61,32,108,111,103,32,111,102,32,37,115,0,0,0,0,0,61,32,37,115,32,115,113,117,97,114,101,100,0,0,0,0,61,32,37,115,40,116,32,45,32,37,100,41,0,0,0,0,61,32,37,115,40,116,32,43,32,37,100,41,0,0,0,0,61,32,49,47,37,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,101,115,116,114,111,121,95,117,115,101,114,95,118,97,114,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,97,108,95,100,101,115,116,114,111,121,95,117,115,101,114,95,118,97,114,115,95,97,116,95,108,101,118,101,108,0,117,115,101,114,95,118,97,114,95,100,101,115,116,114,111,121,0,0,0,0,0,0,0,0,71,76,105,98,0,0,0,0,104,97,115,104,95,116,97,98,108,101,32,33,61,32,78,85,76,76,0,0,0,0,0,0,103,95,104,97,115,104,95,116,97,98,108,101,95,117,110,114,101,102,0,0,0,0,0,0,103,95,104,97,115,104,95,116,97,98,108,101,95,100,101,115,116,114,111,121,0,0,0,0,103,95,104,97,115,104,95,116,97,98,108,101,95,108,111,111,107,117,112,0,0,0,0,0,103,95,104,97,115,104,95,116,97,98,108,101,95,114,101,109,111,118,101,95,97,108,108,0,118,101,114,115,105,111,110,32,61,61,32,104,97,115,104,95,116,97,98,108,101,45,62,118,101,114,115,105,111,110,0,0,103,95,104,97,115,104,95,116,97,98,108,101,95,102,105,110,100,0,0,0,0,0,0,0,112,114,101,100,105,99,97,116,101,32,33,61,32,78,85,76,76,0,0,0,0,0,0,0,103,95,104,97,115,104,95,116,97,98,108,101,95,105,110,115,101,114,116,95,105,110,116,101,114,110,97,108,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,13,0,0,0,31,0,0,0,61,0,0,0,127,0,0,0,251,0,0,0,253,1,0,0,253,3,0,0,247,7,0,0,253,15,0,0,255,31,0,0,253,63,0,0,237,127,0,0,241,255,0,0,255,255,1,0,251,255,3,0,255,255,7,0,253,255,15,0,247,255,31,0,253,255,63,0,241,255,127,0,253,255,255,0,217,255,255,1,251,255,255,3,217,255,255,7,199,255,255,15,253,255,255,31,221,255,255,63,255,255,255,127,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,6,6,1,1,56,228,0,0,0,0,0,0,71,76,105,98,0,0,0,0,103,95,117,116,102,56,95,115,116,114,108,101,110,0,0,0,112,32,33,61,32,78,85,76,76,32,124,124,32,109,97,120,32,61,61,32,48,0,0,0,103,117,116,102,56,46,99,0,102,97,115,116,95,118,97,108,105,100,97,116,101,95,108,101,110,0,0,0,0,0,0,0,109,97,120,95,108,101,110,32,62,61,32,48,0,0,0,0,0,0,0,0,0,0,0,0,115,121,115,95,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,58,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,83,108,105,99,101,58,32,77,101,109,67,104,101,99,107,101,114,58,32,97,116,116,101,109,112,116,32,116,111,32,114,101,108,101,97,115,101,32,110,111,110,45,97,108,108,111,99,97,116,101,100,32,98,108,111,99,107,58,32,37,112,32,115,105,122,101,61,37,117,10,0,71,83,108,105,99,101,58,32,77,101,109,67,104,101,99,107,101,114,58,32,97,116,116,101,109,112,116,32,116,111,32,114,101,108,101,97,115,101,32,98,108,111,99,107,32,119,105,116,104,32,105,110,118,97,108,105,100,32,115,105,122,101,58,32,37,112,32,115,105,122,101,61,37,117,32,105,110,118,97,108,105,100,45,115,105,122,101,61,37,117,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,37,115,0,0,0,0,105,110,100,101,120,32,60,61,32,98,114,97,110,99,104,45,62,110,95,101,110,116,114,105,101,115,0,0,0,0,0,0,10,42,42,42,77,69,77,79,82,89,45,69,82,82,79,82,42,42,42,58,32,0,0,0,37,115,91,37,108,100,93,58,32,71,83,108,105,99,101,58,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,77,101,109,67,104,101,99,107,101,114,58,32,102,97,105,108,117,114,101,32,105,110,32,100,101,98,117,103,103,105,110,103,32,116,114,101,101,58,32,37,115,0,0,0,0,0,0,0,115,105,110,102,111,45,62,110,95,97,108,108,111,99,97,116,101,100,32,62,32,48,0,0,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,37,117,32,98,121,116,101,115,32,40,97,108,105,103,110,109,101,110,116,58,32,37,117,41,58,32,37,115,10,0,0,0,0,0,0,0,0,97,108,105,103,110,101,100,95,109,101,109,111,114,121,32,61,61,32,40,103,112,111,105,110,116,101,114,41,32,97,100,100,114,0,0,0,0,0,0,0,109,97,103,45,62,99,104,117,110,107,115,32,61,61,32,78,85,76,76,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,121,115,95,112,97,103,101,95,115,105,122,101,32,62,61,32,50,32,42,32,76,65,82,71,69,65,76,73,71,78,77,69,78,84,0,0,0,0,0,40,115,121,115,95,112,97,103,101,95,115,105,122,101,32,38,32,40,115,121,115,95,112,97,103,101,95,115,105,122,101,32,45,32,49,41,41,32,61,61,32,48,0,0,0,0,0,0,71,95,83,76,73,67,69,0,160,232,0,0,1,0,0,0,176,232,0,0,2,0,0,0,97,108,119,97,121,115,45,109,97,108,108,111,99,0,0,0,100,101,98,117,103,45,98,108,111,99,107,115,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+55112);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  function _g_private_set() {
  Module['printErr']('missing function: g_private_set'); abort(-1);
  }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _log() {
  return Math_log.apply(null, arguments)
  }

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  function _fdopen(fildes, mode) {
      // FILE *fdopen(int fildes, const char *mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fdopen.html
      mode = Pointer_stringify(mode);
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      if ((mode.indexOf('w') != -1 && !stream.isWrite) ||
          (mode.indexOf('r') != -1 && !stream.isRead) ||
          (mode.indexOf('a') != -1 && !stream.isAppend) ||
          (mode.indexOf('+') != -1 && (!stream.isRead || !stream.isWrite))) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      } else {
        stream.error = false;
        stream.eof = false;
        return FS.getPtrForStream(stream);
      }
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  function _g_memdup() {
  Module['printErr']('missing function: g_memdup'); abort(-1);
  }


  function _g_get_prgname() {
  Module['printErr']('missing function: g_get_prgname'); abort(-1);
  }

  function _dgemm_() {
  Module['printErr']('missing function: dgemm_'); abort(-1);
  }

  
  function _getgid() {
      // gid_t getgid(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getgid.html
      // We have just one process/group/user, all with ID 0.
      return 0;
    }function _getpid() {
  return _getgid.apply(null, arguments)
  }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          function pointerLockChange() {
            Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                  document['mozPointerLockElement'] === canvas ||
                                  document['webkitPointerLockElement'] === canvas ||
                                  document['msPointerLockElement'] === canvas;
          }
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function _dtrcon_() {
  Module['printErr']('missing function: dtrcon_'); abort(-1);
  }

  function _g_private_get() {
  Module['printErr']('missing function: g_private_get'); abort(-1);
  }

  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }

  
  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};function _dlerror() {
      // char *dlerror(void);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlerror.html
      if (DLFCN.errorMsg === null) {
        return 0;
      } else {
        if (DLFCN.error) _free(DLFCN.error);
        var msgArr = intArrayFromString(DLFCN.errorMsg);
        DLFCN.error = allocate(msgArr, 'i8', ALLOC_NORMAL);
        DLFCN.errorMsg = null;
        return DLFCN.error;
      }
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _dpotri_() {
  Module['printErr']('missing function: dpotri_'); abort(-1);
  }

  function _g_return_if_fail_warning() {
  Module['printErr']('missing function: g_return_if_fail_warning'); abort(-1);
  }

  function _g_error_free() {
  Module['printErr']('missing function: g_error_free'); abort(-1);
  }

  var _BDtoIHigh=true;

  function _g_mutex_trylock() {
  Module['printErr']('missing function: g_mutex_trylock'); abort(-1);
  }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _dorgqr_() {
  Module['printErr']('missing function: dorgqr_'); abort(-1);
  }

  function _dlclose(handle) {
      // int dlclose(void *handle);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlclose() unopened handle: ' + handle;
        return 1;
      } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
          if (lib_record.module.cleanups) {
            lib_record.module.cleanups.forEach(function(cleanup) { cleanup() });
          }
          delete DLFCN.loadedLibNames[lib_record.name];
          delete DLFCN.loadedLibs[handle];
        }
        return 0;
      }
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _g_strdup_printf() {
  Module['printErr']('missing function: g_strdup_printf'); abort(-1);
  }

  function _dgeqrf_() {
  Module['printErr']('missing function: dgeqrf_'); abort(-1);
  }

  function _llvm_pow_f64() {
  return Math_pow.apply(null, arguments)
  }

  function _g_malloc() {
  Module['printErr']('missing function: g_malloc'); abort(-1);
  }

   
  Module["_memmove"] = _memmove;

  function _ceil() {
  return Math_ceil.apply(null, arguments)
  }

  function ___errno_location() {
      return ___errno_state;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  function _g_mutex_unlock() {
  Module['printErr']('missing function: g_mutex_unlock'); abort(-1);
  }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _g_get_current_time() {
  Module['printErr']('missing function: g_get_current_time'); abort(-1);
  }

  function _genrand_mt() {
  Module['printErr']('missing function: genrand_mt'); abort(-1);
  }

  function _g_free() {
  Module['printErr']('missing function: g_free'); abort(-1);
  }

  function _free_mt_struct() {
  Module['printErr']('missing function: free_mt_struct'); abort(-1);
  }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _dlsym(handle, symbol) {
      // void *dlsym(void *restrict handle, const char *restrict name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html
      symbol = '_' + Pointer_stringify(symbol);
  
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlsym() from an unopened handle: ' + handle;
        return 0;
      } else {
        var lib = DLFCN.loadedLibs[handle];
        // self-dlopen means that lib.module is not a superset of
        // cached_functions, so check the latter first
        if (lib.cached_functions.hasOwnProperty(symbol)) {
          return lib.cached_functions[symbol];
        } else {
          if (!lib.module.hasOwnProperty(symbol)) {
            DLFCN.errorMsg = ('Tried to lookup unknown symbol "' + symbol +
                                   '" in dynamic lib: ' + lib.name);
            return 0;
          } else {
            var result = lib.module[symbol];
            if (typeof result == 'function') {
              result = lib.module.SYMBOL_TABLE[symbol];
              assert(result);
              lib.cached_functions = result;
            }
            return result;
          }
        }
      }
    }

  function _dsyrk_() {
  Module['printErr']('missing function: dsyrk_'); abort(-1);
  }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_strcat"] = _strcat;

  function _dtrtri_() {
  Module['printErr']('missing function: dtrtri_'); abort(-1);
  }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }


  function _g_atomic_int_dec_and_test() {
  Module['printErr']('missing function: g_atomic_int_dec_and_test'); abort(-1);
  }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _fabs() {
  return Math_abs.apply(null, arguments)
  }

  function _floor() {
  return Math_floor.apply(null, arguments)
  }


  function _sqrt() {
  return Math_sqrt.apply(null, arguments)
  }

  function _g_malloc0() {
  Module['printErr']('missing function: g_malloc0'); abort(-1);
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _g_malloc0_n() {
  Module['printErr']('missing function: g_malloc0_n'); abort(-1);
  }

  function _g_locale_from_utf8() {
  Module['printErr']('missing function: g_locale_from_utf8'); abort(-1);
  }

  
  function _creat(path, mode) {
      // int creat(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/creat.html
      return _open(path, 1 | 64 | 512, allocate([mode, 0, 0, 0], 'i32', ALLOC_STACK));
    }
  
  function _mktemp(template) {
      if (!_mktemp.counter) _mktemp.counter = 0;
      var c = (_mktemp.counter++).toString();
      var rep = 'XXXXXX';
      while (c.length < rep.length) c = '0' + c;
      writeArrayToMemory(intArrayFromString(c), template + Pointer_stringify(template).indexOf(rep));
      return template;
    }function _mkstemp(template) {
      return _creat(_mktemp(template), 0600);
    }

  function _sin() {
  return Math_sin.apply(null, arguments)
  }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function _atan() {
  return Math_atan.apply(null, arguments)
  }

  function _g_assertion_message_expr() {
  Module['printErr']('missing function: g_assertion_message_expr'); abort(-1);
  }

  function _g_strdup() {
  Module['printErr']('missing function: g_strdup'); abort(-1);
  }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _dlopen(filename, flag) {
      // void *dlopen(const char *file, int mode);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlopen.html
      filename = filename === 0 ? '__self__' : (ENV['LD_LIBRARY_PATH'] || '/') + Pointer_stringify(filename);
  
      abort('need to build with DLOPEN_SUPPORT=1 to get dlopen support in asm.js');
  
      if (DLFCN.loadedLibNames[filename]) {
        // Already loaded; increment ref count and return.
        var handle = DLFCN.loadedLibNames[filename];
        DLFCN.loadedLibs[handle].refcount++;
        return handle;
      }
  
      if (filename === '__self__') {
        var handle = -1;
        var lib_module = Module;
        var cached_functions = SYMBOL_TABLE;
      } else {
        var target = FS.findObject(filename);
        if (!target || target.isFolder || target.isDevice) {
          DLFCN.errorMsg = 'Could not find dynamic lib: ' + filename;
          return 0;
        } else {
          FS.forceLoadFile(target);
          var lib_data = intArrayToString(target.contents);
        }
  
        try {
          var lib_module = eval(lib_data)(
            DLFCN.functionTable.length,
            Module
          );
        } catch (e) {
          DLFCN.errorMsg = 'Could not evaluate dynamic lib: ' + filename;
          return 0;
        }
  
        // Not all browsers support Object.keys().
        var handle = 1;
        for (var key in DLFCN.loadedLibs) {
          if (DLFCN.loadedLibs.hasOwnProperty(key)) handle++;
        }
  
        // We don't care about RTLD_NOW and RTLD_LAZY.
        if (flag & 256) { // RTLD_GLOBAL
          for (var ident in lib_module) {
            if (lib_module.hasOwnProperty(ident)) {
              Module[ident] = lib_module[ident];
            }
          }
        }
  
        var cached_functions = {};
      }
      DLFCN.loadedLibs[handle] = {
        refcount: 1,
        name: filename,
        module: lib_module,
        cached_functions: cached_functions
      };
      DLFCN.loadedLibNames[filename] = handle;
  
      return handle;
    }

  function _cos() {
  return Math_cos.apply(null, arguments)
  }

  var _BItoD=true;

  function _g_locale_to_utf8() {
  Module['printErr']('missing function: g_locale_to_utf8'); abort(-1);
  }

  function _dpotrf_() {
  Module['printErr']('missing function: dpotrf_'); abort(-1);
  }

  function _times(buffer) {
      // clock_t times(struct tms *buffer);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/times.html
      // NOTE: This is fake, since we can't calculate real CPU time usage in JS.
      if (buffer !== 0) {
        _memset(buffer, 0, 16);
      }
      return 0;
    }

  function _atan2() {
  return Math_atan2.apply(null, arguments)
  }

   
  Module["_strcpy"] = _strcpy;

  function _dgeev_() {
  Module['printErr']('missing function: dgeev_'); abort(-1);
  }

  function _exp() {
  return Math_exp.apply(null, arguments)
  }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _g_parse_debug_string() {
  Module['printErr']('missing function: g_parse_debug_string'); abort(-1);
  }

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function _g_mutex_lock() {
  Module['printErr']('missing function: g_mutex_lock'); abort(-1);
  }

  function _g_mem_gc_friendly() {
  Module['printErr']('missing function: g_mem_gc_friendly'); abort(-1);
  }


FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'use asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _g_mem_gc_friendly=env._g_mem_gc_friendly|0;
  var _stderr=env._stderr|0;
  var _stdout=env._stdout|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iii=env.invoke_iii;
  var invoke_vi=env.invoke_vi;
  var _fabs=env._fabs;
  var _exp=env._exp;
  var _g_mutex_unlock=env._g_mutex_unlock;
  var _dlsym=env._dlsym;
  var _fread=env._fread;
  var _g_mutex_lock=env._g_mutex_lock;
  var _fmodl=env._fmodl;
  var ___assert_fail=env.___assert_fail;
  var __addDays=env.__addDays;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _g_get_current_time=env._g_get_current_time;
  var _cos=env._cos;
  var _g_malloc=env._g_malloc;
  var _g_mutex_trylock=env._g_mutex_trylock;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _fsync=env._fsync;
  var _dgemm_=env._dgemm_;
  var _g_memdup=env._g_memdup;
  var _send=env._send;
  var _atan2=env._atan2;
  var _g_strdup_printf=env._g_strdup_printf;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _getpid=env._getpid;
  var _creat=env._creat;
  var _unlink=env._unlink;
  var _dlclose=env._dlclose;
  var _g_parse_debug_string=env._g_parse_debug_string;
  var _floor=env._floor;
  var _dgeqrf_=env._dgeqrf_;
  var _mktemp=env._mktemp;
  var _printf=env._printf;
  var _dtrcon_=env._dtrcon_;
  var _g_strdup=env._g_strdup;
  var _g_assertion_message_expr=env._g_assertion_message_expr;
  var _g_error_free=env._g_error_free;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _log10=env._log10;
  var _dlopen=env._dlopen;
  var _exit=env._exit;
  var _dsyrk_=env._dsyrk_;
  var _dlerror=env._dlerror;
  var _g_private_set=env._g_private_set;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _fmod=env._fmod;
  var _g_locale_from_utf8=env._g_locale_from_utf8;
  var _vfprintf=env._vfprintf;
  var _rmdir=env._rmdir;
  var _dpotrf_=env._dpotrf_;
  var ___buildEnvironment=env.___buildEnvironment;
  var _pwrite=env._pwrite;
  var _open=env._open;
  var _remove=env._remove;
  var _g_return_if_fail_warning=env._g_return_if_fail_warning;
  var _strftime=env._strftime;
  var _g_free=env._g_free;
  var _fdopen=env._fdopen;
  var _g_locale_to_utf8=env._g_locale_to_utf8;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _log=env._log;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _abort=env._abort;
  var _g_malloc0=env._g_malloc0;
  var _ceil=env._ceil;
  var _fopen=env._fopen;
  var _read=env._read;
  var _getgid=env._getgid;
  var _sin=env._sin;
  var _dgeev_=env._dgeev_;
  var _dorgqr_=env._dorgqr_;
  var _mkstemp=env._mkstemp;
  var _g_malloc0_n=env._g_malloc0_n;
  var _times=env._times;
  var __reallyNegative=env.__reallyNegative;
  var _dtrtri_=env._dtrtri_;
  var _dpotri_=env._dpotri_;
  var _fileno=env._fileno;
  var __exit=env.__exit;
  var _g_private_get=env._g_private_get;
  var __arraySum=env.__arraySum;
  var _fgets=env._fgets;
  var _atan=env._atan;
  var _g_get_prgname=env._g_get_prgname;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _genrand_mt=env._genrand_mt;
  var _g_atomic_int_dec_and_test=env._g_atomic_int_dec_and_test;
  var _fflush=env._fflush;
  var ___errno_location=env.___errno_location;
  var _puts=env._puts;
  var _copysign=env._copysign;
  var _fputc=env._fputc;
  var _copysignl=env._copysignl;
  var _free_mt_struct=env._free_mt_struct;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var _sqrt=env._sqrt;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 7)&-8;
    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }
  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function _noalloc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_puts((296|0))|0);
 _exit(1);
 // unreachable;
}
function _xmlInitParser() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _xmlCleanupParser() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _main() {
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $i$11 = 0, $vararg_buffer1 = 0, $vlist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $vararg_buffer1 = sp + 280|0;
 $0 = sp + 8|0;
 $vlist = sp;
 _libgretl_init();
 _logo(0);
 $1 = (_gretl_print_new(0,0)|0);
 $2 = (_create_new_dataset(3,14,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _noalloc();
  // unreachable;
 }
 $4 = (($2) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 ;HEAP8[$7+0>>0]=HEAP8[232+0>>0]|0;HEAP8[$7+1>>0]=HEAP8[232+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[232+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[232+3>>0]|0;HEAP8[$7+4>>0]=HEAP8[232+4>>0]|0;HEAP8[$7+5>>0]=HEAP8[232+5>>0]|0;
 $8 = HEAP32[$4>>2]|0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 ;HEAP8[$10+0>>0]=HEAP8[240+0>>0]|0;HEAP8[$10+1>>0]=HEAP8[240+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[240+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[240+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[240+4>>0]|0;
 $11 = (($2) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = (($2) + 64|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$11>>2]|0;
  $i$02 = 0;
  while(1) {
   $25 = (8 + ($i$02<<3)|0);
   $26 = +HEAPF64[$25>>3];
   $27 = (($17) + ($i$02<<3)|0);
   HEAPF64[$27>>3] = $26;
   $28 = (($i$02) + 1)|0;
   $29 = ($28|0)<($18|0);
   if ($29) {
    $i$02 = $28;
   } else {
    break;
   }
  }
  $$pr = HEAP32[$11>>2]|0;
  $19 = ($$pr|0)>(0);
  if ($19) {
   $20 = (($2) + 64|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$11>>2]|0;
   $i$11 = 0;
   while(1) {
    $30 = (120 + ($i$11<<3)|0);
    $31 = +HEAPF64[$30>>3];
    $32 = (($23) + ($i$11<<3)|0);
    HEAPF64[$32>>3] = $31;
    $33 = (($i$11) + 1)|0;
    $34 = ($33|0)<($24|0);
    if ($34) {
     $i$11 = $33;
    } else {
     break;
    }
   }
  }
 }
 $35 = (_gretl_list_new(3)|0);
 $36 = (($35) + 4|0);
 HEAP32[$36>>2] = 1;
 $37 = (($35) + 8|0);
 HEAP32[$37>>2] = 0;
 $38 = (($35) + 12|0);
 HEAP32[$38>>2] = 2;
 $39 = (_gretl_model_new()|0);
 $40 = ($39|0)==(0|0);
 if ($40) {
  _noalloc();
  // unreachable;
 }
 _lsq($0,$35,$2,86,0);
 _memcpy(($39|0),($0|0),272)|0;
 $41 = (($39) + 228|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0);
 if ($43) {
  HEAP32[$39>>2] = 1;
  (_printmodel($39,$2,0,$1)|0);
  $45 = $vlist;
  $46 = $45;
  HEAP32[$46>>2] = 1;
  $47 = (($45) + 4)|0;
  $48 = $47;
  HEAP32[$48>>2] = 2;
  (_kpss_test(3,$vlist,$2,0,$1)|0);
  _gretl_model_free($39);
  _free($35);
  _destroy_dataset($2);
  _gretl_print_destroy($1);
  _libgretl_cleanup();
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer1>>2] = $42;
  (_printf((248|0),($vararg_buffer1|0))|0);
  $44 = (_gretl_errmsg_get()|0);
  HEAP32[$vararg_buffer1>>2] = $44;
  (_printf((272|0),($vararg_buffer1|0))|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___gmpf_set_default_prec($prec_in_bits) {
 $prec_in_bits = $prec_in_bits|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prec_in_bits;
 $1 = HEAP32[$0>>2]|0;
 $2 = (53)>($1>>>0);
 $3 = HEAP32[$0>>2]|0;
 $4 = $2 ? 53 : $3;
 $5 = (($4) + 128)|0;
 $6 = (($5) - 1)|0;
 $7 = (($6>>>0) / 64)&-1;
 HEAP32[328>>2] = $7;
 STACKTOP = sp;return;
}
function _kpss_test($order,$list,$dset,$opt,$prn) {
 $order = $order|0;
 $list = $list|0;
 $dset = $dset|0;
 $opt = $opt|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, $orig_nvars = 0, $save_t1 = 0, $save_t2 = 0, $v = 0, $vlist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $save_t1 = sp + 28|0;
 $save_t2 = sp + 24|0;
 $orig_nvars = sp + 20|0;
 $err = sp + 16|0;
 $i = sp + 12|0;
 $v = sp + 8|0;
 $vlist = sp;
 HEAP32[$0>>2] = $order;
 HEAP32[$1>>2] = $list;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $opt;
 HEAP32[$4>>2] = $prn;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$save_t1>>2] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$save_t2>>2] = $10;
 $11 = HEAP32[$2>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$orig_nvars>>2] = $12;
 HEAP32[$err>>2] = 0;
 $13 = HEAP32[$2>>2]|0;
 $14 = (_multi_unit_panel_sample($13)|0);
 $15 = ($14|0)!=(0);
 L1: do {
  if ($15) {
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$2>>2]|0;
   $21 = HEAP32[$3>>2]|0;
   $22 = HEAP32[$4>>2]|0;
   $23 = (_panel_kpss_test($16,$19,$20,$21,$22)|0);
   HEAP32[$err>>2] = $23;
  } else {
   ;HEAP32[$vlist+0>>2]=HEAP32[336+0>>2]|0;HEAP32[$vlist+4>>2]=HEAP32[336+4>>2]|0;
   HEAP32[$i>>2] = 1;
   while(1) {
    $24 = HEAP32[$i>>2]|0;
    $25 = HEAP32[$1>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($24|0)<=($26|0);
    if (!($27)) {
     break L1;
    }
    $28 = HEAP32[$err>>2]|0;
    $29 = ($28|0)!=(0);
    $30 = $29 ^ 1;
    if (!($30)) {
     break L1;
    }
    $31 = HEAP32[$i>>2]|0;
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + ($31<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    HEAP32[$v>>2] = $34;
    $35 = HEAP32[$v>>2]|0;
    $36 = (($vlist) + 4|0);
    HEAP32[$36>>2] = $35;
    $37 = HEAP32[$2>>2]|0;
    $38 = (($37) + 24|0);
    $39 = HEAP32[$2>>2]|0;
    $40 = (($39) + 28|0);
    $41 = HEAP32[$2>>2]|0;
    $42 = (_list_adjust_sample($vlist,$38,$40,$41,0)|0);
    HEAP32[$err>>2] = $42;
    $43 = HEAP32[$err>>2]|0;
    $44 = ($43|0)!=(0);
    if (!($44)) {
     $45 = HEAP32[$0>>2]|0;
     $46 = HEAP32[$v>>2]|0;
     $47 = HEAP32[$2>>2]|0;
     $48 = HEAP32[$3>>2]|0;
     $49 = HEAP32[$4>>2]|0;
     $50 = (_real_kpss_test($45,$46,$47,$48,0,$49)|0);
     HEAP32[$err>>2] = $50;
    }
    $51 = HEAP32[$save_t1>>2]|0;
    $52 = HEAP32[$2>>2]|0;
    $53 = (($52) + 24|0);
    HEAP32[$53>>2] = $51;
    $54 = HEAP32[$save_t2>>2]|0;
    $55 = HEAP32[$2>>2]|0;
    $56 = (($55) + 28|0);
    HEAP32[$56>>2] = $54;
    $57 = HEAP32[$i>>2]|0;
    $58 = (($57) + 1)|0;
    HEAP32[$i>>2] = $58;
   }
  }
 } while(0);
 $59 = HEAP32[$save_t1>>2]|0;
 $60 = HEAP32[$2>>2]|0;
 $61 = (($60) + 24|0);
 HEAP32[$61>>2] = $59;
 $62 = HEAP32[$save_t2>>2]|0;
 $63 = HEAP32[$2>>2]|0;
 $64 = (($63) + 28|0);
 HEAP32[$64>>2] = $62;
 $65 = HEAP32[$2>>2]|0;
 $66 = HEAP32[$2>>2]|0;
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$orig_nvars>>2]|0;
 $69 = (($67) - ($68))|0;
 (_dataset_drop_last_variables($65,$69)|0);
 $70 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($70|0);
}
function _panel_kpss_test($order,$v,$dset,$opt,$prn) {
 $order = $order|0;
 $v = $v|0;
 $dset = $dset|0;
 $opt = $opt|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $err = 0, $gt_10 = 0, $i = 0;
 var $kinfo = 0, $lpv = 0, $lt_01 = 0, $n = 0, $ppv = 0, $pval = 0, $u0 = 0, $uN = 0, $vararg_buffer31 = 0, $vararg_ptr1 = 0, $vararg_ptr21 = 0, $vararg_ptr8 = 0, $verbose = 0, $zpv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer31 = sp + 56|0;
 $0 = sp + 116|0;
 $1 = sp + 112|0;
 $2 = sp + 108|0;
 $3 = sp + 104|0;
 $4 = sp + 100|0;
 $kinfo = sp + 32|0;
 $u0 = sp + 96|0;
 $uN = sp + 92|0;
 $n = sp + 88|0;
 $verbose = sp + 84|0;
 $ppv = sp + 24|0;
 $zpv = sp + 16|0;
 $lpv = sp + 8|0;
 $gt_10 = sp + 80|0;
 $lt_01 = sp + 76|0;
 $pval = sp;
 $i = sp + 72|0;
 $err = sp + 68|0;
 HEAP32[$0>>2] = $order;
 HEAP32[$1>>2] = $v;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $opt;
 HEAP32[$4>>2] = $prn;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7|0) / ($10|0))&-1;
 HEAP32[$u0>>2] = $11;
 $12 = HEAP32[$2>>2]|0;
 $13 = (($12) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14|0) / ($17|0))&-1;
 HEAP32[$uN>>2] = $18;
 $19 = HEAP32[$uN>>2]|0;
 $20 = HEAP32[$u0>>2]|0;
 $21 = (($19) - ($20))|0;
 $22 = (($21) + 1)|0;
 HEAP32[$n>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = $23 & 2097152;
 HEAP32[$verbose>>2] = $24;
 HEAPF64[$ppv>>3] = 0.0;
 HEAPF64[$zpv>>3] = 0.0;
 HEAPF64[$lpv>>3] = 0.0;
 HEAP32[$gt_10>>2] = 0;
 HEAP32[$lt_01>>2] = 0;
 HEAP32[$err>>2] = 0;
 $25 = HEAP32[$4>>2]|0;
 $26 = HEAP32[$1>>2]|0;
 $27 = HEAP32[$2>>2]|0;
 $28 = (($27) + 68|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($26<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$3>>2]|0;
 $33 = $32 & 524288;
 $34 = ($33|0)!=(0);
 $35 = $34 ? 1048 : 1072;
 HEAP32[$vararg_buffer31>>2] = $31;
 $vararg_ptr1 = (($vararg_buffer31) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $35;
 (_pprintf($25,1024,$vararg_buffer31)|0);
 $36 = HEAP32[$4>>2]|0;
 $37 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer31>>2] = $37;
 (_pprintf($36,688,$vararg_buffer31)|0);
 $38 = HEAP32[$4>>2]|0;
 (_pputc($38,10)|0);
 $39 = HEAP32[$u0>>2]|0;
 HEAP32[$i>>2] = $39;
 while(1) {
  $40 = HEAP32[$i>>2]|0;
  $41 = HEAP32[$uN>>2]|0;
  $42 = ($40|0)<=($41|0);
  if (!($42)) {
   break;
  }
  $43 = HEAP32[$err>>2]|0;
  $44 = ($43|0)!=(0);
  $45 = $44 ^ 1;
  if (!($45)) {
   break;
  }
  $46 = HEAP32[$i>>2]|0;
  $47 = HEAP32[$2>>2]|0;
  $48 = (($47) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = Math_imul($46, $49)|0;
  $51 = HEAP32[$2>>2]|0;
  $52 = (($51) + 24|0);
  HEAP32[$52>>2] = $50;
  $53 = HEAP32[$2>>2]|0;
  $54 = (($53) + 24|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$2>>2]|0;
  $57 = (($56) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($55) + ($58))|0;
  $60 = (($59) - 1)|0;
  $61 = HEAP32[$2>>2]|0;
  $62 = (($61) + 28|0);
  HEAP32[$62>>2] = $60;
  $63 = HEAP32[$1>>2]|0;
  $64 = HEAP32[$2>>2]|0;
  $65 = (($64) + 64|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($63<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[$2>>2]|0;
  $70 = (($69) + 24|0);
  $71 = HEAP32[$2>>2]|0;
  $72 = (($71) + 28|0);
  $73 = (_series_adjust_sample($68,$70,$72)|0);
  HEAP32[$err>>2] = $73;
  $74 = HEAP32[$err>>2]|0;
  $75 = ($74|0)!=(0);
  do {
   if (!($75)) {
    $76 = HEAP32[$0>>2]|0;
    $77 = HEAP32[$1>>2]|0;
    $78 = HEAP32[$2>>2]|0;
    $79 = HEAP32[$3>>2]|0;
    $80 = $79 | 65536;
    $81 = HEAP32[$4>>2]|0;
    $82 = (_real_kpss_test($76,$77,$78,$80,$kinfo,$81)|0);
    HEAP32[$err>>2] = $82;
    $83 = HEAP32[$err>>2]|0;
    $84 = ($83|0)!=(0);
    if (!($84)) {
     $85 = HEAP32[$verbose>>2]|0;
     $86 = ($85|0)!=(0);
     if ($86) {
      $87 = HEAP32[$4>>2]|0;
      $88 = HEAP32[$i>>2]|0;
      $89 = (($88) + 1)|0;
      $90 = HEAP32[$kinfo>>2]|0;
      HEAP32[$vararg_buffer31>>2] = $89;
      $vararg_ptr8 = (($vararg_buffer31) + 4|0);
      HEAP32[$vararg_ptr8>>2] = $90;
      (_pprintf($87,1088,$vararg_buffer31)|0);
      $91 = (($kinfo) + 16|0);
      $92 = +HEAPF64[$91>>3];
      $93 = $92 == 1.79769313486231570815E+308;
      $94 = HEAP32[$4>>2]|0;
      if ($93) {
       (_pputs($94,672)|0);
       break;
      }
      $95 = (($kinfo) + 8|0);
      $96 = +HEAPF64[$95>>3];
      HEAPF64[tempDoublePtr>>3]=$96;HEAP32[$vararg_buffer31>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer31+4>>2]=HEAP32[tempDoublePtr+4>>2];
      (_pprintf($94,1112,$vararg_buffer31)|0);
      $97 = (($kinfo) + 16|0);
      $98 = +HEAPF64[$97>>3];
      $99 = $98 == 1.10000000000000008882;
      do {
       if ($99) {
        $100 = HEAP32[$4>>2]|0;
        HEAP32[$vararg_buffer31>>2] = 1128;
        (_pprintf($100,752,$vararg_buffer31)|0);
       } else {
        $101 = (($kinfo) + 16|0);
        $102 = +HEAPF64[$101>>3];
        $103 = $102 == -1.0;
        $104 = HEAP32[$4>>2]|0;
        if ($103) {
         HEAP32[$vararg_buffer31>>2] = 1128;
         (_pprintf($104,776,$vararg_buffer31)|0);
         break;
        } else {
         $105 = (($kinfo) + 16|0);
         $106 = +HEAPF64[$105>>3];
         HEAP32[$vararg_buffer31>>2] = 1136;
         $vararg_ptr21 = (($vararg_buffer31) + 4|0);
         HEAPF64[tempDoublePtr>>3]=$106;HEAP32[$vararg_ptr21>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr21+4>>2]=HEAP32[tempDoublePtr+4>>2];
         (_pprintf($104,792,$vararg_buffer31)|0);
         break;
        }
       }
      } while(0);
      $107 = HEAP32[$4>>2]|0;
      (_pputc($107,10)|0);
     }
    }
   }
  } while(0);
  $108 = HEAP32[$err>>2]|0;
  $109 = ($108|0)!=(0);
  do {
   if (!($109)) {
    $110 = (($kinfo) + 16|0);
    $111 = +HEAPF64[$110>>3];
    HEAPF64[$pval>>3] = $111;
    $112 = +HEAPF64[$pval>>3];
    $113 = $112 == 1.10000000000000008882;
    do {
     if ($113) {
      $114 = HEAP32[$gt_10>>2]|0;
      $115 = (($114) + 1)|0;
      HEAP32[$gt_10>>2] = $115;
      $116 = HEAP32[$lt_01>>2]|0;
      $117 = ($116|0)==(0);
      if ($117) {
       HEAPF64[$pval>>3] = 0.100000000000000005551;
       break;
      } else {
       HEAPF64[$pval>>3] = 1.79769313486231570815E+308;
       break;
      }
     } else {
      $118 = +HEAPF64[$pval>>3];
      $119 = $118 == -1.0;
      if ($119) {
       $120 = HEAP32[$lt_01>>2]|0;
       $121 = (($120) + 1)|0;
       HEAP32[$lt_01>>2] = $121;
       $122 = HEAP32[$gt_10>>2]|0;
       $123 = ($122|0)==(0);
       if ($123) {
        HEAPF64[$pval>>3] = 0.0100000000000000002082;
        break;
       } else {
        HEAPF64[$pval>>3] = 1.79769313486231570815E+308;
        break;
       }
      }
     }
    } while(0);
    $124 = +HEAPF64[$pval>>3];
    $125 = $124 == 1.79769313486231570815E+308;
    if (!($125)) {
     $126 = +HEAPF64[$pval>>3];
     $127 = (___DOUBLE_BITS($126)|0);
     $128 = tempRet0;
     $129 = $128 & 2147483647;
     $130 = ($129>>>0)<(2146435072);
     $131 = ($129|0)==(2146435072);
     $132 = ($127>>>0)<(0);
     $133 = $131 & $132;
     $134 = $130 | $133;
     if ($134) {
      $135 = +HEAPF64[$ppv>>3];
      $136 = $135 == 1.79769313486231570815E+308;
      if ($136) {
       break;
      }
      $137 = +HEAPF64[$pval>>3];
      $138 = (+Math_log((+$137)));
      $139 = +HEAPF64[$ppv>>3];
      $140 = $139 + $138;
      HEAPF64[$ppv>>3] = $140;
      $141 = +HEAPF64[$pval>>3];
      $142 = (+_normal_cdf_inverse($141));
      $143 = +HEAPF64[$zpv>>3];
      $144 = $143 + $142;
      HEAPF64[$zpv>>3] = $144;
      $145 = +HEAPF64[$pval>>3];
      $146 = +HEAPF64[$pval>>3];
      $147 = 1.0 - $146;
      $148 = $145 / $147;
      $149 = (+Math_log((+$148)));
      $150 = +HEAPF64[$lpv>>3];
      $151 = $150 + $149;
      HEAPF64[$lpv>>3] = $151;
      break;
     }
    }
    HEAPF64[$lpv>>3] = 1.79769313486231570815E+308;
    HEAPF64[$zpv>>3] = 1.79769313486231570815E+308;
    HEAPF64[$ppv>>3] = 1.79769313486231570815E+308;
   }
  } while(0);
  $152 = HEAP32[$i>>2]|0;
  $153 = (($152) + 1)|0;
  HEAP32[$i>>2] = $153;
 }
 $154 = HEAP32[$err>>2]|0;
 $155 = ($154|0)!=(0);
 if (!($155)) {
  $156 = +HEAPF64[$ppv>>3];
  $157 = $156 == 1.79769313486231570815E+308;
  if (!($157)) {
   $158 = HEAP32[$4>>2]|0;
   HEAP32[$vararg_buffer31>>2] = 1168;
   (_pprintf($158,1160,$vararg_buffer31)|0);
   $159 = +HEAPF64[$ppv>>3];
   $160 = +HEAPF64[$zpv>>3];
   $161 = +HEAPF64[$lpv>>3];
   $162 = HEAP32[$n>>2]|0;
   $163 = HEAP32[$4>>2]|0;
   _do_choi_test($159,$160,$161,$162,$163);
   $164 = HEAP32[$gt_10>>2]|0;
   $165 = ($164|0)>(0);
   if ($165) {
    $166 = HEAP32[$4>>2]|0;
    (_pputs($166,1200)|0);
    $167 = HEAP32[$4>>2]|0;
    $168 = HEAP32[$gt_10>>2]|0;
    HEAP32[$vararg_buffer31>>2] = $168;
    (_pprintf($167,1256,$vararg_buffer31)|0);
   } else {
    $169 = HEAP32[$lt_01>>2]|0;
    $170 = ($169|0)>(0);
    if ($170) {
     $171 = HEAP32[$4>>2]|0;
     (_pputs($171,1320)|0);
     $172 = HEAP32[$4>>2]|0;
     $173 = HEAP32[$lt_01>>2]|0;
     HEAP32[$vararg_buffer31>>2] = $173;
     (_pprintf($172,1376,$vararg_buffer31)|0);
    }
   }
   $174 = HEAP32[$4>>2]|0;
   (_pputc($174,10)|0);
   $176 = HEAP32[$err>>2]|0;
   STACKTOP = sp;return ($176|0);
  }
 }
 $175 = HEAP32[$4>>2]|0;
 (_pprintf($175,1440,$vararg_buffer31)|0);
 $176 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($176|0);
}
function _real_kpss_test($order,$varno,$dset,$opt,$kinfo,$prn) {
 $order = $order|0;
 $varno = $varno|0;
 $dset = $dset|0;
 $opt = $opt|0;
 $kinfo = $kinfo|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0;
 var $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0;
 var $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $KPSSmod = 0, $T = 0, $a = 0, $autocov = 0, $cumsum = 0, $cumsum2 = 0, $cv = 0, $et = 0, $firstdum = 0, $hasseas = 0, $hastrend = 0, $i = 0, $list = 0, $ndum = 0, $nreg = 0, $or$cond = 0, $pval = 0, $s = 0, $s2 = 0;
 var $t = 0, $t1 = 0, $t2 = 0, $teststat = 0, $vararg_buffer29 = 0, $vararg_ptr22 = 0, $vararg_ptr32 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $wt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0;
 $vararg_buffer29 = sp + 648|0;
 $0 = sp + 736|0;
 $1 = sp + 732|0;
 $2 = sp + 728|0;
 $3 = sp + 724|0;
 $4 = sp + 720|0;
 $5 = sp + 716|0;
 $6 = sp + 712|0;
 $KPSSmod = sp + 376|0;
 $list = sp + 708|0;
 $hastrend = sp + 704|0;
 $hasseas = sp + 700|0;
 $et = sp + 368|0;
 $s2 = sp + 360|0;
 $cumsum = sp + 352|0;
 $cumsum2 = sp + 344|0;
 $teststat = sp + 336|0;
 $pval = sp + 328|0;
 $autocov = sp + 696|0;
 $t1 = sp + 692|0;
 $t2 = sp + 688|0;
 $T = sp + 684|0;
 $i = sp + 680|0;
 $t = sp + 676|0;
 $ndum = sp + 672|0;
 $nreg = sp + 668|0;
 $firstdum = sp + 664|0;
 $7 = sp + 56|0;
 $s = sp + 660|0;
 $wt = sp + 48|0;
 $a = sp + 24|0;
 $cv = sp;
 HEAP32[$1>>2] = $order;
 HEAP32[$2>>2] = $varno;
 HEAP32[$3>>2] = $dset;
 HEAP32[$4>>2] = $opt;
 HEAP32[$5>>2] = $kinfo;
 HEAP32[$6>>2] = $prn;
 HEAP32[$list>>2] = 0;
 HEAP32[$hastrend>>2] = 0;
 HEAP32[$hasseas>>2] = 0;
 HEAPF64[$s2>>3] = 0.0;
 HEAPF64[$cumsum>>3] = 0.0;
 HEAPF64[$cumsum2>>3] = 0.0;
 HEAPF64[$pval>>3] = 1.79769313486231570815E+308;
 $8 = HEAP32[$2>>2]|0;
 $9 = ($8|0)<=(0);
 if (!($9)) {
  $10 = HEAP32[$2>>2]|0;
  $11 = HEAP32[$3>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)>=($12|0);
  if (!($13)) {
   $14 = HEAP32[$3>>2]|0;
   $15 = (($14) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$3>>2]|0;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$2>>2]|0;
   $21 = HEAP32[$3>>2]|0;
   $22 = (($21) + 64|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($20<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_gretl_isconst($16,$19,$25)|0);
   $27 = ($26|0)!=(0);
   if ($27) {
    $28 = HEAP32[$2>>2]|0;
    $29 = HEAP32[$3>>2]|0;
    $30 = (($29) + 68|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + ($28<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    HEAP32[$vararg_buffer29>>2] = $33;
    _gretl_errmsg_sprintf(416,$vararg_buffer29);
    HEAP32[$0>>2] = 2;
    $320 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($320|0);
   }
   $34 = HEAP32[$4>>2]|0;
   $35 = $34 & 32;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = HEAP32[$2>>2]|0;
    $38 = HEAP32[$3>>2]|0;
    $39 = (_diffgenr($37,24,$38)|0);
    HEAP32[$2>>2] = $39;
    $40 = HEAP32[$2>>2]|0;
    $41 = ($40|0)<(0);
    if ($41) {
     HEAP32[$0>>2] = 2;
     $320 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($320|0);
    }
   }
   $42 = HEAP32[$4>>2]|0;
   $43 = $42 & 524288;
   $44 = ($43|0)!=(0);
   if ($44) {
    HEAP32[$hastrend>>2] = 1;
   }
   $45 = HEAP32[$4>>2]|0;
   $46 = $45 & 8;
   $47 = ($46|0)!=(0);
   if ($47) {
    HEAP32[$hasseas>>2] = 1;
   }
   $48 = HEAP32[$hasseas>>2]|0;
   $49 = ($48|0)!=(0);
   if ($49) {
    $50 = HEAP32[$3>>2]|0;
    $51 = (($50) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) - 1)|0;
    $54 = $53;
   } else {
    $54 = 0;
   }
   HEAP32[$ndum>>2] = $54;
   $55 = HEAP32[$hastrend>>2]|0;
   $56 = (1 + ($55))|0;
   $57 = HEAP32[$ndum>>2]|0;
   $58 = (($56) + ($57))|0;
   HEAP32[$nreg>>2] = $58;
   $59 = HEAP32[$nreg>>2]|0;
   $60 = (($59) + 1)|0;
   $61 = (_gretl_list_new($60)|0);
   HEAP32[$list>>2] = $61;
   $62 = HEAP32[$list>>2]|0;
   $63 = ($62|0)==(0|0);
   if ($63) {
    HEAP32[$0>>2] = 12;
    $320 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($320|0);
   }
   $64 = HEAP32[$2>>2]|0;
   $65 = HEAP32[$list>>2]|0;
   $66 = (($65) + 4|0);
   HEAP32[$66>>2] = $64;
   $67 = HEAP32[$list>>2]|0;
   $68 = (($67) + 8|0);
   HEAP32[$68>>2] = 0;
   $69 = HEAP32[$hastrend>>2]|0;
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = HEAP32[$3>>2]|0;
    $72 = (_gettrend($71,0)|0);
    $73 = HEAP32[$list>>2]|0;
    $74 = (($73) + 12|0);
    HEAP32[$74>>2] = $72;
    $75 = HEAP32[$list>>2]|0;
    $76 = (($75) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(0);
    if ($78) {
     HEAP32[$0>>2] = 12;
     $320 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($320|0);
    }
   }
   $79 = HEAP32[$hasseas>>2]|0;
   $80 = ($79|0)!=(0);
   L31: do {
    if ($80) {
     $81 = HEAP32[$3>>2]|0;
     $82 = (_dummy($81,0)|0);
     HEAP32[$firstdum>>2] = $82;
     $83 = HEAP32[$firstdum>>2]|0;
     $84 = ($83|0)==(0);
     if ($84) {
      $85 = HEAP32[$list>>2]|0;
      _free($85);
      HEAP32[$0>>2] = 12;
      $320 = HEAP32[$0>>2]|0;
      STACKTOP = sp;return ($320|0);
     }
     HEAP32[$i>>2] = 0;
     while(1) {
      $86 = HEAP32[$i>>2]|0;
      $87 = HEAP32[$ndum>>2]|0;
      $88 = ($86|0)<($87|0);
      if (!($88)) {
       break L31;
      }
      $89 = HEAP32[$firstdum>>2]|0;
      $90 = HEAP32[$i>>2]|0;
      $91 = (($89) + ($90))|0;
      $92 = HEAP32[$hastrend>>2]|0;
      $93 = (3 + ($92))|0;
      $94 = HEAP32[$i>>2]|0;
      $95 = (($93) + ($94))|0;
      $96 = HEAP32[$list>>2]|0;
      $97 = (($96) + ($95<<2)|0);
      HEAP32[$97>>2] = $91;
      $98 = HEAP32[$i>>2]|0;
      $99 = (($98) + 1)|0;
      HEAP32[$i>>2] = $99;
     }
    }
   } while(0);
   $100 = HEAP32[$list>>2]|0;
   $101 = HEAP32[$3>>2]|0;
   _lsq($7,$100,$101,86,4097);
   _memcpy(($KPSSmod|0),($7|0),272)|0;
   $102 = (($KPSSmod) + 228|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)!=(0);
   if ($104) {
    _clear_model($KPSSmod);
    $105 = (($KPSSmod) + 228|0);
    $106 = HEAP32[$105>>2]|0;
    HEAP32[$0>>2] = $106;
    $320 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($320|0);
   }
   $107 = (($KPSSmod) + 16|0);
   $108 = HEAP32[$107>>2]|0;
   HEAP32[$t1>>2] = $108;
   $109 = (($KPSSmod) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   HEAP32[$t2>>2] = $110;
   $111 = (($KPSSmod) + 24|0);
   $112 = HEAP32[$111>>2]|0;
   HEAP32[$T>>2] = $112;
   $113 = HEAP32[$1>>2]|0;
   $114 = ($113|0)<=(0);
   if ($114) {
    $115 = HEAP32[$T>>2]|0;
    $116 = (+($115|0));
    $117 = $116 / 100.0;
    $118 = (+Math_pow((+$117),0.25));
    $119 = 4.0 * $118;
    $120 = (~~(($119)));
    HEAP32[$1>>2] = $120;
   }
   $121 = HEAP32[$5>>2]|0;
   $122 = ($121|0)==(0|0);
   if ($122) {
    $123 = HEAP32[$4>>2]|0;
    $124 = $123 & 2097152;
    $125 = ($124|0)!=(0);
    if ($125) {
     $126 = (($KPSSmod) + 72|0);
     HEAP32[$126>>2] = 11;
     $127 = HEAP32[$3>>2]|0;
     $128 = HEAP32[$6>>2]|0;
     (_printmodel($KPSSmod,$127,0,$128)|0);
    }
   }
   $129 = HEAP32[$1>>2]|0;
   $130 = $129<<3;
   $131 = (_malloc($130)|0);
   HEAP32[$autocov>>2] = $131;
   $132 = HEAP32[$autocov>>2]|0;
   $133 = ($132|0)==(0|0);
   if ($133) {
    HEAP32[$0>>2] = 12;
    $320 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($320|0);
   }
   HEAP32[$i>>2] = 0;
   while(1) {
    $134 = HEAP32[$i>>2]|0;
    $135 = HEAP32[$1>>2]|0;
    $136 = ($134|0)<($135|0);
    if (!($136)) {
     break;
    }
    $137 = HEAP32[$i>>2]|0;
    $138 = HEAP32[$autocov>>2]|0;
    $139 = (($138) + ($137<<3)|0);
    HEAPF64[$139>>3] = 0.0;
    $140 = HEAP32[$i>>2]|0;
    $141 = (($140) + 1)|0;
    HEAP32[$i>>2] = $141;
   }
   $142 = HEAP32[$t1>>2]|0;
   HEAP32[$t>>2] = $142;
   while(1) {
    $143 = HEAP32[$t>>2]|0;
    $144 = HEAP32[$t2>>2]|0;
    $145 = ($143|0)<=($144|0);
    if (!($145)) {
     break;
    }
    $146 = HEAP32[$t>>2]|0;
    $147 = (($KPSSmod) + 84|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (($148) + ($146<<3)|0);
    $150 = +HEAPF64[$149>>3];
    HEAPF64[$et>>3] = $150;
    $151 = +HEAPF64[$et>>3];
    $152 = $151 == 1.79769313486231570815E+308;
    L63: do {
     if (!($152)) {
      $153 = +HEAPF64[$et>>3];
      $154 = +HEAPF64[$cumsum>>3];
      $155 = $154 + $153;
      HEAPF64[$cumsum>>3] = $155;
      $156 = +HEAPF64[$cumsum>>3];
      $157 = +HEAPF64[$cumsum>>3];
      $158 = $156 * $157;
      $159 = +HEAPF64[$cumsum2>>3];
      $160 = $159 + $158;
      HEAPF64[$cumsum2>>3] = $160;
      $161 = +HEAPF64[$et>>3];
      $162 = +HEAPF64[$et>>3];
      $163 = $161 * $162;
      $164 = +HEAPF64[$s2>>3];
      $165 = $164 + $163;
      HEAPF64[$s2>>3] = $165;
      HEAP32[$i>>2] = 0;
      while(1) {
       $166 = HEAP32[$i>>2]|0;
       $167 = HEAP32[$1>>2]|0;
       $168 = ($166|0)<($167|0);
       if (!($168)) {
        break L63;
       }
       $169 = HEAP32[$i>>2]|0;
       $170 = (($169) + 1)|0;
       HEAP32[$s>>2] = $170;
       $171 = HEAP32[$t>>2]|0;
       $172 = HEAP32[$s>>2]|0;
       $173 = (($171) - ($172))|0;
       $174 = HEAP32[$t1>>2]|0;
       $175 = ($173|0)>=($174|0);
       if ($175) {
        $176 = +HEAPF64[$et>>3];
        $177 = HEAP32[$t>>2]|0;
        $178 = HEAP32[$s>>2]|0;
        $179 = (($177) - ($178))|0;
        $180 = (($KPSSmod) + 84|0);
        $181 = HEAP32[$180>>2]|0;
        $182 = (($181) + ($179<<3)|0);
        $183 = +HEAPF64[$182>>3];
        $184 = $176 * $183;
        $185 = HEAP32[$i>>2]|0;
        $186 = HEAP32[$autocov>>2]|0;
        $187 = (($186) + ($185<<3)|0);
        $188 = +HEAPF64[$187>>3];
        $189 = $188 + $184;
        HEAPF64[$187>>3] = $189;
       }
       $190 = HEAP32[$i>>2]|0;
       $191 = (($190) + 1)|0;
       HEAP32[$i>>2] = $191;
      }
     }
    } while(0);
    $192 = HEAP32[$t>>2]|0;
    $193 = (($192) + 1)|0;
    HEAP32[$t>>2] = $193;
   }
   HEAP32[$i>>2] = 0;
   while(1) {
    $194 = HEAP32[$i>>2]|0;
    $195 = HEAP32[$1>>2]|0;
    $196 = ($194|0)<($195|0);
    if (!($196)) {
     break;
    }
    $197 = HEAP32[$i>>2]|0;
    $198 = (($197) + 1)|0;
    $199 = (+($198|0));
    $200 = HEAP32[$1>>2]|0;
    $201 = (($200) + 1)|0;
    $202 = (+($201|0));
    $203 = $199 / $202;
    $204 = 1.0 - $203;
    HEAPF64[$wt>>3] = $204;
    $205 = +HEAPF64[$wt>>3];
    $206 = 2.0 * $205;
    $207 = HEAP32[$i>>2]|0;
    $208 = HEAP32[$autocov>>2]|0;
    $209 = (($208) + ($207<<3)|0);
    $210 = +HEAPF64[$209>>3];
    $211 = $206 * $210;
    $212 = +HEAPF64[$s2>>3];
    $213 = $212 + $211;
    HEAPF64[$s2>>3] = $213;
    $214 = HEAP32[$i>>2]|0;
    $215 = (($214) + 1)|0;
    HEAP32[$i>>2] = $215;
   }
   $216 = HEAP32[$T>>2]|0;
   $217 = (+($216|0));
   $218 = +HEAPF64[$s2>>3];
   $219 = $218 / $217;
   HEAPF64[$s2>>3] = $219;
   $220 = +HEAPF64[$s2>>3];
   $221 = $220 <= 0.0;
   if ($221) {
    HEAPF64[$pval>>3] = 1.79769313486231570815E+308;
    HEAPF64[$teststat>>3] = 1.79769313486231570815E+308;
   } else {
    $222 = +HEAPF64[$cumsum2>>3];
    $223 = +HEAPF64[$s2>>3];
    $224 = HEAP32[$T>>2]|0;
    $225 = (+($224|0));
    $226 = $223 * $225;
    $227 = HEAP32[$T>>2]|0;
    $228 = (+($227|0));
    $229 = $226 * $228;
    $230 = $222 / $229;
    HEAPF64[$teststat>>3] = $230;
    $231 = +HEAPF64[$teststat>>3];
    $232 = HEAP32[$T>>2]|0;
    $233 = HEAP32[$hastrend>>2]|0;
    $234 = (+_kpss_interp($231,$232,$233));
    HEAPF64[$pval>>3] = $234;
   }
   $235 = HEAP32[$5>>2]|0;
   $236 = ($235|0)!=(0|0);
   if ($236) {
    $237 = HEAP32[$T>>2]|0;
    $238 = HEAP32[$5>>2]|0;
    HEAP32[$238>>2] = $237;
    $239 = +HEAPF64[$teststat>>3];
    $240 = HEAP32[$5>>2]|0;
    $241 = (($240) + 8|0);
    HEAPF64[$241>>3] = $239;
    $242 = +HEAPF64[$pval>>3];
    $243 = HEAP32[$5>>2]|0;
    $244 = (($243) + 16|0);
    HEAPF64[$244>>3] = $242;
   } else {
    $245 = +HEAPF64[$pval>>3];
    $246 = $245 == 1.10000000000000008882;
    $247 = +HEAPF64[$pval>>3];
    $248 = $247 == -1.0;
    $or$cond = $246 | $248;
    if ($or$cond) {
     HEAPF64[$pval>>3] = 1.79769313486231570815E+308;
    }
    $249 = HEAP32[$4>>2]|0;
    $250 = $249 & 2097152;
    $251 = ($250|0)!=(0);
    if ($251) {
     $252 = HEAP32[$6>>2]|0;
     $253 = +HEAPF64[$s2>>3];
     HEAP32[$vararg_buffer29>>2] = 456;
     $vararg_ptr5 = (($vararg_buffer29) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$253;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($252,440,$vararg_buffer29)|0);
     $254 = HEAP32[$6>>2]|0;
     $255 = +HEAPF64[$cumsum2>>3];
     HEAP32[$vararg_buffer29>>2] = 488;
     $vararg_ptr9 = (($vararg_buffer29) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$255;HEAP32[$vararg_ptr9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($254,440,$vararg_buffer29)|0);
    }
   }
   $256 = HEAP32[$4>>2]|0;
   $257 = $256 & 65536;
   $258 = ($257|0)!=(0);
   if (!($258)) {
    ;HEAP32[$a+0>>2]=HEAP32[528+0>>2]|0;HEAP32[$a+4>>2]=HEAP32[528+4>>2]|0;HEAP32[$a+8>>2]=HEAP32[528+8>>2]|0;HEAP32[$a+12>>2]=HEAP32[528+12>>2]|0;HEAP32[$a+16>>2]=HEAP32[528+16>>2]|0;HEAP32[$a+20>>2]=HEAP32[528+20>>2]|0;
    $259 = +HEAPF64[$a>>3];
    $260 = HEAP32[$T>>2]|0;
    $261 = HEAP32[$hastrend>>2]|0;
    $262 = (+_kpss_critval($259,$260,$261));
    HEAPF64[$cv>>3] = $262;
    $263 = (($a) + 8|0);
    $264 = +HEAPF64[$263>>3];
    $265 = HEAP32[$T>>2]|0;
    $266 = HEAP32[$hastrend>>2]|0;
    $267 = (+_kpss_critval($264,$265,$266));
    $268 = (($cv) + 8|0);
    HEAPF64[$268>>3] = $267;
    $269 = (($a) + 16|0);
    $270 = +HEAPF64[$269>>3];
    $271 = HEAP32[$T>>2]|0;
    $272 = HEAP32[$hastrend>>2]|0;
    $273 = (+_kpss_critval($270,$271,$272));
    $274 = (($cv) + 16|0);
    HEAPF64[$274>>3] = $273;
    $275 = HEAP32[$6>>2]|0;
    $276 = HEAP32[$2>>2]|0;
    $277 = HEAP32[$3>>2]|0;
    $278 = (($277) + 68|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = (($279) + ($276<<2)|0);
    $281 = HEAP32[$280>>2]|0;
    HEAP32[$vararg_buffer29>>2] = $281;
    (_pprintf($275,552,$vararg_buffer29)|0);
    $282 = HEAP32[$hastrend>>2]|0;
    $283 = ($282|0)!=(0);
    $284 = HEAP32[$hasseas>>2]|0;
    $285 = ($284|0)!=(0);
    $286 = HEAP32[$6>>2]|0;
    do {
     if ($283) {
      if ($285) {
       (_pputs($286,576)|0);
       break;
      } else {
       (_pputs($286,616)|0);
       break;
      }
     } else {
      if ($285) {
       (_pputs($286,640)|0);
       break;
      } else {
       (_pputs($286,672)|0);
       break;
      }
     }
    } while(0);
    $287 = HEAP32[$6>>2]|0;
    $288 = HEAP32[$T>>2]|0;
    HEAP32[$vararg_buffer29>>2] = $288;
    (_pprintf($287,680,$vararg_buffer29)|0);
    $289 = HEAP32[$6>>2]|0;
    $290 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer29>>2] = $290;
    (_pprintf($289,688,$vararg_buffer29)|0);
    $291 = HEAP32[$6>>2]|0;
    $292 = +HEAPF64[$teststat>>3];
    HEAP32[$vararg_buffer29>>2] = 736;
    $vararg_ptr22 = (($vararg_buffer29) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$292;HEAP32[$vararg_ptr22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr22+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($291,720,$vararg_buffer29)|0);
    $293 = HEAP32[$6>>2]|0;
    _print_critical_values($a,$cv,61,$293);
    $294 = +HEAPF64[$pval>>3];
    $295 = $294 == 1.10000000000000008882;
    do {
     if ($295) {
      $296 = HEAP32[$6>>2]|0;
      HEAP32[$vararg_buffer29>>2] = 768;
      (_pprintf($296,752,$vararg_buffer29)|0);
      HEAPF64[$pval>>3] = 1.79769313486231570815E+308;
     } else {
      $297 = +HEAPF64[$pval>>3];
      $298 = $297 == -1.0;
      if ($298) {
       $299 = HEAP32[$6>>2]|0;
       HEAP32[$vararg_buffer29>>2] = 768;
       (_pprintf($299,776,$vararg_buffer29)|0);
       HEAPF64[$pval>>3] = 1.79769313486231570815E+308;
       break;
      }
      $300 = +HEAPF64[$pval>>3];
      $301 = $300 == 1.79769313486231570815E+308;
      if ($301) {
       break;
      }
      $302 = +HEAPF64[$pval>>3];
      $303 = (___DOUBLE_BITS($302)|0);
      $304 = tempRet0;
      $305 = $304 & 2147483647;
      $306 = ($305>>>0)<(2146435072);
      $307 = ($305|0)==(2146435072);
      $308 = ($303>>>0)<(0);
      $309 = $307 & $308;
      $310 = $306 | $309;
      if (!($310)) {
       break;
      }
      $311 = HEAP32[$6>>2]|0;
      $312 = +HEAPF64[$pval>>3];
      HEAP32[$vararg_buffer29>>2] = 808;
      $vararg_ptr32 = (($vararg_buffer29) + 4|0);
      HEAPF64[tempDoublePtr>>3]=$312;HEAP32[$vararg_ptr32>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr32+4>>2]=HEAP32[tempDoublePtr+4>>2];
      (_pprintf($311,792,$vararg_buffer29)|0);
     }
    } while(0);
    $313 = HEAP32[$6>>2]|0;
    (_pputc($313,10)|0);
   }
   $314 = HEAP32[$5>>2]|0;
   $315 = ($314|0)==(0|0);
   if ($315) {
    $316 = +HEAPF64[$teststat>>3];
    $317 = +HEAPF64[$pval>>3];
    _record_test_result($316,$317,832);
   }
   _clear_model($KPSSmod);
   $318 = HEAP32[$list>>2]|0;
   _free($318);
   $319 = HEAP32[$autocov>>2]|0;
   _free($319);
   HEAP32[$0>>2] = 0;
   $320 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($320|0);
  }
 }
 HEAP32[$0>>2] = 2;
 $320 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($320|0);
}
function _gettrend($dset,$square) {
 $dset = $dset|0;
 $square = $square|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx = 0, $t = 0, $v = 0, $x = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $idx = sp + 16|0;
 $t = sp + 12|0;
 $v = sp + 8|0;
 $x = sp;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $square;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$v>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7 ? 344 : 352;
 $9 = (_series_index($5,$8)|0);
 HEAP32[$idx>>2] = $9;
 $10 = HEAP32[$idx>>2]|0;
 $11 = HEAP32[$v>>2]|0;
 $12 = ($10|0)<($11|0);
 if ($12) {
  $13 = HEAP32[$idx>>2]|0;
  HEAP32[$0>>2] = $13;
  $54 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($54|0);
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = (_dataset_add_series($14,1)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  HEAP32[$0>>2] = 0;
  $54 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($54|0);
 }
 HEAP32[$t>>2] = 0;
 while(1) {
  $17 = HEAP32[$t>>2]|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[$t>>2]|0;
  $23 = (+($22|0));
  $24 = $23 + 1.0;
  HEAPF64[$x>>3] = $24;
  $25 = HEAP32[$2>>2]|0;
  $26 = ($25|0)!=(0);
  $27 = +HEAPF64[$x>>3];
  if ($26) {
   $28 = +HEAPF64[$x>>3];
   $29 = $27 * $28;
   $38 = $29;
  } else {
   $38 = $27;
  }
  $30 = HEAP32[$t>>2]|0;
  $31 = HEAP32[$v>>2]|0;
  $32 = HEAP32[$1>>2]|0;
  $33 = (($32) + 64|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($31<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($30<<3)|0);
  HEAPF64[$37>>3] = $38;
  $39 = HEAP32[$t>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$t>>2] = $40;
 }
 $41 = HEAP32[$2>>2]|0;
 $42 = ($41|0)!=(0);
 $43 = HEAP32[$v>>2]|0;
 $44 = HEAP32[$1>>2]|0;
 $45 = (($44) + 68|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($43<<2)|0);
 $48 = HEAP32[$47>>2]|0;
 if ($42) {
  (_strcpy(($48|0),(344|0))|0);
  $49 = HEAP32[$1>>2]|0;
  $50 = HEAP32[$v>>2]|0;
  _series_set_label($49,$50,360);
 } else {
  (_strcpy(($48|0),(352|0))|0);
  $51 = HEAP32[$1>>2]|0;
  $52 = HEAP32[$v>>2]|0;
  _series_set_label($51,$52,392);
 }
 $53 = HEAP32[$idx>>2]|0;
 HEAP32[$0>>2] = $53;
 $54 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($54|0);
}
function _kpss_interp($s,$T,$trend) {
 $s = +$s;
 $T = $T|0;
 $trend = $trend|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, $c01 = 0, $c05 = 0, $c10 = 0, $pv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 40|0;
 $1 = sp + 32|0;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $c10 = sp + 24|0;
 $c05 = sp + 16|0;
 $c01 = sp + 8|0;
 $pv = sp;
 HEAPF64[$1>>3] = $s;
 HEAP32[$2>>2] = $T;
 HEAP32[$3>>2] = $trend;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 $6 = (+_kpss_critval(0.100000000000000005551,$4,$5));
 HEAPF64[$c10>>3] = $6;
 $7 = +HEAPF64[$1>>3];
 $8 = +HEAPF64[$c10>>3];
 $9 = $7 < $8;
 if ($9) {
  HEAPF64[$0>>3] = 1.10000000000000008882;
  $41 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$41);
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = HEAP32[$3>>2]|0;
 $12 = (+_kpss_critval(0.0100000000000000002082,$10,$11));
 HEAPF64[$c01>>3] = $12;
 $13 = +HEAPF64[$1>>3];
 $14 = +HEAPF64[$c01>>3];
 $15 = $13 > $14;
 if ($15) {
  HEAPF64[$0>>3] = -1.0;
  $41 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$41);
 }
 $16 = HEAP32[$2>>2]|0;
 $17 = HEAP32[$3>>2]|0;
 $18 = (+_kpss_critval(0.0500000000000000027756,$16,$17));
 HEAPF64[$c05>>3] = $18;
 $19 = +HEAPF64[$1>>3];
 $20 = +HEAPF64[$c05>>3];
 $21 = $19 > $20;
 if ($21) {
  $22 = +HEAPF64[$c01>>3];
  $23 = +HEAPF64[$1>>3];
  $24 = $22 - $23;
  $25 = 0.0400000000000000008327 * $24;
  $26 = +HEAPF64[$c01>>3];
  $27 = +HEAPF64[$c05>>3];
  $28 = $26 - $27;
  $29 = $25 / $28;
  $30 = 0.0100000000000000002082 + $29;
  HEAPF64[$pv>>3] = $30;
 } else {
  $31 = +HEAPF64[$c05>>3];
  $32 = +HEAPF64[$1>>3];
  $33 = $31 - $32;
  $34 = 0.0500000000000000027756 * $33;
  $35 = +HEAPF64[$c05>>3];
  $36 = +HEAPF64[$c10>>3];
  $37 = $35 - $36;
  $38 = $34 / $37;
  $39 = 0.0500000000000000027756 + $38;
  HEAPF64[$pv>>3] = $39;
 }
 $40 = +HEAPF64[$pv>>3];
 HEAPF64[$0>>3] = $40;
 $41 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$41);
}
function _kpss_critval($alpha,$T,$trend) {
 $alpha = +$alpha;
 $T = $T|0;
 $trend = $trend|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $b = sp;
 HEAPF64[$0>>3] = $alpha;
 HEAP32[$1>>2] = $T;
 HEAP32[$2>>2] = $trend;
 $3 = +HEAPF64[$0>>3];
 $4 = HEAP32[$2>>2]|0;
 _kpss_parms($3,$4,$b);
 $5 = +HEAPF64[$b>>3];
 $6 = (($b) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = HEAP32[$1>>2]|0;
 $9 = (+($8|0));
 $10 = $7 / $9;
 $11 = $5 + $10;
 STACKTOP = sp;return (+$11);
}
function _print_critical_values($a,$cv,$ci,$prn) {
 $a = $a|0;
 $cv = $cv|0;
 $ci = $ci|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $figs = 0, $label = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer7 = sp;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $label = sp + 44|0;
 $figs = sp + 40|0;
 HEAP32[$0>>2] = $a;
 HEAP32[$1>>2] = $cv;
 HEAP32[$2>>2] = $ci;
 HEAP32[$3>>2] = $prn;
 HEAP32[$label>>2] = 840;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(2);
 $6 = $5 ? 2 : 3;
 HEAP32[$figs>>2] = $6;
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$label>>2]|0;
 $9 = (_get_translated_width($8)|0);
 HEAP32[$vararg_buffer7>>2] = $9;
 $vararg_ptr1 = (($vararg_buffer7) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 864;
 (_pprintf($7,856,$vararg_buffer7)|0);
 $10 = HEAP32[$3>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = +HEAPF64[$11>>3];
 $13 = 100.0 * $12;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = 100.0 * $16;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 16|0);
 $20 = +HEAPF64[$19>>3];
 $21 = 100.0 * $20;
 HEAPF64[tempDoublePtr>>3]=$13;HEAP32[$vararg_buffer7>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer7+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr5 = (($vararg_buffer7) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr6 = (($vararg_buffer7) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$21;HEAP32[$vararg_ptr6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr6+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($10,872,$vararg_buffer7)|0);
 $22 = HEAP32[$3>>2]|0;
 $23 = HEAP32[$label>>2]|0;
 $24 = HEAP32[$figs>>2]|0;
 $25 = HEAP32[$1>>2]|0;
 $26 = +HEAPF64[$25>>3];
 $27 = HEAP32[$figs>>2]|0;
 $28 = HEAP32[$1>>2]|0;
 $29 = (($28) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = HEAP32[$figs>>2]|0;
 $32 = HEAP32[$1>>2]|0;
 $33 = (($32) + 16|0);
 $34 = +HEAPF64[$33>>3];
 HEAP32[$vararg_buffer7>>2] = $23;
 $vararg_ptr10 = (($vararg_buffer7) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $24;
 $vararg_ptr11 = (($vararg_buffer7) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$26;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr12 = (($vararg_buffer7) + 16|0);
 HEAP32[$vararg_ptr12>>2] = $27;
 $vararg_ptr13 = (($vararg_buffer7) + 20|0);
 HEAPF64[tempDoublePtr>>3]=$30;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr14 = (($vararg_buffer7) + 28|0);
 HEAP32[$vararg_ptr14>>2] = $31;
 $vararg_ptr15 = (($vararg_buffer7) + 32|0);
 HEAPF64[tempDoublePtr>>3]=$34;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($22,904,$vararg_buffer7)|0);
 STACKTOP = sp;return;
}
function ___FLOAT_BITS($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $__u = sp;
 HEAPF32[$0>>2] = $__f;
 $1 = +HEAPF32[$0>>2];
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $__u = sp;
 HEAPF64[$0>>3] = $__f;
 $1 = +HEAPF64[$0>>3];
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _kpss_parms($a,$trend,$b) {
 $a = +$a;
 $trend = $trend|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $i = sp + 8|0;
 HEAPF64[$0>>3] = $a;
 HEAP32[$1>>2] = $trend;
 HEAP32[$2>>2] = $b;
 $3 = +HEAPF64[$0>>3];
 $4 = $3 == 0.0100000000000000002082;
 if ($4) {
  $8 = 0;
 } else {
  $5 = +HEAPF64[$0>>3];
  $6 = $5 == 0.0500000000000000027756;
  $7 = $6 ? 1 : 2;
  $8 = $7;
 }
 HEAP32[$i>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)!=(0);
 $11 = HEAP32[$i>>2]|0;
 if ($10) {
  $12 = (976 + ($11<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = HEAP32[$2>>2]|0;
  HEAPF64[$14>>3] = $13;
  $15 = HEAP32[$i>>2]|0;
  $16 = (1000 + ($15<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = HEAP32[$2>>2]|0;
  $19 = (($18) + 8|0);
  HEAPF64[$19>>3] = $17;
  STACKTOP = sp;return;
 } else {
  $20 = (928 + ($11<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = HEAP32[$2>>2]|0;
  HEAPF64[$22>>3] = $21;
  $23 = HEAP32[$i>>2]|0;
  $24 = (952 + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = HEAP32[$2>>2]|0;
  $27 = (($26) + 8|0);
  HEAPF64[$27>>3] = $25;
  STACKTOP = sp;return;
 }
}
function _do_choi_test($ppv,$zpv,$lpv,$n,$prn) {
 $ppv = +$ppv;
 $zpv = +$zpv;
 $lpv = +$lpv;
 $n = $n|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $L = 0, $P = 0, $Z = 0, $k = 0, $tdf = 0, $vararg_buffer12 = 0;
 var $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer12 = sp + 56|0;
 $0 = sp + 48|0;
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $3 = sp + 88|0;
 $4 = sp + 84|0;
 $P = sp + 24|0;
 $Z = sp + 16|0;
 $tdf = sp + 80|0;
 $k = sp + 8|0;
 $L = sp;
 HEAPF64[$0>>3] = $ppv;
 HEAPF64[$1>>3] = $zpv;
 HEAPF64[$2>>3] = $lpv;
 HEAP32[$3>>2] = $n;
 HEAP32[$4>>2] = $prn;
 $5 = +HEAPF64[$0>>3];
 $6 = -2.0 * $5;
 HEAPF64[$P>>3] = $6;
 $7 = +HEAPF64[$1>>3];
 $8 = HEAP32[$3>>2]|0;
 $9 = (+($8|0));
 $10 = (+Math_sqrt((+$9)));
 $11 = $7 / $10;
 HEAPF64[$Z>>3] = $11;
 $12 = HEAP32[$3>>2]|0;
 $13 = ($12*5)|0;
 $14 = (($13) + 4)|0;
 HEAP32[$tdf>>2] = $14;
 $15 = HEAP32[$tdf>>2]|0;
 $16 = (+($15|0));
 $17 = 3.0 * $16;
 $18 = HEAP32[$3>>2]|0;
 $19 = (+($18|0));
 $20 = 9.8696044010893579923 * $19;
 $21 = HEAP32[$3>>2]|0;
 $22 = ($21*5)|0;
 $23 = (($22) + 2)|0;
 $24 = (+($23|0));
 $25 = $20 * $24;
 $26 = $17 / $25;
 HEAPF64[$k>>3] = $26;
 $27 = +HEAPF64[$k>>3];
 $28 = (+Math_sqrt((+$27)));
 $29 = +HEAPF64[$2>>3];
 $30 = $28 * $29;
 HEAPF64[$L>>3] = $30;
 $31 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer12>>2] = 1488;
 (_pprintf($31,1480,$vararg_buffer12)|0);
 $32 = HEAP32[$4>>2]|0;
 $33 = HEAP32[$3>>2]|0;
 $34 = $33<<1;
 $35 = +HEAPF64[$P>>3];
 $36 = HEAP32[$3>>2]|0;
 $37 = $36<<1;
 $38 = (+($37|0));
 $39 = +HEAPF64[$P>>3];
 $40 = (+_chisq_cdf_comp($38,$39));
 HEAP32[$vararg_buffer12>>2] = 1536;
 $vararg_ptr4 = (($vararg_buffer12) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $34;
 $vararg_ptr5 = (($vararg_buffer12) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$35;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr6 = (($vararg_buffer12) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$40;HEAP32[$vararg_ptr6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr6+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($32,1512,$vararg_buffer12)|0);
 $41 = HEAP32[$4>>2]|0;
 $42 = +HEAPF64[$Z>>3];
 $43 = +HEAPF64[$Z>>3];
 $44 = -$43;
 $45 = (+_normal_pvalue_1($44));
 HEAP32[$vararg_buffer12>>2] = 1584;
 $vararg_ptr10 = (($vararg_buffer12) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$42;HEAP32[$vararg_ptr10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr10+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr11 = (($vararg_buffer12) + 12|0);
 HEAPF64[tempDoublePtr>>3]=$45;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($41,1560,$vararg_buffer12)|0);
 $46 = HEAP32[$4>>2]|0;
 $47 = HEAP32[$tdf>>2]|0;
 $48 = +HEAPF64[$L>>3];
 $49 = HEAP32[$tdf>>2]|0;
 $50 = (+($49|0));
 $51 = +HEAPF64[$L>>3];
 $52 = -$51;
 $53 = (+_student_pvalue_1($50,$52));
 HEAP32[$vararg_buffer12>>2] = 1640;
 $vararg_ptr15 = (($vararg_buffer12) + 4|0);
 HEAP32[$vararg_ptr15>>2] = $47;
 $vararg_ptr16 = (($vararg_buffer12) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$48;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr17 = (($vararg_buffer12) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$53;HEAP32[$vararg_ptr17>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr17+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($46,1608,$vararg_buffer12)|0);
 STACKTOP = sp;return;
}
function _day_in_year($day,$month,$year) {
 $day = $day|0;
 $month = $month|0;
 $year = $year|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $leap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $i = sp + 4|0;
 $leap = sp;
 HEAP32[$0>>2] = $day;
 HEAP32[$1>>2] = $month;
 HEAP32[$2>>2] = $year;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(1752);
 $5 = HEAP32[$2>>2]|0;
 $6 = (($5|0) % 4)&-1;
 $7 = ($6|0)!=(0);
 do {
  if ($4) {
   $8 = $7 ^ 1;
   $$sink = $8;
  } else {
   if (!($7)) {
    $9 = HEAP32[$2>>2]|0;
    $10 = (($9|0) % 100)&-1;
    $11 = ($10|0)!=(0);
    if ($11) {
     $$sink = 1;
     break;
    }
   }
   $12 = HEAP32[$2>>2]|0;
   $13 = (($12|0) % 400)&-1;
   $14 = ($13|0)!=(0);
   $15 = $14 ^ 1;
   $$sink = $15;
  }
 } while(0);
 $16 = $$sink&1;
 HEAP32[$leap>>2] = $16;
 HEAP32[$i>>2] = 1;
 while(1) {
  $17 = HEAP32[$i>>2]|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$i>>2]|0;
  $21 = HEAP32[$leap>>2]|0;
  $22 = (1672 + (($21*52)|0)|0);
  $23 = (($22) + ($20<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$0>>2]|0;
  $26 = (($25) + ($24))|0;
  HEAP32[$0>>2] = $26;
  $27 = HEAP32[$i>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$i>>2] = $28;
 }
 $29 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _weekday_from_epoch_day($ed) {
 $ed = $ed|0;
 var $$sink = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0;
 var $9 = 0, $d = 0, $days = 0, $delta = 0, $i = 0, $m = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $y = sp + 20|0;
 $m = sp + 16|0;
 $d = sp + 12|0;
 $delta = sp + 8|0;
 $days = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $ed;
 HEAP32[$days>>2] = 0;
 HEAP32[$y>>2] = 1;
 while(1) {
  $1 = HEAP32[$y>>2]|0;
  $2 = ($1|0)<=(1752);
  $3 = HEAP32[$y>>2]|0;
  $4 = (($3|0) % 4)&-1;
  $5 = ($4|0)!=(0);
  do {
   if ($2) {
    $6 = $5 ^ 1;
    $$sink = $6;
   } else {
    if (!($5)) {
     $7 = HEAP32[$y>>2]|0;
     $8 = (($7|0) % 100)&-1;
     $9 = ($8|0)!=(0);
     if ($9) {
      $$sink = 1;
      break;
     }
    }
    $10 = HEAP32[$y>>2]|0;
    $11 = (($10|0) % 400)&-1;
    $12 = ($11|0)!=(0);
    $13 = $12 ^ 1;
    $$sink = $13;
   }
  } while(0);
  $14 = $$sink&1;
  $15 = ($14|0)!=(0);
  $16 = $15 ? 366 : 365;
  HEAP32[$delta>>2] = $16;
  $17 = HEAP32[$days>>2]|0;
  $18 = HEAP32[$delta>>2]|0;
  $19 = (($17) + ($18))|0;
  $20 = HEAP32[$0>>2]|0;
  $21 = ($19|0)<=($20|0);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[$delta>>2]|0;
  $23 = HEAP32[$days>>2]|0;
  $24 = (($23) + ($22))|0;
  HEAP32[$days>>2] = $24;
  $25 = HEAP32[$y>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$y>>2] = $26;
 }
 $27 = HEAP32[$days>>2]|0;
 $28 = HEAP32[$0>>2]|0;
 $29 = ($27|0)==($28|0);
 $30 = HEAP32[$y>>2]|0;
 if ($29) {
  $31 = ($30|0)>(1);
  if ($31) {
   $32 = HEAP32[$y>>2]|0;
   $33 = (($32) + -1)|0;
   HEAP32[$y>>2] = $33;
  }
  HEAP32[$m>>2] = 12;
  HEAP32[$d>>2] = 31;
  $75 = HEAP32[$y>>2]|0;
  $76 = HEAP32[$m>>2]|0;
  $77 = HEAP32[$d>>2]|0;
  $78 = (_day_of_week_from_ymd($75,$76,$77)|0);
  STACKTOP = sp;return ($78|0);
 }
 $34 = ($30|0)<=(1752);
 $35 = HEAP32[$y>>2]|0;
 $36 = (($35|0) % 4)&-1;
 $37 = ($36|0)!=(0);
 do {
  if ($34) {
   $38 = $37 ^ 1;
   $$sink1 = $38;
  } else {
   if (!($37)) {
    $39 = HEAP32[$y>>2]|0;
    $40 = (($39|0) % 100)&-1;
    $41 = ($40|0)!=(0);
    if ($41) {
     $$sink1 = 1;
     break;
    }
   }
   $42 = HEAP32[$y>>2]|0;
   $43 = (($42|0) % 400)&-1;
   $44 = ($43|0)!=(0);
   $45 = $44 ^ 1;
   $$sink1 = $45;
  }
 } while(0);
 $46 = $$sink1&1;
 HEAP32[$i>>2] = $46;
 HEAP32[$m>>2] = 1;
 while(1) {
  $47 = HEAP32[$m>>2]|0;
  $48 = HEAP32[$i>>2]|0;
  $49 = (1672 + (($48*52)|0)|0);
  $50 = (($49) + ($47<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$delta>>2] = $51;
  $52 = HEAP32[$days>>2]|0;
  $53 = HEAP32[$delta>>2]|0;
  $54 = (($52) + ($53))|0;
  $55 = HEAP32[$0>>2]|0;
  $56 = ($54|0)<=($55|0);
  if (!($56)) {
   break;
  }
  $57 = HEAP32[$delta>>2]|0;
  $58 = HEAP32[$days>>2]|0;
  $59 = (($58) + ($57))|0;
  HEAP32[$days>>2] = $59;
  $60 = HEAP32[$m>>2]|0;
  $61 = (($60) + 1)|0;
  HEAP32[$m>>2] = $61;
 }
 $62 = HEAP32[$days>>2]|0;
 $63 = HEAP32[$0>>2]|0;
 $64 = ($62|0)==($63|0);
 if ($64) {
  $65 = HEAP32[$m>>2]|0;
  $66 = (($65) + -1)|0;
  HEAP32[$m>>2] = $66;
  $67 = HEAP32[$m>>2]|0;
  $68 = HEAP32[$i>>2]|0;
  $69 = (1672 + (($68*52)|0)|0);
  $70 = (($69) + ($67<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  HEAP32[$d>>2] = $71;
  $75 = HEAP32[$y>>2]|0;
  $76 = HEAP32[$m>>2]|0;
  $77 = HEAP32[$d>>2]|0;
  $78 = (_day_of_week_from_ymd($75,$76,$77)|0);
  STACKTOP = sp;return ($78|0);
 } else {
  $72 = HEAP32[$0>>2]|0;
  $73 = HEAP32[$days>>2]|0;
  $74 = (($72) - ($73))|0;
  HEAP32[$d>>2] = $74;
  $75 = HEAP32[$y>>2]|0;
  $76 = HEAP32[$m>>2]|0;
  $77 = HEAP32[$d>>2]|0;
  $78 = (_day_of_week_from_ymd($75,$76,$77)|0);
  STACKTOP = sp;return ($78|0);
 }
 return 0|0;
}
function _day_of_week_from_ymd($yr,$mo,$day) {
 $yr = $yr|0;
 $mo = $mo|0;
 $day = $day|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $c = sp + 4|0;
 $d = sp;
 HEAP32[$0>>2] = $yr;
 HEAP32[$1>>2] = $mo;
 HEAP32[$2>>2] = $day;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)<(3);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[$0>>2] = $6;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 10)|0;
  HEAP32[$1>>2] = $8;
 } else {
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) - 2)|0;
  HEAP32[$1>>2] = $10;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11|0) / 100)&-1;
 HEAP32[$c>>2] = $12;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13|0) % 100)&-1;
 HEAP32[$d>>2] = $14;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($15|0) % 7)&-1;
 $17 = HEAP32[$1>>2]|0;
 $18 = (+($17|0));
 $19 = 2.60000000000000008882 * $18;
 $20 = $19 - 0.200000000000000011102;
 $21 = (+Math_floor((+$20)));
 $22 = (~~(($21)));
 $23 = (($22|0) % 7)&-1;
 $24 = (($16) + ($23))|0;
 $25 = HEAP32[$d>>2]|0;
 $26 = (($25|0) % 7)&-1;
 $27 = (($24) + ($26))|0;
 $28 = HEAP32[$d>>2]|0;
 $29 = (+($28|0));
 $30 = $29 / 4.0;
 $31 = (+Math_floor((+$30)));
 $32 = (~~(($31)));
 $33 = (($32|0) % 7)&-1;
 $34 = (($27) + ($33))|0;
 $35 = HEAP32[$c>>2]|0;
 $36 = (+($35|0));
 $37 = $36 / 4.0;
 $38 = (+Math_floor((+$37)));
 $39 = (~~(($38)));
 $40 = (($39|0) % 7)&-1;
 $41 = (($34) + ($40))|0;
 $42 = HEAP32[$c>>2]|0;
 $43 = $42<<1;
 $44 = (($43|0) % 7)&-1;
 $45 = (($41) - ($44))|0;
 $46 = (($45|0) % 7)&-1;
 STACKTOP = sp;return ($46|0);
}
function _get_epoch_day($date) {
 $date = $date|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $day = 0, $month = 0, $nf = 0, $ret = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $year = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $nf = sp + 28|0;
 $year = sp + 24|0;
 $month = sp + 20|0;
 $day = sp + 16|0;
 $ret = sp + 12|0;
 HEAP32[$1>>2] = $date;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $year;
 $vararg_ptr1 = (($vararg_buffer3) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $month;
 $vararg_ptr2 = (($vararg_buffer3) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $day;
 $3 = (_sscanf($2,1776,$vararg_buffer3)|0);
 HEAP32[$nf>>2] = $3;
 $4 = HEAP32[$nf>>2]|0;
 $5 = ($4|0)!=(3);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $year;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $month;
  $vararg_ptr7 = (($vararg_buffer3) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $day;
  $7 = (_sscanf($6,1792,$vararg_buffer3)|0);
  HEAP32[$nf>>2] = $7;
 }
 $8 = HEAP32[$nf>>2]|0;
 $9 = ($8|0)!=(3);
 if (!($9)) {
  $10 = HEAP32[$year>>2]|0;
  $11 = ($10|0)<(0);
  if (!($11)) {
   $12 = HEAP32[$month>>2]|0;
   $13 = ($12|0)<(0);
   if (!($13)) {
    $14 = HEAP32[$day>>2]|0;
    $15 = ($14|0)<(0);
    if (!($15)) {
     $16 = HEAP32[$year>>2]|0;
     $17 = ($16|0)>(9999);
     if (!($17)) {
      $18 = HEAP32[$month>>2]|0;
      $19 = ($18|0)>(12);
      if (!($19)) {
       $20 = HEAP32[$day>>2]|0;
       $21 = ($20|0)>(31);
       if (!($21)) {
        $22 = HEAP32[$year>>2]|0;
        $23 = ($22|0)<(100);
        if ($23) {
         $24 = HEAP32[$year>>2]|0;
         $25 = ($24|0)<(50);
         $26 = HEAP32[$year>>2]|0;
         $27 = (($26) + 2000)|0;
         $28 = (($26) + 1900)|0;
         $29 = $25 ? $27 : $28;
         HEAP32[$year>>2] = $29;
        }
        $30 = HEAP32[$year>>2]|0;
        $31 = (($30) - 1)|0;
        $32 = ($31*365)|0;
        $33 = HEAP32[$year>>2]|0;
        $34 = (($33) - 1)|0;
        $35 = (($34|0) / 4)&-1;
        $36 = HEAP32[$year>>2]|0;
        $37 = (($36) - 1)|0;
        $38 = ($37|0)>(1700);
        if ($38) {
         $39 = HEAP32[$year>>2]|0;
         $40 = (($39) - 1)|0;
         $41 = (($40|0) / 100)&-1;
         $42 = (($41) - 17)|0;
         $44 = $42;
        } else {
         $44 = 0;
        }
        $43 = (($35) - ($44))|0;
        $45 = HEAP32[$year>>2]|0;
        $46 = (($45) - 1)|0;
        $47 = ($46|0)>(1600);
        if ($47) {
         $48 = HEAP32[$year>>2]|0;
         $49 = (($48) - 1)|0;
         $50 = (($49) - 1600)|0;
         $51 = (($50|0) / 400)&-1;
         $53 = $51;
        } else {
         $53 = 0;
        }
        $52 = (($43) + ($53))|0;
        $54 = (($32) + ($52))|0;
        $55 = HEAP32[$day>>2]|0;
        $56 = HEAP32[$month>>2]|0;
        $57 = HEAP32[$year>>2]|0;
        $58 = (_day_in_year($55,$56,$57)|0);
        $59 = (($54) + ($58))|0;
        HEAP32[$ret>>2] = $59;
        $60 = HEAP32[$ret>>2]|0;
        HEAP32[$0>>2] = $60;
        $61 = HEAP32[$0>>2]|0;
        STACKTOP = sp;return ($61|0);
       }
      }
     }
     HEAP32[$0>>2] = -1;
     $61 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($61|0);
    }
   }
  }
 }
 HEAP32[$0>>2] = -1;
 $61 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($61|0);
}
function _calendar_date_string($str,$t,$dset) {
 $str = $str|0;
 $t = $t|0;
 $dset = $dset|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $d0 = 0, $day = 0;
 var $dfind = 0, $mo = 0, $modays = 0, $or$cond = 0, $rem = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $wday = 0, $yr = 0, $yrstart = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer7 = sp;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $3 = sp + 52|0;
 $rem = sp + 48|0;
 $yr = sp + 44|0;
 $add = sp + 40|0;
 $day = sp + 36|0;
 $mo = sp + 32|0;
 $modays = sp + 28|0;
 $yrstart = sp + 24|0;
 $dfind = sp + 20|0;
 $d0 = sp + 16|0;
 $wday = sp + 12|0;
 HEAP32[$1>>2] = $str;
 HEAP32[$2>>2] = $t;
 HEAP32[$3>>2] = $dset;
 HEAP32[$mo>>2] = 0;
 HEAP32[$modays>>2] = 0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 16|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (~~(($6)));
 HEAP32[$d0>>2] = $7;
 $8 = HEAP32[$3>>2]|0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(52);
 do {
  if ($11) {
   $12 = HEAP32[$d0>>2]|0;
   $13 = HEAP32[$2>>2]|0;
   $14 = ($13*7)|0;
   $15 = (($12) + ($14))|0;
   HEAP32[$dfind>>2] = $15;
  } else {
   $16 = HEAP32[$3>>2]|0;
   $17 = (($16) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(7);
   if ($19) {
    $20 = HEAP32[$d0>>2]|0;
    $21 = HEAP32[$2>>2]|0;
    $22 = (($20) + ($21))|0;
    HEAP32[$dfind>>2] = $22;
    break;
   }
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = HEAP32[$3>>2]|0;
    $26 = (($25) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(5);
    if ($28) {
     $29 = HEAP32[$d0>>2]|0;
     $30 = (_weekday_from_epoch_day($29)|0);
     HEAP32[$wday>>2] = $30;
     $31 = HEAP32[$wday>>2]|0;
     $32 = ($31|0)==(0);
     $33 = HEAP32[$wday>>2]|0;
     $34 = ($33|0)==(6);
     $or$cond = $32 | $34;
     if ($or$cond) {
      $35 = HEAP32[$3>>2]|0;
      $36 = (($35) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      HEAP32[$vararg_buffer7>>2] = $37;
      _gretl_errmsg_sprintf(1808,$vararg_buffer7);
      $38 = HEAP32[$1>>2]|0;
      HEAP8[$38>>0] = 0;
      HEAP32[$0>>2] = 2;
      $155 = HEAP32[$0>>2]|0;
      STACKTOP = sp;return ($155|0);
     }
    }
   }
   $39 = HEAP32[$2>>2]|0;
   $40 = HEAP32[$d0>>2]|0;
   $41 = HEAP32[$3>>2]|0;
   $42 = (($41) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (_t_to_epoch_day($39,$40,$43)|0);
   HEAP32[$dfind>>2] = $44;
  }
 } while(0);
 $45 = HEAP32[$dfind>>2]|0;
 $46 = (+($45|0));
 $47 = $46 / 365.24799999999999045;
 $48 = 1.0 + $47;
 $49 = (~~(($48)));
 HEAP32[$yr>>2] = $49;
 $50 = HEAP32[$yr>>2]|0;
 $51 = (($50) - 1)|0;
 $52 = ($51*365)|0;
 $53 = HEAP32[$yr>>2]|0;
 $54 = (($53) - 1)|0;
 $55 = (($54|0) / 4)&-1;
 $56 = HEAP32[$yr>>2]|0;
 $57 = (($56) - 1)|0;
 $58 = ($57|0)>(1700);
 if ($58) {
  $59 = HEAP32[$yr>>2]|0;
  $60 = (($59) - 1)|0;
  $61 = (($60|0) / 100)&-1;
  $62 = (($61) - 17)|0;
  $64 = $62;
 } else {
  $64 = 0;
 }
 $63 = (($55) - ($64))|0;
 $65 = HEAP32[$yr>>2]|0;
 $66 = (($65) - 1)|0;
 $67 = ($66|0)>(1600);
 if ($67) {
  $68 = HEAP32[$yr>>2]|0;
  $69 = (($68) - 1)|0;
  $70 = (($69) - 1600)|0;
  $71 = (($70|0) / 400)&-1;
  $73 = $71;
 } else {
  $73 = 0;
 }
 $72 = (($63) + ($73))|0;
 $74 = (($52) + ($72))|0;
 HEAP32[$yrstart>>2] = $74;
 $75 = HEAP32[$dfind>>2]|0;
 $76 = HEAP32[$yrstart>>2]|0;
 $77 = (($75) - ($76))|0;
 HEAP32[$rem>>2] = $77;
 $78 = HEAP32[$rem>>2]|0;
 $79 = ($78|0)<=(0);
 if ($79) {
  $80 = HEAP32[$yr>>2]|0;
  $81 = (($80) + -1)|0;
  HEAP32[$yr>>2] = $81;
  $82 = HEAP32[$yr>>2]|0;
  $83 = (($82) - 1)|0;
  $84 = ($83*365)|0;
  $85 = HEAP32[$yr>>2]|0;
  $86 = (($85) - 1)|0;
  $87 = (($86|0) / 4)&-1;
  $88 = HEAP32[$yr>>2]|0;
  $89 = (($88) - 1)|0;
  $90 = ($89|0)>(1700);
  if ($90) {
   $91 = HEAP32[$yr>>2]|0;
   $92 = (($91) - 1)|0;
   $93 = (($92|0) / 100)&-1;
   $94 = (($93) - 17)|0;
   $96 = $94;
  } else {
   $96 = 0;
  }
  $95 = (($87) - ($96))|0;
  $97 = HEAP32[$yr>>2]|0;
  $98 = (($97) - 1)|0;
  $99 = ($98|0)>(1600);
  if ($99) {
   $100 = HEAP32[$yr>>2]|0;
   $101 = (($100) - 1)|0;
   $102 = (($101) - 1600)|0;
   $103 = (($102|0) / 400)&-1;
   $105 = $103;
  } else {
   $105 = 0;
  }
  $104 = (($95) + ($105))|0;
  $106 = (($84) + ($104))|0;
  HEAP32[$yrstart>>2] = $106;
  $107 = HEAP32[$dfind>>2]|0;
  $108 = HEAP32[$yrstart>>2]|0;
  $109 = (($107) - ($108))|0;
  HEAP32[$rem>>2] = $109;
 }
 while(1) {
  $110 = HEAP32[$modays>>2]|0;
  $111 = HEAP32[$rem>>2]|0;
  $112 = ($110|0)<($111|0);
  if (!($112)) {
   break;
  }
  $113 = HEAP32[$mo>>2]|0;
  $114 = (($113) + 1)|0;
  HEAP32[$mo>>2] = $114;
  $115 = HEAP32[$mo>>2]|0;
  $116 = HEAP32[$yr>>2]|0;
  $117 = ($116|0)<=(1752);
  $118 = HEAP32[$yr>>2]|0;
  $119 = (($118|0) % 4)&-1;
  $120 = ($119|0)!=(0);
  do {
   if ($117) {
    $121 = $120 ^ 1;
    $$sink = $121;
   } else {
    if (!($120)) {
     $122 = HEAP32[$yr>>2]|0;
     $123 = (($122|0) % 100)&-1;
     $124 = ($123|0)!=(0);
     if ($124) {
      $$sink = 1;
      break;
     }
    }
    $125 = HEAP32[$yr>>2]|0;
    $126 = (($125|0) % 400)&-1;
    $127 = ($126|0)!=(0);
    $128 = $127 ^ 1;
    $$sink = $128;
   }
  } while(0);
  $129 = $$sink&1;
  $130 = (1672 + (($129*52)|0)|0);
  $131 = (($130) + ($115<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  HEAP32[$add>>2] = $132;
  $133 = HEAP32[$modays>>2]|0;
  $134 = HEAP32[$add>>2]|0;
  $135 = (($133) + ($134))|0;
  $136 = HEAP32[$rem>>2]|0;
  $137 = ($135|0)<($136|0);
  if (!($137)) {
   break;
  }
  $138 = HEAP32[$add>>2]|0;
  $139 = HEAP32[$modays>>2]|0;
  $140 = (($139) + ($138))|0;
  HEAP32[$modays>>2] = $140;
 }
 $141 = HEAP32[$rem>>2]|0;
 $142 = HEAP32[$modays>>2]|0;
 $143 = (($141) - ($142))|0;
 HEAP32[$day>>2] = $143;
 $144 = HEAP32[$3>>2]|0;
 $145 = (($144) + 32|0);
 $146 = (_strlen(($145|0))|0);
 $147 = ($146|0)==(8);
 $148 = HEAP32[$1>>2]|0;
 $149 = HEAP32[$yr>>2]|0;
 if ($147) {
  $150 = (($149|0) % 100)&-1;
  $151 = HEAP32[$mo>>2]|0;
  $152 = HEAP32[$day>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $150;
  $vararg_ptr5 = (($vararg_buffer7) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $151;
  $vararg_ptr6 = (($vararg_buffer7) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $152;
  (_sprintf($148,1848,$vararg_buffer7)|0);
 } else {
  $153 = HEAP32[$mo>>2]|0;
  $154 = HEAP32[$day>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $149;
  $vararg_ptr10 = (($vararg_buffer7) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $153;
  $vararg_ptr11 = (($vararg_buffer7) + 8|0);
  HEAP32[$vararg_ptr11>>2] = $154;
  (_sprintf($148,1656,$vararg_buffer7)|0);
 }
 HEAP32[$0>>2] = 0;
 $155 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($155|0);
}
function _t_to_epoch_day($t,$start,$wkdays) {
 $t = $t|0;
 $start = $start|0;
 $wkdays = $wkdays|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $startday = 0, $wkends = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $startday = sp + 4|0;
 $wkends = sp;
 HEAP32[$0>>2] = $t;
 HEAP32[$1>>2] = $start;
 HEAP32[$2>>2] = $wkdays;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) - 1)|0;
 $5 = (($4) + 6)|0;
 $6 = (($5) - 11)|0;
 $7 = (($6|0) % 7)&-1;
 HEAP32[$startday>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = HEAP32[$startday>>2]|0;
 $10 = (($8) + ($9))|0;
 $11 = (($10) - 1)|0;
 $12 = HEAP32[$2>>2]|0;
 $13 = (($11|0) / ($12|0))&-1;
 HEAP32[$wkends>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 $15 = ($14|0)==(5);
 if ($15) {
  $16 = HEAP32[$wkends>>2]|0;
  $17 = $16<<1;
  HEAP32[$wkends>>2] = $17;
 }
 $18 = HEAP32[$1>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($18) + ($19))|0;
 $21 = HEAP32[$wkends>>2]|0;
 $22 = (($20) + ($21))|0;
 STACKTOP = sp;return ($22|0);
}
function _get_dec_date($date) {
 $date = $date|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $day = 0, $dyr = 0, $ed0 = 0, $edn = 0, $edt = 0, $frac = 0, $mo = 0, $n = 0, $tmp = 0, $vararg_buffer11 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $yr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer11 = sp + 24|0;
 $0 = sp + 16|0;
 $1 = sp + 64|0;
 $tmp = sp + 72|0;
 $yr = sp + 60|0;
 $mo = sp + 56|0;
 $day = sp + 52|0;
 $n = sp + 48|0;
 $ed0 = sp + 44|0;
 $edn = sp + 40|0;
 $edt = sp + 36|0;
 $dyr = sp + 8|0;
 $frac = sp;
 HEAP32[$1>>2] = $date;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer11>>2] = $yr;
 $vararg_ptr1 = (($vararg_buffer11) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $mo;
 $vararg_ptr2 = (($vararg_buffer11) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $day;
 $3 = (_sscanf($2,1776,$vararg_buffer11)|0);
 HEAP32[$n>>2] = $3;
 $4 = HEAP32[$n>>2]|0;
 $5 = ($4|0)!=(3);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  $7 = (_strchr($6,47)|0);
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = HEAP32[$1>>2]|0;
   HEAP32[$vararg_buffer11>>2] = $yr;
   $vararg_ptr6 = (($vararg_buffer11) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $mo;
   $vararg_ptr7 = (($vararg_buffer11) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $day;
   $10 = (_sscanf($9,1792,$vararg_buffer11)|0);
   HEAP32[$n>>2] = $10;
  }
 }
 $11 = HEAP32[$n>>2]|0;
 $12 = ($11|0)!=(3);
 if ($12) {
  HEAPF64[$0>>3] = 1.79769313486231570815E+308;
  $44 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$44);
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = (_get_epoch_day($13)|0);
 HEAP32[$edt>>2] = $14;
 $15 = HEAP32[$yr>>2]|0;
 HEAP32[$vararg_buffer11>>2] = $15;
 (_sprintf($tmp,1864,$vararg_buffer11)|0);
 $16 = (_get_epoch_day($tmp)|0);
 HEAP32[$ed0>>2] = $16;
 $17 = HEAP32[$yr>>2]|0;
 HEAP32[$vararg_buffer11>>2] = $17;
 (_sprintf($tmp,1880,$vararg_buffer11)|0);
 $18 = (_get_epoch_day($tmp)|0);
 HEAP32[$edn>>2] = $18;
 $19 = HEAP32[$yr>>2]|0;
 $20 = ($19|0)<(100);
 if ($20) {
  $21 = HEAP32[$yr>>2]|0;
  $22 = ($21|0)<(50);
  $23 = HEAP32[$yr>>2]|0;
  $24 = (($23) + 2000)|0;
  $25 = (($23) + 1900)|0;
  $26 = $22 ? $24 : $25;
  HEAP32[$yr>>2] = $26;
 }
 $27 = HEAP32[$yr>>2]|0;
 $28 = (+($27|0));
 HEAPF64[$dyr>>3] = $28;
 $29 = HEAP32[$edt>>2]|0;
 $30 = (+($29|0));
 $31 = HEAP32[$ed0>>2]|0;
 $32 = (+($31|0));
 $33 = $30 - $32;
 $34 = HEAP32[$edn>>2]|0;
 $35 = (+($34|0));
 $36 = HEAP32[$ed0>>2]|0;
 $37 = (+($36|0));
 $38 = $35 - $37;
 $39 = $38 + 1.0;
 $40 = $33 / $39;
 HEAPF64[$frac>>3] = $40;
 $41 = +HEAPF64[$dyr>>3];
 $42 = +HEAPF64[$frac>>3];
 $43 = $41 + $42;
 HEAPF64[$0>>3] = $43;
 $44 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$44);
}
function _weekday_from_date($date) {
 $date = $date|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $day = 0, $mo = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $yr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $yr = sp + 20|0;
 $mo = sp + 16|0;
 $day = sp + 12|0;
 HEAP32[$1>>2] = $date;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $yr;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $mo;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $day;
 $3 = (_sscanf($2,1776,$vararg_buffer)|0);
 $4 = ($3|0)!=(3);
 if ($4) {
  HEAP32[$0>>2] = -1;
  $17 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 $5 = HEAP32[$yr>>2]|0;
 $6 = ($5|0)<(100);
 if ($6) {
  $7 = HEAP32[$yr>>2]|0;
  $8 = ($7|0)<(50);
  $9 = HEAP32[$yr>>2]|0;
  $10 = (($9) + 2000)|0;
  $11 = (($9) + 1900)|0;
  $12 = $8 ? $10 : $11;
  HEAP32[$yr>>2] = $12;
 }
 $13 = HEAP32[$yr>>2]|0;
 $14 = HEAP32[$mo>>2]|0;
 $15 = HEAP32[$day>>2]|0;
 $16 = (_day_of_week_from_ymd($13,$14,$15)|0);
 HEAP32[$0>>2] = $16;
 $17 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _chdtrc($df,$x) {
 $df = +$df;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 HEAPF64[$1>>3] = $df;
 HEAPF64[$2>>3] = $x;
 $3 = +HEAPF64[$2>>3];
 $4 = $3 < 0.0;
 if (!($4)) {
  $5 = +HEAPF64[$1>>3];
  $6 = $5 < 1.0;
  if (!($6)) {
   $7 = +HEAPF64[$1>>3];
   $8 = $7 / 2.0;
   $9 = +HEAPF64[$2>>3];
   $10 = $9 / 2.0;
   $11 = (+_igamc($8,$10));
   HEAPF64[$0>>3] = $11;
   $12 = +HEAPF64[$0>>3];
   STACKTOP = sp;return (+$12);
  }
 }
 (_mtherr(1896,1)|0);
 HEAPF64[$0>>3] = 0.0;
 $12 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$12);
}
function _wald_omit_F($list,$pmod) {
 $list = $list|0;
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $F = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $F = sp;
 HEAP32[$0>>2] = $list;
 HEAP32[$1>>2] = $pmod;
 HEAPF64[$F>>3] = 1.79769313486231570815E+308;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 (_wald_test($2,$3,0,$F)|0);
 $4 = +HEAPF64[$F>>3];
 STACKTOP = sp;return (+$4);
}
function _wald_test($list,$pmod,$chisq,$F) {
 $list = $list|0;
 $pmod = $pmod|0;
 $chisq = $chisq|0;
 $F = $F|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $C = 0, $b = 0, $err = 0, $mask = 0, $vararg_buffer = 0, $wF = 0, $wX = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp + 16|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $mask = sp + 32|0;
 $C = sp + 28|0;
 $b = sp + 24|0;
 $wX = sp + 8|0;
 $wF = sp;
 $err = sp + 20|0;
 HEAP32[$1>>2] = $list;
 HEAP32[$2>>2] = $pmod;
 HEAP32[$3>>2] = $chisq;
 HEAP32[$4>>2] = $F;
 HEAP32[$mask>>2] = 0;
 HEAP32[$C>>2] = 0;
 HEAP32[$b>>2] = 0;
 HEAPF64[$wX>>3] = 1.79769313486231570815E+308;
 HEAPF64[$wF>>3] = 1.79769313486231570815E+308;
 HEAP32[$err>>2] = 0;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (_mask_from_test_list($5,$6,$err)|0);
 HEAP32[$mask>>2] = $7;
 $8 = HEAP32[$err>>2]|0;
 $9 = ($8|0)!=(0);
 $10 = HEAP32[$err>>2]|0;
 if ($9) {
  HEAP32[$0>>2] = $10;
  $64 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($64|0);
 }
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP32[$mask>>2]|0;
  $14 = (_gretl_vcv_matrix_from_model($12,$13,$err)|0);
  HEAP32[$C>>2] = $14;
 }
 $15 = HEAP32[$err>>2]|0;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $17 = HEAP32[$2>>2]|0;
  $18 = HEAP32[$mask>>2]|0;
  $19 = (_gretl_coeff_vector_from_model($17,$18,$err)|0);
  HEAP32[$b>>2] = $19;
 }
 $20 = HEAP32[$err>>2]|0;
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $22 = HEAP32[$C>>2]|0;
  $23 = (_gretl_invert_symmetric_matrix($22)|0);
  HEAP32[$err>>2] = $23;
  $24 = HEAP32[$err>>2]|0;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = HEAP32[_stderr>>2]|0;
   (_fprintf(($26|0),(1904|0),($vararg_buffer|0))|0);
  }
 }
 $27 = HEAP32[$err>>2]|0;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $29 = HEAP32[$b>>2]|0;
  $30 = HEAP32[$C>>2]|0;
  $31 = (+_gretl_scalar_qform($29,$30,$err));
  HEAPF64[$wX>>3] = $31;
 }
 $32 = HEAP32[$err>>2]|0;
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $34 = +HEAPF64[$wX>>3];
  $35 = HEAP32[$b>>2]|0;
  $36 = ($35|0)==(0|0);
  if ($36) {
   $48 = 0;
  } else {
   $37 = HEAP32[$b>>2]|0;
   $38 = (($37) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(1);
   $41 = HEAP32[$b>>2]|0;
   $42 = HEAP32[$41>>2]|0;
   if ($40) {
    $48 = $42;
   } else {
    $43 = ($42|0)==(1);
    if ($43) {
     $44 = HEAP32[$b>>2]|0;
     $45 = (($44) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     $48 = $46;
    } else {
     $48 = 0;
    }
   }
  }
  $47 = (+($48|0));
  $49 = $34 / $47;
  HEAPF64[$wF>>3] = $49;
 }
 $50 = HEAP32[$err>>2]|0;
 $51 = ($50|0)!=(0);
 if (!($51)) {
  $52 = HEAP32[$3>>2]|0;
  $53 = ($52|0)!=(0|0);
  if ($53) {
   $54 = +HEAPF64[$wX>>3];
   $55 = HEAP32[$3>>2]|0;
   HEAPF64[$55>>3] = $54;
  }
  $56 = HEAP32[$4>>2]|0;
  $57 = ($56|0)!=(0|0);
  if ($57) {
   $58 = +HEAPF64[$wF>>3];
   $59 = HEAP32[$4>>2]|0;
   HEAPF64[$59>>3] = $58;
  }
 }
 $60 = HEAP32[$mask>>2]|0;
 _free($60);
 $61 = HEAP32[$C>>2]|0;
 _gretl_matrix_free($61);
 $62 = HEAP32[$b>>2]|0;
 _gretl_matrix_free($62);
 $63 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $63;
 $64 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($64|0);
}
function _mask_from_test_list($list,$pmod,$err) {
 $list = $list|0;
 $pmod = $pmod|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i = 0, $j = 0, $mask = 0, $nmask = 0, $off1 = 0, $off2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $mask = sp + 28|0;
 $off1 = sp + 24|0;
 $off2 = sp + 20|0;
 $nmask = sp + 16|0;
 $i = sp + 12|0;
 $j = sp + 8|0;
 HEAP32[$1>>2] = $list;
 HEAP32[$2>>2] = $pmod;
 HEAP32[$3>>2] = $err;
 HEAP32[$off1>>2] = 2;
 HEAP32[$off2>>2] = 0;
 HEAP32[$nmask>>2] = 0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_calloc($6,1)|0);
 HEAP32[$mask>>2] = $7;
 $8 = HEAP32[$mask>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$10>>2] = 12;
  HEAP32[$0>>2] = 0;
  $100 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($100|0);
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(7);
 if ($14) {
  label = 5;
 } else {
  $15 = HEAP32[$2>>2]|0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(27);
  if ($18) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  HEAP32[$i>>2] = 2;
  while(1) {
   $19 = HEAP32[$i>>2]|0;
   $20 = HEAP32[$2>>2]|0;
   $21 = (($20) + 60|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$22>>2]|0;
   $24 = ($19|0)<=($23|0);
   if (!($24)) {
    break;
   }
   $25 = HEAP32[$i>>2]|0;
   $26 = HEAP32[$2>>2]|0;
   $27 = (($26) + 60|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($25<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(-100);
   if ($31) {
    $32 = HEAP32[$i>>2]|0;
    $33 = (($32) + 2)|0;
    HEAP32[$off1>>2] = $33;
   }
   $34 = HEAP32[$i>>2]|0;
   $35 = (($34) + 1)|0;
   HEAP32[$i>>2] = $35;
  }
  $36 = HEAP32[$2>>2]|0;
  $37 = (($36) + 60|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$off2>>2] = $40;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $41 = HEAP32[$i>>2]|0;
  $42 = HEAP32[$2>>2]|0;
  $43 = (($42) + 48|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)<($44|0);
  $46 = HEAP32[$1>>2]|0;
  $47 = ($46|0)!=(0|0);
  if (!($45)) {
   break;
  }
  L20: do {
   if ($47) {
    HEAP32[$j>>2] = 1;
    while(1) {
     $48 = HEAP32[$j>>2]|0;
     $49 = HEAP32[$1>>2]|0;
     $50 = HEAP32[$49>>2]|0;
     $51 = ($48|0)<=($50|0);
     if (!($51)) {
      break L20;
     }
     $52 = HEAP32[$i>>2]|0;
     $53 = HEAP32[$off1>>2]|0;
     $54 = (($52) + ($53))|0;
     $55 = HEAP32[$2>>2]|0;
     $56 = (($55) + 60|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($57) + ($54<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP32[$j>>2]|0;
     $61 = HEAP32[$1>>2]|0;
     $62 = (($61) + ($60<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($59|0)==($63|0);
     if ($64) {
      $65 = HEAP32[$i>>2]|0;
      $66 = HEAP32[$off2>>2]|0;
      $67 = (($65) + ($66))|0;
      $68 = HEAP32[$mask>>2]|0;
      $69 = (($68) + ($67)|0);
      HEAP8[$69>>0] = 1;
      $70 = HEAP32[$nmask>>2]|0;
      $71 = (($70) + 1)|0;
      HEAP32[$nmask>>2] = $71;
     }
     $72 = HEAP32[$j>>2]|0;
     $73 = (($72) + 1)|0;
     HEAP32[$j>>2] = $73;
    }
   } else {
    $74 = HEAP32[$i>>2]|0;
    $75 = HEAP32[$off1>>2]|0;
    $76 = (($74) + ($75))|0;
    $77 = HEAP32[$2>>2]|0;
    $78 = (($77) + 60|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($79) + ($76<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)!=(0);
    if ($82) {
     $83 = HEAP32[$i>>2]|0;
     $84 = HEAP32[$off2>>2]|0;
     $85 = (($83) + ($84))|0;
     $86 = HEAP32[$mask>>2]|0;
     $87 = (($86) + ($85)|0);
     HEAP8[$87>>0] = 1;
    }
   }
  } while(0);
  $88 = HEAP32[$i>>2]|0;
  $89 = (($88) + 1)|0;
  HEAP32[$i>>2] = $89;
 }
 if ($47) {
  $90 = HEAP32[$nmask>>2]|0;
  $91 = HEAP32[$1>>2]|0;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)!=($92|0);
  if ($93) {
   $94 = HEAP32[_stderr>>2]|0;
   $95 = HEAP32[$1>>2]|0;
   $96 = HEAP32[$95>>2]|0;
   $97 = HEAP32[$nmask>>2]|0;
   HEAP32[$vararg_buffer>>2] = $96;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $97;
   (_fprintf(($94|0),(1936|0),($vararg_buffer|0))|0);
   $98 = HEAP32[$3>>2]|0;
   HEAP32[$98>>2] = 2;
  }
 }
 $99 = HEAP32[$mask>>2]|0;
 HEAP32[$0>>2] = $99;
 $100 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($100|0);
}
function _ntodate($datestr,$t,$dset) {
 $datestr = $datestr|0;
 $t = $t|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fmt = 0, $len = 0, $pdp = 0, $vararg_buffer10 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 8|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $x = sp;
 $pdp = sp + 20|0;
 $len = sp + 16|0;
 $fmt = sp + 40|0;
 HEAP32[$1>>2] = $datestr;
 HEAP32[$2>>2] = $t;
 HEAP32[$3>>2] = $dset;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 do {
  if ($5) {
   $6 = HEAP32[$3>>2]|0;
   $7 = (($6) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(1);
   if ($9) {
    $10 = HEAP32[$3>>2]|0;
    $11 = (($10) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(5);
    if (!($13)) {
     $14 = HEAP32[$3>>2]|0;
     $15 = (($14) + 8|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(6);
     if (!($17)) {
      $18 = HEAP32[$3>>2]|0;
      $19 = (($18) + 8|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(7);
      if (!($21)) {
       $22 = HEAP32[$3>>2]|0;
       $23 = (($22) + 8|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = ($24|0)==(52);
       if (!($25)) {
        break;
       }
      }
     }
    }
    $26 = HEAP32[$3>>2]|0;
    $27 = (($26) + 16|0);
    $28 = +HEAPF64[$27>>3];
    $29 = $28 > 1.0E+4;
    if ($29) {
     $30 = HEAP32[$3>>2]|0;
     $31 = ($30|0)!=(0|0);
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = (($32) + 76|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = $34 << 24 >> 24;
      $36 = ($35|0)!=(0);
      if ($36) {
       $37 = HEAP32[$3>>2]|0;
       $38 = (($37) + 80|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39|0)!=(0|0);
       if ($40) {
        $41 = HEAP32[$1>>2]|0;
        $42 = HEAP32[$2>>2]|0;
        $43 = HEAP32[$3>>2]|0;
        $44 = (($43) + 80|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = (($45) + ($42<<2)|0);
        $47 = HEAP32[$46>>2]|0;
        (_strcpy(($41|0),($47|0))|0);
       } else {
        label = 12;
       }
      } else {
       label = 12;
      }
     } else {
      label = 12;
     }
     if ((label|0) == 12) {
      $48 = HEAP32[$1>>2]|0;
      $49 = HEAP32[$2>>2]|0;
      $50 = HEAP32[$3>>2]|0;
      (_calendar_date_string($48,$49,$50)|0);
     }
     $51 = HEAP32[$1>>2]|0;
     HEAP32[$0>>2] = $51;
     $148 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($148|0);
    }
   }
  }
 } while(0);
 $52 = HEAP32[$3>>2]|0;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = HEAP32[$3>>2]|0;
  $55 = (($54) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(1);
  if ($57) {
   $58 = HEAP32[$3>>2]|0;
   $59 = (($58) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(5);
   if (!($61)) {
    $62 = HEAP32[$3>>2]|0;
    $63 = (($62) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(6);
    if (!($65)) {
     $66 = HEAP32[$3>>2]|0;
     $67 = (($66) + 8|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(7);
     if (!($69)) {
      label = 19;
     }
    }
   }
  } else {
   label = 19;
  }
 } else {
  label = 19;
 }
 do {
  if ((label|0) == 19) {
   $70 = HEAP32[$3>>2]|0;
   $71 = ($70|0)!=(0|0);
   if ($71) {
    $72 = HEAP32[$3>>2]|0;
    $73 = (($72) + 12|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(1);
    if ($75) {
     $76 = HEAP32[$3>>2]|0;
     $77 = (($76) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)==(52);
     if ($79) {
      break;
     }
    }
   }
   $89 = HEAP32[$3>>2]|0;
   $90 = ($89|0)!=(0|0);
   if ($90) {
    $91 = HEAP32[$3>>2]|0;
    $92 = (($91) + 12|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(1);
    if ($94) {
     $95 = HEAP32[$3>>2]|0;
     $96 = (($95) + 8|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)==(10);
     if ($98) {
      $99 = HEAP32[$3>>2]|0;
      $100 = (($99) + 16|0);
      $101 = +HEAPF64[$100>>3];
      $102 = HEAP32[$2>>2]|0;
      $103 = ($102*10)|0;
      $104 = (+($103|0));
      $105 = $101 + $104;
      HEAPF64[$x>>3] = $105;
      $106 = HEAP32[$1>>2]|0;
      $107 = +HEAPF64[$x>>3];
      $108 = (~~(($107)));
      HEAP32[$vararg_buffer10>>2] = $108;
      (_sprintf($106,2032,$vararg_buffer10)|0);
      $109 = HEAP32[$1>>2]|0;
      HEAP32[$0>>2] = $109;
      $148 = HEAP32[$0>>2]|0;
      STACKTOP = sp;return ($148|0);
     }
    }
   }
   $110 = HEAP32[$3>>2]|0;
   $111 = ($110|0)!=(0|0);
   if ($111) {
    $112 = HEAP32[$3>>2]|0;
    $113 = (($112) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114|0)==(2);
    if ($115) {
     $116 = HEAP32[$1>>2]|0;
     $117 = HEAP32[$2>>2]|0;
     $118 = HEAP32[$3>>2]|0;
     (_panel_obs($116,$117,$118)|0);
     $119 = HEAP32[$1>>2]|0;
     HEAP32[$0>>2] = $119;
     $148 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($148|0);
    }
   }
   $120 = HEAP32[$2>>2]|0;
   $121 = HEAP32[$3>>2]|0;
   $122 = (($121) + 8|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = HEAP32[$3>>2]|0;
   $125 = (($124) + 16|0);
   $126 = +HEAPF64[$125>>3];
   $127 = (+_date_as_double($120,$123,$126));
   HEAPF64[$x>>3] = $127;
   $128 = HEAP32[$3>>2]|0;
   $129 = (($128) + 8|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ($130|0)==(1);
   if ($131) {
    $132 = HEAP32[$1>>2]|0;
    $133 = +HEAPF64[$x>>3];
    $134 = (~~(($133)));
    HEAP32[$vararg_buffer10>>2] = $134;
    (_sprintf($132,2032,$vararg_buffer10)|0);
   } else {
    $135 = HEAP32[$3>>2]|0;
    $136 = (($135) + 8|0);
    $137 = HEAP32[$136>>2]|0;
    HEAP32[$pdp>>2] = $137;
    HEAP32[$len>>2] = 1;
    while(1) {
     $138 = HEAP32[$pdp>>2]|0;
     $139 = (($138|0) / 10)&-1;
     HEAP32[$pdp>>2] = $139;
     $140 = ($139|0)!=(0);
     if (!($140)) {
      break;
     }
     $141 = HEAP32[$len>>2]|0;
     $142 = (($141) + 1)|0;
     HEAP32[$len>>2] = $142;
    }
    $143 = HEAP32[$len>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $143;
    (_sprintf($fmt,2040,$vararg_buffer10)|0);
    $144 = HEAP32[$1>>2]|0;
    $145 = +HEAPF64[$x>>3];
    HEAPF64[tempDoublePtr>>3]=$145;HEAP32[$vararg_buffer10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer10+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($144,$fmt,$vararg_buffer10)|0);
    $146 = HEAP32[$1>>2]|0;
    (_colonize_obs($146)|0);
   }
   $147 = HEAP32[$1>>2]|0;
   HEAP32[$0>>2] = $147;
   $148 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($148|0);
  }
 } while(0);
 $80 = HEAP32[$2>>2]|0;
 $81 = HEAP32[$3>>2]|0;
 $82 = (($81) + 16|0);
 $83 = +HEAPF64[$82>>3];
 $84 = (+_date_as_double($80,1,$83));
 HEAPF64[$x>>3] = $84;
 $85 = HEAP32[$1>>2]|0;
 $86 = +HEAPF64[$x>>3];
 $87 = (~~(($86)));
 HEAP32[$vararg_buffer10>>2] = $87;
 (_sprintf($85,2032,$vararg_buffer10)|0);
 $88 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $88;
 $148 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($148|0);
}
function _panel_obs($s,$t,$dset) {
 $s = $s|0;
 $t = $t|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $i = 0, $j = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $i = sp + 20|0;
 $j = sp + 16|0;
 $d = sp + 12|0;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $t;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3|0) / ($6|0))&-1;
 $8 = (($7) + 1)|0;
 HEAP32[$i>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10|0) % ($13|0))&-1;
 HEAP32[$j>>2] = $14;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (+($17|0));
 $19 = (+_log10((+$18)));
 $20 = (+Math_floor((+$19)));
 $21 = 1.0 + $20;
 $22 = (~~(($21)));
 HEAP32[$d>>2] = $22;
 $23 = HEAP32[$j>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = HEAP32[$2>>2]|0;
  $26 = (($25) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$j>>2] = $27;
 }
 $28 = HEAP32[$0>>2]|0;
 $29 = HEAP32[$i>>2]|0;
 $30 = HEAP32[$d>>2]|0;
 $31 = HEAP32[$j>>2]|0;
 HEAP32[$vararg_buffer>>2] = $29;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $30;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $31;
 (_sprintf($28,2048,$vararg_buffer)|0);
 $32 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _get_subperiod($t,$dset,$err) {
 $t = $t|0;
 $dset = $dset|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $d = 0, $datestr = 0, $i = 0, $ret = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $ret = sp + 16|0;
 $datestr = sp + 36|0;
 $x = sp;
 $i = sp + 12|0;
 $d = sp + 8|0;
 HEAP32[$1>>2] = $t;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $err;
 HEAP32[$ret>>2] = 0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)!=(0|0);
 do {
  if ($5) {
   $6 = HEAP32[$2>>2]|0;
   $7 = (($6) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(1);
   if (!($9)) {
    $10 = HEAP32[$2>>2]|0;
    $11 = (($10) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(5);
    if (!($13)) {
     break;
    }
   }
   $14 = HEAP32[$2>>2]|0;
   $15 = (($14) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)>(1);
   if ($17) {
    $21 = HEAP32[$2>>2]|0;
    $22 = ($21|0)!=(0|0);
    if ($22) {
     $23 = HEAP32[$2>>2]|0;
     $24 = (($23) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(1);
     if ($26) {
      $27 = HEAP32[$2>>2]|0;
      $28 = (($27) + 8|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(52);
      if ($30) {
       $31 = HEAP32[$1>>2]|0;
       $32 = HEAP32[$2>>2]|0;
       $33 = (($32) + 8|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($31|0) % ($34|0))&-1;
       HEAP32[$ret>>2] = $35;
      } else {
       label = 12;
      }
     } else {
      label = 12;
     }
    } else {
     label = 12;
    }
    L11: do {
     if ((label|0) == 12) {
      $36 = HEAP32[$2>>2]|0;
      $37 = ($36|0)!=(0|0);
      do {
       if ($37) {
        $38 = HEAP32[$2>>2]|0;
        $39 = (($38) + 12|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(1);
        if ($41) {
         $42 = HEAP32[$2>>2]|0;
         $43 = (($42) + 8|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = ($44|0)==(5);
         if (!($45)) {
          $46 = HEAP32[$2>>2]|0;
          $47 = (($46) + 8|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = ($48|0)==(6);
          if (!($49)) {
           $50 = HEAP32[$2>>2]|0;
           $51 = (($50) + 8|0);
           $52 = HEAP32[$51>>2]|0;
           $53 = ($52|0)==(7);
           if (!($53)) {
            $54 = HEAP32[$2>>2]|0;
            $55 = (($54) + 8|0);
            $56 = HEAP32[$55>>2]|0;
            $57 = ($56|0)==(52);
            if (!($57)) {
             break;
            }
           }
          }
         }
         $58 = HEAP32[$2>>2]|0;
         $59 = (($58) + 16|0);
         $60 = +HEAPF64[$59>>3];
         $61 = $60 > 1.0E+4;
         if ($61) {
          $62 = HEAP32[$1>>2]|0;
          $63 = HEAP32[$2>>2]|0;
          (_calendar_date_string($datestr,$62,$63)|0);
          $64 = (_weekday_from_date($datestr)|0);
          HEAP32[$ret>>2] = $64;
          break L11;
         }
        }
       }
      } while(0);
      $65 = HEAP32[$2>>2]|0;
      $66 = ($65|0)!=(0|0);
      do {
       if ($66) {
        $67 = HEAP32[$2>>2]|0;
        $68 = (($67) + 12|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==(1);
        if ($70) {
         $71 = HEAP32[$2>>2]|0;
         $72 = (($71) + 8|0);
         $73 = HEAP32[$72>>2]|0;
         $74 = ($73|0)==(5);
         if (!($74)) {
          $75 = HEAP32[$2>>2]|0;
          $76 = (($75) + 8|0);
          $77 = HEAP32[$76>>2]|0;
          $78 = ($77|0)==(6);
          if (!($78)) {
           $79 = HEAP32[$2>>2]|0;
           $80 = (($79) + 8|0);
           $81 = HEAP32[$80>>2]|0;
           $82 = ($81|0)==(7);
           if (!($82)) {
            break;
           }
          }
         }
         $83 = HEAP32[$1>>2]|0;
         $84 = HEAP32[$2>>2]|0;
         $85 = (($84) + 8|0);
         $86 = HEAP32[$85>>2]|0;
         $87 = (($83|0) % ($86|0))&-1;
         HEAP32[$ret>>2] = $87;
         break L11;
        }
       }
      } while(0);
      $88 = HEAP32[$1>>2]|0;
      $89 = HEAP32[$2>>2]|0;
      $90 = (($89) + 8|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = HEAP32[$2>>2]|0;
      $93 = (($92) + 16|0);
      $94 = +HEAPF64[$93>>3];
      $95 = (+_date_as_double($88,$91,$94));
      HEAPF64[$x>>3] = $95;
      $96 = HEAP32[$2>>2]|0;
      $97 = (($96) + 8|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (+($98|0));
      $100 = (+_log10((+$99)));
      $101 = (+Math_ceil((+$100)));
      $102 = (~~(($101)));
      HEAP32[$d>>2] = $102;
      $103 = +HEAPF64[$x>>3];
      $104 = (+Math_floor((+$103)));
      $105 = +HEAPF64[$x>>3];
      $106 = $105 - $104;
      HEAPF64[$x>>3] = $106;
      HEAP32[$i>>2] = 0;
      while(1) {
       $107 = HEAP32[$i>>2]|0;
       $108 = HEAP32[$d>>2]|0;
       $109 = ($107|0)<($108|0);
       $110 = +HEAPF64[$x>>3];
       if (!($109)) {
        break;
       }
       $111 = $110 * 10.0;
       HEAPF64[$x>>3] = $111;
       $112 = HEAP32[$i>>2]|0;
       $113 = (($112) + 1)|0;
       HEAP32[$i>>2] = $113;
      }
      $114 = +HEAPF64[$x>>3];
      $115 = (+Math_floor((+$114)));
      $116 = $110 - $115;
      $117 = $116 > 0.5;
      $118 = +HEAPF64[$x>>3];
      if ($117) {
       $119 = (+Math_ceil((+$118)));
       $122 = $119;
      } else {
       $120 = (+Math_floor((+$118)));
       $122 = $120;
      }
      $121 = $122 - 1.0;
      $123 = (~~(($121)));
      HEAP32[$ret>>2] = $123;
     }
    } while(0);
    $124 = HEAP32[$ret>>2]|0;
    HEAP32[$0>>2] = $124;
    $125 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($125|0);
   }
  }
 } while(0);
 $18 = HEAP32[$3>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = HEAP32[$3>>2]|0;
  HEAP32[$20>>2] = 10;
 }
 HEAP32[$0>>2] = 0;
 $125 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($125|0);
}
function _set_dataset_is_changed() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[2056>>2] = 1;
 STACKTOP = sp;return;
}
function _free_Z($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $i = sp + 4|0;
 $v = sp;
 HEAP32[$0>>2] = $dset;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 100|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(2);
 if ($10) {
  $13 = 1;
 } else {
  $11 = HEAP32[$0>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12;
 }
 HEAP32[$v>>2] = $13;
 HEAP32[$i>>2] = 0;
 while(1) {
  $14 = HEAP32[$i>>2]|0;
  $15 = HEAP32[$v>>2]|0;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = HEAP32[$i>>2]|0;
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + 64|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  _free($22);
  $23 = HEAP32[$i>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$i>>2] = $24;
 }
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 64|0);
 $27 = HEAP32[$26>>2]|0;
 _free($27);
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + 64|0);
 HEAP32[$29>>2] = 0;
 STACKTOP = sp;return;
}
function _dataset_destroy_obs_markers($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $dset;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 80|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  _free($15);
  $16 = HEAP32[$i>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$i>>2] = $17;
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 80|0);
 $20 = HEAP32[$19>>2]|0;
 _free($20);
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 80|0);
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 76|0);
 HEAP8[$24>>0] = 0;
 STACKTOP = sp;return;
}
function _clear_datainfo($dset,$code) {
 $dset = $dset|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $code;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$0>>2]|0;
  _dataset_destroy_obs_markers($8);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 88|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 88|0);
  $15 = HEAP32[$14>>2]|0;
  _free_subsample_mask($15);
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 88|0);
  HEAP32[$17>>2] = 0;
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 92|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 92|0);
  $24 = HEAP32[$23>>2]|0;
  _free($24);
  $25 = HEAP32[$0>>2]|0;
  $26 = (($25) + 92|0);
  HEAP32[$26>>2] = 0;
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + 96|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + 96|0);
  $33 = HEAP32[$32>>2]|0;
  _free($33);
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 96|0);
  HEAP32[$35>>2] = 0;
 }
 $36 = HEAP32[$0>>2]|0;
 $37 = (($36) + 104|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = HEAP32[$0>>2]|0;
  $41 = (($40) + 104|0);
  $42 = HEAP32[$41>>2]|0;
  _free($42);
  $43 = HEAP32[$0>>2]|0;
  $44 = (($43) + 104|0);
  HEAP32[$44>>2] = 0;
 }
 $45 = HEAP32[$1>>2]|0;
 $46 = ($45|0)==(0);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = HEAP32[$0>>2]|0;
 $48 = (($47) + 68|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  HEAP32[$i>>2] = 0;
  while(1) {
   $51 = HEAP32[$i>>2]|0;
   $52 = HEAP32[$0>>2]|0;
   $53 = HEAP32[$52>>2]|0;
   $54 = ($51|0)<($53|0);
   if (!($54)) {
    break;
   }
   $55 = HEAP32[$i>>2]|0;
   $56 = HEAP32[$0>>2]|0;
   $57 = (($56) + 68|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + ($55<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   _free($60);
   $61 = HEAP32[$i>>2]|0;
   $62 = (($61) + 1)|0;
   HEAP32[$i>>2] = $62;
  }
  $63 = HEAP32[$0>>2]|0;
  $64 = (($63) + 68|0);
  $65 = HEAP32[$64>>2]|0;
  _free($65);
  $66 = HEAP32[$0>>2]|0;
  $67 = (($66) + 68|0);
  HEAP32[$67>>2] = 0;
 }
 $68 = HEAP32[$0>>2]|0;
 $69 = (($68) + 72|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)!=(0|0);
 if ($71) {
  HEAP32[$i>>2] = 0;
  while(1) {
   $72 = HEAP32[$i>>2]|0;
   $73 = HEAP32[$0>>2]|0;
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)<($74|0);
   $76 = HEAP32[$0>>2]|0;
   if (!($75)) {
    break;
   }
   $77 = HEAP32[$i>>2]|0;
   _free_varinfo($76,$77);
   $78 = HEAP32[$i>>2]|0;
   $79 = (($78) + 1)|0;
   HEAP32[$i>>2] = $79;
  }
  $80 = (($76) + 72|0);
  $81 = HEAP32[$80>>2]|0;
  _free($81);
  $82 = HEAP32[$0>>2]|0;
  $83 = (($82) + 72|0);
  HEAP32[$83>>2] = 0;
 }
 $84 = HEAP32[$0>>2]|0;
 $85 = (($84) + 84|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)!=(0|0);
 if ($87) {
  $88 = HEAP32[$0>>2]|0;
  $89 = (($88) + 84|0);
  $90 = HEAP32[$89>>2]|0;
  _free($90);
  $91 = HEAP32[$0>>2]|0;
  $92 = (($91) + 84|0);
  HEAP32[$92>>2] = 0;
 }
 $93 = HEAP32[$0>>2]|0;
 _maybe_free_full_dataset($93);
 $94 = HEAP32[$0>>2]|0;
 $95 = (($94) + 4|0);
 HEAP32[$95>>2] = 0;
 $96 = HEAP32[$0>>2]|0;
 HEAP32[$96>>2] = 0;
 STACKTOP = sp;return;
}
function _free_varinfo($dset,$v) {
 $dset = $dset|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $v;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 208|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = HEAP32[$1>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 72|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 208|0);
  $18 = HEAP32[$17>>2]|0;
  _series_table_destroy($18);
 }
 $19 = HEAP32[$1>>2]|0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 72|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($19<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 _free($24);
 STACKTOP = sp;return;
}
function _destroy_dataset($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $dset;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 _free_Z($3);
 $4 = HEAP32[$0>>2]|0;
 _clear_datainfo($4,0);
 $5 = HEAP32[$0>>2]|0;
 _free($5);
 STACKTOP = sp;return;
}
function _dataset_obs_info_default($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 HEAP32[$0>>2] = $dset;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 32|0);
 (_strcpy(($2|0),(2064|0))|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 48|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$vararg_buffer>>2] = $7;
 (_sprintf($4,2072,$vararg_buffer)|0);
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 16|0);
 HEAPF64[$9>>3] = 1.0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 8|0);
 HEAP32[$11>>2] = 1;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 12|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function _dataset_allocate_obs_markers($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $S = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $S = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$S>>2] = 0;
 HEAP32[$err>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $5 = HEAP32[$0>>2]|0;
   $6 = (($5) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_strings_array_new_with_length($7,16)|0);
   HEAP32[$S>>2] = $8;
   $9 = HEAP32[$S>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$err>>2] = 12;
    break;
   } else {
    $11 = HEAP32[$S>>2]|0;
    $12 = HEAP32[$0>>2]|0;
    $13 = (($12) + 80|0);
    HEAP32[$13>>2] = $11;
    break;
   }
  }
 } while(0);
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 80|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $20 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($20|0);
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 76|0);
 HEAP8[$19>>0] = 1;
 $20 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($20|0);
}
function _dataset_allocate_varnames($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, $j = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $i = sp + 12|0;
 $j = sp + 8|0;
 $v = sp + 4|0;
 $err = sp;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$v>>2] = $3;
 HEAP32[$err>>2] = 0;
 $4 = HEAP32[$v>>2]|0;
 $5 = (_strings_array_new_with_length($4,32)|0);
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 68|0);
 HEAP32[$7>>2] = $5;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 68|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  HEAP32[$0>>2] = 12;
  $72 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($72|0);
 }
 $12 = HEAP32[$v>>2]|0;
 $13 = $12<<2;
 $14 = (_malloc($13)|0);
 $15 = HEAP32[$1>>2]|0;
 $16 = (($15) + 72|0);
 HEAP32[$16>>2] = $14;
 $17 = HEAP32[$1>>2]|0;
 $18 = (($17) + 72|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = HEAP32[$1>>2]|0;
  $22 = (($21) + 68|0);
  $23 = HEAP32[$22>>2]|0;
  _free($23);
  HEAP32[$0>>2] = 12;
  $72 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($72|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $24 = HEAP32[$i>>2]|0;
  $25 = HEAP32[$v>>2]|0;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = (_malloc(212)|0);
  $28 = HEAP32[$i>>2]|0;
  $29 = HEAP32[$1>>2]|0;
  $30 = (($29) + 72|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($28<<2)|0);
  HEAP32[$32>>2] = $27;
  $33 = HEAP32[$i>>2]|0;
  $34 = HEAP32[$1>>2]|0;
  $35 = (($34) + 72|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($33<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if ($39) {
   label = 8;
   break;
  }
  $56 = HEAP32[$i>>2]|0;
  $57 = HEAP32[$1>>2]|0;
  $58 = (($57) + 72|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($56<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  _gretl_varinfo_init($61);
  $62 = HEAP32[$i>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$i>>2] = $63;
 }
 if ((label|0) == 8) {
  HEAP32[$j>>2] = 0;
  while(1) {
   $40 = HEAP32[$j>>2]|0;
   $41 = HEAP32[$i>>2]|0;
   $42 = ($40|0)<($41|0);
   if (!($42)) {
    break;
   }
   $43 = HEAP32[$j>>2]|0;
   $44 = HEAP32[$1>>2]|0;
   $45 = (($44) + 72|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($43<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   _free($48);
   $49 = HEAP32[$j>>2]|0;
   $50 = (($49) + 1)|0;
   HEAP32[$j>>2] = $50;
  }
  $51 = HEAP32[$1>>2]|0;
  $52 = (($51) + 72|0);
  $53 = HEAP32[$52>>2]|0;
  _free($53);
  $54 = HEAP32[$1>>2]|0;
  $55 = (($54) + 72|0);
  HEAP32[$55>>2] = 0;
  HEAP32[$err>>2] = 12;
 }
 $64 = HEAP32[$err>>2]|0;
 $65 = ($64|0)!=(0);
 if (!($65)) {
  $66 = HEAP32[$1>>2]|0;
  $67 = (($66) + 68|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[$68>>2]|0;
  (_strcpy(($69|0),(2080|0))|0);
  $70 = HEAP32[$1>>2]|0;
  _series_set_label($70,0,2088);
 }
 $71 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $71;
 $72 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($72|0);
}
function _gretl_varinfo_init($vinfo) {
 $vinfo = $vinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $vinfo;
 $1 = HEAP32[$0>>2]|0;
 HEAP8[$1>>0] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 128|0);
 HEAP8[$3>>0] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 160|0);
 HEAP8[$5>>0] = 0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 192|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 196|0);
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 200|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 204|0);
 HEAP8[$13>>0] = 0;
 $14 = (_gretl_function_depth()|0);
 $15 = $14&255;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 205|0);
 HEAP8[$17>>0] = $15;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 208|0);
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return;
}
function _series_set_label($dset,$i,$s) {
 $dset = $dset|0;
 $i = $i|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $targ = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $targ = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $i;
 HEAP32[$2>>2] = $s;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$targ>>2] = $14;
 $15 = HEAP32[$targ>>2]|0;
 HEAP8[$15>>0] = 0;
 $16 = HEAP32[$targ>>2]|0;
 $17 = HEAP32[$2>>2]|0;
 (_strncat($16,$17,127)|0);
 STACKTOP = sp;return;
}
function _datainfo_init($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $dset;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 8|0);
 HEAP32[$5>>2] = 1;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 16|0);
 HEAPF64[$9>>3] = 1.0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 24|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 28|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 32|0);
 HEAP8[$15>>0] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 48|0);
 HEAP8[$17>>0] = 0;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 64|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 68|0);
 HEAP32[$21>>2] = 0;
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 72|0);
 HEAP32[$23>>2] = 0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + 76|0);
 HEAP8[$25>>0] = 0;
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + 80|0);
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + 84|0);
 HEAP32[$29>>2] = 0;
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + 88|0);
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$0>>2]|0;
 $33 = (($32) + 92|0);
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$0>>2]|0;
 $35 = (($34) + 96|0);
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$0>>2]|0;
 $37 = (($36) + 104|0);
 HEAP32[$37>>2] = 0;
 $38 = HEAP32[$0>>2]|0;
 $39 = (($38) + 108|0);
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$0>>2]|0;
 $41 = (($40) + 112|0);
 HEAPF64[$41>>3] = 0.0;
 $42 = HEAP32[$0>>2]|0;
 $43 = (($42) + 100|0);
 HEAP32[$43>>2] = 0;
 STACKTOP = sp;return;
}
function _datainfo_new() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $dset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dset = sp;
 $0 = (_malloc(120)|0);
 HEAP32[$dset>>2] = $0;
 $1 = HEAP32[$dset>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$dset>>2]|0;
  _datainfo_init($3);
 }
 $4 = HEAP32[$dset>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _create_new_dataset($nvar,$nobs,$markers) {
 $nvar = $nvar|0;
 $nobs = $nobs|0;
 $markers = $markers|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $opt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $opt = sp;
 HEAP32[$0>>2] = $nvar;
 HEAP32[$1>>2] = $nobs;
 HEAP32[$2>>2] = $markers;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 $5 = $4 ? 4096 : 0;
 HEAP32[$opt>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$opt>>2]|0;
 $9 = (_real_create_new_dataset($6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _real_create_new_dataset($nvar,$nobs,$opt) {
 $nvar = $nvar|0;
 $nobs = $nobs|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $dset = sp;
 HEAP32[$1>>2] = $nvar;
 HEAP32[$2>>2] = $nobs;
 HEAP32[$3>>2] = $opt;
 $4 = (_datainfo_new()|0);
 HEAP32[$dset>>2] = $4;
 $5 = HEAP32[$dset>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  HEAP32[$0>>2] = 0;
  $31 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($31|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$dset>>2]|0;
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$dset>>2]|0;
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = HEAP32[$dset>>2]|0;
 $13 = (($12) + 64|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$dset>>2]|0;
 $15 = HEAP32[$3>>2]|0;
 $16 = (_start_new_Z($14,$15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = HEAP32[$dset>>2]|0;
  _free($18);
  HEAP32[$0>>2] = 0;
  $31 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($31|0);
 }
 $19 = HEAP32[$3>>2]|0;
 $20 = $19 & 4096;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = HEAP32[$dset>>2]|0;
  $23 = (_dataset_allocate_obs_markers($22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = HEAP32[$dset>>2]|0;
   $26 = ($25|0)!=(0|0);
   if ($26) {
    $27 = HEAP32[$dset>>2]|0;
    _clear_datainfo($27,0);
    $28 = HEAP32[$dset>>2]|0;
    _free($28);
   }
   HEAP32[$0>>2] = 0;
   $31 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $29 = HEAP32[$dset>>2]|0;
 _dataset_obs_info_default($29);
 $30 = HEAP32[$dset>>2]|0;
 HEAP32[$0>>2] = $30;
 $31 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($31|0);
}
function _allocate_Z($dset,$opt) {
 $dset = $dset|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, $t = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $i = sp + 12|0;
 $t = sp + 8|0;
 $err = sp + 4|0;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $opt;
 HEAP32[$err>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[_stderr>>2]|0;
  (_fprintf(($6|0),(2112|0),($vararg_buffer|0))|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = $7 & 2;
 $9 = ($8|0)!=(0);
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 if ($9) {
  $15 = (_make_borrowed_Z($11,$14)|0);
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 64|0);
  HEAP32[$17>>2] = $15;
 } else {
  $18 = (_doubles_array_new($11,$14)|0);
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 64|0);
  HEAP32[$20>>2] = $18;
 }
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 64|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  HEAP32[$err>>2] = 12;
  $51 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $25 = HEAP32[$1>>2]|0;
 $26 = $25 & 2;
 $27 = ($26|0)!=(0);
 if ($27) {
  $51 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $28 = HEAP32[$i>>2]|0;
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)<($30|0);
  if (!($31)) {
   break;
  }
  HEAP32[$t>>2] = 0;
  while(1) {
   $32 = HEAP32[$t>>2]|0;
   $33 = HEAP32[$0>>2]|0;
   $34 = (($33) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($32|0)<($35|0);
   $37 = HEAP32[$i>>2]|0;
   if (!($36)) {
    break;
   }
   $38 = ($37|0)==(0);
   $39 = $38 ? 1.0 : 1.79769313486231570815E+308;
   $40 = HEAP32[$t>>2]|0;
   $41 = HEAP32[$i>>2]|0;
   $42 = HEAP32[$0>>2]|0;
   $43 = (($42) + 64|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($41<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($40<<3)|0);
   HEAPF64[$47>>3] = $39;
   $48 = HEAP32[$t>>2]|0;
   $49 = (($48) + 1)|0;
   HEAP32[$t>>2] = $49;
  }
  $50 = (($37) + 1)|0;
  HEAP32[$i>>2] = $50;
 }
 $51 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($51|0);
}
function _make_borrowed_Z($v,$n) {
 $v = $v|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Z = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $Z = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $v;
 HEAP32[$1>>2] = $n;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2<<2;
 $4 = (_malloc($3)|0);
 HEAP32[$Z>>2] = $4;
 $5 = HEAP32[$Z>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $32 = HEAP32[$Z>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$Z>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = HEAP32[$i>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$i>>2] = $14;
 }
 $15 = HEAP32[$1>>2]|0;
 $16 = $15<<3;
 $17 = (_malloc($16)|0);
 $18 = HEAP32[$Z>>2]|0;
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$Z>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = HEAP32[$Z>>2]|0;
  _free($22);
  HEAP32[$Z>>2] = 0;
  $32 = HEAP32[$Z>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $23 = HEAP32[$i>>2]|0;
  $24 = HEAP32[$1>>2]|0;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = HEAP32[$i>>2]|0;
  $27 = HEAP32[$Z>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($26<<3)|0);
  HEAPF64[$29>>3] = 1.0;
  $30 = HEAP32[$i>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$i>>2] = $31;
 }
 $32 = HEAP32[$Z>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _start_new_Z($dset,$opt) {
 $dset = $dset|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $opt;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (_allocate_Z($3,$4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  HEAP32[$0>>2] = 12;
  $41 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 24|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - 1)|0;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 28|0);
 HEAP32[$14>>2] = $12;
 $15 = HEAP32[$2>>2]|0;
 $16 = $15 & 131072;
 $17 = ($16|0)!=(0);
 $18 = HEAP32[$1>>2]|0;
 if ($17) {
  $19 = (($18) + 68|0);
  HEAP32[$19>>2] = 0;
  $20 = HEAP32[$1>>2]|0;
  $21 = (($20) + 72|0);
  HEAP32[$21>>2] = 0;
 } else {
  $22 = (_dataset_allocate_varnames($18)|0);
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = HEAP32[$1>>2]|0;
   _free_Z($24);
   $25 = HEAP32[$1>>2]|0;
   $26 = (($25) + 64|0);
   HEAP32[$26>>2] = 0;
   HEAP32[$0>>2] = 12;
   $41 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($41|0);
  }
 }
 $27 = HEAP32[$1>>2]|0;
 $28 = (($27) + 80|0);
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$1>>2]|0;
 $30 = (($29) + 76|0);
 HEAP8[$30>>0] = 0;
 $31 = HEAP32[$1>>2]|0;
 $32 = (($31) + 84|0);
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[$1>>2]|0;
 $34 = (($33) + 88|0);
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$1>>2]|0;
 $36 = (($35) + 92|0);
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$1>>2]|0;
 $38 = (($37) + 96|0);
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$1>>2]|0;
 $40 = (($39) + 104|0);
 HEAP32[$40>>2] = 0;
 HEAP32[$0>>2] = 0;
 $41 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function _dataset_add_series($dset,$newvars) {
 $dset = $dset|0;
 $newvars = $newvars|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $err = 0, $i = 0, $t = 0, $v = 0, $v0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $v0 = sp + 20|0;
 $err = sp + 16|0;
 $i = sp + 12|0;
 $v = sp + 8|0;
 $t = sp + 4|0;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $newvars;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$v0>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 100|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if ($8) {
  $9 = HEAP32[_stderr>>2]|0;
  (_fprintf(($9|0),(2160|0),($vararg_buffer|0))|0);
  HEAP32[$0>>2] = 2;
  $39 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($39|0);
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = (_real_add_series($10,0,$11)|0);
 HEAP32[$err>>2] = $12;
 $13 = HEAP32[$err>>2]|0;
 $14 = ($13|0)!=(0);
 L5: do {
  if (!($14)) {
   HEAP32[$i>>2] = 0;
   while(1) {
    $15 = HEAP32[$i>>2]|0;
    $16 = HEAP32[$2>>2]|0;
    $17 = ($15|0)<($16|0);
    if (!($17)) {
     break L5;
    }
    $18 = HEAP32[$v0>>2]|0;
    $19 = HEAP32[$i>>2]|0;
    $20 = (($18) + ($19))|0;
    HEAP32[$v>>2] = $20;
    HEAP32[$t>>2] = 0;
    while(1) {
     $21 = HEAP32[$t>>2]|0;
     $22 = HEAP32[$1>>2]|0;
     $23 = (($22) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($21|0)<($24|0);
     if (!($25)) {
      break;
     }
     $26 = HEAP32[$t>>2]|0;
     $27 = HEAP32[$v>>2]|0;
     $28 = HEAP32[$1>>2]|0;
     $29 = (($28) + 64|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + ($27<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + ($26<<3)|0);
     HEAPF64[$33>>3] = 0.0;
     $34 = HEAP32[$t>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$t>>2] = $35;
    }
    $36 = HEAP32[$i>>2]|0;
    $37 = (($36) + 1)|0;
    HEAP32[$i>>2] = $37;
   }
  }
 } while(0);
 $38 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $38;
 $39 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($39|0);
}
function _real_add_series($newvars,$x,$dset) {
 $newvars = $newvars|0;
 $x = $x|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, $newZ = 0, $v0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $newZ = sp + 12|0;
 $v0 = sp + 8|0;
 $i = sp + 4|0;
 $err = sp;
 HEAP32[$1>>2] = $newvars;
 HEAP32[$2>>2] = $x;
 HEAP32[$3>>2] = $dset;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$v0>>2] = $5;
 HEAP32[$err>>2] = 0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$0>>2] = 0;
  $69 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($69|0);
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = (($8) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$v0>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($11) + ($12))|0;
 $14 = $13<<2;
 $15 = (_realloc($10,$14)|0);
 HEAP32[$newZ>>2] = $15;
 $16 = HEAP32[$newZ>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  HEAP32[$err>>2] = 12;
 } else {
  $18 = HEAP32[$newZ>>2]|0;
  $19 = HEAP32[$3>>2]|0;
  $20 = (($19) + 64|0);
  HEAP32[$20>>2] = $18;
 }
 $21 = HEAP32[$err>>2]|0;
 $22 = ($21|0)!=(0);
 L9: do {
  if (!($22)) {
   $23 = HEAP32[$1>>2]|0;
   $24 = ($23|0)==(1);
   if ($24) {
    $25 = HEAP32[$2>>2]|0;
    $26 = ($25|0)!=(0|0);
    if ($26) {
     $27 = HEAP32[$2>>2]|0;
     $28 = HEAP32[$v0>>2]|0;
     $29 = HEAP32[$newZ>>2]|0;
     $30 = (($29) + ($28<<2)|0);
     HEAP32[$30>>2] = $27;
     break;
    }
   }
   HEAP32[$i>>2] = 0;
   while(1) {
    $31 = HEAP32[$i>>2]|0;
    $32 = HEAP32[$1>>2]|0;
    $33 = ($31|0)<($32|0);
    if (!($33)) {
     break L9;
    }
    $34 = HEAP32[$err>>2]|0;
    $35 = ($34|0)!=(0);
    $36 = $35 ^ 1;
    if (!($36)) {
     break L9;
    }
    $37 = HEAP32[$3>>2]|0;
    $38 = (($37) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $39<<3;
    $41 = (_malloc($40)|0);
    $42 = HEAP32[$v0>>2]|0;
    $43 = HEAP32[$i>>2]|0;
    $44 = (($42) + ($43))|0;
    $45 = HEAP32[$newZ>>2]|0;
    $46 = (($45) + ($44<<2)|0);
    HEAP32[$46>>2] = $41;
    $47 = HEAP32[$v0>>2]|0;
    $48 = HEAP32[$i>>2]|0;
    $49 = (($47) + ($48))|0;
    $50 = HEAP32[$newZ>>2]|0;
    $51 = (($50) + ($49<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(0|0);
    if ($53) {
     HEAP32[$err>>2] = 12;
    }
    $54 = HEAP32[$i>>2]|0;
    $55 = (($54) + 1)|0;
    HEAP32[$i>>2] = $55;
   }
  }
 } while(0);
 $56 = HEAP32[$err>>2]|0;
 $57 = ($56|0)!=(0);
 if (!($57)) {
  $58 = HEAP32[$v0>>2]|0;
  $59 = HEAP32[$1>>2]|0;
  $60 = HEAP32[$3>>2]|0;
  $61 = (_dataset_expand_varinfo($58,$59,$60)|0);
  HEAP32[$err>>2] = $61;
 }
 $62 = HEAP32[$err>>2]|0;
 $63 = ($62|0)!=(0);
 if (!($63)) {
  $64 = HEAP32[$1>>2]|0;
  $65 = HEAP32[$3>>2]|0;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($64))|0;
  HEAP32[$65>>2] = $67;
 }
 $68 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $68;
 $69 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($69|0);
}
function _dataset_drop_last_variables($dset,$delvars) {
 $dset = $dset|0;
 $delvars = $delvars|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $err = 0, $fset = 0, $i = 0, $newv = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $newv = sp + 28|0;
 $i = sp + 24|0;
 $err = sp + 20|0;
 $fset = sp + 16|0;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $delvars;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($4) - ($5))|0;
 HEAP32[$newv>>2] = $6;
 HEAP32[$err>>2] = 0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)<=(0);
 if ($8) {
  HEAP32[$0>>2] = 0;
  $85 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($85|0);
 }
 $9 = HEAP32[$newv>>2]|0;
 $10 = ($9|0)<(1);
 if ($10) {
  $11 = HEAP32[_stderr>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$newv>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $15;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $16;
  (_fprintf(($11|0),(2208|0),($vararg_buffer|0))|0);
  HEAP32[$0>>2] = 2;
  $85 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($85|0);
 }
 $17 = HEAP32[$newv>>2]|0;
 HEAP32[$i>>2] = $17;
 while(1) {
  $18 = HEAP32[$i>>2]|0;
  $19 = HEAP32[$1>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[$i>>2]|0;
  $23 = HEAP32[$1>>2]|0;
  $24 = (($23) + 68|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  _free($27);
  $28 = HEAP32[$1>>2]|0;
  $29 = HEAP32[$i>>2]|0;
  _free_varinfo($28,$29);
  $30 = HEAP32[$i>>2]|0;
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + 64|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  _free($35);
  $36 = HEAP32[$i>>2]|0;
  $37 = HEAP32[$1>>2]|0;
  $38 = (($37) + 64|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($36<<2)|0);
  HEAP32[$40>>2] = 0;
  $41 = HEAP32[$i>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$i>>2] = $42;
 }
 $43 = HEAP32[$1>>2]|0;
 $44 = HEAP32[$newv>>2]|0;
 $45 = (_shrink_dataset_to_size($43,$44,0)|0);
 HEAP32[$err>>2] = $45;
 $46 = HEAP32[$err>>2]|0;
 $47 = ($46|0)!=(0);
 if (!($47)) {
  $48 = HEAP32[$1>>2]|0;
  $49 = (($48) + 100|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   $52 = HEAP32[$newv>>2]|0;
   $53 = (_gretl_lists_revise(0,$52)|0);
   HEAP32[$err>>2] = $53;
  }
 }
 $54 = HEAP32[$err>>2]|0;
 $55 = ($54|0)!=(0);
 if (!($55)) {
  $56 = (_complex_subsampled()|0);
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = (_fetch_full_dataset()|0);
   HEAP32[$fset>>2] = $58;
   $59 = HEAP32[$newv>>2]|0;
   $60 = HEAP32[$fset>>2]|0;
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)<($61|0);
   if ($62) {
    $63 = HEAP32[$newv>>2]|0;
    HEAP32[$i>>2] = $63;
    while(1) {
     $64 = HEAP32[$i>>2]|0;
     $65 = HEAP32[$fset>>2]|0;
     $66 = HEAP32[$65>>2]|0;
     $67 = ($64|0)<($66|0);
     if (!($67)) {
      break;
     }
     $68 = HEAP32[$i>>2]|0;
     $69 = HEAP32[$fset>>2]|0;
     $70 = (($69) + 64|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($71) + ($68<<2)|0);
     $73 = HEAP32[$72>>2]|0;
     _free($73);
     $74 = HEAP32[$i>>2]|0;
     $75 = HEAP32[$fset>>2]|0;
     $76 = (($75) + 64|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + ($74<<2)|0);
     HEAP32[$78>>2] = 0;
     $79 = HEAP32[$i>>2]|0;
     $80 = (($79) + 1)|0;
     HEAP32[$i>>2] = $80;
    }
    $81 = HEAP32[$fset>>2]|0;
    $82 = HEAP32[$newv>>2]|0;
    $83 = (_shrink_dataset_to_size($81,$82,1)|0);
    HEAP32[$err>>2] = $83;
   }
  }
 }
 $84 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $84;
 $85 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($85|0);
}
function _shrink_dataset_to_size($dset,$nv,$drop) {
 $dset = $dset|0;
 $nv = $nv|0;
 $drop = $drop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $newZ = 0, $varinfo = 0, $varname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $newZ = sp + 8|0;
 $varname = sp + 4|0;
 $varinfo = sp;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $nv;
 HEAP32[$3>>2] = $drop;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = HEAP32[$1>>2]|0;
   $7 = (($6) + 68|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$2>>2]|0;
   $10 = $9<<2;
   $11 = (_realloc($8,$10)|0);
   HEAP32[$varname>>2] = $11;
   $12 = HEAP32[$varname>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    HEAP32[$0>>2] = 12;
    $41 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($41|0);
   }
   $14 = HEAP32[$varname>>2]|0;
   $15 = HEAP32[$1>>2]|0;
   $16 = (($15) + 68|0);
   HEAP32[$16>>2] = $14;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 72|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$2>>2]|0;
   $21 = $20<<2;
   $22 = (_realloc($19,$21)|0);
   HEAP32[$varinfo>>2] = $22;
   $23 = HEAP32[$varinfo>>2]|0;
   $24 = ($23|0)==(0|0);
   if (!($24)) {
    $25 = HEAP32[$varinfo>>2]|0;
    $26 = HEAP32[$1>>2]|0;
    $27 = (($26) + 72|0);
    HEAP32[$27>>2] = $25;
    break;
   }
   HEAP32[$0>>2] = 12;
   $41 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($41|0);
  }
 } while(0);
 $28 = HEAP32[$1>>2]|0;
 $29 = (($28) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$2>>2]|0;
 $32 = $31<<2;
 $33 = (_realloc($30,$32)|0);
 HEAP32[$newZ>>2] = $33;
 $34 = HEAP32[$newZ>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  HEAP32[$0>>2] = 12;
  $41 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($41|0);
 } else {
  $36 = HEAP32[$newZ>>2]|0;
  $37 = HEAP32[$1>>2]|0;
  $38 = (($37) + 64|0);
  HEAP32[$38>>2] = $36;
  $39 = HEAP32[$2>>2]|0;
  $40 = HEAP32[$1>>2]|0;
  HEAP32[$40>>2] = $39;
  HEAP32[$0>>2] = 0;
  $41 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 return 0|0;
}
function _series_is_log($dset,$i,$parent) {
 $dset = $dset|0;
 $i = $i|0;
 $parent = $parent|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, $s = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $s = sp + 4|0;
 $fmt = sp + 24|0;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $i;
 HEAP32[$3>>2] = $parent;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (_series_get_label($4,$5)|0);
 HEAP32[$s>>2] = $6;
 $7 = HEAP32[$3>>2]|0;
 HEAP8[$7>>0] = 0;
 $8 = HEAP32[$s>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[$s>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(0);
  if ($13) {
   HEAP32[$vararg_buffer1>>2] = 31;
   (_sprintf($fmt,2288,$vararg_buffer1)|0);
   $14 = HEAP32[$s>>2]|0;
   $15 = HEAP32[$3>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $15;
   $16 = (_sscanf($14,$fmt,$vararg_buffer1)|0);
   $17 = ($16|0)==(1);
   if ($17) {
    HEAP32[$0>>2] = 1;
    $35 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($35|0);
   }
   $18 = HEAP32[$s>>2]|0;
   $19 = (_strncmp($18,2304,4)|0);
   $20 = ($19|0)!=(0);
   $21 = HEAP32[$s>>2]|0;
   if (!($20)) {
    $22 = (($21) + 4|0);
    $23 = HEAP32[$3>>2]|0;
    $24 = (_found_log_parent($22,$23)|0);
    HEAP32[$0>>2] = $24;
    $35 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($35|0);
   }
   $25 = (_strcspn($21,2312)|0);
   $26 = HEAP32[$s>>2]|0;
   $27 = (($26) + ($25)|0);
   HEAP32[$s>>2] = $27;
   $28 = HEAP32[$s>>2]|0;
   $29 = (_strncmp($28,2320,5)|0);
   $30 = ($29|0)!=(0);
   if (!($30)) {
    $31 = HEAP32[$s>>2]|0;
    $32 = (($31) + 5|0);
    $33 = HEAP32[$3>>2]|0;
    $34 = (_found_log_parent($32,$33)|0);
    HEAP32[$0>>2] = $34;
    $35 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($35|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $35 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($35|0);
}
function _series_get_label($dset,$i) {
 $dset = $dset|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $i;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = HEAP32[$2>>2]|0;
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 72|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($9<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$0>>2] = $14;
   $15 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($15|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _found_log_parent($s,$targ) {
 $s = $s|0;
 $targ = $targ|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, $len = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $len = sp + 4|0;
 $fmt = sp + 24|0;
 HEAP32[$1>>2] = $s;
 HEAP32[$2>>2] = $targ;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_gretl_namechar_spn($3)|0);
 HEAP32[$len>>2] = $4;
 $5 = HEAP32[$len>>2]|0;
 $6 = ($5|0)<(32);
 if ($6) {
  $7 = HEAP32[$len>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)==(41);
  if ($12) {
   HEAP32[$vararg_buffer1>>2] = 31;
   (_sprintf($fmt,2328,$vararg_buffer1)|0);
   $13 = HEAP32[$1>>2]|0;
   $14 = HEAP32[$2>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $14;
   (_sscanf($13,$fmt,$vararg_buffer1)|0);
   HEAP32[$0>>2] = 1;
   $15 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($15|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _series_set_discrete($dset,$i,$s) {
 $dset = $dset|0;
 $i = $i|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $flags = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $i;
 HEAP32[$2>>2] = $s;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 192|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$flags>>2] = $16;
 $17 = HEAP32[$2>>2]|0;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = HEAP32[$flags>>2]|0;
  $20 = $19 & 1;
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $22 = HEAP32[$1>>2]|0;
   $23 = HEAP32[$0>>2]|0;
   $24 = (($23) + 72|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($22<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 192|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 | 1;
   HEAP32[$28>>2] = $30;
   _set_dataset_is_changed();
   STACKTOP = sp;return;
  }
 }
 $31 = HEAP32[$2>>2]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$flags>>2]|0;
 $34 = $33 & 1;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = HEAP32[$1>>2]|0;
 $37 = HEAP32[$0>>2]|0;
 $38 = (($37) + 72|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($36<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 192|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & -2;
 HEAP32[$42>>2] = $44;
 _set_dataset_is_changed();
 STACKTOP = sp;return;
}
function _multi_unit_panel_sample($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $ret = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$ret>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $20 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($20|0);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(2);
 if (!($6)) {
  $20 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($20|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($9) - ($12))|0;
 $14 = (($13) + 1)|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)>($17|0);
 $19 = $18&1;
 HEAP32[$ret>>2] = $19;
 $20 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($20|0);
}
function _series_is_listarg($dset,$i) {
 $dset = $dset|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $i;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 192|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 8;
 STACKTOP = sp;return ($10|0);
}
function _series_zero_flags($dset,$i) {
 $dset = $dset|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $i;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($8<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 192|0);
 HEAP32[$14>>2] = 0;
 STACKTOP = sp;return;
}
function _series_get_parent_name($dset,$i) {
 $dset = $dset|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $i;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = HEAP32[$2>>2]|0;
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 72|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($9<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 160|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 << 24 >> 24;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = HEAP32[$2>>2]|0;
    $20 = HEAP32[$1>>2]|0;
    $21 = (($20) + 72|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + ($19<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + 160|0);
    HEAP32[$0>>2] = $25;
    $26 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($26|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $26 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($26|0);
}
function _series_get_lag($dset,$i) {
 $dset = $dset|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $i;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = HEAP32[$2>>2]|0;
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 72|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($9<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 200|0);
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$0>>2] = $16;
   $17 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($17|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $17 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _series_get_stack_level($dset,$i) {
 $dset = $dset|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $i;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = HEAP32[$2>>2]|0;
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 72|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($9<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 205|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 << 24 >> 24;
   HEAP32[$0>>2] = $17;
   $18 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($18|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $18 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($18|0);
}
function _series_set_parent($dset,$i,$parent) {
 $dset = $dset|0;
 $i = $i|0;
 $parent = $parent|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $i;
 HEAP32[$2>>2] = $parent;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 160|0);
 $16 = HEAP32[$2>>2]|0;
 (_strcpy(($15|0),($16|0))|0);
 STACKTOP = sp;return;
}
function _series_set_transform($dset,$i,$transform) {
 $dset = $dset|0;
 $i = $i|0;
 $transform = $transform|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $i;
 HEAP32[$2>>2] = $transform;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 72|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 196|0);
 HEAP32[$16>>2] = $9;
 STACKTOP = sp;return;
}
function _series_set_lag($dset,$i,$lag) {
 $dset = $dset|0;
 $i = $i|0;
 $lag = $lag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $i;
 HEAP32[$2>>2] = $lag;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 72|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 200|0);
 HEAP32[$16>>2] = $9;
 STACKTOP = sp;return;
}
function _is_string_valued($dset,$i) {
 $dset = $dset|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $i;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ($5|0)>(0);
  if ($6) {
   $7 = HEAP32[$2>>2]|0;
   $8 = HEAP32[$1>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7|0)<($9|0);
   if ($10) {
    $11 = HEAP32[$2>>2]|0;
    $12 = HEAP32[$1>>2]|0;
    $13 = (($12) + 72|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + ($11<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 208|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)!=(0|0);
    $20 = $19&1;
    HEAP32[$0>>2] = $20;
    $21 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($21|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $21 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($21|0);
}
function _series_get_string_for_value($dset,$i,$val) {
 $dset = $dset|0;
 $i = $i|0;
 $val = +$val;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp;
 $ret = sp + 8|0;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $i;
 HEAPF64[$2>>3] = $val;
 HEAP32[$ret>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = HEAP32[$1>>2]|0;
   $10 = HEAP32[$0>>2]|0;
   $11 = (($10) + 72|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($9<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 208|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)!=(0|0);
   if ($17) {
    $18 = HEAP32[$1>>2]|0;
    $19 = HEAP32[$0>>2]|0;
    $20 = (($19) + 72|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + ($18<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + 208|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = +HEAPF64[$2>>3];
    $27 = (_series_table_get_string($25,$26)|0);
    HEAP32[$ret>>2] = $27;
   }
  }
 }
 $28 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($28|0);
}
function _dataset_expand_varinfo($v0,$newvars,$dset) {
 $v0 = $v0|0;
 $newvars = $newvars|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $bigv = 0, $err = 0, $i = 0, $v = 0, $varinfo = 0;
 var $varname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $varname = sp + 20|0;
 $varinfo = sp + 16|0;
 $bigv = sp + 12|0;
 $i = sp + 8|0;
 $v = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $v0;
 HEAP32[$1>>2] = $newvars;
 HEAP32[$2>>2] = $dset;
 HEAP32[$varname>>2] = 0;
 HEAP32[$varinfo>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($3) + ($4))|0;
 HEAP32[$bigv>>2] = $5;
 HEAP32[$err>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$bigv>>2]|0;
 $10 = $9<<2;
 $11 = (_realloc($8,$10)|0);
 HEAP32[$varname>>2] = $11;
 $12 = HEAP32[$varname>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  HEAP32[$err>>2] = 12;
 } else {
  $14 = HEAP32[$varname>>2]|0;
  $15 = HEAP32[$2>>2]|0;
  $16 = (($15) + 68|0);
  HEAP32[$16>>2] = $14;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $17 = HEAP32[$i>>2]|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$err>>2]|0;
  $21 = ($20|0)!=(0);
  $22 = $21 ^ 1;
  if (!($22)) {
   break;
  }
  $23 = HEAP32[$0>>2]|0;
  $24 = HEAP32[$i>>2]|0;
  $25 = (($23) + ($24))|0;
  HEAP32[$v>>2] = $25;
  $26 = (_malloc(32)|0);
  $27 = HEAP32[$v>>2]|0;
  $28 = HEAP32[$2>>2]|0;
  $29 = (($28) + 68|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($27<<2)|0);
  HEAP32[$31>>2] = $26;
  $32 = HEAP32[$v>>2]|0;
  $33 = HEAP32[$2>>2]|0;
  $34 = (($33) + 68|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($32<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0|0);
  if ($38) {
   HEAP32[$err>>2] = 12;
  } else {
   $39 = HEAP32[$v>>2]|0;
   $40 = HEAP32[$2>>2]|0;
   $41 = (($40) + 68|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   HEAP8[$44>>0] = 0;
  }
  $45 = HEAP32[$i>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$i>>2] = $46;
 }
 $47 = HEAP32[$err>>2]|0;
 $48 = ($47|0)!=(0);
 if ($48) {
  $94 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($94|0);
 }
 $49 = HEAP32[$2>>2]|0;
 $50 = (($49) + 72|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)!=(0|0);
 if (!($52)) {
  $94 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($94|0);
 }
 $53 = HEAP32[$2>>2]|0;
 $54 = (($53) + 72|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP32[$bigv>>2]|0;
 $57 = $56<<2;
 $58 = (_realloc($55,$57)|0);
 HEAP32[$varinfo>>2] = $58;
 $59 = HEAP32[$varinfo>>2]|0;
 $60 = ($59|0)==(0|0);
 if ($60) {
  HEAP32[$err>>2] = 12;
 } else {
  $61 = HEAP32[$varinfo>>2]|0;
  $62 = HEAP32[$2>>2]|0;
  $63 = (($62) + 72|0);
  HEAP32[$63>>2] = $61;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $64 = HEAP32[$i>>2]|0;
  $65 = HEAP32[$1>>2]|0;
  $66 = ($64|0)<($65|0);
  if (!($66)) {
   label = 23;
   break;
  }
  $67 = HEAP32[$err>>2]|0;
  $68 = ($67|0)!=(0);
  $69 = $68 ^ 1;
  if (!($69)) {
   label = 23;
   break;
  }
  $70 = HEAP32[$0>>2]|0;
  $71 = HEAP32[$i>>2]|0;
  $72 = (($70) + ($71))|0;
  HEAP32[$v>>2] = $72;
  $73 = (_malloc(212)|0);
  $74 = HEAP32[$v>>2]|0;
  $75 = HEAP32[$2>>2]|0;
  $76 = (($75) + 72|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($74<<2)|0);
  HEAP32[$78>>2] = $73;
  $79 = HEAP32[$v>>2]|0;
  $80 = HEAP32[$2>>2]|0;
  $81 = (($80) + 72|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($79<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)==(0|0);
  if ($85) {
   HEAP32[$err>>2] = 12;
  } else {
   $86 = HEAP32[$v>>2]|0;
   $87 = HEAP32[$2>>2]|0;
   $88 = (($87) + 72|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + ($86<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   _gretl_varinfo_init($91);
  }
  $92 = HEAP32[$i>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$i>>2] = $93;
 }
 if ((label|0) == 23) {
  $94 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($94|0);
 }
 return 0|0;
}
function _gretl_corr($t1,$t2,$x,$y,$missing) {
 $t1 = $t1|0;
 $t2 = $t2|0;
 $x = $x|0;
 $y = $y|0;
 $missing = $missing|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $cval = 0, $den = 0, $n = 0, $nn = 0, $sx = 0, $sxx = 0, $sxy = 0, $sy = 0, $syy = 0, $t = 0, $xbar = 0, $ybar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 72|0;
 $1 = sp + 108|0;
 $2 = sp + 104|0;
 $3 = sp + 100|0;
 $4 = sp + 96|0;
 $5 = sp + 92|0;
 $t = sp + 88|0;
 $nn = sp + 84|0;
 $n = sp + 80|0;
 $sx = sp + 64|0;
 $sy = sp + 56|0;
 $sxx = sp + 48|0;
 $syy = sp + 40|0;
 $sxy = sp + 32|0;
 $den = sp + 24|0;
 $xbar = sp + 16|0;
 $ybar = sp + 8|0;
 $cval = sp;
 HEAP32[$1>>2] = $t1;
 HEAP32[$2>>2] = $t2;
 HEAP32[$3>>2] = $x;
 HEAP32[$4>>2] = $y;
 HEAP32[$5>>2] = $missing;
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = (($8) + 1)|0;
 HEAP32[$n>>2] = $9;
 HEAPF64[$cval>>3] = 0.0;
 $10 = HEAP32[$n>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  HEAPF64[$0>>3] = 1.79769313486231570815E+308;
  $123 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$123);
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = HEAP32[$3>>2]|0;
 $15 = (_gretl_isconst($12,$13,$14)|0);
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $17 = HEAP32[$1>>2]|0;
  $18 = HEAP32[$2>>2]|0;
  $19 = HEAP32[$4>>2]|0;
  $20 = (_gretl_isconst($17,$18,$19)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   HEAP32[$nn>>2] = 0;
   HEAPF64[$sy>>3] = 0.0;
   HEAPF64[$sx>>3] = 0.0;
   $22 = HEAP32[$1>>2]|0;
   HEAP32[$t>>2] = $22;
   while(1) {
    $23 = HEAP32[$t>>2]|0;
    $24 = HEAP32[$2>>2]|0;
    $25 = ($23|0)<=($24|0);
    if (!($25)) {
     break;
    }
    $26 = HEAP32[$t>>2]|0;
    $27 = HEAP32[$3>>2]|0;
    $28 = (($27) + ($26<<3)|0);
    $29 = +HEAPF64[$28>>3];
    $30 = $29 == 1.79769313486231570815E+308;
    if (!($30)) {
     $31 = HEAP32[$t>>2]|0;
     $32 = HEAP32[$4>>2]|0;
     $33 = (($32) + ($31<<3)|0);
     $34 = +HEAPF64[$33>>3];
     $35 = $34 == 1.79769313486231570815E+308;
     if (!($35)) {
      $36 = HEAP32[$t>>2]|0;
      $37 = HEAP32[$3>>2]|0;
      $38 = (($37) + ($36<<3)|0);
      $39 = +HEAPF64[$38>>3];
      $40 = +HEAPF64[$sx>>3];
      $41 = $40 + $39;
      HEAPF64[$sx>>3] = $41;
      $42 = HEAP32[$t>>2]|0;
      $43 = HEAP32[$4>>2]|0;
      $44 = (($43) + ($42<<3)|0);
      $45 = +HEAPF64[$44>>3];
      $46 = +HEAPF64[$sy>>3];
      $47 = $46 + $45;
      HEAPF64[$sy>>3] = $47;
      $48 = HEAP32[$nn>>2]|0;
      $49 = (($48) + 1)|0;
      HEAP32[$nn>>2] = $49;
     }
    }
    $50 = HEAP32[$t>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$t>>2] = $51;
   }
   $52 = HEAP32[$nn>>2]|0;
   $53 = ($52|0)<(2);
   if ($53) {
    HEAPF64[$0>>3] = 1.79769313486231570815E+308;
    $123 = +HEAPF64[$0>>3];
    STACKTOP = sp;return (+$123);
   }
   $54 = +HEAPF64[$sx>>3];
   $55 = HEAP32[$nn>>2]|0;
   $56 = (+($55|0));
   $57 = $54 / $56;
   HEAPF64[$xbar>>3] = $57;
   $58 = +HEAPF64[$sy>>3];
   $59 = HEAP32[$nn>>2]|0;
   $60 = (+($59|0));
   $61 = $58 / $60;
   HEAPF64[$ybar>>3] = $61;
   HEAPF64[$sxy>>3] = 0.0;
   HEAPF64[$syy>>3] = 0.0;
   HEAPF64[$sxx>>3] = 0.0;
   $62 = HEAP32[$1>>2]|0;
   HEAP32[$t>>2] = $62;
   while(1) {
    $63 = HEAP32[$t>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63|0)<=($64|0);
    if (!($65)) {
     break;
    }
    $66 = HEAP32[$t>>2]|0;
    $67 = HEAP32[$3>>2]|0;
    $68 = (($67) + ($66<<3)|0);
    $69 = +HEAPF64[$68>>3];
    $70 = $69 == 1.79769313486231570815E+308;
    if (!($70)) {
     $71 = HEAP32[$t>>2]|0;
     $72 = HEAP32[$4>>2]|0;
     $73 = (($72) + ($71<<3)|0);
     $74 = +HEAPF64[$73>>3];
     $75 = $74 == 1.79769313486231570815E+308;
     if (!($75)) {
      $76 = HEAP32[$t>>2]|0;
      $77 = HEAP32[$3>>2]|0;
      $78 = (($77) + ($76<<3)|0);
      $79 = +HEAPF64[$78>>3];
      $80 = +HEAPF64[$xbar>>3];
      $81 = $79 - $80;
      HEAPF64[$sx>>3] = $81;
      $82 = HEAP32[$t>>2]|0;
      $83 = HEAP32[$4>>2]|0;
      $84 = (($83) + ($82<<3)|0);
      $85 = +HEAPF64[$84>>3];
      $86 = +HEAPF64[$ybar>>3];
      $87 = $85 - $86;
      HEAPF64[$sy>>3] = $87;
      $88 = +HEAPF64[$sx>>3];
      $89 = +HEAPF64[$sx>>3];
      $90 = $88 * $89;
      $91 = +HEAPF64[$sxx>>3];
      $92 = $91 + $90;
      HEAPF64[$sxx>>3] = $92;
      $93 = +HEAPF64[$sy>>3];
      $94 = +HEAPF64[$sy>>3];
      $95 = $93 * $94;
      $96 = +HEAPF64[$syy>>3];
      $97 = $96 + $95;
      HEAPF64[$syy>>3] = $97;
      $98 = +HEAPF64[$sx>>3];
      $99 = +HEAPF64[$sy>>3];
      $100 = $98 * $99;
      $101 = +HEAPF64[$sxy>>3];
      $102 = $101 + $100;
      HEAPF64[$sxy>>3] = $102;
     }
    }
    $103 = HEAP32[$t>>2]|0;
    $104 = (($103) + 1)|0;
    HEAP32[$t>>2] = $104;
   }
   $105 = +HEAPF64[$sxy>>3];
   $106 = $105 != 0.0;
   do {
    if ($106) {
     $107 = +HEAPF64[$sxx>>3];
     $108 = +HEAPF64[$syy>>3];
     $109 = $107 * $108;
     HEAPF64[$den>>3] = $109;
     $110 = +HEAPF64[$den>>3];
     $111 = $110 > 0.0;
     if ($111) {
      $112 = +HEAPF64[$sxy>>3];
      $113 = +HEAPF64[$den>>3];
      $114 = (+Math_sqrt((+$113)));
      $115 = $112 / $114;
      HEAPF64[$cval>>3] = $115;
      break;
     } else {
      HEAPF64[$cval>>3] = 1.79769313486231570815E+308;
      break;
     }
    }
   } while(0);
   $116 = HEAP32[$5>>2]|0;
   $117 = ($116|0)!=(0|0);
   if ($117) {
    $118 = HEAP32[$n>>2]|0;
    $119 = HEAP32[$nn>>2]|0;
    $120 = (($118) - ($119))|0;
    $121 = HEAP32[$5>>2]|0;
    HEAP32[$121>>2] = $120;
   }
   $122 = +HEAPF64[$cval>>3];
   HEAPF64[$0>>3] = $122;
   $123 = +HEAPF64[$0>>3];
   STACKTOP = sp;return (+$123);
  }
 }
 HEAPF64[$0>>3] = 1.79769313486231570815E+308;
 $123 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$123);
}
function _gretl_corr_rsq($t1,$t2,$x,$y) {
 $t1 = $t1|0;
 $t2 = $t2|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $r = sp;
 HEAP32[$0>>2] = $t1;
 HEAP32[$1>>2] = $t2;
 HEAP32[$2>>2] = $x;
 HEAP32[$3>>2] = $y;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$3>>2]|0;
 $8 = (+_gretl_corr($4,$5,$6,$7,0));
 HEAPF64[$r>>3] = $8;
 $9 = +HEAPF64[$r>>3];
 $10 = $9 == 1.79769313486231570815E+308;
 $11 = +HEAPF64[$r>>3];
 if ($10) {
  $14 = $11;
  STACKTOP = sp;return (+$14);
 }
 $12 = +HEAPF64[$r>>3];
 $13 = $11 * $12;
 $14 = $13;
 STACKTOP = sp;return (+$14);
}
function _vmatrix_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v = sp;
 $0 = (_malloc(36)|0);
 HEAP32[$v>>2] = $0;
 $1 = HEAP32[$v>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $20 = HEAP32[$v>>2]|0;
  STACKTOP = sp;return ($20|0);
 }
 $3 = HEAP32[$v>>2]|0;
 $4 = (($3) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$v>>2]|0;
 $6 = (($5) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$v>>2]|0;
 $8 = (($7) + 20|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[$v>>2]|0;
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$v>>2]|0;
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$v>>2]|0;
 $13 = (($12) + 8|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$v>>2]|0;
 $15 = (($14) + 12|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP32[$v>>2]|0;
 $17 = (($16) + 16|0);
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$v>>2]|0;
 $19 = (($18) + 32|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$v>>2]|0;
 STACKTOP = sp;return ($20|0);
}
function _free_vmatrix($vmat) {
 $vmat = $vmat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $vmat;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  _strings_array_free($9,$12);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  _free($19);
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = HEAP32[$0>>2]|0;
  $25 = (($24) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  _free($26);
 }
 $27 = HEAP32[$0>>2]|0;
 _free($27);
 STACKTOP = sp;return;
}
function _maybe_shift_ldepvar($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_int($2,2344)|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 (_lagged_depvar_check($5,$6)|0);
 STACKTOP = sp;return;
}
function _lagged_depvar_check($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ldv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $ldv = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (_lagdepvar($4,$5)|0);
 HEAP32[$ldv>>2] = $6;
 $7 = HEAP32[$ldv>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = HEAP32[$0>>2]|0;
 if ($8) {
  $10 = HEAP32[$ldv>>2]|0;
  (_gretl_model_set_int($9,2344,$10)|0);
 } else {
  $11 = (_gretl_model_get_int($9,2344)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = HEAP32[$0>>2]|0;
   (_gretl_model_destroy_data_item($13,2344)|0);
  }
 }
 $14 = HEAP32[$ldv>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _XTX_XTy($list,$t1,$t2,$dset,$nwt,$rho,$pwe,$xpx,$xpy,$ysum,$ypy,$mask) {
 $list = $list|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 $dset = $dset|0;
 $nwt = $nwt|0;
 $rho = +$rho;
 $pwe = $pwe|0;
 $xpx = $xpx|0;
 $xpy = $xpy|0;
 $ysum = $ysum|0;
 $ypy = $ypy|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0.0, $515 = 0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0.0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $i = 0, $j = 0;
 var $lmax = 0, $lmin = 0, $m = 0, $pw1 = 0, $qdiff = 0, $t = 0, $w = 0, $x = 0, $xi = 0, $xj = 0, $y = 0, $yno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $0 = sp + 116|0;
 $1 = sp + 112|0;
 $2 = sp + 108|0;
 $3 = sp + 104|0;
 $4 = sp + 100|0;
 $5 = sp + 96|0;
 $6 = sp + 16|0;
 $7 = sp + 92|0;
 $8 = sp + 88|0;
 $9 = sp + 84|0;
 $10 = sp + 80|0;
 $11 = sp + 76|0;
 $12 = sp + 72|0;
 $yno = sp + 68|0;
 $lmin = sp + 64|0;
 $lmax = sp + 60|0;
 $qdiff = sp + 56|0;
 $y = sp + 52|0;
 $w = sp + 48|0;
 $xi = sp + 44|0;
 $xj = sp + 40|0;
 $x = sp + 8|0;
 $pw1 = sp;
 $i = sp + 36|0;
 $j = sp + 32|0;
 $t = sp + 28|0;
 $m = sp + 24|0;
 HEAP32[$1>>2] = $list;
 HEAP32[$2>>2] = $t1;
 HEAP32[$3>>2] = $t2;
 HEAP32[$4>>2] = $dset;
 HEAP32[$5>>2] = $nwt;
 HEAPF64[$6>>3] = $rho;
 HEAP32[$7>>2] = $pwe;
 HEAP32[$8>>2] = $xpx;
 HEAP32[$9>>2] = $xpy;
 HEAP32[$10>>2] = $ysum;
 HEAP32[$11>>2] = $ypy;
 HEAP32[$12>>2] = $mask;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$yno>>2] = $15;
 $16 = HEAP32[$9>>2]|0;
 $17 = ($16|0)!=(0|0);
 $18 = $17 ? 2 : 1;
 HEAP32[$lmin>>2] = $18;
 $19 = HEAP32[$1>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$lmax>>2] = $20;
 $21 = +HEAPF64[$6>>3];
 $22 = $21 != 0.0;
 $23 = $22&1;
 HEAP32[$qdiff>>2] = $23;
 HEAP32[$y>>2] = 0;
 HEAP32[$w>>2] = 0;
 HEAP32[$xi>>2] = 0;
 HEAP32[$xj>>2] = 0;
 $24 = HEAP32[$qdiff>>2]|0;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = HEAP32[$7>>2]|0;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = +HEAPF64[$6>>3];
   $29 = +HEAPF64[$6>>3];
   $30 = $28 * $29;
   $31 = 1.0 - $30;
   $32 = (+Math_sqrt((+$31)));
   HEAPF64[$pw1>>3] = $32;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  HEAP32[$7>>2] = 0;
  HEAPF64[$pw1>>3] = 0.0;
 }
 $33 = HEAP32[$yno>>2]|0;
 $34 = HEAP32[$4>>2]|0;
 $35 = (($34) + 64|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($33<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$y>>2] = $38;
 $39 = HEAP32[$5>>2]|0;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = HEAP32[$5>>2]|0;
  $42 = HEAP32[$4>>2]|0;
  $43 = (($42) + 64|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($41<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$w>>2] = $46;
 }
 $47 = HEAP32[$9>>2]|0;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = HEAP32[$11>>2]|0;
  HEAPF64[$49>>3] = 0.0;
  $50 = HEAP32[$10>>2]|0;
  HEAPF64[$50>>3] = 0.0;
  $51 = HEAP32[$2>>2]|0;
  HEAP32[$t>>2] = $51;
  while(1) {
   $52 = HEAP32[$t>>2]|0;
   $53 = HEAP32[$3>>2]|0;
   $54 = ($52|0)<=($53|0);
   if (!($54)) {
    break;
   }
   $55 = HEAP32[$12>>2]|0;
   $56 = ($55|0)!=(0|0);
   if ($56) {
    $57 = HEAP32[$t>>2]|0;
    $58 = HEAP32[$12>>2]|0;
    $59 = (($58) + ($57)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = ($61|0)==(49);
    if (!($62)) {
     label = 12;
    }
   } else {
    label = 12;
   }
   if ((label|0) == 12) {
    label = 0;
    $63 = HEAP32[$t>>2]|0;
    $64 = HEAP32[$y>>2]|0;
    $65 = (($64) + ($63<<3)|0);
    $66 = +HEAPF64[$65>>3];
    HEAPF64[$x>>3] = $66;
    $67 = HEAP32[$qdiff>>2]|0;
    $68 = ($67|0)!=(0);
    do {
     if ($68) {
      $69 = HEAP32[$7>>2]|0;
      $70 = ($69|0)!=(0);
      if ($70) {
       $71 = HEAP32[$t>>2]|0;
       $72 = HEAP32[$2>>2]|0;
       $73 = ($71|0)==($72|0);
       if ($73) {
        $74 = +HEAPF64[$pw1>>3];
        $75 = HEAP32[$t>>2]|0;
        $76 = HEAP32[$y>>2]|0;
        $77 = (($76) + ($75<<3)|0);
        $78 = +HEAPF64[$77>>3];
        $79 = $74 * $78;
        HEAPF64[$x>>3] = $79;
        break;
       }
      }
      $80 = +HEAPF64[$6>>3];
      $81 = HEAP32[$t>>2]|0;
      $82 = (($81) - 1)|0;
      $83 = HEAP32[$y>>2]|0;
      $84 = (($83) + ($82<<3)|0);
      $85 = +HEAPF64[$84>>3];
      $86 = $80 * $85;
      $87 = +HEAPF64[$x>>3];
      $88 = $87 - $86;
      HEAPF64[$x>>3] = $88;
     } else {
      $89 = HEAP32[$5>>2]|0;
      $90 = ($89|0)!=(0);
      if ($90) {
       $91 = HEAP32[$t>>2]|0;
       $92 = HEAP32[$w>>2]|0;
       $93 = (($92) + ($91<<3)|0);
       $94 = +HEAPF64[$93>>3];
       $95 = (+Math_sqrt((+$94)));
       $96 = +HEAPF64[$x>>3];
       $97 = $96 * $95;
       HEAPF64[$x>>3] = $97;
      }
     }
    } while(0);
    $98 = +HEAPF64[$x>>3];
    $99 = HEAP32[$10>>2]|0;
    $100 = +HEAPF64[$99>>3];
    $101 = $100 + $98;
    HEAPF64[$99>>3] = $101;
    $102 = +HEAPF64[$x>>3];
    $103 = +HEAPF64[$x>>3];
    $104 = $102 * $103;
    $105 = HEAP32[$11>>2]|0;
    $106 = +HEAPF64[$105>>3];
    $107 = $106 + $104;
    HEAPF64[$105>>3] = $107;
   }
   $108 = HEAP32[$t>>2]|0;
   $109 = (($108) + 1)|0;
   HEAP32[$t>>2] = $109;
  }
  $110 = HEAP32[$11>>2]|0;
  $111 = +HEAPF64[$110>>3];
  $112 = $111 <= 0.0;
  if ($112) {
   $113 = HEAP32[$yno>>2]|0;
   HEAP32[$0>>2] = $113;
   $557 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($557|0);
  }
 }
 HEAP32[$m>>2] = 0;
 $114 = HEAP32[$qdiff>>2]|0;
 $115 = ($114|0)!=(0);
 L33: do {
  if ($115) {
   $116 = HEAP32[$lmin>>2]|0;
   HEAP32[$i>>2] = $116;
   L35: while(1) {
    $117 = HEAP32[$i>>2]|0;
    $118 = HEAP32[$lmax>>2]|0;
    $119 = ($117|0)<=($118|0);
    if (!($119)) {
     break L33;
    }
    $120 = HEAP32[$i>>2]|0;
    $121 = HEAP32[$1>>2]|0;
    $122 = (($121) + ($120<<2)|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = HEAP32[$4>>2]|0;
    $125 = (($124) + 64|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + ($123<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    HEAP32[$xi>>2] = $128;
    $129 = HEAP32[$i>>2]|0;
    HEAP32[$j>>2] = $129;
    while(1) {
     $130 = HEAP32[$j>>2]|0;
     $131 = HEAP32[$lmax>>2]|0;
     $132 = ($130|0)<=($131|0);
     if (!($132)) {
      break;
     }
     $133 = HEAP32[$j>>2]|0;
     $134 = HEAP32[$1>>2]|0;
     $135 = (($134) + ($133<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = HEAP32[$4>>2]|0;
     $138 = (($137) + 64|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($139) + ($136<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     HEAP32[$xj>>2] = $141;
     HEAPF64[$x>>3] = 0.0;
     $142 = HEAP32[$2>>2]|0;
     HEAP32[$t>>2] = $142;
     while(1) {
      $143 = HEAP32[$t>>2]|0;
      $144 = HEAP32[$3>>2]|0;
      $145 = ($143|0)<=($144|0);
      if (!($145)) {
       break;
      }
      $146 = HEAP32[$7>>2]|0;
      $147 = ($146|0)!=(0);
      if ($147) {
       $148 = HEAP32[$t>>2]|0;
       $149 = HEAP32[$2>>2]|0;
       $150 = ($148|0)==($149|0);
       if ($150) {
        $151 = +HEAPF64[$pw1>>3];
        $152 = HEAP32[$2>>2]|0;
        $153 = HEAP32[$xi>>2]|0;
        $154 = (($153) + ($152<<3)|0);
        $155 = +HEAPF64[$154>>3];
        $156 = $151 * $155;
        $157 = +HEAPF64[$pw1>>3];
        $158 = $156 * $157;
        $159 = HEAP32[$t>>2]|0;
        $160 = HEAP32[$xj>>2]|0;
        $161 = (($160) + ($159<<3)|0);
        $162 = +HEAPF64[$161>>3];
        $163 = $158 * $162;
        $164 = +HEAPF64[$x>>3];
        $165 = $164 + $163;
        HEAPF64[$x>>3] = $165;
       } else {
        label = 33;
       }
      } else {
       label = 33;
      }
      if ((label|0) == 33) {
       label = 0;
       $166 = HEAP32[$t>>2]|0;
       $167 = HEAP32[$xi>>2]|0;
       $168 = (($167) + ($166<<3)|0);
       $169 = +HEAPF64[$168>>3];
       $170 = +HEAPF64[$6>>3];
       $171 = HEAP32[$t>>2]|0;
       $172 = (($171) - 1)|0;
       $173 = HEAP32[$xi>>2]|0;
       $174 = (($173) + ($172<<3)|0);
       $175 = +HEAPF64[$174>>3];
       $176 = $170 * $175;
       $177 = $169 - $176;
       $178 = HEAP32[$t>>2]|0;
       $179 = HEAP32[$xj>>2]|0;
       $180 = (($179) + ($178<<3)|0);
       $181 = +HEAPF64[$180>>3];
       $182 = +HEAPF64[$6>>3];
       $183 = HEAP32[$t>>2]|0;
       $184 = (($183) - 1)|0;
       $185 = HEAP32[$xj>>2]|0;
       $186 = (($185) + ($184<<3)|0);
       $187 = +HEAPF64[$186>>3];
       $188 = $182 * $187;
       $189 = $181 - $188;
       $190 = $177 * $189;
       $191 = +HEAPF64[$x>>3];
       $192 = $191 + $190;
       HEAPF64[$x>>3] = $192;
      }
      $193 = HEAP32[$t>>2]|0;
      $194 = (($193) + 1)|0;
      HEAP32[$t>>2] = $194;
     }
     $195 = HEAP32[$i>>2]|0;
     $196 = HEAP32[$j>>2]|0;
     $197 = ($195|0)==($196|0);
     if ($197) {
      $198 = +HEAPF64[$x>>3];
      $199 = $198 < 2.22044604925031308085E-16;
      if ($199) {
       break L35;
      }
     }
     $200 = +HEAPF64[$x>>3];
     $201 = HEAP32[$m>>2]|0;
     $202 = (($201) + 1)|0;
     HEAP32[$m>>2] = $202;
     $203 = HEAP32[$8>>2]|0;
     $204 = (($203) + ($201<<3)|0);
     HEAPF64[$204>>3] = $200;
     $205 = HEAP32[$j>>2]|0;
     $206 = (($205) + 1)|0;
     HEAP32[$j>>2] = $206;
    }
    $207 = HEAP32[$9>>2]|0;
    $208 = ($207|0)!=(0|0);
    if ($208) {
     HEAPF64[$x>>3] = 0.0;
     $209 = HEAP32[$2>>2]|0;
     HEAP32[$t>>2] = $209;
     while(1) {
      $210 = HEAP32[$t>>2]|0;
      $211 = HEAP32[$3>>2]|0;
      $212 = ($210|0)<=($211|0);
      if (!($212)) {
       break;
      }
      $213 = HEAP32[$7>>2]|0;
      $214 = ($213|0)!=(0);
      if ($214) {
       $215 = HEAP32[$t>>2]|0;
       $216 = HEAP32[$2>>2]|0;
       $217 = ($215|0)==($216|0);
       if ($217) {
        $218 = +HEAPF64[$pw1>>3];
        $219 = HEAP32[$t>>2]|0;
        $220 = HEAP32[$y>>2]|0;
        $221 = (($220) + ($219<<3)|0);
        $222 = +HEAPF64[$221>>3];
        $223 = $218 * $222;
        $224 = +HEAPF64[$pw1>>3];
        $225 = $223 * $224;
        $226 = HEAP32[$t>>2]|0;
        $227 = HEAP32[$xi>>2]|0;
        $228 = (($227) + ($226<<3)|0);
        $229 = +HEAPF64[$228>>3];
        $230 = $225 * $229;
        $231 = +HEAPF64[$x>>3];
        $232 = $231 + $230;
        HEAPF64[$x>>3] = $232;
       } else {
        label = 45;
       }
      } else {
       label = 45;
      }
      if ((label|0) == 45) {
       label = 0;
       $233 = HEAP32[$t>>2]|0;
       $234 = HEAP32[$y>>2]|0;
       $235 = (($234) + ($233<<3)|0);
       $236 = +HEAPF64[$235>>3];
       $237 = +HEAPF64[$6>>3];
       $238 = HEAP32[$t>>2]|0;
       $239 = (($238) - 1)|0;
       $240 = HEAP32[$y>>2]|0;
       $241 = (($240) + ($239<<3)|0);
       $242 = +HEAPF64[$241>>3];
       $243 = $237 * $242;
       $244 = $236 - $243;
       $245 = HEAP32[$t>>2]|0;
       $246 = HEAP32[$xi>>2]|0;
       $247 = (($246) + ($245<<3)|0);
       $248 = +HEAPF64[$247>>3];
       $249 = +HEAPF64[$6>>3];
       $250 = HEAP32[$t>>2]|0;
       $251 = (($250) - 1)|0;
       $252 = HEAP32[$xi>>2]|0;
       $253 = (($252) + ($251<<3)|0);
       $254 = +HEAPF64[$253>>3];
       $255 = $249 * $254;
       $256 = $248 - $255;
       $257 = $244 * $256;
       $258 = +HEAPF64[$x>>3];
       $259 = $258 + $257;
       HEAPF64[$x>>3] = $259;
      }
      $260 = HEAP32[$t>>2]|0;
      $261 = (($260) + 1)|0;
      HEAP32[$t>>2] = $261;
     }
     $262 = +HEAPF64[$x>>3];
     $263 = HEAP32[$i>>2]|0;
     $264 = (($263) - 2)|0;
     $265 = HEAP32[$9>>2]|0;
     $266 = (($265) + ($264<<3)|0);
     HEAPF64[$266>>3] = $262;
    }
    $267 = HEAP32[$i>>2]|0;
    $268 = (($267) + 1)|0;
    HEAP32[$i>>2] = $268;
   }
   HEAP32[$0>>2] = 3;
   $557 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($557|0);
  } else {
   $269 = HEAP32[$5>>2]|0;
   $270 = ($269|0)!=(0);
   if ($270) {
    $271 = HEAP32[$lmin>>2]|0;
    HEAP32[$i>>2] = $271;
    L73: while(1) {
     $272 = HEAP32[$i>>2]|0;
     $273 = HEAP32[$lmax>>2]|0;
     $274 = ($272|0)<=($273|0);
     if (!($274)) {
      break L33;
     }
     $275 = HEAP32[$i>>2]|0;
     $276 = HEAP32[$1>>2]|0;
     $277 = (($276) + ($275<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = HEAP32[$4>>2]|0;
     $280 = (($279) + 64|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = (($281) + ($278<<2)|0);
     $283 = HEAP32[$282>>2]|0;
     HEAP32[$xi>>2] = $283;
     $284 = HEAP32[$i>>2]|0;
     HEAP32[$j>>2] = $284;
     while(1) {
      $285 = HEAP32[$j>>2]|0;
      $286 = HEAP32[$lmax>>2]|0;
      $287 = ($285|0)<=($286|0);
      if (!($287)) {
       break;
      }
      $288 = HEAP32[$j>>2]|0;
      $289 = HEAP32[$1>>2]|0;
      $290 = (($289) + ($288<<2)|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = HEAP32[$4>>2]|0;
      $293 = (($292) + 64|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = (($294) + ($291<<2)|0);
      $296 = HEAP32[$295>>2]|0;
      HEAP32[$xj>>2] = $296;
      HEAPF64[$x>>3] = 0.0;
      $297 = HEAP32[$2>>2]|0;
      HEAP32[$t>>2] = $297;
      while(1) {
       $298 = HEAP32[$t>>2]|0;
       $299 = HEAP32[$3>>2]|0;
       $300 = ($298|0)<=($299|0);
       if (!($300)) {
        break;
       }
       $301 = HEAP32[$12>>2]|0;
       $302 = ($301|0)!=(0|0);
       if ($302) {
        $303 = HEAP32[$t>>2]|0;
        $304 = HEAP32[$12>>2]|0;
        $305 = (($304) + ($303)|0);
        $306 = HEAP8[$305>>0]|0;
        $307 = $306 << 24 >> 24;
        $308 = ($307|0)==(49);
        if (!($308)) {
         label = 58;
        }
       } else {
        label = 58;
       }
       if ((label|0) == 58) {
        label = 0;
        $309 = HEAP32[$t>>2]|0;
        $310 = HEAP32[$w>>2]|0;
        $311 = (($310) + ($309<<3)|0);
        $312 = +HEAPF64[$311>>3];
        $313 = HEAP32[$t>>2]|0;
        $314 = HEAP32[$xi>>2]|0;
        $315 = (($314) + ($313<<3)|0);
        $316 = +HEAPF64[$315>>3];
        $317 = $312 * $316;
        $318 = HEAP32[$t>>2]|0;
        $319 = HEAP32[$xj>>2]|0;
        $320 = (($319) + ($318<<3)|0);
        $321 = +HEAPF64[$320>>3];
        $322 = $317 * $321;
        $323 = +HEAPF64[$x>>3];
        $324 = $323 + $322;
        HEAPF64[$x>>3] = $324;
       }
       $325 = HEAP32[$t>>2]|0;
       $326 = (($325) + 1)|0;
       HEAP32[$t>>2] = $326;
      }
      $327 = HEAP32[$i>>2]|0;
      $328 = HEAP32[$j>>2]|0;
      $329 = ($327|0)==($328|0);
      if ($329) {
       $330 = +HEAPF64[$x>>3];
       $331 = $330 < 2.22044604925031308085E-16;
       if ($331) {
        break L73;
       }
      }
      $332 = +HEAPF64[$x>>3];
      $333 = HEAP32[$m>>2]|0;
      $334 = (($333) + 1)|0;
      HEAP32[$m>>2] = $334;
      $335 = HEAP32[$8>>2]|0;
      $336 = (($335) + ($333<<3)|0);
      HEAPF64[$336>>3] = $332;
      $337 = HEAP32[$j>>2]|0;
      $338 = (($337) + 1)|0;
      HEAP32[$j>>2] = $338;
     }
     $339 = HEAP32[$9>>2]|0;
     $340 = ($339|0)!=(0|0);
     if ($340) {
      HEAPF64[$x>>3] = 0.0;
      $341 = HEAP32[$2>>2]|0;
      HEAP32[$t>>2] = $341;
      while(1) {
       $342 = HEAP32[$t>>2]|0;
       $343 = HEAP32[$3>>2]|0;
       $344 = ($342|0)<=($343|0);
       if (!($344)) {
        break;
       }
       $345 = HEAP32[$12>>2]|0;
       $346 = ($345|0)!=(0|0);
       if ($346) {
        $347 = HEAP32[$t>>2]|0;
        $348 = HEAP32[$12>>2]|0;
        $349 = (($348) + ($347)|0);
        $350 = HEAP8[$349>>0]|0;
        $351 = $350 << 24 >> 24;
        $352 = ($351|0)==(49);
        if (!($352)) {
         label = 69;
        }
       } else {
        label = 69;
       }
       if ((label|0) == 69) {
        label = 0;
        $353 = HEAP32[$t>>2]|0;
        $354 = HEAP32[$w>>2]|0;
        $355 = (($354) + ($353<<3)|0);
        $356 = +HEAPF64[$355>>3];
        $357 = HEAP32[$t>>2]|0;
        $358 = HEAP32[$y>>2]|0;
        $359 = (($358) + ($357<<3)|0);
        $360 = +HEAPF64[$359>>3];
        $361 = $356 * $360;
        $362 = HEAP32[$t>>2]|0;
        $363 = HEAP32[$xi>>2]|0;
        $364 = (($363) + ($362<<3)|0);
        $365 = +HEAPF64[$364>>3];
        $366 = $361 * $365;
        $367 = +HEAPF64[$x>>3];
        $368 = $367 + $366;
        HEAPF64[$x>>3] = $368;
       }
       $369 = HEAP32[$t>>2]|0;
       $370 = (($369) + 1)|0;
       HEAP32[$t>>2] = $370;
      }
      $371 = +HEAPF64[$x>>3];
      $372 = HEAP32[$i>>2]|0;
      $373 = (($372) - 2)|0;
      $374 = HEAP32[$9>>2]|0;
      $375 = (($374) + ($373<<3)|0);
      HEAPF64[$375>>3] = $371;
     }
     $376 = HEAP32[$i>>2]|0;
     $377 = (($376) + 1)|0;
     HEAP32[$i>>2] = $377;
    }
    HEAP32[$0>>2] = 3;
    $557 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($557|0);
   }
   $378 = HEAP32[$12>>2]|0;
   $379 = ($378|0)==(0|0);
   $380 = HEAP32[$lmin>>2]|0;
   HEAP32[$i>>2] = $380;
   if ($379) {
    L108: while(1) {
     $381 = HEAP32[$i>>2]|0;
     $382 = HEAP32[$lmax>>2]|0;
     $383 = ($381|0)<=($382|0);
     if (!($383)) {
      break L33;
     }
     $384 = HEAP32[$i>>2]|0;
     $385 = HEAP32[$1>>2]|0;
     $386 = (($385) + ($384<<2)|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = HEAP32[$4>>2]|0;
     $389 = (($388) + 64|0);
     $390 = HEAP32[$389>>2]|0;
     $391 = (($390) + ($387<<2)|0);
     $392 = HEAP32[$391>>2]|0;
     HEAP32[$xi>>2] = $392;
     $393 = HEAP32[$i>>2]|0;
     HEAP32[$j>>2] = $393;
     while(1) {
      $394 = HEAP32[$j>>2]|0;
      $395 = HEAP32[$lmax>>2]|0;
      $396 = ($394|0)<=($395|0);
      if (!($396)) {
       break;
      }
      $397 = HEAP32[$j>>2]|0;
      $398 = HEAP32[$1>>2]|0;
      $399 = (($398) + ($397<<2)|0);
      $400 = HEAP32[$399>>2]|0;
      $401 = HEAP32[$4>>2]|0;
      $402 = (($401) + 64|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = (($403) + ($400<<2)|0);
      $405 = HEAP32[$404>>2]|0;
      HEAP32[$xj>>2] = $405;
      HEAPF64[$x>>3] = 0.0;
      $406 = HEAP32[$2>>2]|0;
      HEAP32[$t>>2] = $406;
      while(1) {
       $407 = HEAP32[$t>>2]|0;
       $408 = HEAP32[$3>>2]|0;
       $409 = ($407|0)<=($408|0);
       if (!($409)) {
        break;
       }
       $410 = HEAP32[$t>>2]|0;
       $411 = HEAP32[$xi>>2]|0;
       $412 = (($411) + ($410<<3)|0);
       $413 = +HEAPF64[$412>>3];
       $414 = HEAP32[$t>>2]|0;
       $415 = HEAP32[$xj>>2]|0;
       $416 = (($415) + ($414<<3)|0);
       $417 = +HEAPF64[$416>>3];
       $418 = $413 * $417;
       $419 = +HEAPF64[$x>>3];
       $420 = $419 + $418;
       HEAPF64[$x>>3] = $420;
       $421 = HEAP32[$t>>2]|0;
       $422 = (($421) + 1)|0;
       HEAP32[$t>>2] = $422;
      }
      $423 = HEAP32[$i>>2]|0;
      $424 = HEAP32[$j>>2]|0;
      $425 = ($423|0)==($424|0);
      if ($425) {
       $426 = +HEAPF64[$x>>3];
       $427 = $426 < 2.22044604925031308085E-16;
       if ($427) {
        break L108;
       }
      }
      $428 = +HEAPF64[$x>>3];
      $429 = HEAP32[$m>>2]|0;
      $430 = (($429) + 1)|0;
      HEAP32[$m>>2] = $430;
      $431 = HEAP32[$8>>2]|0;
      $432 = (($431) + ($429<<3)|0);
      HEAPF64[$432>>3] = $428;
      $433 = HEAP32[$j>>2]|0;
      $434 = (($433) + 1)|0;
      HEAP32[$j>>2] = $434;
     }
     $435 = HEAP32[$9>>2]|0;
     $436 = ($435|0)!=(0|0);
     if ($436) {
      HEAPF64[$x>>3] = 0.0;
      $437 = HEAP32[$2>>2]|0;
      HEAP32[$t>>2] = $437;
      while(1) {
       $438 = HEAP32[$t>>2]|0;
       $439 = HEAP32[$3>>2]|0;
       $440 = ($438|0)<=($439|0);
       if (!($440)) {
        break;
       }
       $441 = HEAP32[$t>>2]|0;
       $442 = HEAP32[$y>>2]|0;
       $443 = (($442) + ($441<<3)|0);
       $444 = +HEAPF64[$443>>3];
       $445 = HEAP32[$t>>2]|0;
       $446 = HEAP32[$xi>>2]|0;
       $447 = (($446) + ($445<<3)|0);
       $448 = +HEAPF64[$447>>3];
       $449 = $444 * $448;
       $450 = +HEAPF64[$x>>3];
       $451 = $450 + $449;
       HEAPF64[$x>>3] = $451;
       $452 = HEAP32[$t>>2]|0;
       $453 = (($452) + 1)|0;
       HEAP32[$t>>2] = $453;
      }
      $454 = +HEAPF64[$x>>3];
      $455 = HEAP32[$i>>2]|0;
      $456 = (($455) - 2)|0;
      $457 = HEAP32[$9>>2]|0;
      $458 = (($457) + ($456<<3)|0);
      HEAPF64[$458>>3] = $454;
     }
     $459 = HEAP32[$i>>2]|0;
     $460 = (($459) + 1)|0;
     HEAP32[$i>>2] = $460;
    }
    HEAP32[$0>>2] = 3;
    $557 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($557|0);
   }
   L131: while(1) {
    $461 = HEAP32[$i>>2]|0;
    $462 = HEAP32[$lmax>>2]|0;
    $463 = ($461|0)<=($462|0);
    if (!($463)) {
     break L33;
    }
    $464 = HEAP32[$i>>2]|0;
    $465 = HEAP32[$1>>2]|0;
    $466 = (($465) + ($464<<2)|0);
    $467 = HEAP32[$466>>2]|0;
    $468 = HEAP32[$4>>2]|0;
    $469 = (($468) + 64|0);
    $470 = HEAP32[$469>>2]|0;
    $471 = (($470) + ($467<<2)|0);
    $472 = HEAP32[$471>>2]|0;
    HEAP32[$xi>>2] = $472;
    $473 = HEAP32[$i>>2]|0;
    HEAP32[$j>>2] = $473;
    while(1) {
     $474 = HEAP32[$j>>2]|0;
     $475 = HEAP32[$lmax>>2]|0;
     $476 = ($474|0)<=($475|0);
     if (!($476)) {
      break;
     }
     $477 = HEAP32[$j>>2]|0;
     $478 = HEAP32[$1>>2]|0;
     $479 = (($478) + ($477<<2)|0);
     $480 = HEAP32[$479>>2]|0;
     $481 = HEAP32[$4>>2]|0;
     $482 = (($481) + 64|0);
     $483 = HEAP32[$482>>2]|0;
     $484 = (($483) + ($480<<2)|0);
     $485 = HEAP32[$484>>2]|0;
     HEAP32[$xj>>2] = $485;
     HEAPF64[$x>>3] = 0.0;
     $486 = HEAP32[$2>>2]|0;
     HEAP32[$t>>2] = $486;
     while(1) {
      $487 = HEAP32[$t>>2]|0;
      $488 = HEAP32[$3>>2]|0;
      $489 = ($487|0)<=($488|0);
      if (!($489)) {
       break;
      }
      $490 = HEAP32[$12>>2]|0;
      $491 = ($490|0)!=(0|0);
      if ($491) {
       $492 = HEAP32[$t>>2]|0;
       $493 = HEAP32[$12>>2]|0;
       $494 = (($493) + ($492)|0);
       $495 = HEAP8[$494>>0]|0;
       $496 = $495 << 24 >> 24;
       $497 = ($496|0)==(49);
       if (!($497)) {
        label = 97;
       }
      } else {
       label = 97;
      }
      if ((label|0) == 97) {
       label = 0;
       $498 = HEAP32[$t>>2]|0;
       $499 = HEAP32[$xi>>2]|0;
       $500 = (($499) + ($498<<3)|0);
       $501 = +HEAPF64[$500>>3];
       $502 = HEAP32[$t>>2]|0;
       $503 = HEAP32[$xj>>2]|0;
       $504 = (($503) + ($502<<3)|0);
       $505 = +HEAPF64[$504>>3];
       $506 = $501 * $505;
       $507 = +HEAPF64[$x>>3];
       $508 = $507 + $506;
       HEAPF64[$x>>3] = $508;
      }
      $509 = HEAP32[$t>>2]|0;
      $510 = (($509) + 1)|0;
      HEAP32[$t>>2] = $510;
     }
     $511 = HEAP32[$i>>2]|0;
     $512 = HEAP32[$j>>2]|0;
     $513 = ($511|0)==($512|0);
     if ($513) {
      $514 = +HEAPF64[$x>>3];
      $515 = $514 < 2.22044604925031308085E-16;
      if ($515) {
       break L131;
      }
     }
     $516 = +HEAPF64[$x>>3];
     $517 = HEAP32[$m>>2]|0;
     $518 = (($517) + 1)|0;
     HEAP32[$m>>2] = $518;
     $519 = HEAP32[$8>>2]|0;
     $520 = (($519) + ($517<<3)|0);
     HEAPF64[$520>>3] = $516;
     $521 = HEAP32[$j>>2]|0;
     $522 = (($521) + 1)|0;
     HEAP32[$j>>2] = $522;
    }
    $523 = HEAP32[$9>>2]|0;
    $524 = ($523|0)!=(0|0);
    if ($524) {
     HEAPF64[$x>>3] = 0.0;
     $525 = HEAP32[$2>>2]|0;
     HEAP32[$t>>2] = $525;
     while(1) {
      $526 = HEAP32[$t>>2]|0;
      $527 = HEAP32[$3>>2]|0;
      $528 = ($526|0)<=($527|0);
      if (!($528)) {
       break;
      }
      $529 = HEAP32[$12>>2]|0;
      $530 = ($529|0)!=(0|0);
      if ($530) {
       $531 = HEAP32[$t>>2]|0;
       $532 = HEAP32[$12>>2]|0;
       $533 = (($532) + ($531)|0);
       $534 = HEAP8[$533>>0]|0;
       $535 = $534 << 24 >> 24;
       $536 = ($535|0)==(49);
       if (!($536)) {
        label = 108;
       }
      } else {
       label = 108;
      }
      if ((label|0) == 108) {
       label = 0;
       $537 = HEAP32[$t>>2]|0;
       $538 = HEAP32[$y>>2]|0;
       $539 = (($538) + ($537<<3)|0);
       $540 = +HEAPF64[$539>>3];
       $541 = HEAP32[$t>>2]|0;
       $542 = HEAP32[$xi>>2]|0;
       $543 = (($542) + ($541<<3)|0);
       $544 = +HEAPF64[$543>>3];
       $545 = $540 * $544;
       $546 = +HEAPF64[$x>>3];
       $547 = $546 + $545;
       HEAPF64[$x>>3] = $547;
      }
      $548 = HEAP32[$t>>2]|0;
      $549 = (($548) + 1)|0;
      HEAP32[$t>>2] = $549;
     }
     $550 = +HEAPF64[$x>>3];
     $551 = HEAP32[$i>>2]|0;
     $552 = (($551) - 2)|0;
     $553 = HEAP32[$9>>2]|0;
     $554 = (($553) + ($552<<3)|0);
     HEAPF64[$554>>3] = $550;
    }
    $555 = HEAP32[$i>>2]|0;
    $556 = (($555) + 1)|0;
    HEAP32[$i>>2] = $556;
   }
   HEAP32[$0>>2] = 3;
   $557 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($557|0);
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $557 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($557|0);
}
function _lsq($agg$result,$list,$dset,$ci,$opt) {
 $agg$result = $agg$result|0;
 $list = $list|0;
 $dset = $dset|0;
 $ci = $ci|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$0>>2] = $list;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $ci;
 HEAP32[$3>>2] = $opt;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$3>>2]|0;
 _ar1_lsq($agg$result,$4,$5,$6,$7,0.0);
 STACKTOP = sp;return;
}
function _ar1_lsq($agg$result,$list,$dset,$ci,$opt,$rho) {
 $agg$result = $agg$result|0;
 $list = $list|0;
 $dset = $dset|0;
 $ci = $ci|0;
 $opt = $opt|0;
 $rho = +$rho;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $effobs = 0, $i = 0, $jackknife = 0, $ldv = 0, $mdl = 0, $misst = 0, $missv = 0, $nullmod = 0, $pwe = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $yno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $vararg_buffer6 = sp + 280|0;
 $0 = sp + 336|0;
 $1 = sp + 332|0;
 $2 = sp + 328|0;
 $3 = sp + 324|0;
 $4 = sp + 272|0;
 $mdl = sp;
 $effobs = sp + 320|0;
 $missv = sp + 316|0;
 $misst = sp + 312|0;
 $jackknife = sp + 308|0;
 $pwe = sp + 304|0;
 $nullmod = sp + 300|0;
 $ldv = sp + 296|0;
 $yno = sp + 292|0;
 $i = sp + 288|0;
 HEAP32[$0>>2] = $list;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $ci;
 HEAP32[$3>>2] = $opt;
 HEAPF64[$4>>3] = $rho;
 HEAP32[$effobs>>2] = 0;
 HEAP32[$missv>>2] = 0;
 HEAP32[$misst>>2] = 0;
 HEAP32[$jackknife>>2] = 0;
 $5 = HEAP32[$3>>2]|0;
 $6 = $5 & 32768;
 HEAP32[$pwe>>2] = $6;
 HEAP32[$nullmod>>2] = 0;
 HEAP32[$ldv>>2] = 0;
 $7 = HEAP32[$1>>2]|0;
 _gretl_model_init($mdl,$7);
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = HEAP32[$1>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = HEAP32[$1>>2]|0;
   $13 = (($12) + 64|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    $20 = HEAP32[$3>>2]|0;
    $21 = $20 & 4;
    $22 = ($21|0)!=(0);
    if ($22) {
     $23 = HEAP32[$3>>2]|0;
     $24 = $23 | 131072;
     HEAP32[$3>>2] = $24;
    }
    $25 = HEAP32[$2>>2]|0;
    $26 = ($25|0)==(6);
    do {
     if ($26) {
      $27 = HEAP32[$3>>2]|0;
      $28 = $27 & 32768;
      $29 = ($28|0)!=(0);
      if ($29) {
       $30 = (($mdl) + 12|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $31 | 32768;
       HEAP32[$30>>2] = $32;
       break;
      }
      $33 = HEAP32[$3>>2]|0;
      $34 = $33 & 128;
      $35 = ($34|0)!=(0);
      if ($35) {
       $36 = (($mdl) + 12|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = $37 | 128;
       HEAP32[$36>>2] = $38;
      }
     }
    } while(0);
    $39 = HEAP32[$0>>2]|0;
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(1);
    if ($41) {
     $42 = HEAP32[$2>>2]|0;
     $43 = ($42|0)==(86);
     if ($43) {
      $44 = HEAP32[$3>>2]|0;
      $45 = $44 & 1048576;
      $46 = ($45|0)!=(0);
      if ($46) {
       HEAP32[$nullmod>>2] = 1;
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
    } else {
     label = 16;
    }
    do {
     if ((label|0) == 16) {
      $47 = HEAP32[$0>>2]|0;
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(1);
      if (!($49)) {
       $50 = HEAP32[$1>>2]|0;
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(1);
       if (!($52)) {
        break;
       }
      }
      $53 = HEAP32[_stderr>>2]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = HEAP32[$54>>2]|0;
      $56 = HEAP32[$1>>2]|0;
      $57 = HEAP32[$56>>2]|0;
      HEAP32[$vararg_buffer6>>2] = $55;
      $vararg_ptr5 = (($vararg_buffer6) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $57;
      (_fprintf(($53|0),(2448|0),($vararg_buffer6|0))|0);
      $58 = (($mdl) + 228|0);
      HEAP32[$58>>2] = 2;
      _memcpy(($agg$result|0),($mdl|0),272)|0;
      STACKTOP = sp;return;
     }
    } while(0);
    $59 = HEAP32[$0>>2]|0;
    $60 = (_gretl_list_copy($59)|0);
    $61 = (($mdl) + 60|0);
    HEAP32[$61>>2] = $60;
    $62 = (($mdl) + 60|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(0|0);
    if ($64) {
     $65 = (($mdl) + 228|0);
     HEAP32[$65>>2] = 12;
     _memcpy(($agg$result|0),($mdl|0),272)|0;
     STACKTOP = sp;return;
    }
    $66 = HEAP32[$1>>2]|0;
    $67 = (($66) + 24|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($mdl) + 16|0);
    HEAP32[$69>>2] = $68;
    $70 = HEAP32[$1>>2]|0;
    $71 = (($70) + 28|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($mdl) + 20|0);
    HEAP32[$73>>2] = $72;
    $74 = HEAP32[$1>>2]|0;
    $75 = (($74) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($mdl) + 44|0);
    HEAP32[$77>>2] = $76;
    $78 = HEAP32[$2>>2]|0;
    $79 = (($mdl) + 8|0);
    HEAP32[$79>>2] = $78;
    $80 = HEAP32[$2>>2]|0;
    $81 = ($80|0)==(133);
    do {
     if ($81) {
      $82 = (($mdl) + 60|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (($83) + 4|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = HEAP32[$1>>2]|0;
      $87 = (($86) + 64|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (($88) + ($85<<2)|0);
      $90 = HEAP32[$89>>2]|0;
      (_check_weight_var($mdl,$90,$effobs)|0);
      $91 = (($mdl) + 228|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($92|0)!=(0);
      if (!($93)) {
       $94 = (($mdl) + 60|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($95) + 4|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = (($mdl) + 68|0);
       HEAP32[$98>>2] = $97;
       break;
      }
      _memcpy(($agg$result|0),($mdl|0),272)|0;
      STACKTOP = sp;return;
     } else {
      $99 = (($mdl) + 68|0);
      HEAP32[$99>>2] = 0;
     }
    } while(0);
    $100 = (($mdl) + 16|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)<(0);
    L38: do {
     if ($102) {
      label = 28;
     } else {
      $103 = (($mdl) + 20|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = HEAP32[$1>>2]|0;
      $106 = (($105) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (($107) - 1)|0;
      $109 = ($104|0)>($108|0);
      if ($109) {
       label = 28;
      } else {
       $111 = HEAP32[$3>>2]|0;
       $112 = HEAP32[$1>>2]|0;
       $113 = (_lsq_check_for_missing_obs($mdl,$111,$112,$misst)|0);
       HEAP32[$missv>>2] = $113;
       $114 = (($mdl) + 228|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ($115|0)!=(0);
       if (!($116)) {
        $117 = HEAP32[$missv>>2]|0;
        $118 = ($117|0)!=(0);
        L42: do {
         if ($118) {
          $119 = HEAP32[$1>>2]|0;
          $120 = ($119|0)!=(0|0);
          L44: do {
           if ($120) {
            $121 = HEAP32[$1>>2]|0;
            $122 = (($121) + 12|0);
            $123 = HEAP32[$122>>2]|0;
            $124 = ($123|0)==(1);
            if ($124) {
             $125 = HEAP32[$1>>2]|0;
             $126 = (($125) + 8|0);
             $127 = HEAP32[$126>>2]|0;
             $128 = ($127|0)==(5);
             do {
              if (!($128)) {
               $129 = HEAP32[$1>>2]|0;
               $130 = (($129) + 8|0);
               $131 = HEAP32[$130>>2]|0;
               $132 = ($131|0)==(6);
               if ($132) {
                break;
               }
               $133 = HEAP32[$1>>2]|0;
               $134 = (($133) + 8|0);
               $135 = HEAP32[$134>>2]|0;
               $136 = ($135|0)==(7);
               if (!($136)) {
                break L44;
               }
              }
             } while(0);
             $137 = HEAP32[$1>>2]|0;
             $138 = (($137) + 16|0);
             $139 = +HEAPF64[$138>>3];
             $140 = $139 > 1.0E+4;
             if ($140) {
              $141 = HEAP32[$1>>2]|0;
              $142 = (_repack_missing_daily_obs($mdl,$141)|0);
              $143 = ($142|0)!=(0);
              if (!($143)) {
               break L42;
              }
              _memcpy(($agg$result|0),($mdl|0),272)|0;
              STACKTOP = sp;return;
             }
            }
           }
          } while(0);
          $144 = HEAP32[$missv>>2]|0;
          $145 = HEAP32[$misst>>2]|0;
          HEAP32[$vararg_buffer6>>2] = $144;
          $vararg_ptr9 = (($vararg_buffer6) + 4|0);
          HEAP32[$vararg_ptr9>>2] = $145;
          _gretl_errmsg_sprintf(2496,$vararg_buffer6);
          $146 = (($mdl) + 228|0);
          HEAP32[$146>>2] = 2;
          _memcpy(($agg$result|0),($mdl|0),272)|0;
          STACKTOP = sp;return;
         }
        } while(0);
        $147 = HEAP32[$2>>2]|0;
        $148 = ($147|0)==(133);
        if ($148) {
         $149 = (($mdl) + 60|0);
         $150 = HEAP32[$149>>2]|0;
         _dropwt($150);
        }
        $151 = (($mdl) + 60|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = (($152) + 4|0);
        $154 = HEAP32[$153>>2]|0;
        HEAP32[$yno>>2] = $154;
        HEAP32[$i>>2] = 1;
        while(1) {
         $155 = HEAP32[$i>>2]|0;
         $156 = (($mdl) + 60|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = HEAP32[$157>>2]|0;
         $159 = ($155|0)<=($158|0);
         if (!($159)) {
          break;
         }
         $160 = HEAP32[$i>>2]|0;
         $161 = (($mdl) + 60|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = (($162) + ($160<<2)|0);
         $164 = HEAP32[$163>>2]|0;
         $165 = HEAP32[$1>>2]|0;
         $166 = HEAP32[$165>>2]|0;
         $167 = (($166) - 1)|0;
         $168 = ($164|0)>($167|0);
         if ($168) {
          label = 45;
          break;
         }
         $170 = HEAP32[$i>>2]|0;
         $171 = (($170) + 1)|0;
         HEAP32[$i>>2] = $171;
        }
        if ((label|0) == 45) {
         $169 = (($mdl) + 228|0);
         HEAP32[$169>>2] = 14;
         break;
        }
        $172 = HEAP32[$yno>>2]|0;
        $173 = HEAP32[$1>>2]|0;
        $174 = (($173) + 64|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = (_depvar_zero($mdl,$172,$175)|0);
        $177 = ($176|0)!=(0);
        if ($177) {
         $178 = (($mdl) + 228|0);
         HEAP32[$178>>2] = 5;
         break;
        }
        $179 = HEAP32[$1>>2]|0;
        $180 = HEAP32[$3>>2]|0;
        _omitzero($mdl,$179,$180);
        $181 = (($mdl) + 60|0);
        $182 = HEAP32[$181>>2]|0;
        $183 = HEAP32[$1>>2]|0;
        $184 = (_reglist_check_for_const($182,$183)|0);
        $185 = (($mdl) + 64|0);
        HEAP32[$185>>2] = $184;
        $186 = HEAP32[$3>>2]|0;
        $187 = $186 & 1;
        $188 = ($187|0)!=(0);
        if (!($188)) {
         $189 = HEAP32[$1>>2]|0;
         $190 = (_lagged_depvar_check($mdl,$189)|0);
         HEAP32[$ldv>>2] = $190;
        }
        $191 = +HEAPF64[$4>>3];
        $192 = $191 != 0.0;
        if ($192) {
         $193 = HEAP32[$pwe>>2]|0;
         $194 = ($193|0)!=(0);
         if (!($194)) {
          $195 = (($mdl) + 16|0);
          $196 = HEAP32[$195>>2]|0;
          $197 = (($196) + 1)|0;
          HEAP32[$195>>2] = $197;
         }
        }
        $198 = (($mdl) + 60|0);
        $199 = HEAP32[$198>>2]|0;
        $200 = HEAP32[$199>>2]|0;
        $201 = (($200) - 1)|0;
        $202 = (($mdl) + 48|0);
        HEAP32[$202>>2] = $201;
        $203 = HEAP32[$effobs>>2]|0;
        $204 = ($203|0)!=(0);
        do {
         if ($204) {
          $205 = HEAP32[$effobs>>2]|0;
          $206 = (($mdl) + 24|0);
          HEAP32[$206>>2] = $205;
         } else {
          $207 = (($mdl) + 20|0);
          $208 = HEAP32[$207>>2]|0;
          $209 = (($mdl) + 16|0);
          $210 = HEAP32[$209>>2]|0;
          $211 = (($208) - ($210))|0;
          $212 = (($211) + 1)|0;
          $213 = (($mdl) + 24|0);
          HEAP32[$213>>2] = $212;
          $214 = (($mdl) + 32|0);
          $215 = HEAP32[$214>>2]|0;
          $216 = ($215|0)!=(0|0);
          if (!($216)) {
           break;
          }
          $217 = (_model_missval_count($mdl)|0);
          $218 = (($mdl) + 24|0);
          $219 = HEAP32[$218>>2]|0;
          $220 = (($219) - ($217))|0;
          HEAP32[$218>>2] = $220;
         }
        } while(0);
        $221 = (_get_model_df($mdl)|0);
        $222 = ($221|0)!=(0);
        if (!($222)) {
         $223 = HEAP32[$3>>2]|0;
         $224 = $223 & 8192;
         $225 = ($224|0)!=(0);
         if ($225) {
          $226 = (($mdl) + 12|0);
          $227 = HEAP32[$226>>2]|0;
          $228 = $227 | 8192;
          HEAP32[$226>>2] = $228;
         }
         $229 = HEAP32[$1>>2]|0;
         $230 = ($229|0)!=(0|0);
         do {
          if ($230) {
           $231 = HEAP32[$1>>2]|0;
           $232 = (($231) + 12|0);
           $233 = HEAP32[$232>>2]|0;
           $234 = ($233|0)==(1);
           if (!($234)) {
            $235 = HEAP32[$1>>2]|0;
            $236 = (($235) + 12|0);
            $237 = HEAP32[$236>>2]|0;
            $238 = ($237|0)==(5);
            if (!($238)) {
             break;
            }
           }
           $239 = HEAP32[$3>>2]|0;
           $240 = $239 | 524288;
           HEAP32[$3>>2] = $240;
          }
         } while(0);
         $241 = HEAP32[$ldv>>2]|0;
         $242 = ($241|0)!=(0);
         if ($242) {
          label = 67;
         } else {
          $243 = HEAP32[$3>>2]|0;
          $244 = $243 & 524288;
          $245 = ($244|0)!=(0);
          if (!($245)) {
           label = 67;
          }
         }
         if ((label|0) == 67) {
          $246 = HEAP32[$3>>2]|0;
          $247 = $246 & -257;
          HEAP32[$3>>2] = $247;
         }
         $248 = HEAP32[$3>>2]|0;
         $249 = $248 & 512;
         $250 = ($249|0)!=(0);
         do {
          if ($250) {
           label = 71;
          } else {
           $251 = HEAP32[$3>>2]|0;
           $252 = $251 & 131072;
           $253 = ($252|0)!=(0);
           if (!($253)) {
            break;
           }
           $254 = (_libset_get_int(2552)|0);
           $255 = ($254|0)==(4);
           if ($255) {
            label = 71;
           }
          }
         } while(0);
         if ((label|0) == 71) {
          HEAP32[$jackknife>>2] = 1;
         }
         $256 = HEAP32[$nullmod>>2]|0;
         $257 = ($256|0)!=(0);
         L103: do {
          if ($257) {
           $258 = HEAP32[$1>>2]|0;
           (_gretl_null_regress($mdl,$258)|0);
          } else {
           $259 = HEAP32[$jackknife>>2]|0;
           $260 = ($259|0)!=(0);
           do {
            if (!($260)) {
             $261 = HEAP32[$3>>2]|0;
             $262 = $261 & 131328;
             $263 = ($262|0)!=(0);
             if (!($263)) {
              break;
             }
             $264 = +HEAPF64[$4>>3];
             $265 = (($mdl) + 216|0);
             HEAPF64[$265>>3] = $264;
             $266 = HEAP32[$1>>2]|0;
             $267 = HEAP32[$3>>2]|0;
             (_gretl_qr_regress($mdl,$266,$267)|0);
             break L103;
            }
           } while(0);
           $268 = HEAP32[$1>>2]|0;
           $269 = +HEAPF64[$4>>3];
           $270 = HEAP32[$pwe>>2]|0;
           $271 = HEAP32[$3>>2]|0;
           (_gretl_choleski_regress($mdl,$268,$269,$270,$271)|0);
           $272 = (($mdl) + 228|0);
           $273 = HEAP32[$272>>2]|0;
           $274 = ($273|0)==(3);
           if (!($274)) {
            break;
           }
           $275 = HEAP32[$jackknife>>2]|0;
           $276 = ($275|0)!=(0);
           if ($276) {
            break;
           }
           _model_free_storage($mdl);
           $277 = +HEAPF64[$4>>3];
           $278 = (($mdl) + 216|0);
           HEAPF64[$278>>3] = $277;
           $279 = HEAP32[$1>>2]|0;
           $280 = HEAP32[$3>>2]|0;
           (_gretl_qr_regress($mdl,$279,$280)|0);
          }
         } while(0);
         $281 = (($mdl) + 228|0);
         $282 = HEAP32[$281>>2]|0;
         $283 = ($282|0)!=(0);
         if ($283) {
          break;
         }
         $284 = HEAP32[$1>>2]|0;
         _model_depvar_stats($mdl,$284);
         $285 = HEAP32[$2>>2]|0;
         $286 = ($285|0)==(6);
         do {
          if ($286) {
           $287 = HEAP32[$1>>2]|0;
           $288 = +HEAPF64[$4>>3];
           $289 = (_compute_ar_stats($mdl,$287,$288)|0);
           $290 = ($289|0)!=(0);
           if ($290) {
            break L38;
           }
           $291 = HEAP32[$ldv>>2]|0;
           $292 = ($291|0)!=(0);
           if ($292) {
            $293 = HEAP32[$1>>2]|0;
            (_ldepvar_std_errors($mdl,$293)|0);
            $294 = (($mdl) + 228|0);
            $295 = HEAP32[$294>>2]|0;
            $296 = ($295|0)!=(0);
            if ($296) {
             break L38;
            }
           }
           $297 = HEAP32[$3>>2]|0;
           $298 = $297 & 128;
           $299 = ($298|0)!=(0);
           if (!($299)) {
            break;
           }
           $300 = HEAP32[$3>>2]|0;
           $301 = $300 & 2;
           $302 = ($301|0)!=(0);
           if (!($302)) {
            break;
           }
           (_gretl_model_set_int($mdl,2568,1)|0);
          }
         } while(0);
         $303 = HEAP32[$2>>2]|0;
         $304 = ($303|0)==(133);
         if ($304) {
          $305 = HEAP32[$1>>2]|0;
          _get_wls_stats($mdl,$305);
          $306 = HEAP32[$1>>2]|0;
          _fix_wls_values($mdl,$306);
         }
         $307 = (($mdl) + 32|0);
         $308 = HEAP32[$307>>2]|0;
         $309 = ($308|0)==(0|0);
         do {
          if ($309) {
           $310 = HEAP32[$3>>2]|0;
           $311 = $310 & 524288;
           $312 = ($311|0)!=(0);
           if (!($312)) {
            label = 94;
            break;
           }
           $313 = HEAP32[$3>>2]|0;
           $314 = $313 & 256;
           $315 = ($314|0)!=(0);
           if ($315) {
            label = 94;
            break;
           }
           $316 = (($mdl) + 16|0);
           $317 = HEAP32[$316>>2]|0;
           $318 = (($mdl) + 20|0);
           $319 = HEAP32[$318>>2]|0;
           $320 = (($mdl) + 84|0);
           $321 = HEAP32[$320>>2]|0;
           $322 = (+_rhohat(1,$317,$319,$321));
           $323 = (($mdl) + 216|0);
           HEAPF64[$323>>3] = $322;
           $324 = HEAP32[$1>>2]|0;
           $325 = (+_dwstat(1,$mdl,$324));
           $326 = (($mdl) + 208|0);
           HEAPF64[$326>>3] = $325;
          } else {
           label = 94;
          }
         } while(0);
         do {
          if ((label|0) == 94) {
           $327 = HEAP32[$3>>2]|0;
           $328 = $327 & 256;
           $329 = ($328|0)!=(0);
           if ($329) {
            break;
           }
           $330 = (($mdl) + 208|0);
           HEAPF64[$330>>3] = 1.79769313486231570815E+308;
           $331 = (($mdl) + 216|0);
           HEAPF64[$331>>3] = 1.79769313486231570815E+308;
          }
         } while(0);
         $332 = (($mdl) + 48|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(1);
         do {
          if ($334) {
           $335 = (($mdl) + 64|0);
           $336 = HEAP32[$335>>2]|0;
           $337 = ($336|0)!=(0);
           if (!($337)) {
            break;
           }
           $338 = (($mdl) + 136|0);
           HEAPF64[$338>>3] = 0.0;
           $339 = (($mdl) + 128|0);
           HEAPF64[$339>>3] = 0.0;
           $340 = (($mdl) + 144|0);
           HEAPF64[$340>>3] = 1.79769313486231570815E+308;
          }
         } while(0);
         $341 = HEAP32[$2>>2]|0;
         $342 = ($341|0)==(6);
         if ($342) {
          $343 = (($mdl) + 160|0);
          HEAPF64[$343>>3] = 1.79769313486231570815E+308;
          (_mle_criteria($mdl,0)|0);
         } else {
          (_ls_criteria($mdl)|0);
         }
         $344 = HEAP32[$3>>2]|0;
         $345 = $344 & 1;
         $346 = ($345|0)!=(0);
         do {
          if (!($346)) {
           $347 = (($mdl) + 160|0);
           $348 = +HEAPF64[$347>>3];
           $349 = $348 == 1.79769313486231570815E+308;
           if ($349) {
            break;
           }
           $350 = HEAP32[$1>>2]|0;
           _log_depvar_ll($mdl,$350);
          }
         } while(0);
         $351 = HEAP32[$jackknife>>2]|0;
         $352 = ($351|0)!=(0);
         if (!($352)) {
          break;
         }
         $353 = HEAP32[$1>>2]|0;
         $354 = (_jackknife_vcv($mdl,$353)|0);
         $355 = (($mdl) + 228|0);
         HEAP32[$355>>2] = $354;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 28) {
     $110 = (($mdl) + 228|0);
     HEAP32[$110>>2] = 2;
    }
    $356 = (_gretl_model_get_int($mdl,2576)|0);
    $357 = ($356|0)!=(0);
    if ($357) {
     $358 = HEAP32[$1>>2]|0;
     (_undo_daily_repack($mdl,$358)|0);
    }
    $359 = HEAP32[$3>>2]|0;
    $360 = $359 & 1;
    $361 = ($360|0)!=(0);
    if (!($361)) {
     _set_model_id($mdl);
    }
    _memcpy(($agg$result|0),($mdl|0),272)|0;
    STACKTOP = sp;return;
   }
  }
 }
 $16 = HEAP32[_stderr>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $17;
 $vararg_ptr1 = (($vararg_buffer6) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $18;
 (_fprintf(($16|0),(2408|0),($vararg_buffer6|0))|0);
 $19 = (($mdl) + 228|0);
 HEAP32[$19>>2] = 2;
 _memcpy(($agg$result|0),($mdl|0),272)|0;
 STACKTOP = sp;return;
}
function _check_for_effective_const($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $reldiff = 0, $ret = 0, $t = 0, $x1 = 0, $x2 = 0, $yno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $reldiff = sp + 16|0;
 $x1 = sp + 8|0;
 $x2 = sp;
 $yno = sp + 32|0;
 $t = sp + 28|0;
 $ret = sp + 24|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAPF64[$x1>>3] = 0.0;
 HEAPF64[$x2>>3] = 0.0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$yno>>2] = $6;
 HEAP32[$ret>>2] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$t>>2] = $9;
 while(1) {
  $10 = HEAP32[$t>>2]|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<=($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$t>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 88|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $20 == 1.79769313486231570815E+308;
  if (!($21)) {
   $22 = HEAP32[$t>>2]|0;
   $23 = HEAP32[$0>>2]|0;
   $24 = (($23) + 88|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($22<<3)|0);
   $27 = +HEAPF64[$26>>3];
   $28 = +HEAPF64[$x1>>3];
   $29 = $28 + $27;
   HEAPF64[$x1>>3] = $29;
   $30 = HEAP32[$t>>2]|0;
   $31 = HEAP32[$yno>>2]|0;
   $32 = HEAP32[$1>>2]|0;
   $33 = (($32) + 64|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($31<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + ($30<<3)|0);
   $38 = +HEAPF64[$37>>3];
   $39 = +HEAPF64[$x2>>3];
   $40 = $39 + $38;
   HEAPF64[$x2>>3] = $40;
  }
  $41 = HEAP32[$t>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$t>>2] = $42;
 }
 $43 = +HEAPF64[$x1>>3];
 $44 = +HEAPF64[$x2>>3];
 $45 = $43 - $44;
 $46 = +HEAPF64[$x2>>3];
 $47 = $45 / $46;
 $48 = (+Math_abs((+$47)));
 HEAPF64[$reldiff>>3] = $48;
 $49 = +HEAPF64[$reldiff>>3];
 $50 = $49 < 9.00000000000000030491E-16;
 $51 = HEAP32[$0>>2]|0;
 if ($50) {
  (_gretl_model_set_int($51,2360,1)|0);
  $52 = HEAP32[$0>>2]|0;
  $53 = (($52) + 52|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) - 1)|0;
  HEAP32[$53>>2] = $55;
  HEAP32[$ret>>2] = 1;
  $63 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($63|0);
 }
 $56 = (_gretl_model_get_int($51,2360)|0);
 $57 = ($56|0)!=(0);
 if (!($57)) {
  $63 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($63|0);
 }
 $58 = HEAP32[$0>>2]|0;
 (_gretl_model_set_int($58,2360,0)|0);
 $59 = HEAP32[$0>>2]|0;
 $60 = (($59) + 52|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 1)|0;
 HEAP32[$60>>2] = $62;
 $63 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($63|0);
}
function _makevcv($pmod,$sigma) {
 $pmod = $pmod|0;
 $sigma = +$sigma;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $dec = 0, $i = 0, $icnt = 0, $j = 0, $k = 0, $kj = 0, $kk = 0, $l = 0, $m = 0, $mst = 0, $nv = 0, $nxpx = 0, $s2 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp + 24|0;
 $0 = sp + 80|0;
 $1 = sp + 76|0;
 $2 = sp + 16|0;
 $dec = sp + 72|0;
 $mst = sp + 68|0;
 $kk = sp + 64|0;
 $i = sp + 60|0;
 $j = sp + 56|0;
 $kj = sp + 52|0;
 $icnt = sp + 48|0;
 $m = sp + 44|0;
 $k = sp + 40|0;
 $l = sp + 36|0;
 $nv = sp + 32|0;
 $nxpx = sp + 28|0;
 $d = sp + 8|0;
 $s2 = sp;
 HEAP32[$1>>2] = $pmod;
 HEAPF64[$2>>3] = $sigma;
 HEAP32[$l>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 96|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  HEAP32[$0>>2] = 0;
  $185 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($185|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 92|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = HEAP32[_stderr>>2]|0;
  (_fprintf(($11|0),(2376|0),($vararg_buffer|0))|0);
  HEAP32[$0>>2] = 30;
  $185 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($185|0);
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$nv>>2] = $14;
 $15 = HEAP32[$nv>>2]|0;
 $16 = HEAP32[$nv>>2]|0;
 $17 = Math_imul($15, $16)|0;
 $18 = HEAP32[$nv>>2]|0;
 $19 = (($17) + ($18))|0;
 $20 = (($19|0) / 2)&-1;
 HEAP32[$nxpx>>2] = $20;
 $21 = HEAP32[$nxpx>>2]|0;
 HEAP32[$mst>>2] = $21;
 $22 = HEAP32[$nxpx>>2]|0;
 $23 = (($22) - 1)|0;
 HEAP32[$kk>>2] = $23;
 $24 = HEAP32[$nxpx>>2]|0;
 $25 = $24<<3;
 $26 = (_malloc($25)|0);
 $27 = HEAP32[$1>>2]|0;
 $28 = (($27) + 96|0);
 HEAP32[$28>>2] = $26;
 $29 = HEAP32[$1>>2]|0;
 $30 = (($29) + 96|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  HEAP32[$0>>2] = 12;
  $185 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($185|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $33 = HEAP32[$i>>2]|0;
  $34 = HEAP32[$nv>>2]|0;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = HEAP32[$i>>2]|0;
  $37 = HEAP32[$mst>>2]|0;
  $38 = (($37) - ($36))|0;
  HEAP32[$mst>>2] = $38;
  $39 = HEAP32[$kk>>2]|0;
  $40 = HEAP32[$1>>2]|0;
  $41 = (($40) + 92|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($39<<3)|0);
  $44 = +HEAPF64[$43>>3];
  HEAPF64[$d>>3] = $44;
  $45 = HEAP32[$i>>2]|0;
  $46 = ($45|0)>(0);
  L16: do {
   if ($46) {
    $47 = HEAP32[$kk>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[$j>>2] = $48;
    while(1) {
     $49 = HEAP32[$j>>2]|0;
     $50 = HEAP32[$kk>>2]|0;
     $51 = HEAP32[$i>>2]|0;
     $52 = (($50) + ($51))|0;
     $53 = ($49|0)<=($52|0);
     if (!($53)) {
      break L16;
     }
     $54 = HEAP32[$j>>2]|0;
     $55 = HEAP32[$1>>2]|0;
     $56 = (($55) + 92|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($57) + ($54<<3)|0);
     $59 = +HEAPF64[$58>>3];
     $60 = HEAP32[$j>>2]|0;
     $61 = HEAP32[$1>>2]|0;
     $62 = (($61) + 96|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + ($60<<3)|0);
     $65 = +HEAPF64[$64>>3];
     $66 = $59 * $65;
     $67 = +HEAPF64[$d>>3];
     $68 = $67 - $66;
     HEAPF64[$d>>3] = $68;
     $69 = HEAP32[$j>>2]|0;
     $70 = (($69) + 1)|0;
     HEAP32[$j>>2] = $70;
    }
   }
  } while(0);
  $71 = +HEAPF64[$d>>3];
  $72 = HEAP32[$kk>>2]|0;
  $73 = HEAP32[$1>>2]|0;
  $74 = (($73) + 92|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($72<<3)|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $71 * $77;
  $79 = HEAP32[$kk>>2]|0;
  $80 = HEAP32[$1>>2]|0;
  $81 = (($80) + 96|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($79<<3)|0);
  HEAPF64[$83>>3] = $78;
  $84 = HEAP32[$kk>>2]|0;
  HEAP32[$kj>>2] = $84;
  $85 = HEAP32[$kk>>2]|0;
  $86 = HEAP32[$i>>2]|0;
  $87 = (($85) - ($86))|0;
  $88 = (($87) - 2)|0;
  HEAP32[$kk>>2] = $88;
  $89 = HEAP32[$i>>2]|0;
  $90 = HEAP32[$nv>>2]|0;
  $91 = (($90) - 2)|0;
  $92 = ($89|0)>($91|0);
  L22: do {
   if (!($92)) {
    $93 = HEAP32[$i>>2]|0;
    $94 = (($93) + 1)|0;
    HEAP32[$j>>2] = $94;
    while(1) {
     $95 = HEAP32[$j>>2]|0;
     $96 = HEAP32[$nv>>2]|0;
     $97 = ($95|0)<($96|0);
     if (!($97)) {
      break L22;
     }
     $98 = HEAP32[$i>>2]|0;
     $99 = (($98) + 1)|0;
     HEAP32[$icnt>>2] = $99;
     $100 = HEAP32[$j>>2]|0;
     $101 = HEAP32[$kj>>2]|0;
     $102 = (($101) - ($100))|0;
     HEAP32[$kj>>2] = $102;
     HEAPF64[$d>>3] = 0.0;
     $103 = HEAP32[$mst>>2]|0;
     $104 = (($103) + 1)|0;
     HEAP32[$m>>2] = $104;
     HEAP32[$k>>2] = 0;
     while(1) {
      $105 = HEAP32[$k>>2]|0;
      $106 = HEAP32[$j>>2]|0;
      $107 = (($106) - 1)|0;
      $108 = ($105|0)<=($107|0);
      if (!($108)) {
       break;
      }
      $109 = HEAP32[$icnt>>2]|0;
      $110 = ($109|0)>(0);
      if ($110) {
       HEAP32[$dec>>2] = 1;
       $111 = HEAP32[$icnt>>2]|0;
       $112 = (($111) + -1)|0;
       HEAP32[$icnt>>2] = $112;
      } else {
       $113 = HEAP32[$k>>2]|0;
       HEAP32[$dec>>2] = $113;
      }
      $114 = HEAP32[$dec>>2]|0;
      $115 = HEAP32[$m>>2]|0;
      $116 = (($115) - ($114))|0;
      HEAP32[$m>>2] = $116;
      $117 = HEAP32[$kj>>2]|0;
      $118 = HEAP32[$i>>2]|0;
      $119 = (($117) + ($118))|0;
      $120 = HEAP32[$k>>2]|0;
      $121 = (($119) - ($120))|0;
      HEAP32[$l>>2] = $121;
      $122 = HEAP32[$m>>2]|0;
      $123 = (($122) - 1)|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = (($124) + 96|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = (($126) + ($123<<3)|0);
      $128 = +HEAPF64[$127>>3];
      $129 = HEAP32[$l>>2]|0;
      $130 = HEAP32[$1>>2]|0;
      $131 = (($130) + 92|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($132) + ($129<<3)|0);
      $134 = +HEAPF64[$133>>3];
      $135 = $128 * $134;
      $136 = +HEAPF64[$d>>3];
      $137 = $136 + $135;
      HEAPF64[$d>>3] = $137;
      $138 = HEAP32[$k>>2]|0;
      $139 = (($138) + 1)|0;
      HEAP32[$k>>2] = $139;
     }
     $140 = +HEAPF64[$d>>3];
     $141 = -$140;
     $142 = HEAP32[$l>>2]|0;
     $143 = (($142) - 1)|0;
     $144 = HEAP32[$1>>2]|0;
     $145 = (($144) + 92|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($146) + ($143<<3)|0);
     $148 = +HEAPF64[$147>>3];
     $149 = $141 * $148;
     $150 = HEAP32[$kj>>2]|0;
     $151 = HEAP32[$1>>2]|0;
     $152 = (($151) + 96|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = (($153) + ($150<<3)|0);
     HEAPF64[$154>>3] = $149;
     $155 = HEAP32[$j>>2]|0;
     $156 = (($155) + 1)|0;
     HEAP32[$j>>2] = $156;
    }
   }
  } while(0);
  $157 = HEAP32[$i>>2]|0;
  $158 = (($157) + 1)|0;
  HEAP32[$i>>2] = $158;
 }
 $159 = HEAP32[$1>>2]|0;
 $160 = (($159) + 8|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = ($161|0)==(69);
 if ($162) {
  label = 26;
 } else {
  $163 = HEAP32[$1>>2]|0;
  $164 = (($163) + 8|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = ($165|0)==(98);
  if ($166) {
   label = 26;
  }
 }
 if ((label|0) == 26) {
  HEAPF64[$2>>3] = 1.0;
 }
 $167 = +HEAPF64[$2>>3];
 $168 = $167 != 1.0;
 L42: do {
  if ($168) {
   $169 = +HEAPF64[$2>>3];
   $170 = +HEAPF64[$2>>3];
   $171 = $169 * $170;
   HEAPF64[$s2>>3] = $171;
   HEAP32[$i>>2] = 0;
   while(1) {
    $172 = HEAP32[$i>>2]|0;
    $173 = HEAP32[$nxpx>>2]|0;
    $174 = ($172|0)<($173|0);
    if (!($174)) {
     break L42;
    }
    $175 = +HEAPF64[$s2>>3];
    $176 = HEAP32[$i>>2]|0;
    $177 = HEAP32[$1>>2]|0;
    $178 = (($177) + 96|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = (($179) + ($176<<3)|0);
    $181 = +HEAPF64[$180>>3];
    $182 = $181 * $175;
    HEAPF64[$180>>3] = $182;
    $183 = HEAP32[$i>>2]|0;
    $184 = (($183) + 1)|0;
    HEAP32[$i>>2] = $184;
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $185 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($185|0);
}
function _dwstat($order,$pmod,$dset) {
 $order = $order|0;
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0;
 var $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $den = 0, $num = 0, $t = 0, $t1 = 0, $u1 = 0, $ut = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 32|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $ut = sp + 24|0;
 $u1 = sp + 16|0;
 $num = sp + 8|0;
 $den = sp;
 $t = sp + 44|0;
 $t1 = sp + 40|0;
 HEAP32[$1>>2] = $order;
 HEAP32[$2>>2] = $pmod;
 HEAP32[$3>>2] = $dset;
 HEAPF64[$num>>3] = 0.0;
 HEAPF64[$den>>3] = 0.0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + 104|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 <= 0.0;
 if ($7) {
  HEAPF64[$0>>3] = 1.79769313486231570815E+308;
  $109 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$109);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = (($10) + ($11))|0;
 HEAP32[$t1>>2] = $12;
 $13 = HEAP32[$2>>2]|0;
 $14 = (($13) + 68|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP32[$t1>>2]|0;
  $18 = (($17) - 1)|0;
  $19 = HEAP32[$2>>2]|0;
  $20 = (($19) + 84|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18<<3)|0);
  $23 = +HEAPF64[$22>>3];
  HEAPF64[$ut>>3] = $23;
  $24 = +HEAPF64[$ut>>3];
  $25 = $24 == 1.79769313486231570815E+308;
  if (!($25)) {
   $26 = +HEAPF64[$ut>>3];
   $27 = +HEAPF64[$ut>>3];
   $28 = $26 * $27;
   $29 = +HEAPF64[$den>>3];
   $30 = $29 + $28;
   HEAPF64[$den>>3] = $30;
  }
 } else {
  $31 = HEAP32[$2>>2]|0;
  $32 = (($31) + 104|0);
  $33 = +HEAPF64[$32>>3];
  HEAPF64[$den>>3] = $33;
 }
 $34 = HEAP32[$t1>>2]|0;
 HEAP32[$t>>2] = $34;
 while(1) {
  $35 = HEAP32[$t>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = (($36) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)<=($38|0);
  if (!($39)) {
   break;
  }
  $40 = HEAP32[$t>>2]|0;
  $41 = HEAP32[$2>>2]|0;
  $42 = (($41) + 84|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($40<<3)|0);
  $45 = +HEAPF64[$44>>3];
  HEAPF64[$ut>>3] = $45;
  $46 = HEAP32[$t>>2]|0;
  $47 = (($46) - 1)|0;
  $48 = HEAP32[$2>>2]|0;
  $49 = (($48) + 84|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($47<<3)|0);
  $52 = +HEAPF64[$51>>3];
  HEAPF64[$u1>>3] = $52;
  $53 = +HEAPF64[$ut>>3];
  $54 = $53 == 1.79769313486231570815E+308;
  do {
   if (!($54)) {
    $55 = +HEAPF64[$u1>>3];
    $56 = $55 == 1.79769313486231570815E+308;
    if (!($56)) {
     $57 = HEAP32[$2>>2]|0;
     $58 = (($57) + 68|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($59|0)!=(0);
     if ($60) {
      $61 = HEAP32[$t>>2]|0;
      $62 = HEAP32[$2>>2]|0;
      $63 = (($62) + 68|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = HEAP32[$3>>2]|0;
      $66 = (($65) + 64|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($67) + ($64<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = (($69) + ($61<<3)|0);
      $71 = +HEAPF64[$70>>3];
      $72 = $71 == 0.0;
      if ($72) {
       break;
      }
      $73 = HEAP32[$t>>2]|0;
      $74 = (($73) - 1)|0;
      $75 = HEAP32[$2>>2]|0;
      $76 = (($75) + 68|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = HEAP32[$3>>2]|0;
      $79 = (($78) + 64|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($80) + ($77<<2)|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + ($74<<3)|0);
      $84 = +HEAPF64[$83>>3];
      $85 = $84 == 0.0;
      if ($85) {
       break;
      }
     }
     $86 = +HEAPF64[$ut>>3];
     $87 = +HEAPF64[$u1>>3];
     $88 = $86 - $87;
     $89 = +HEAPF64[$ut>>3];
     $90 = +HEAPF64[$u1>>3];
     $91 = $89 - $90;
     $92 = $88 * $91;
     $93 = +HEAPF64[$num>>3];
     $94 = $93 + $92;
     HEAPF64[$num>>3] = $94;
     $95 = HEAP32[$2>>2]|0;
     $96 = (($95) + 68|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)!=(0);
     if ($98) {
      $99 = +HEAPF64[$ut>>3];
      $100 = +HEAPF64[$ut>>3];
      $101 = $99 * $100;
      $102 = +HEAPF64[$den>>3];
      $103 = $102 + $101;
      HEAPF64[$den>>3] = $103;
     }
    }
   }
  } while(0);
  $104 = HEAP32[$t>>2]|0;
  $105 = (($104) + 1)|0;
  HEAP32[$t>>2] = $105;
 }
 $106 = +HEAPF64[$num>>3];
 $107 = +HEAPF64[$den>>3];
 $108 = $106 / $107;
 HEAPF64[$0>>3] = $108;
 $109 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$109);
}
function _rhohat($order,$t1,$t2,$uhat) {
 $order = $order|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 $uhat = $uhat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $rho = 0, $t = 0, $u1 = 0, $ut = 0, $uu = 0, $xx = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 40|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = sp + 56|0;
 $4 = sp + 52|0;
 $ut = sp + 32|0;
 $u1 = sp + 24|0;
 $uu = sp + 16|0;
 $xx = sp + 8|0;
 $rho = sp;
 $t = sp + 48|0;
 HEAP32[$1>>2] = $order;
 HEAP32[$2>>2] = $t1;
 HEAP32[$3>>2] = $t2;
 HEAP32[$4>>2] = $uhat;
 HEAPF64[$uu>>3] = 0.0;
 HEAPF64[$xx>>3] = 0.0;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($5) + ($6))|0;
 HEAP32[$t>>2] = $7;
 while(1) {
  $8 = HEAP32[$t>>2]|0;
  $9 = HEAP32[$3>>2]|0;
  $10 = ($8|0)<=($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$t>>2]|0;
  $12 = HEAP32[$4>>2]|0;
  $13 = (($12) + ($11<<3)|0);
  $14 = +HEAPF64[$13>>3];
  HEAPF64[$ut>>3] = $14;
  $15 = HEAP32[$t>>2]|0;
  $16 = (($15) - 1)|0;
  $17 = HEAP32[$4>>2]|0;
  $18 = (($17) + ($16<<3)|0);
  $19 = +HEAPF64[$18>>3];
  HEAPF64[$u1>>3] = $19;
  $20 = +HEAPF64[$ut>>3];
  $21 = $20 == 1.79769313486231570815E+308;
  if (!($21)) {
   $22 = +HEAPF64[$u1>>3];
   $23 = $22 == 1.79769313486231570815E+308;
   if (!($23)) {
    $24 = +HEAPF64[$ut>>3];
    $25 = +HEAPF64[$u1>>3];
    $26 = $24 * $25;
    $27 = +HEAPF64[$uu>>3];
    $28 = $27 + $26;
    HEAPF64[$uu>>3] = $28;
    $29 = +HEAPF64[$u1>>3];
    $30 = +HEAPF64[$u1>>3];
    $31 = $29 * $30;
    $32 = +HEAPF64[$xx>>3];
    $33 = $32 + $31;
    HEAPF64[$xx>>3] = $33;
   }
  }
  $34 = HEAP32[$t>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$t>>2] = $35;
 }
 $36 = +HEAPF64[$xx>>3];
 $37 = $36 < 2.22044604925031308085E-16;
 if ($37) {
  HEAPF64[$0>>3] = 1.79769313486231570815E+308;
  $51 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$51);
 }
 $38 = +HEAPF64[$uu>>3];
 $39 = +HEAPF64[$xx>>3];
 $40 = $38 / $39;
 HEAPF64[$rho>>3] = $40;
 $41 = +HEAPF64[$rho>>3];
 $42 = $41 > 1.0;
 $43 = +HEAPF64[$rho>>3];
 $44 = $43 < -1.0;
 $or$cond = $42 | $44;
 if ($or$cond) {
  $45 = HEAP32[$1>>2]|0;
  $46 = HEAP32[$2>>2]|0;
  $47 = HEAP32[$3>>2]|0;
  $48 = HEAP32[$4>>2]|0;
  $49 = (+_altrho($45,$46,$47,$48));
  HEAPF64[$rho>>3] = $49;
 }
 $50 = +HEAPF64[$rho>>3];
 HEAPF64[$0>>3] = $50;
 $51 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$51);
}
function _altrho($order,$t1,$t2,$uhat) {
 $order = $order|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 $uhat = $uhat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $n = 0, $rho = 0, $t = 0, $u1 = 0, $uh1 = 0, $uht = 0, $ut = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 24|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = sp + 56|0;
 $4 = sp + 52|0;
 $ut = sp + 48|0;
 $u1 = sp + 44|0;
 $t = sp + 40|0;
 $n = sp + 36|0;
 $len = sp + 32|0;
 $uht = sp + 16|0;
 $uh1 = sp + 8|0;
 $rho = sp;
 HEAP32[$1>>2] = $order;
 HEAP32[$2>>2] = $t1;
 HEAP32[$3>>2] = $t2;
 HEAP32[$4>>2] = $uhat;
 $5 = HEAP32[$3>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($6) + ($7))|0;
 $9 = (($5) - ($8))|0;
 $10 = (($9) + 1)|0;
 HEAP32[$len>>2] = $10;
 $11 = HEAP32[$len>>2]|0;
 $12 = $11<<3;
 $13 = (_malloc($12)|0);
 HEAP32[$ut>>2] = $13;
 $14 = HEAP32[$ut>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  HEAPF64[$0>>3] = 1.79769313486231570815E+308;
  $64 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$64);
 }
 $16 = HEAP32[$len>>2]|0;
 $17 = $16<<3;
 $18 = (_malloc($17)|0);
 HEAP32[$u1>>2] = $18;
 $19 = HEAP32[$u1>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = HEAP32[$ut>>2]|0;
  _free($21);
  HEAPF64[$0>>3] = 1.79769313486231570815E+308;
  $64 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$64);
 }
 HEAP32[$n>>2] = 0;
 $22 = HEAP32[$2>>2]|0;
 $23 = HEAP32[$1>>2]|0;
 $24 = (($22) + ($23))|0;
 HEAP32[$t>>2] = $24;
 while(1) {
  $25 = HEAP32[$t>>2]|0;
  $26 = HEAP32[$3>>2]|0;
  $27 = ($25|0)<=($26|0);
  if (!($27)) {
   break;
  }
  $28 = HEAP32[$t>>2]|0;
  $29 = HEAP32[$4>>2]|0;
  $30 = (($29) + ($28<<3)|0);
  $31 = +HEAPF64[$30>>3];
  HEAPF64[$uht>>3] = $31;
  $32 = HEAP32[$t>>2]|0;
  $33 = ($32|0)>(0);
  if ($33) {
   $34 = HEAP32[$t>>2]|0;
   $35 = (($34) - 1)|0;
   $36 = HEAP32[$4>>2]|0;
   $37 = (($36) + ($35<<3)|0);
   $38 = +HEAPF64[$37>>3];
   $39 = $38;
  } else {
   $39 = 1.79769313486231570815E+308;
  }
  HEAPF64[$uh1>>3] = $39;
  $40 = +HEAPF64[$uht>>3];
  $41 = $40 == 1.79769313486231570815E+308;
  if (!($41)) {
   $42 = +HEAPF64[$uh1>>3];
   $43 = $42 == 1.79769313486231570815E+308;
   if (!($43)) {
    $44 = +HEAPF64[$uht>>3];
    $45 = HEAP32[$n>>2]|0;
    $46 = HEAP32[$ut>>2]|0;
    $47 = (($46) + ($45<<3)|0);
    HEAPF64[$47>>3] = $44;
    $48 = +HEAPF64[$uh1>>3];
    $49 = HEAP32[$n>>2]|0;
    $50 = HEAP32[$u1>>2]|0;
    $51 = (($50) + ($49<<3)|0);
    HEAPF64[$51>>3] = $48;
    $52 = HEAP32[$n>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$n>>2] = $53;
   }
  }
  $54 = HEAP32[$t>>2]|0;
  $55 = (($54) + 1)|0;
  HEAP32[$t>>2] = $55;
 }
 $56 = HEAP32[$n>>2]|0;
 $57 = (($56) - 1)|0;
 $58 = HEAP32[$ut>>2]|0;
 $59 = HEAP32[$u1>>2]|0;
 $60 = (+_gretl_corr(0,$57,$58,$59,0));
 HEAPF64[$rho>>3] = $60;
 $61 = HEAP32[$ut>>2]|0;
 _free($61);
 $62 = HEAP32[$u1>>2]|0;
 _free($62);
 $63 = +HEAPF64[$rho>>3];
 HEAPF64[$0>>3] = $63;
 $64 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$64);
}
function _check_weight_var($pmod,$w,$effobs) {
 $pmod = $pmod|0;
 $w = $w|0;
 $effobs = $effobs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $allzero = 0, $t = 0, $wtneg = 0, $wtzero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $wtzero = sp + 12|0;
 $wtneg = sp + 8|0;
 $t = sp + 4|0;
 $allzero = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $w;
 HEAP32[$3>>2] = $effobs;
 HEAP32[$wtzero>>2] = 3040;
 HEAP32[$wtneg>>2] = 3096;
 HEAP32[$allzero>>2] = 1;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$t>>2] = $6;
 while(1) {
  $7 = HEAP32[$t>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<=($10|0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$t>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = (($13) + ($12<<3)|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $15 < 0.0;
  if ($16) {
   label = 4;
   break;
  }
  $20 = HEAP32[$t>>2]|0;
  $21 = HEAP32[$2>>2]|0;
  $22 = (($21) + ($20<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 > 0.0;
  if ($24) {
   HEAP32[$allzero>>2] = 0;
  }
  $25 = HEAP32[$t>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$t>>2] = $26;
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$wtneg>>2]|0;
  _gretl_errmsg_set($17);
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + 228|0);
  HEAP32[$19>>2] = 2;
  HEAP32[$0>>2] = 1;
  $45 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 $27 = HEAP32[$allzero>>2]|0;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = HEAP32[$wtzero>>2]|0;
  _gretl_errmsg_set($29);
  $30 = HEAP32[$1>>2]|0;
  $31 = (($30) + 228|0);
  HEAP32[$31>>2] = 2;
  HEAP32[$0>>2] = 1;
  $45 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 $32 = HEAP32[$1>>2]|0;
 $33 = (($32) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$1>>2]|0;
 $36 = (($35) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$2>>2]|0;
 $39 = (_gretl_isdummy($34,$37,$38)|0);
 $40 = HEAP32[$3>>2]|0;
 HEAP32[$40>>2] = $39;
 $41 = HEAP32[$3>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = HEAP32[$1>>2]|0;
  (_gretl_model_set_int($44,2616,1)|0);
 }
 HEAP32[$0>>2] = 0;
 $45 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($45|0);
}
function _lsq_check_for_missing_obs($pmod,$opts,$dset,$misst) {
 $pmod = $pmod|0;
 $opts = $opts|0;
 $dset = $dset|0;
 $misst = $misst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $missv = 0, $ref_mask = 0, $reject_missing = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $ref_mask = sp + 12|0;
 $missv = sp + 8|0;
 $reject_missing = sp + 4|0;
 $err = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $opts;
 HEAP32[$3>>2] = $dset;
 HEAP32[$4>>2] = $misst;
 $5 = (_reference_missmask_present()|0);
 HEAP32[$ref_mask>>2] = $5;
 HEAP32[$missv>>2] = 0;
 HEAP32[$reject_missing>>2] = 0;
 $6 = HEAP32[$ref_mask>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = HEAP32[$1>>2]|0;
  $9 = (_apply_reference_missmask($8)|0);
  HEAP32[$err>>2] = $9;
  $10 = HEAP32[$err>>2]|0;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = (($12) + 228|0);
   HEAP32[$13>>2] = 12;
   HEAP32[$0>>2] = 1;
   $45 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($45|0);
  } else {
   HEAP32[$0>>2] = 0;
   $45 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($45|0);
  }
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = $14 & 131072;
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   $17 = HEAP32[$3>>2]|0;
   $18 = ($17|0)!=(0|0);
   if ($18) {
    $19 = HEAP32[$3>>2]|0;
    $20 = (($19) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(1);
    if (!($22)) {
     $23 = HEAP32[$3>>2]|0;
     $24 = (($23) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(5);
     if (!($26)) {
      break;
     }
    }
    $27 = (_libset_get_bool(3024)|0);
    $28 = ($27|0)!=(0);
    if (!($28)) {
     HEAP32[$reject_missing>>2] = 1;
    }
   }
  }
 } while(0);
 $29 = HEAP32[$2>>2]|0;
 $30 = $29 & 4096;
 $31 = ($30|0)!=(0);
 if ($31) {
  HEAP32[$reject_missing>>2] = 1;
 }
 $32 = HEAP32[$reject_missing>>2]|0;
 $33 = ($32|0)!=(0);
 $34 = HEAP32[$1>>2]|0;
 $35 = HEAP32[$3>>2]|0;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$3>>2]|0;
 $39 = (($38) + 64|0);
 $40 = HEAP32[$39>>2]|0;
 if ($33) {
  $41 = HEAP32[$4>>2]|0;
  $42 = (_model_adjust_sample($34,$37,$40,$41)|0);
  HEAP32[$missv>>2] = $42;
 } else {
  $43 = (_model_adjust_sample($34,$37,$40,0)|0);
  HEAP32[$missv>>2] = $43;
 }
 $44 = HEAP32[$missv>>2]|0;
 HEAP32[$0>>2] = $44;
 $45 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($45|0);
}
function _dropwt($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $list;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) - 1)|0;
 HEAP32[$1>>2] = $3;
 HEAP32[$i>>2] = 1;
 while(1) {
  $4 = HEAP32[$i>>2]|0;
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)<=($6|0);
  if (!($7)) {
   break;
  }
  $8 = HEAP32[$i>>2]|0;
  $9 = (($8) + 1)|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$i>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + ($13<<2)|0);
  HEAP32[$15>>2] = $12;
  $16 = HEAP32[$i>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$i>>2] = $17;
 }
 STACKTOP = sp;return;
}
function _depvar_zero($pmod,$yno,$Z) {
 $pmod = $pmod|0;
 $yno = $yno|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, $t = 0, $yt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $yt = sp;
 $t = sp + 12|0;
 $ret = sp + 8|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $yno;
 HEAP32[$2>>2] = $Z;
 HEAP32[$ret>>2] = 1;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$t>>2] = $5;
 while(1) {
  $6 = HEAP32[$t>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<=($9|0);
  if (!($10)) {
   label = 10;
   break;
  }
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = HEAP32[$t>>2]|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = (($16) + 32|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($15)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)==(49);
   if (!($22)) {
    label = 5;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   label = 0;
   $23 = HEAP32[$t>>2]|0;
   $24 = HEAP32[$1>>2]|0;
   $25 = HEAP32[$2>>2]|0;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($23<<3)|0);
   $29 = +HEAPF64[$28>>3];
   HEAPF64[$yt>>3] = $29;
   $30 = HEAP32[$0>>2]|0;
   $31 = (($30) + 68|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)!=(0);
   if ($33) {
    $34 = HEAP32[$t>>2]|0;
    $35 = HEAP32[$0>>2]|0;
    $36 = (($35) + 68|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = HEAP32[$2>>2]|0;
    $39 = (($38) + ($37<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + ($34<<3)|0);
    $42 = +HEAPF64[$41>>3];
    $43 = +HEAPF64[$yt>>3];
    $44 = $43 * $42;
    HEAPF64[$yt>>3] = $44;
   }
   $45 = +HEAPF64[$yt>>3];
   $46 = $45 != 0.0;
   if ($46) {
    break;
   }
  }
  $47 = HEAP32[$t>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$t>>2] = $48;
 }
 if ((label|0) == 10) {
  $49 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($49|0);
 }
 HEAP32[$ret>>2] = 0;
 $49 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($49|0);
}
function _omitzero($pmod,$dset,$opt) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $i = 0, $offset = 0, $t = 0, $v = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $wtzero = 0, $x = 0, $zlist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp + 8|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $2 = sp + 44|0;
 $zlist = sp + 40|0;
 $i = sp + 36|0;
 $v = sp + 32|0;
 $offset = sp + 28|0;
 $x = sp;
 $t = sp + 24|0;
 $wtzero = sp + 20|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $opt;
 HEAP32[$zlist>>2] = 0;
 HEAPF64[$x>>3] = 0.0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(133);
 $7 = $6 ? 3 : 2;
 HEAP32[$offset>>2] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = (_gretl_null_list()|0);
  HEAP32[$zlist>>2] = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$i>>2] = $15;
 while(1) {
  $16 = HEAP32[$i>>2]|0;
  $17 = HEAP32[$offset>>2]|0;
  $18 = ($16|0)>=($17|0);
  if (!($18)) {
   break;
  }
  $19 = HEAP32[$i>>2]|0;
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 60|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$v>>2] = $24;
  $25 = HEAP32[$0>>2]|0;
  $26 = HEAP32[$v>>2]|0;
  $27 = HEAP32[$1>>2]|0;
  $28 = (($27) + 64|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_modelvar_iszero($25,$31)|0);
  $33 = ($32|0)!=(0);
  if ($33) {
   $34 = HEAP32[$zlist>>2]|0;
   $35 = ($34|0)!=(0|0);
   if ($35) {
    $36 = HEAP32[$v>>2]|0;
    (_gretl_list_append_term($zlist,$36)|0);
   }
   $37 = HEAP32[_stderr>>2]|0;
   $38 = HEAP32[$v>>2]|0;
   $39 = HEAP32[$v>>2]|0;
   $40 = HEAP32[$1>>2]|0;
   $41 = (($40) + 68|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$i>>2]|0;
   HEAP32[$vararg_buffer>>2] = $38;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $44;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $45;
   (_fprintf(($37|0),(2960|0),($vararg_buffer|0))|0);
   $46 = HEAP32[$0>>2]|0;
   $47 = (($46) + 60|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = HEAP32[$i>>2]|0;
   (_gretl_list_delete_at_pos($48,$49)|0);
  }
  $50 = HEAP32[$i>>2]|0;
  $51 = (($50) + -1)|0;
  HEAP32[$i>>2] = $51;
 }
 $52 = HEAP32[$0>>2]|0;
 $53 = (($52) + 68|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)!=(0);
 L14: do {
  if ($55) {
   $56 = HEAP32[$0>>2]|0;
   $57 = (($56) + 60|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP32[$58>>2]|0;
   HEAP32[$i>>2] = $59;
   while(1) {
    $60 = HEAP32[$i>>2]|0;
    $61 = HEAP32[$offset>>2]|0;
    $62 = ($60|0)>=($61|0);
    if (!($62)) {
     break L14;
    }
    $63 = HEAP32[$i>>2]|0;
    $64 = HEAP32[$0>>2]|0;
    $65 = (($64) + 60|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + ($63<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    HEAP32[$v>>2] = $68;
    HEAP32[$wtzero>>2] = 1;
    $69 = HEAP32[$0>>2]|0;
    $70 = (($69) + 16|0);
    $71 = HEAP32[$70>>2]|0;
    HEAP32[$t>>2] = $71;
    while(1) {
     $72 = HEAP32[$t>>2]|0;
     $73 = HEAP32[$0>>2]|0;
     $74 = (($73) + 20|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($72|0)<=($75|0);
     if (!($76)) {
      break;
     }
     $77 = HEAP32[$t>>2]|0;
     $78 = HEAP32[$v>>2]|0;
     $79 = HEAP32[$1>>2]|0;
     $80 = (($79) + 64|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($81) + ($78<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (($83) + ($77<<3)|0);
     $85 = +HEAPF64[$84>>3];
     $86 = HEAP32[$t>>2]|0;
     $87 = HEAP32[$0>>2]|0;
     $88 = (($87) + 68|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = HEAP32[$1>>2]|0;
     $91 = (($90) + 64|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($92) + ($89<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = (($94) + ($86<<3)|0);
     $96 = +HEAPF64[$95>>3];
     $97 = $85 * $96;
     HEAPF64[$x>>3] = $97;
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + 32|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)!=(0|0);
     if ($101) {
      $102 = HEAP32[$t>>2]|0;
      $103 = HEAP32[$0>>2]|0;
      $104 = (($103) + 32|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($105) + ($102)|0);
      $107 = HEAP8[$106>>0]|0;
      $108 = $107 << 24 >> 24;
      $109 = ($108|0)==(49);
      if (!($109)) {
       label = 17;
      }
     } else {
      label = 17;
     }
     if ((label|0) == 17) {
      label = 0;
      $110 = +HEAPF64[$x>>3];
      $111 = $110 - 0.0;
      $112 = (+Math_abs((+$111)));
      $113 = $112 > 2.22044604925031308085E-16;
      if ($113) {
       label = 18;
       break;
      }
     }
     $114 = HEAP32[$t>>2]|0;
     $115 = (($114) + 1)|0;
     HEAP32[$t>>2] = $115;
    }
    if ((label|0) == 18) {
     label = 0;
     HEAP32[$wtzero>>2] = 0;
    }
    $116 = HEAP32[$wtzero>>2]|0;
    $117 = ($116|0)!=(0);
    if ($117) {
     $118 = HEAP32[$zlist>>2]|0;
     $119 = ($118|0)!=(0|0);
     if ($119) {
      $120 = HEAP32[$v>>2]|0;
      (_gretl_list_append_term($zlist,$120)|0);
     }
     $121 = HEAP32[$0>>2]|0;
     $122 = (($121) + 60|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = HEAP32[$i>>2]|0;
     (_gretl_list_delete_at_pos($123,$124)|0);
    }
    $125 = HEAP32[$i>>2]|0;
    $126 = (($125) + -1)|0;
    HEAP32[$i>>2] = $126;
   }
  }
 } while(0);
 $127 = HEAP32[$zlist>>2]|0;
 $128 = ($127|0)!=(0|0);
 if (!($128)) {
  STACKTOP = sp;return;
 }
 $129 = HEAP32[$zlist>>2]|0;
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)>(0);
 if ($131) {
  $132 = HEAP32[$0>>2]|0;
  $133 = HEAP32[$zlist>>2]|0;
  (_gretl_model_set_list_as_data($132,3008,$133)|0);
  STACKTOP = sp;return;
 } else {
  $134 = HEAP32[$zlist>>2]|0;
  _free($134);
  STACKTOP = sp;return;
 }
}
function _model_missval_count($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mc = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $mc = sp + 4|0;
 $t = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$mc>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $25 = HEAP32[$mc>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$t>>2] = $7;
 while(1) {
  $8 = HEAP32[$t>>2]|0;
  $9 = HEAP32[$0>>2]|0;
  $10 = (($9) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)<=($11|0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[$t>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($13)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(49);
  if ($20) {
   $21 = HEAP32[$mc>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$mc>>2] = $22;
  }
  $23 = HEAP32[$t>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$t>>2] = $24;
 }
 $25 = HEAP32[$mc>>2]|0;
 STACKTOP = sp;return ($25|0);
}
function _get_model_df($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $err = sp + 8|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$err>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - 1)|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 48|0);
 HEAP32[$7>>2] = $5;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10) - ($13))|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 56|0);
 HEAP32[$16>>2] = $14;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 56|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<(0);
 $21 = HEAP32[$0>>2]|0;
 if ($20) {
  $22 = (($21) + 228|0);
  HEAP32[$22>>2] = 4;
  $23 = HEAP32[$0>>2]|0;
  $24 = (($23) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$0>>2]|0;
  $27 = (($26) + 48|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$vararg_buffer>>2] = $25;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $28;
  _gretl_errmsg_sprintf(2904,$vararg_buffer);
  HEAP32[$err>>2] = 1;
  $37 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($37|0);
 } else {
  $29 = (($21) + 48|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + 64|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($30) - ($33))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 52|0);
  HEAP32[$36>>2] = $34;
  $37 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 return 0|0;
}
function _gretl_null_regress($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $t = 0, $yt = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $yt = sp;
 $t = sp + 8|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9<<3;
  $11 = (_malloc($10)|0);
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + 88|0);
  HEAP32[$13>>2] = $11;
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 84|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20<<3;
  $22 = (_malloc($21)|0);
  $23 = HEAP32[$1>>2]|0;
  $24 = (($23) + 84|0);
  HEAP32[$24>>2] = $22;
 }
 $25 = HEAP32[$1>>2]|0;
 $26 = (($25) + 88|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  $29 = HEAP32[$1>>2]|0;
  $30 = (($29) + 84|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  if (!($32)) {
   $38 = HEAP32[$1>>2]|0;
   $39 = (($38) + 24|0);
   HEAP32[$39>>2] = 0;
   $40 = HEAP32[$1>>2]|0;
   $41 = (($40) + 64|0);
   HEAP32[$41>>2] = 0;
   $42 = HEAP32[$1>>2]|0;
   $43 = (($42) + 104|0);
   HEAPF64[$43>>3] = 0.0;
   $44 = HEAP32[$1>>2]|0;
   $45 = (($44) + 136|0);
   HEAPF64[$45>>3] = 0.0;
   $46 = HEAP32[$1>>2]|0;
   $47 = (($46) + 128|0);
   HEAPF64[$47>>3] = 0.0;
   HEAP32[$t>>2] = 0;
   while(1) {
    $48 = HEAP32[$t>>2]|0;
    $49 = HEAP32[$1>>2]|0;
    $50 = (($49) + 44|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($48|0)<($51|0);
    if (!($52)) {
     break;
    }
    $53 = HEAP32[$t>>2]|0;
    $54 = HEAP32[$1>>2]|0;
    $55 = (($54) + 60|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = HEAP32[$2>>2]|0;
    $60 = (($59) + 64|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + ($58<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + ($53<<3)|0);
    $65 = +HEAPF64[$64>>3];
    HEAPF64[$yt>>3] = $65;
    $66 = HEAP32[$t>>2]|0;
    $67 = HEAP32[$1>>2]|0;
    $68 = (($67) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($66|0)<($69|0);
    if ($70) {
     label = 13;
    } else {
     $71 = HEAP32[$t>>2]|0;
     $72 = HEAP32[$1>>2]|0;
     $73 = (($72) + 20|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($71|0)>($74|0);
     if ($75) {
      label = 13;
     } else {
      $76 = +HEAPF64[$yt>>3];
      $77 = $76 == 1.79769313486231570815E+308;
      if ($77) {
       label = 13;
      } else {
       $88 = +HEAPF64[$yt>>3];
       $89 = HEAP32[$t>>2]|0;
       $90 = HEAP32[$1>>2]|0;
       $91 = (($90) + 84|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (($92) + ($89<<3)|0);
       HEAPF64[$93>>3] = $88;
       $94 = HEAP32[$t>>2]|0;
       $95 = HEAP32[$1>>2]|0;
       $96 = (($95) + 88|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = (($97) + ($94<<3)|0);
       HEAPF64[$98>>3] = 0.0;
       $99 = +HEAPF64[$yt>>3];
       $100 = +HEAPF64[$yt>>3];
       $101 = $99 * $100;
       $102 = HEAP32[$1>>2]|0;
       $103 = (($102) + 104|0);
       $104 = +HEAPF64[$103>>3];
       $105 = $104 + $101;
       HEAPF64[$103>>3] = $105;
       $106 = HEAP32[$1>>2]|0;
       $107 = (($106) + 24|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($108) + 1)|0;
       HEAP32[$107>>2] = $109;
      }
     }
    }
    if ((label|0) == 13) {
     label = 0;
     $78 = HEAP32[$t>>2]|0;
     $79 = HEAP32[$1>>2]|0;
     $80 = (($79) + 88|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($81) + ($78<<3)|0);
     HEAPF64[$82>>3] = 1.79769313486231570815E+308;
     $83 = HEAP32[$t>>2]|0;
     $84 = HEAP32[$1>>2]|0;
     $85 = (($84) + 84|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($86) + ($83<<3)|0);
     HEAPF64[$87>>3] = 1.79769313486231570815E+308;
    }
    $110 = HEAP32[$t>>2]|0;
    $111 = (($110) + 1)|0;
    HEAP32[$t>>2] = $111;
   }
   $112 = HEAP32[$1>>2]|0;
   $113 = (($112) + 104|0);
   $114 = +HEAPF64[$113>>3];
   $115 = $114 == 0.0;
   $116 = HEAP32[$1>>2]|0;
   do {
    if ($115) {
     $117 = (($116) + 120|0);
     HEAPF64[$117>>3] = 0.0;
    } else {
     $118 = (($116) + 24|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ($119|0)>(1);
     $121 = HEAP32[$1>>2]|0;
     if ($120) {
      $122 = (($121) + 104|0);
      $123 = +HEAPF64[$122>>3];
      $124 = HEAP32[$1>>2]|0;
      $125 = (($124) + 24|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = (($126) - 1)|0;
      $128 = (+($127|0));
      $129 = $123 / $128;
      $130 = (+Math_sqrt((+$129)));
      $131 = HEAP32[$1>>2]|0;
      $132 = (($131) + 120|0);
      HEAPF64[$132>>3] = $130;
      break;
     } else {
      $133 = (($121) + 228|0);
      HEAP32[$133>>2] = 2;
      break;
     }
    }
   } while(0);
   $134 = HEAP32[$1>>2]|0;
   $135 = (($134) + 228|0);
   $136 = HEAP32[$135>>2]|0;
   HEAP32[$0>>2] = $136;
   $137 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($137|0);
  }
 }
 $33 = HEAP32[$1>>2]|0;
 $34 = (($33) + 228|0);
 HEAP32[$34>>2] = 12;
 $35 = HEAP32[$1>>2]|0;
 $36 = (($35) + 228|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$0>>2] = $37;
 $137 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($137|0);
}
function _gretl_choleski_regress($pmod,$dset,$rho,$pwe,$opt) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $rho = +$rho;
 $pwe = $pwe|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $k = 0, $nxpx = 0, $vararg_buffer = 0, $xpy = 0, $ypy = 0;
 var $ysum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp + 24|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $3 = sp + 16|0;
 $4 = sp + 48|0;
 $5 = sp + 44|0;
 $ysum = sp + 8|0;
 $ypy = sp;
 $xpy = sp + 40|0;
 $k = sp + 36|0;
 $nxpx = sp + 32|0;
 $i = sp + 28|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAPF64[$3>>3] = $rho;
 HEAP32[$4>>2] = $pwe;
 HEAP32[$5>>2] = $opt;
 HEAPF64[$ysum>>3] = 0.0;
 HEAPF64[$ypy>>3] = 0.0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$k>>2] = $8;
 $9 = HEAP32[$k>>2]|0;
 $10 = HEAP32[$k>>2]|0;
 $11 = (($10) + 1)|0;
 $12 = Math_imul($9, $11)|0;
 $13 = (($12|0) / 2)&-1;
 HEAP32[$nxpx>>2] = $13;
 $14 = HEAP32[$nxpx>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = HEAP32[_stderr>>2]|0;
  (_fprintf(($16|0),(2688|0),($vararg_buffer|0))|0);
  $17 = HEAP32[$1>>2]|0;
  $18 = (($17) + 228|0);
  HEAP32[$18>>2] = 2;
  $19 = HEAP32[$1>>2]|0;
  $20 = (($19) + 228|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$0>>2] = $21;
  $153 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($153|0);
 }
 $22 = HEAP32[$k>>2]|0;
 $23 = $22<<3;
 $24 = (_malloc($23)|0);
 HEAP32[$xpy>>2] = $24;
 $25 = HEAP32[$xpy>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $27 = HEAP32[$1>>2]|0;
  $28 = (($27) + 228|0);
  HEAP32[$28>>2] = 12;
  $29 = HEAP32[$1>>2]|0;
  $30 = (($29) + 228|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$0>>2] = $31;
  $153 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($153|0);
 }
 $32 = HEAP32[$nxpx>>2]|0;
 $33 = $32<<3;
 $34 = (_malloc($33)|0);
 $35 = HEAP32[$1>>2]|0;
 $36 = (($35) + 92|0);
 HEAP32[$36>>2] = $34;
 $37 = HEAP32[$k>>2]|0;
 $38 = $37<<3;
 $39 = (_malloc($38)|0);
 $40 = HEAP32[$1>>2]|0;
 $41 = (($40) + 76|0);
 HEAP32[$41>>2] = $39;
 $42 = HEAP32[$k>>2]|0;
 $43 = $42<<3;
 $44 = (_malloc($43)|0);
 $45 = HEAP32[$1>>2]|0;
 $46 = (($45) + 80|0);
 HEAP32[$46>>2] = $44;
 $47 = HEAP32[$1>>2]|0;
 $48 = (($47) + 88|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if ($50) {
  $51 = HEAP32[$1>>2]|0;
  $52 = (($51) + 44|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $53<<3;
  $55 = (_malloc($54)|0);
  $56 = HEAP32[$1>>2]|0;
  $57 = (($56) + 88|0);
  HEAP32[$57>>2] = $55;
 }
 $58 = HEAP32[$1>>2]|0;
 $59 = (($58) + 84|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0|0);
 if ($61) {
  $62 = HEAP32[$1>>2]|0;
  $63 = (($62) + 44|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $64<<3;
  $66 = (_malloc($65)|0);
  $67 = HEAP32[$1>>2]|0;
  $68 = (($67) + 84|0);
  HEAP32[$68>>2] = $66;
 }
 $69 = HEAP32[$1>>2]|0;
 $70 = (($69) + 92|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==(0|0);
 if (!($72)) {
  $73 = HEAP32[$1>>2]|0;
  $74 = (($73) + 76|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)==(0|0);
  if (!($76)) {
   $77 = HEAP32[$1>>2]|0;
   $78 = (($77) + 80|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79|0)==(0|0);
   if (!($80)) {
    $81 = HEAP32[$1>>2]|0;
    $82 = (($81) + 88|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)==(0|0);
    if (!($84)) {
     $85 = HEAP32[$1>>2]|0;
     $86 = (($85) + 84|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)==(0|0);
     if (!($88)) {
      HEAP32[$i>>2] = 0;
      while(1) {
       $95 = HEAP32[$i>>2]|0;
       $96 = HEAP32[$k>>2]|0;
       $97 = ($95|0)<($96|0);
       if (!($97)) {
        break;
       }
       $98 = HEAP32[$i>>2]|0;
       $99 = HEAP32[$xpy>>2]|0;
       $100 = (($99) + ($98<<3)|0);
       HEAPF64[$100>>3] = 0.0;
       $101 = HEAP32[$i>>2]|0;
       $102 = (($101) + 1)|0;
       HEAP32[$i>>2] = $102;
      }
      HEAP32[$i>>2] = 0;
      while(1) {
       $103 = HEAP32[$i>>2]|0;
       $104 = HEAP32[$nxpx>>2]|0;
       $105 = ($103|0)<($104|0);
       if (!($105)) {
        break;
       }
       $106 = HEAP32[$i>>2]|0;
       $107 = HEAP32[$1>>2]|0;
       $108 = (($107) + 92|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($109) + ($106<<3)|0);
       HEAPF64[$110>>3] = 0.0;
       $111 = HEAP32[$i>>2]|0;
       $112 = (($111) + 1)|0;
       HEAP32[$i>>2] = $112;
      }
      $113 = HEAP32[$1>>2]|0;
      $114 = (($113) + 60|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = HEAP32[$1>>2]|0;
      $117 = (($116) + 16|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = HEAP32[$1>>2]|0;
      $120 = (($119) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = HEAP32[$2>>2]|0;
      $123 = HEAP32[$1>>2]|0;
      $124 = (($123) + 68|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = +HEAPF64[$3>>3];
      $127 = HEAP32[$4>>2]|0;
      $128 = HEAP32[$1>>2]|0;
      $129 = (($128) + 92|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = HEAP32[$xpy>>2]|0;
      $132 = HEAP32[$1>>2]|0;
      $133 = (($132) + 32|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (_XTX_XTy($115,$118,$121,$122,$125,$126,$127,$130,$131,$ysum,$ypy,$134)|0);
      $136 = HEAP32[$1>>2]|0;
      $137 = (($136) + 228|0);
      HEAP32[$137>>2] = $135;
      $138 = HEAP32[$1>>2]|0;
      $139 = (($138) + 228|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)!=(0);
      if (!($141)) {
       $142 = HEAP32[$1>>2]|0;
       $143 = HEAP32[$xpy>>2]|0;
       $144 = +HEAPF64[$ysum>>3];
       $145 = +HEAPF64[$ypy>>3];
       $146 = HEAP32[$2>>2]|0;
       $147 = +HEAPF64[$3>>3];
       $148 = HEAP32[$5>>2]|0;
       _regress($142,$143,$144,$145,$146,$147,$148);
      }
      $149 = HEAP32[$xpy>>2]|0;
      _free($149);
      $150 = HEAP32[$1>>2]|0;
      $151 = (($150) + 228|0);
      $152 = HEAP32[$151>>2]|0;
      HEAP32[$0>>2] = $152;
      $153 = HEAP32[$0>>2]|0;
      STACKTOP = sp;return ($153|0);
     }
    }
   }
  }
 }
 $89 = HEAP32[$xpy>>2]|0;
 _free($89);
 $90 = HEAP32[$1>>2]|0;
 $91 = (($90) + 228|0);
 HEAP32[$91>>2] = 12;
 $92 = HEAP32[$1>>2]|0;
 $93 = (($92) + 228|0);
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$0>>2] = $94;
 $153 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($153|0);
}
function _model_free_storage($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 92|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 76|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 80|0);
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return;
}
function _model_depvar_stats($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $dwt = 0, $sum = 0, $t = 0, $xx = 0, $yno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $xx = sp + 8|0;
 $sum = sp;
 $yno = sp + 24|0;
 $t = sp + 20|0;
 $dwt = sp + 16|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAPF64[$sum>>3] = 0.0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$yno>>2] = $6;
 HEAP32[$dwt>>2] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(133);
 if ($10) {
  $11 = HEAP32[$0>>2]|0;
  $12 = (_gretl_model_get_int($11,2616)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 68|0);
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$dwt>>2] = $16;
  }
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 176|0);
 HEAPF64[$18>>3] = 1.79769313486231570815E+308;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 168|0);
 HEAPF64[$20>>3] = 1.79769313486231570815E+308;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)<=(0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$t>>2] = $27;
 while(1) {
  $28 = HEAP32[$t>>2]|0;
  $29 = HEAP32[$0>>2]|0;
  $30 = (($29) + 20|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28|0)<=($31|0);
  if (!($32)) {
   break;
  }
  $33 = HEAP32[$dwt>>2]|0;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = HEAP32[$t>>2]|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = (($36) + 68|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + 64|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($38<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($35<<3)|0);
   $45 = +HEAPF64[$44>>3];
   $46 = $45 == 0.0;
   if (!($46)) {
    label = 9;
   }
  } else {
   label = 9;
  }
  do {
   if ((label|0) == 9) {
    label = 0;
    $47 = HEAP32[$0>>2]|0;
    $48 = (($47) + 32|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)!=(0|0);
    if ($50) {
     $51 = HEAP32[$t>>2]|0;
     $52 = HEAP32[$0>>2]|0;
     $53 = (($52) + 32|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($54) + ($51)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = ($57|0)==(49);
     if ($58) {
      break;
     }
    }
    $59 = HEAP32[$t>>2]|0;
    $60 = HEAP32[$yno>>2]|0;
    $61 = HEAP32[$1>>2]|0;
    $62 = (($61) + 64|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + ($60<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + ($59<<3)|0);
    $67 = +HEAPF64[$66>>3];
    $68 = +HEAPF64[$sum>>3];
    $69 = $68 + $67;
    HEAPF64[$sum>>3] = $69;
   }
  } while(0);
  $70 = HEAP32[$t>>2]|0;
  $71 = (($70) + 1)|0;
  HEAP32[$t>>2] = $71;
 }
 $72 = +HEAPF64[$sum>>3];
 $73 = HEAP32[$0>>2]|0;
 $74 = (($73) + 24|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (+($75|0));
 $77 = $72 / $76;
 $78 = HEAP32[$0>>2]|0;
 $79 = (($78) + 168|0);
 HEAPF64[$79>>3] = $77;
 HEAPF64[$sum>>3] = 0.0;
 $80 = HEAP32[$0>>2]|0;
 $81 = (($80) + 16|0);
 $82 = HEAP32[$81>>2]|0;
 HEAP32[$t>>2] = $82;
 while(1) {
  $83 = HEAP32[$t>>2]|0;
  $84 = HEAP32[$0>>2]|0;
  $85 = (($84) + 20|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($83|0)<=($86|0);
  if (!($87)) {
   break;
  }
  $88 = HEAP32[$dwt>>2]|0;
  $89 = ($88|0)!=(0);
  if ($89) {
   $90 = HEAP32[$t>>2]|0;
   $91 = HEAP32[$0>>2]|0;
   $92 = (($91) + 68|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = HEAP32[$1>>2]|0;
   $95 = (($94) + 64|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + ($93<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($90<<3)|0);
   $100 = +HEAPF64[$99>>3];
   $101 = $100 == 0.0;
   if (!($101)) {
    label = 17;
   }
  } else {
   label = 17;
  }
  do {
   if ((label|0) == 17) {
    label = 0;
    $102 = HEAP32[$0>>2]|0;
    $103 = (($102) + 32|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104|0)!=(0|0);
    if ($105) {
     $106 = HEAP32[$t>>2]|0;
     $107 = HEAP32[$0>>2]|0;
     $108 = (($107) + 32|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = (($109) + ($106)|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = $111 << 24 >> 24;
     $113 = ($112|0)==(49);
     if ($113) {
      break;
     }
    }
    $114 = HEAP32[$t>>2]|0;
    $115 = HEAP32[$yno>>2]|0;
    $116 = HEAP32[$1>>2]|0;
    $117 = (($116) + 64|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + ($115<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + ($114<<3)|0);
    $122 = +HEAPF64[$121>>3];
    $123 = HEAP32[$0>>2]|0;
    $124 = (($123) + 168|0);
    $125 = +HEAPF64[$124>>3];
    $126 = $122 - $125;
    $127 = +HEAPF64[$sum>>3];
    $128 = $127 + $126;
    HEAPF64[$sum>>3] = $128;
   }
  } while(0);
  $129 = HEAP32[$t>>2]|0;
  $130 = (($129) + 1)|0;
  HEAP32[$t>>2] = $130;
 }
 $131 = HEAP32[$0>>2]|0;
 $132 = (($131) + 168|0);
 $133 = +HEAPF64[$132>>3];
 $134 = +HEAPF64[$sum>>3];
 $135 = HEAP32[$0>>2]|0;
 $136 = (($135) + 24|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = (+($137|0));
 $139 = $134 / $138;
 $140 = $133 + $139;
 $141 = HEAP32[$0>>2]|0;
 $142 = (($141) + 168|0);
 HEAPF64[$142>>3] = $140;
 $143 = HEAP32[$0>>2]|0;
 $144 = (($143) + 168|0);
 $145 = +HEAPF64[$144>>3];
 $146 = (+Math_abs((+$145)));
 $147 = $146 < 4.9999999999999999941E-15;
 if ($147) {
  $148 = HEAP32[$0>>2]|0;
  $149 = (($148) + 168|0);
  HEAPF64[$149>>3] = 0.0;
 }
 HEAPF64[$sum>>3] = 0.0;
 $150 = HEAP32[$0>>2]|0;
 $151 = (($150) + 16|0);
 $152 = HEAP32[$151>>2]|0;
 HEAP32[$t>>2] = $152;
 while(1) {
  $153 = HEAP32[$t>>2]|0;
  $154 = HEAP32[$0>>2]|0;
  $155 = (($154) + 20|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ($153|0)<=($156|0);
  if (!($157)) {
   break;
  }
  $158 = HEAP32[$dwt>>2]|0;
  $159 = ($158|0)!=(0);
  if ($159) {
   $160 = HEAP32[$t>>2]|0;
   $161 = HEAP32[$0>>2]|0;
   $162 = (($161) + 68|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = HEAP32[$1>>2]|0;
   $165 = (($164) + 64|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($166) + ($163<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) + ($160<<3)|0);
   $170 = +HEAPF64[$169>>3];
   $171 = $170 == 0.0;
   if (!($171)) {
    label = 27;
   }
  } else {
   label = 27;
  }
  do {
   if ((label|0) == 27) {
    label = 0;
    $172 = HEAP32[$0>>2]|0;
    $173 = (($172) + 32|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = ($174|0)!=(0|0);
    if ($175) {
     $176 = HEAP32[$t>>2]|0;
     $177 = HEAP32[$0>>2]|0;
     $178 = (($177) + 32|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = (($179) + ($176)|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181 << 24 >> 24;
     $183 = ($182|0)==(49);
     if ($183) {
      break;
     }
    }
    $184 = HEAP32[$t>>2]|0;
    $185 = HEAP32[$yno>>2]|0;
    $186 = HEAP32[$1>>2]|0;
    $187 = (($186) + 64|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = (($188) + ($185<<2)|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = (($190) + ($184<<3)|0);
    $192 = +HEAPF64[$191>>3];
    $193 = HEAP32[$0>>2]|0;
    $194 = (($193) + 168|0);
    $195 = +HEAPF64[$194>>3];
    $196 = $192 - $195;
    HEAPF64[$xx>>3] = $196;
    $197 = +HEAPF64[$xx>>3];
    $198 = +HEAPF64[$xx>>3];
    $199 = $197 * $198;
    $200 = +HEAPF64[$sum>>3];
    $201 = $200 + $199;
    HEAPF64[$sum>>3] = $201;
   }
  } while(0);
  $202 = HEAP32[$t>>2]|0;
  $203 = (($202) + 1)|0;
  HEAP32[$t>>2] = $203;
 }
 $204 = HEAP32[$0>>2]|0;
 $205 = (($204) + 24|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = ($206|0)>(1);
 if ($207) {
  $208 = +HEAPF64[$sum>>3];
  $209 = HEAP32[$0>>2]|0;
  $210 = (($209) + 24|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) - 1)|0;
  $213 = (+($212|0));
  $214 = $208 / $213;
  $215 = $214;
 } else {
  $215 = 0.0;
 }
 HEAPF64[$sum>>3] = $215;
 $216 = +HEAPF64[$sum>>3];
 $217 = $216 >= 0.0;
 if ($217) {
  $218 = +HEAPF64[$sum>>3];
  $219 = (+Math_sqrt((+$218)));
  $222 = $219;
 } else {
  $222 = 1.79769313486231570815E+308;
 }
 $220 = HEAP32[$0>>2]|0;
 $221 = (($220) + 176|0);
 HEAPF64[$221>>3] = $222;
 STACKTOP = sp;return;
}
function _compute_ar_stats($pmod,$dset,$rho) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $rho = +$rho;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $i = 0, $pw1 = 0, $pwe = 0, $t = 0, $v = 0, $x = 0, $yno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $2 = sp + 44|0;
 $3 = sp + 16|0;
 $i = sp + 40|0;
 $v = sp + 36|0;
 $t = sp + 32|0;
 $yno = sp + 28|0;
 $pwe = sp + 24|0;
 $x = sp + 8|0;
 $pw1 = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAPF64[$3>>3] = $rho;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$yno>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 32768;
 HEAP32[$pwe>>2] = $12;
 HEAPF64[$pw1>>3] = 0.0;
 $13 = HEAP32[$1>>2]|0;
 $14 = (_gretl_model_add_arinfo($13,1)|0);
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 228|0);
  HEAP32[$17>>2] = 12;
  HEAP32[$0>>2] = 1;
  $247 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($247|0);
 }
 $18 = HEAP32[$pwe>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = +HEAPF64[$3>>3];
  $21 = +HEAPF64[$3>>3];
  $22 = $20 * $21;
  $23 = 1.0 - $22;
  $24 = (+Math_sqrt((+$23)));
  HEAPF64[$pw1>>3] = $24;
 }
 $25 = HEAP32[$1>>2]|0;
 $26 = (($25) + 224|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 4|0);
 HEAP32[$29>>2] = 1;
 $30 = HEAP32[$1>>2]|0;
 $31 = (($30) + 224|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$33>>2] = 1;
 $34 = +HEAPF64[$3>>3];
 $35 = HEAP32[$1>>2]|0;
 $36 = (($35) + 224|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 HEAPF64[$39>>3] = $34;
 $40 = HEAP32[$1>>2]|0;
 $41 = +HEAPF64[$3>>3];
 (_gretl_model_set_double($40,2352,$41)|0);
 $42 = HEAP32[$1>>2]|0;
 $43 = (($42) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$t>>2] = $44;
 while(1) {
  $45 = HEAP32[$t>>2]|0;
  $46 = HEAP32[$1>>2]|0;
  $47 = (($46) + 20|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($45|0)<=($48|0);
  if (!($49)) {
   break;
  }
  $50 = HEAP32[$t>>2]|0;
  $51 = HEAP32[$1>>2]|0;
  $52 = (($51) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($50|0)==($53|0);
  if ($54) {
   $55 = HEAP32[$pwe>>2]|0;
   $56 = ($55|0)!=(0);
   if ($56) {
    $57 = +HEAPF64[$pw1>>3];
    $58 = HEAP32[$t>>2]|0;
    $59 = HEAP32[$yno>>2]|0;
    $60 = HEAP32[$2>>2]|0;
    $61 = (($60) + 64|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + ($59<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + ($58<<3)|0);
    $66 = +HEAPF64[$65>>3];
    $67 = $57 * $66;
    HEAPF64[$x>>3] = $67;
    $68 = HEAP32[$1>>2]|0;
    $69 = (($68) + 64|0);
    $70 = HEAP32[$69>>2]|0;
    HEAP32[$i>>2] = $70;
    while(1) {
     $71 = HEAP32[$i>>2]|0;
     $72 = HEAP32[$1>>2]|0;
     $73 = (($72) + 48|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($71|0)<($74|0);
     if (!($75)) {
      break;
     }
     $76 = HEAP32[$i>>2]|0;
     $77 = (($76) + 2)|0;
     $78 = HEAP32[$1>>2]|0;
     $79 = (($78) + 60|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (($80) + ($77<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     HEAP32[$v>>2] = $82;
     $83 = HEAP32[$i>>2]|0;
     $84 = HEAP32[$1>>2]|0;
     $85 = (($84) + 76|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($86) + ($83<<3)|0);
     $88 = +HEAPF64[$87>>3];
     $89 = +HEAPF64[$pw1>>3];
     $90 = $88 * $89;
     $91 = HEAP32[$t>>2]|0;
     $92 = HEAP32[$v>>2]|0;
     $93 = HEAP32[$2>>2]|0;
     $94 = (($93) + 64|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (($95) + ($92<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) + ($91<<3)|0);
     $99 = +HEAPF64[$98>>3];
     $100 = $90 * $99;
     $101 = +HEAPF64[$x>>3];
     $102 = $101 - $100;
     HEAPF64[$x>>3] = $102;
     $103 = HEAP32[$i>>2]|0;
     $104 = (($103) + 1)|0;
     HEAP32[$i>>2] = $104;
    }
    $105 = HEAP32[$1>>2]|0;
    $106 = (($105) + 64|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)!=(0);
    if ($108) {
     $109 = +HEAPF64[$pw1>>3];
     $110 = HEAP32[$1>>2]|0;
     $111 = (($110) + 76|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = +HEAPF64[$112>>3];
     $114 = $109 * $113;
     $115 = +HEAPF64[$x>>3];
     $116 = $115 - $114;
     HEAPF64[$x>>3] = $116;
    }
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
  L19: do {
   if ((label|0) == 14) {
    label = 0;
    $117 = HEAP32[$t>>2]|0;
    $118 = HEAP32[$yno>>2]|0;
    $119 = HEAP32[$2>>2]|0;
    $120 = (($119) + 64|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (($121) + ($118<<2)|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + ($117<<3)|0);
    $125 = +HEAPF64[$124>>3];
    $126 = +HEAPF64[$3>>3];
    $127 = HEAP32[$t>>2]|0;
    $128 = (($127) - 1)|0;
    $129 = HEAP32[$yno>>2]|0;
    $130 = HEAP32[$2>>2]|0;
    $131 = (($130) + 64|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($129<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($134) + ($128<<3)|0);
    $136 = +HEAPF64[$135>>3];
    $137 = $126 * $136;
    $138 = $125 - $137;
    HEAPF64[$x>>3] = $138;
    HEAP32[$i>>2] = 0;
    while(1) {
     $139 = HEAP32[$i>>2]|0;
     $140 = HEAP32[$1>>2]|0;
     $141 = (($140) + 48|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($139|0)<($142|0);
     if (!($143)) {
      break L19;
     }
     $144 = HEAP32[$i>>2]|0;
     $145 = (($144) + 2)|0;
     $146 = HEAP32[$1>>2]|0;
     $147 = (($146) + 60|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($148) + ($145<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     HEAP32[$v>>2] = $150;
     $151 = HEAP32[$i>>2]|0;
     $152 = HEAP32[$1>>2]|0;
     $153 = (($152) + 76|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($154) + ($151<<3)|0);
     $156 = +HEAPF64[$155>>3];
     $157 = HEAP32[$t>>2]|0;
     $158 = HEAP32[$v>>2]|0;
     $159 = HEAP32[$2>>2]|0;
     $160 = (($159) + 64|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($161) + ($158<<2)|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (($163) + ($157<<3)|0);
     $165 = +HEAPF64[$164>>3];
     $166 = +HEAPF64[$3>>3];
     $167 = HEAP32[$t>>2]|0;
     $168 = (($167) - 1)|0;
     $169 = HEAP32[$v>>2]|0;
     $170 = HEAP32[$2>>2]|0;
     $171 = (($170) + 64|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = (($172) + ($169<<2)|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = (($174) + ($168<<3)|0);
     $176 = +HEAPF64[$175>>3];
     $177 = $166 * $176;
     $178 = $165 - $177;
     $179 = $156 * $178;
     $180 = +HEAPF64[$x>>3];
     $181 = $180 - $179;
     HEAPF64[$x>>3] = $181;
     $182 = HEAP32[$i>>2]|0;
     $183 = (($182) + 1)|0;
     HEAP32[$i>>2] = $183;
    }
   }
  } while(0);
  $184 = +HEAPF64[$x>>3];
  $185 = HEAP32[$t>>2]|0;
  $186 = HEAP32[$1>>2]|0;
  $187 = (($186) + 84|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = (($188) + ($185<<3)|0);
  HEAPF64[$189>>3] = $184;
  $190 = HEAP32[$t>>2]|0;
  $191 = HEAP32[$yno>>2]|0;
  $192 = HEAP32[$2>>2]|0;
  $193 = (($192) + 64|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = (($194) + ($191<<2)|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = (($196) + ($190<<3)|0);
  $198 = +HEAPF64[$197>>3];
  $199 = +HEAPF64[$x>>3];
  $200 = $198 - $199;
  $201 = HEAP32[$t>>2]|0;
  $202 = HEAP32[$1>>2]|0;
  $203 = (($202) + 88|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = (($204) + ($201<<3)|0);
  HEAPF64[$205>>3] = $200;
  $206 = HEAP32[$t>>2]|0;
  $207 = (($206) + 1)|0;
  HEAP32[$t>>2] = $207;
 }
 $208 = HEAP32[$1>>2]|0;
 $209 = (($208) + 16|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = HEAP32[$1>>2]|0;
 $212 = (($211) + 20|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = HEAP32[$yno>>2]|0;
 $215 = HEAP32[$2>>2]|0;
 $216 = (($215) + 64|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = (($217) + ($214<<2)|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = HEAP32[$1>>2]|0;
 $221 = (($220) + 88|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = (+_gretl_corr_rsq($210,$213,$219,$222));
 $224 = HEAP32[$1>>2]|0;
 $225 = (($224) + 128|0);
 HEAPF64[$225>>3] = $223;
 $226 = HEAP32[$1>>2]|0;
 $227 = (($226) + 128|0);
 $228 = +HEAPF64[$227>>3];
 $229 = 1.0 - $228;
 $230 = HEAP32[$1>>2]|0;
 $231 = (($230) + 20|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = HEAP32[$1>>2]|0;
 $234 = (($233) + 16|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = (($232) - ($235))|0;
 $237 = (+($236|0));
 $238 = $229 * $237;
 $239 = HEAP32[$1>>2]|0;
 $240 = (($239) + 56|0);
 $241 = HEAP32[$240>>2]|0;
 $242 = (+($241|0));
 $243 = $238 / $242;
 $244 = 1.0 - $243;
 $245 = HEAP32[$1>>2]|0;
 $246 = (($245) + 136|0);
 HEAPF64[$246>>3] = $244;
 HEAP32[$0>>2] = 0;
 $247 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($247|0);
}
function _ldepvar_std_errors($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $emod = 0, $err = 0, $i = 0, $list = 0, $orig_t1 = 0, $orig_t2 = 0, $origv = 0;
 var $rho = 0, $t = 0, $vararg_buffer = 0, $vi = 0, $vm = 0, $vnew = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0;
 $vararg_buffer = sp + 552|0;
 $0 = sp + 608|0;
 $1 = sp + 604|0;
 $2 = sp + 600|0;
 $emod = sp + 280|0;
 $x = sp + 596|0;
 $orig_t1 = sp + 592|0;
 $orig_t2 = sp + 588|0;
 $rho = sp + 272|0;
 $origv = sp + 584|0;
 $vnew = sp + 580|0;
 $list = sp + 576|0;
 $vi = sp + 572|0;
 $vm = sp + 568|0;
 $i = sp + 564|0;
 $t = sp + 560|0;
 $err = sp + 556|0;
 $3 = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$orig_t1>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$orig_t2>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = (+_gretl_model_get_double($10,2352));
 HEAPF64[$rho>>3] = $11;
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$origv>>2] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 $19 = HEAP32[$1>>2]|0;
 $20 = (($19) + 64|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) - ($21))|0;
 HEAP32[$vnew>>2] = $22;
 HEAP32[$err>>2] = 0;
 $23 = HEAP32[$vnew>>2]|0;
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 64|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26))|0;
 $28 = (_gretl_list_new($27)|0);
 HEAP32[$list>>2] = $28;
 $29 = HEAP32[$list>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + 228|0);
  HEAP32[$32>>2] = 12;
  HEAP32[$0>>2] = 1;
  $332 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($332|0);
 }
 $33 = HEAP32[$2>>2]|0;
 $34 = HEAP32[$vnew>>2]|0;
 $35 = (_dataset_add_series($33,$34)|0);
 HEAP32[$err>>2] = $35;
 $36 = HEAP32[$err>>2]|0;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = HEAP32[$list>>2]|0;
  _free($38);
  $39 = HEAP32[$1>>2]|0;
  $40 = (($39) + 228|0);
  HEAP32[$40>>2] = 12;
  HEAP32[$0>>2] = 1;
  $332 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($332|0);
 }
 $41 = HEAP32[$origv>>2]|0;
 HEAP32[$vi>>2] = $41;
 HEAP32[$t>>2] = 0;
 while(1) {
  $42 = HEAP32[$t>>2]|0;
  $43 = HEAP32[$2>>2]|0;
  $44 = (($43) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = HEAP32[$t>>2]|0;
  $48 = HEAP32[$1>>2]|0;
  $49 = (($48) + 84|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($47<<3)|0);
  $52 = +HEAPF64[$51>>3];
  $53 = HEAP32[$t>>2]|0;
  $54 = HEAP32[$vi>>2]|0;
  $55 = HEAP32[$2>>2]|0;
  $56 = (($55) + 64|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($54<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($53<<3)|0);
  HEAPF64[$60>>3] = $52;
  $61 = HEAP32[$t>>2]|0;
  $62 = (($61) + 1)|0;
  HEAP32[$t>>2] = $62;
 }
 $63 = HEAP32[$vi>>2]|0;
 $64 = HEAP32[$2>>2]|0;
 $65 = (($64) + 68|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + ($63<<2)|0);
 $68 = HEAP32[$67>>2]|0;
 (_strcpy(($68|0),(2664|0))|0);
 $69 = HEAP32[$vi>>2]|0;
 $70 = (($69) + 1)|0;
 HEAP32[$vi>>2] = $70;
 $71 = HEAP32[$list>>2]|0;
 $72 = (($71) + 4|0);
 HEAP32[$72>>2] = $69;
 HEAP32[$i>>2] = 2;
 while(1) {
  $73 = HEAP32[$i>>2]|0;
  $74 = HEAP32[$1>>2]|0;
  $75 = (($74) + 60|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($73|0)<=($77|0);
  if (!($78)) {
   break;
  }
  $79 = HEAP32[$i>>2]|0;
  $80 = HEAP32[$1>>2]|0;
  $81 = (($80) + 60|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($79<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  HEAP32[$vm>>2] = $84;
  $85 = HEAP32[$vm>>2]|0;
  $86 = ($85|0)==(0);
  if ($86) {
   $87 = HEAP32[$i>>2]|0;
   $88 = HEAP32[$list>>2]|0;
   $89 = (($88) + ($87<<2)|0);
   HEAP32[$89>>2] = 0;
  } else {
   $90 = HEAP32[$vi>>2]|0;
   $91 = HEAP32[$2>>2]|0;
   $92 = (($91) + 68|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + ($90<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = HEAP32[$vm>>2]|0;
   $97 = HEAP32[$2>>2]|0;
   $98 = (($97) + 68|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($99) + ($96<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   HEAP32[$vararg_buffer>>2] = $101;
   (_sprintf($95,2672,$vararg_buffer)|0);
   $102 = HEAP32[$vm>>2]|0;
   $103 = HEAP32[$2>>2]|0;
   $104 = (($103) + 64|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (($105) + ($102<<2)|0);
   $107 = HEAP32[$106>>2]|0;
   HEAP32[$x>>2] = $107;
   HEAP32[$t>>2] = 0;
   while(1) {
    $108 = HEAP32[$t>>2]|0;
    $109 = HEAP32[$2>>2]|0;
    $110 = (($109) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ($108|0)<($111|0);
    if (!($112)) {
     break;
    }
    $113 = HEAP32[$t>>2]|0;
    $114 = ($113|0)==(0);
    if ($114) {
     label = 17;
    } else {
     $115 = HEAP32[$t>>2]|0;
     $116 = HEAP32[$x>>2]|0;
     $117 = (($116) + ($115<<3)|0);
     $118 = +HEAPF64[$117>>3];
     $119 = $118 == 1.79769313486231570815E+308;
     if ($119) {
      label = 17;
     } else {
      $120 = HEAP32[$t>>2]|0;
      $121 = (($120) - 1)|0;
      $122 = HEAP32[$x>>2]|0;
      $123 = (($122) + ($121<<3)|0);
      $124 = +HEAPF64[$123>>3];
      $125 = $124 == 1.79769313486231570815E+308;
      if ($125) {
       label = 17;
      } else {
       $134 = HEAP32[$t>>2]|0;
       $135 = HEAP32[$x>>2]|0;
       $136 = (($135) + ($134<<3)|0);
       $137 = +HEAPF64[$136>>3];
       $138 = +HEAPF64[$rho>>3];
       $139 = HEAP32[$t>>2]|0;
       $140 = (($139) - 1)|0;
       $141 = HEAP32[$x>>2]|0;
       $142 = (($141) + ($140<<3)|0);
       $143 = +HEAPF64[$142>>3];
       $144 = $138 * $143;
       $145 = $137 - $144;
       $146 = HEAP32[$t>>2]|0;
       $147 = HEAP32[$vi>>2]|0;
       $148 = HEAP32[$2>>2]|0;
       $149 = (($148) + 64|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (($150) + ($147<<2)|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = (($152) + ($146<<3)|0);
       HEAPF64[$153>>3] = $145;
      }
     }
    }
    if ((label|0) == 17) {
     label = 0;
     $126 = HEAP32[$t>>2]|0;
     $127 = HEAP32[$vi>>2]|0;
     $128 = HEAP32[$2>>2]|0;
     $129 = (($128) + 64|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($130) + ($127<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + ($126<<3)|0);
     HEAPF64[$133>>3] = 1.79769313486231570815E+308;
    }
    $154 = HEAP32[$t>>2]|0;
    $155 = (($154) + 1)|0;
    HEAP32[$t>>2] = $155;
   }
   $156 = HEAP32[$vi>>2]|0;
   $157 = (($156) + 1)|0;
   HEAP32[$vi>>2] = $157;
   $158 = HEAP32[$i>>2]|0;
   $159 = HEAP32[$list>>2]|0;
   $160 = (($159) + ($158<<2)|0);
   HEAP32[$160>>2] = $156;
  }
  $161 = HEAP32[$i>>2]|0;
  $162 = (($161) + 1)|0;
  HEAP32[$i>>2] = $162;
 }
 HEAP32[$t>>2] = 0;
 while(1) {
  $163 = HEAP32[$t>>2]|0;
  $164 = HEAP32[$2>>2]|0;
  $165 = (($164) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($163|0)<($166|0);
  if (!($167)) {
   break;
  }
  $168 = HEAP32[$t>>2]|0;
  $169 = ($168|0)==(0);
  $170 = HEAP32[$t>>2]|0;
  if ($169) {
   $171 = HEAP32[$vi>>2]|0;
   $172 = HEAP32[$2>>2]|0;
   $173 = (($172) + 64|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + ($171<<2)|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($176) + ($170<<3)|0);
   HEAPF64[$177>>3] = 1.79769313486231570815E+308;
  } else {
   $178 = (($170) - 1)|0;
   $179 = HEAP32[$1>>2]|0;
   $180 = (($179) + 60|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = (($181) + 4|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = HEAP32[$2>>2]|0;
   $185 = (($184) + 64|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($186) + ($183<<2)|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + ($178<<3)|0);
   $190 = +HEAPF64[$189>>3];
   $191 = HEAP32[$t>>2]|0;
   $192 = HEAP32[$vi>>2]|0;
   $193 = HEAP32[$2>>2]|0;
   $194 = (($193) + 64|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + ($192<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = (($197) + ($191<<3)|0);
   HEAPF64[$198>>3] = $190;
  }
  $199 = HEAP32[$t>>2]|0;
  $200 = HEAP32[$vi>>2]|0;
  $201 = HEAP32[$2>>2]|0;
  $202 = (($201) + 64|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($203) + ($200<<2)|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = (($205) + ($199<<3)|0);
  $207 = +HEAPF64[$206>>3];
  $208 = $207 == 1.79769313486231570815E+308;
  L39: do {
   if (!($208)) {
    HEAP32[$i>>2] = 0;
    while(1) {
     $209 = HEAP32[$i>>2]|0;
     $210 = HEAP32[$1>>2]|0;
     $211 = (($210) + 48|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($209|0)<($212|0);
     if (!($213)) {
      break L39;
     }
     $214 = HEAP32[$i>>2]|0;
     $215 = (($214) + 2)|0;
     $216 = HEAP32[$1>>2]|0;
     $217 = (($216) + 60|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = (($218) + ($215<<2)|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = HEAP32[$2>>2]|0;
     $222 = (($221) + 64|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = (($223) + ($220<<2)|0);
     $225 = HEAP32[$224>>2]|0;
     HEAP32[$x>>2] = $225;
     $226 = HEAP32[$t>>2]|0;
     $227 = (($226) - 1)|0;
     $228 = HEAP32[$x>>2]|0;
     $229 = (($228) + ($227<<3)|0);
     $230 = +HEAPF64[$229>>3];
     $231 = $230 == 1.79769313486231570815E+308;
     if ($231) {
      break;
     }
     $240 = HEAP32[$i>>2]|0;
     $241 = HEAP32[$1>>2]|0;
     $242 = (($241) + 76|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = (($243) + ($240<<3)|0);
     $245 = +HEAPF64[$244>>3];
     $246 = HEAP32[$t>>2]|0;
     $247 = (($246) - 1)|0;
     $248 = HEAP32[$x>>2]|0;
     $249 = (($248) + ($247<<3)|0);
     $250 = +HEAPF64[$249>>3];
     $251 = $245 * $250;
     $252 = HEAP32[$t>>2]|0;
     $253 = HEAP32[$vi>>2]|0;
     $254 = HEAP32[$2>>2]|0;
     $255 = (($254) + 64|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = (($256) + ($253<<2)|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = (($258) + ($252<<3)|0);
     $260 = +HEAPF64[$259>>3];
     $261 = $260 - $251;
     HEAPF64[$259>>3] = $261;
     $262 = HEAP32[$i>>2]|0;
     $263 = (($262) + 1)|0;
     HEAP32[$i>>2] = $263;
    }
    $232 = HEAP32[$t>>2]|0;
    $233 = HEAP32[$vi>>2]|0;
    $234 = HEAP32[$2>>2]|0;
    $235 = (($234) + 64|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = (($236) + ($233<<2)|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = (($238) + ($232<<3)|0);
    HEAPF64[$239>>3] = 1.79769313486231570815E+308;
   }
  } while(0);
  $264 = HEAP32[$t>>2]|0;
  $265 = (($264) + 1)|0;
  HEAP32[$t>>2] = $265;
 }
 $266 = HEAP32[$vi>>2]|0;
 $267 = HEAP32[$list>>2]|0;
 $268 = HEAP32[$267>>2]|0;
 $269 = HEAP32[$list>>2]|0;
 $270 = (($269) + ($268<<2)|0);
 HEAP32[$270>>2] = $266;
 $271 = HEAP32[$vi>>2]|0;
 $272 = HEAP32[$2>>2]|0;
 $273 = (($272) + 68|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = (($274) + ($271<<2)|0);
 $276 = HEAP32[$275>>2]|0;
 (_strcpy(($276|0),(2680|0))|0);
 $277 = HEAP32[$1>>2]|0;
 $278 = (($277) + 16|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = HEAP32[$2>>2]|0;
 $281 = (($280) + 24|0);
 HEAP32[$281>>2] = $279;
 $282 = HEAP32[$1>>2]|0;
 $283 = (($282) + 20|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = HEAP32[$2>>2]|0;
 $286 = (($285) + 28|0);
 HEAP32[$286>>2] = $284;
 $287 = HEAP32[$list>>2]|0;
 $288 = HEAP32[$2>>2]|0;
 _lsq($3,$287,$288,86,1);
 _memcpy(($emod|0),($3|0),272)|0;
 $289 = (($emod) + 228|0);
 $290 = HEAP32[$289>>2]|0;
 $291 = ($290|0)!=(0);
 if ($291) {
  $292 = (($emod) + 228|0);
  $293 = HEAP32[$292>>2]|0;
  HEAP32[$err>>2] = $293;
 } else {
  HEAP32[$i>>2] = 0;
  while(1) {
   $294 = HEAP32[$i>>2]|0;
   $295 = HEAP32[$1>>2]|0;
   $296 = (($295) + 48|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)<($297|0);
   if (!($298)) {
    break;
   }
   $299 = HEAP32[$i>>2]|0;
   $300 = (($emod) + 80|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = (($301) + ($299<<3)|0);
   $303 = +HEAPF64[$302>>3];
   $304 = HEAP32[$i>>2]|0;
   $305 = HEAP32[$1>>2]|0;
   $306 = (($305) + 80|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = (($307) + ($304<<3)|0);
   HEAPF64[$308>>3] = $303;
   $309 = HEAP32[$i>>2]|0;
   $310 = (($309) + 1)|0;
   HEAP32[$i>>2] = $310;
  }
  $311 = HEAP32[$1>>2]|0;
  $312 = (_transcribe_ld_vcv($311,$emod)|0);
  HEAP32[$err>>2] = $312;
 }
 _clear_model($emod);
 $313 = HEAP32[$list>>2]|0;
 _free($313);
 $314 = HEAP32[$2>>2]|0;
 $315 = HEAP32[$vnew>>2]|0;
 (_dataset_drop_last_variables($314,$315)|0);
 $316 = HEAP32[$orig_t1>>2]|0;
 $317 = HEAP32[$2>>2]|0;
 $318 = (($317) + 24|0);
 HEAP32[$318>>2] = $316;
 $319 = HEAP32[$orig_t2>>2]|0;
 $320 = HEAP32[$2>>2]|0;
 $321 = (($320) + 28|0);
 HEAP32[$321>>2] = $319;
 $322 = HEAP32[$err>>2]|0;
 $323 = ($322|0)!=(0);
 if ($323) {
  $324 = HEAP32[$1>>2]|0;
  $325 = (($324) + 228|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = ($326|0)!=(0);
  if (!($327)) {
   $328 = HEAP32[$err>>2]|0;
   $329 = HEAP32[$1>>2]|0;
   $330 = (($329) + 228|0);
   HEAP32[$330>>2] = $328;
  }
 }
 $331 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $331;
 $332 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($332|0);
}
function _get_wls_stats($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $dumwt = 0, $dy = 0, $t = 0, $wmean = 0, $wobs = 0, $wsum = 0, $x = 0, $yno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $dumwt = sp + 44|0;
 $t = sp + 40|0;
 $wobs = sp + 36|0;
 $yno = sp + 32|0;
 $x = sp + 24|0;
 $dy = sp + 16|0;
 $wmean = sp + 8|0;
 $wsum = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_int($2,2616)|0);
 HEAP32[$dumwt>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$wobs>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$yno>>2] = $11;
 HEAPF64[$wmean>>3] = 0.0;
 HEAPF64[$wsum>>3] = 0.0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$t>>2] = $14;
 while(1) {
  $15 = HEAP32[$t>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<=($18|0);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 32|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = HEAP32[$t>>2]|0;
   $25 = HEAP32[$0>>2]|0;
   $26 = (($25) + 32|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($24)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 << 24 >> 24;
   $31 = ($30|0)==(49);
   if (!($31)) {
    label = 5;
   }
  } else {
   label = 5;
  }
  do {
   if ((label|0) == 5) {
    label = 0;
    $32 = HEAP32[$t>>2]|0;
    $33 = HEAP32[$0>>2]|0;
    $34 = (($33) + 68|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = HEAP32[$1>>2]|0;
    $37 = (($36) + 64|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) + ($35<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + ($32<<3)|0);
    $42 = +HEAPF64[$41>>3];
    $43 = $42 == 0.0;
    if ($43) {
     $44 = HEAP32[$dumwt>>2]|0;
     $45 = ($44|0)!=(0);
     if (!($45)) {
      $46 = HEAP32[$wobs>>2]|0;
      $47 = (($46) + -1)|0;
      HEAP32[$wobs>>2] = $47;
      $48 = HEAP32[$0>>2]|0;
      $49 = (($48) + 56|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (($50) - 1)|0;
      HEAP32[$49>>2] = $51;
      break;
     }
    }
    $52 = HEAP32[$t>>2]|0;
    $53 = HEAP32[$0>>2]|0;
    $54 = (($53) + 68|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$1>>2]|0;
    $57 = (($56) + 64|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($58) + ($55<<2)|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + ($52<<3)|0);
    $62 = +HEAPF64[$61>>3];
    $63 = HEAP32[$t>>2]|0;
    $64 = HEAP32[$yno>>2]|0;
    $65 = HEAP32[$1>>2]|0;
    $66 = (($65) + 64|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + ($64<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + ($63<<3)|0);
    $71 = +HEAPF64[$70>>3];
    $72 = $62 * $71;
    $73 = +HEAPF64[$wmean>>3];
    $74 = $73 + $72;
    HEAPF64[$wmean>>3] = $74;
    $75 = HEAP32[$t>>2]|0;
    $76 = HEAP32[$0>>2]|0;
    $77 = (($76) + 68|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = HEAP32[$1>>2]|0;
    $80 = (($79) + 64|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81) + ($78<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (($83) + ($75<<3)|0);
    $85 = +HEAPF64[$84>>3];
    $86 = +HEAPF64[$wsum>>3];
    $87 = $86 + $85;
    HEAPF64[$wsum>>3] = $87;
   }
  } while(0);
  $88 = HEAP32[$t>>2]|0;
  $89 = (($88) + 1)|0;
  HEAP32[$t>>2] = $89;
 }
 $90 = +HEAPF64[$wsum>>3];
 $91 = +HEAPF64[$wmean>>3];
 $92 = $91 / $90;
 HEAPF64[$wmean>>3] = $92;
 HEAPF64[$x>>3] = 0.0;
 $93 = HEAP32[$0>>2]|0;
 $94 = (($93) + 16|0);
 $95 = HEAP32[$94>>2]|0;
 HEAP32[$t>>2] = $95;
 while(1) {
  $96 = HEAP32[$t>>2]|0;
  $97 = HEAP32[$0>>2]|0;
  $98 = (($97) + 20|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($96|0)<=($99|0);
  if (!($100)) {
   break;
  }
  $101 = HEAP32[$0>>2]|0;
  $102 = (($101) + 32|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)!=(0|0);
  if ($104) {
   $105 = HEAP32[$t>>2]|0;
   $106 = HEAP32[$0>>2]|0;
   $107 = (($106) + 32|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + ($105)|0);
   $110 = HEAP8[$109>>0]|0;
   $111 = $110 << 24 >> 24;
   $112 = ($111|0)==(49);
   if (!($112)) {
    label = 14;
   }
  } else {
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $113 = HEAP32[$t>>2]|0;
   $114 = HEAP32[$0>>2]|0;
   $115 = (($114) + 68|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = HEAP32[$1>>2]|0;
   $118 = (($117) + 64|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + ($116<<2)|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + ($113<<3)|0);
   $123 = +HEAPF64[$122>>3];
   $124 = $123 == 0.0;
   if (!($124)) {
    $125 = HEAP32[$t>>2]|0;
    $126 = HEAP32[$yno>>2]|0;
    $127 = HEAP32[$1>>2]|0;
    $128 = (($127) + 64|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + ($126<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + ($125<<3)|0);
    $133 = +HEAPF64[$132>>3];
    $134 = +HEAPF64[$wmean>>3];
    $135 = $133 - $134;
    HEAPF64[$dy>>3] = $135;
    $136 = HEAP32[$t>>2]|0;
    $137 = HEAP32[$0>>2]|0;
    $138 = (($137) + 68|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = HEAP32[$1>>2]|0;
    $141 = (($140) + 64|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + ($139<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($144) + ($136<<3)|0);
    $146 = +HEAPF64[$145>>3];
    $147 = +HEAPF64[$dy>>3];
    $148 = $146 * $147;
    $149 = +HEAPF64[$dy>>3];
    $150 = $148 * $149;
    $151 = +HEAPF64[$x>>3];
    $152 = $151 + $150;
    HEAPF64[$x>>3] = $152;
   }
  }
  $153 = HEAP32[$t>>2]|0;
  $154 = (($153) + 1)|0;
  HEAP32[$t>>2] = $154;
 }
 $155 = +HEAPF64[$x>>3];
 $156 = HEAP32[$0>>2]|0;
 $157 = (($156) + 104|0);
 $158 = +HEAPF64[$157>>3];
 $159 = $155 - $158;
 $160 = HEAP32[$0>>2]|0;
 $161 = (($160) + 56|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (+($162|0));
 $164 = $159 * $163;
 $165 = HEAP32[$0>>2]|0;
 $166 = (($165) + 52|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = (+($167|0));
 $169 = HEAP32[$0>>2]|0;
 $170 = (($169) + 104|0);
 $171 = +HEAPF64[$170>>3];
 $172 = $168 * $171;
 $173 = $164 / $172;
 $174 = HEAP32[$0>>2]|0;
 $175 = (($174) + 144|0);
 HEAPF64[$175>>3] = $173;
 $176 = HEAP32[$0>>2]|0;
 $177 = (($176) + 104|0);
 $178 = +HEAPF64[$177>>3];
 $179 = +HEAPF64[$x>>3];
 $180 = $178 / $179;
 $181 = 1.0 - $180;
 $182 = HEAP32[$0>>2]|0;
 $183 = (($182) + 128|0);
 HEAPF64[$183>>3] = $181;
 $184 = HEAP32[$0>>2]|0;
 $185 = (($184) + 128|0);
 $186 = +HEAPF64[$185>>3];
 $187 = 1.0 - $186;
 $188 = HEAP32[$0>>2]|0;
 $189 = (($188) + 24|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = (($190) - 1)|0;
 $192 = (+($191|0));
 $193 = $187 * $192;
 $194 = HEAP32[$0>>2]|0;
 $195 = (($194) + 56|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = (+($196|0));
 $198 = $193 / $197;
 $199 = 1.0 - $198;
 $200 = HEAP32[$0>>2]|0;
 $201 = (($200) + 136|0);
 HEAPF64[$201>>3] = $199;
 STACKTOP = sp;return;
}
function _fix_wls_values($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ess_orig = 0, $sigma_orig = 0, $sw = 0;
 var $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $t = sp + 24|0;
 $ess_orig = sp + 16|0;
 $sw = sp + 8|0;
 $sigma_orig = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_int($2,2616)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$t>>2] = $7;
  while(1) {
   $8 = HEAP32[$t>>2]|0;
   $9 = HEAP32[$0>>2]|0;
   $10 = (($9) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($8|0)<=($11|0);
   if (!($12)) {
    break;
   }
   $13 = HEAP32[$t>>2]|0;
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 68|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 64|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($16<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($13<<3)|0);
   $23 = +HEAPF64[$22>>3];
   $24 = $23 == 0.0;
   if ($24) {
    $25 = HEAP32[$t>>2]|0;
    $26 = HEAP32[$0>>2]|0;
    $27 = (($26) + 84|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($25<<3)|0);
    HEAPF64[$29>>3] = 1.79769313486231570815E+308;
    $30 = HEAP32[$t>>2]|0;
    $31 = HEAP32[$0>>2]|0;
    $32 = (($31) + 88|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + ($30<<3)|0);
    HEAPF64[$34>>3] = 1.79769313486231570815E+308;
   }
   $35 = HEAP32[$t>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[$t>>2] = $36;
  }
  STACKTOP = sp;return;
 }
 HEAPF64[$ess_orig>>3] = 0.0;
 $37 = HEAP32[$0>>2]|0;
 $38 = (($37) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$t>>2] = $39;
 while(1) {
  $40 = HEAP32[$t>>2]|0;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + 20|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($40|0)<=($43|0);
  if (!($44)) {
   break;
  }
  $45 = HEAP32[$0>>2]|0;
  $46 = (($45) + 32|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0|0);
  if ($48) {
   $49 = HEAP32[$t>>2]|0;
   $50 = HEAP32[$0>>2]|0;
   $51 = (($50) + 32|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($49)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54 << 24 >> 24;
   $56 = ($55|0)==(49);
   if (!($56)) {
    label = 11;
   }
  } else {
   label = 11;
  }
  do {
   if ((label|0) == 11) {
    label = 0;
    $57 = HEAP32[$t>>2]|0;
    $58 = HEAP32[$0>>2]|0;
    $59 = (($58) + 68|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = HEAP32[$1>>2]|0;
    $62 = (($61) + 64|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + ($60<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + ($57<<3)|0);
    $67 = +HEAPF64[$66>>3];
    $68 = $67 == 0.0;
    $69 = HEAP32[$t>>2]|0;
    $70 = HEAP32[$0>>2]|0;
    if ($68) {
     $71 = (($70) + 84|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (($72) + ($69<<3)|0);
     HEAPF64[$73>>3] = 1.79769313486231570815E+308;
     $74 = HEAP32[$t>>2]|0;
     $75 = HEAP32[$0>>2]|0;
     $76 = (($75) + 88|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + ($74<<3)|0);
     HEAPF64[$78>>3] = 1.79769313486231570815E+308;
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + 24|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($81) - 1)|0;
     HEAP32[$80>>2] = $82;
     break;
    } else {
     $83 = (($70) + 68|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = HEAP32[$1>>2]|0;
     $86 = (($85) + 64|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($87) + ($84<<2)|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = (($89) + ($69<<3)|0);
     $91 = +HEAPF64[$90>>3];
     $92 = (+Math_sqrt((+$91)));
     HEAPF64[$sw>>3] = $92;
     $93 = +HEAPF64[$sw>>3];
     $94 = HEAP32[$t>>2]|0;
     $95 = HEAP32[$0>>2]|0;
     $96 = (($95) + 88|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) + ($94<<3)|0);
     $99 = +HEAPF64[$98>>3];
     $100 = $99 / $93;
     HEAPF64[$98>>3] = $100;
     $101 = +HEAPF64[$sw>>3];
     $102 = HEAP32[$t>>2]|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + 84|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (($105) + ($102<<3)|0);
     $107 = +HEAPF64[$106>>3];
     $108 = $107 / $101;
     HEAPF64[$106>>3] = $108;
     $109 = HEAP32[$t>>2]|0;
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + 84|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = (($112) + ($109<<3)|0);
     $114 = +HEAPF64[$113>>3];
     $115 = HEAP32[$t>>2]|0;
     $116 = HEAP32[$0>>2]|0;
     $117 = (($116) + 84|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = (($118) + ($115<<3)|0);
     $120 = +HEAPF64[$119>>3];
     $121 = $114 * $120;
     $122 = +HEAPF64[$ess_orig>>3];
     $123 = $122 + $121;
     HEAPF64[$ess_orig>>3] = $123;
     break;
    }
   }
  } while(0);
  $124 = HEAP32[$t>>2]|0;
  $125 = (($124) + 1)|0;
  HEAP32[$t>>2] = $125;
 }
 $126 = +HEAPF64[$ess_orig>>3];
 $127 = HEAP32[$0>>2]|0;
 $128 = (($127) + 56|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (+($129|0));
 $131 = $126 / $130;
 $132 = (+Math_sqrt((+$131)));
 HEAPF64[$sigma_orig>>3] = $132;
 $133 = HEAP32[$0>>2]|0;
 $134 = +HEAPF64[$ess_orig>>3];
 (_gretl_model_set_double($133,2632,$134)|0);
 $135 = HEAP32[$0>>2]|0;
 $136 = +HEAPF64[$sigma_orig>>3];
 (_gretl_model_set_double($135,2648,$136)|0);
 STACKTOP = sp;return;
}
function _log_depvar_ll($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jll = 0, $parent = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $parent = sp + 24|0;
 $jll = sp;
 $t = sp + 8|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_series_is_log($2,$7,$parent)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 160|0);
 $12 = +HEAPF64[$11>>3];
 HEAPF64[$jll>>3] = $12;
 HEAP32[$t>>2] = 0;
 while(1) {
  $13 = HEAP32[$t>>2]|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[$t>>2]|0;
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 84|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 == 1.79769313486231570815E+308;
  if (!($24)) {
   $25 = HEAP32[$t>>2]|0;
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 60|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$1>>2]|0;
   $32 = (($31) + 64|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($30<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($25<<3)|0);
   $37 = +HEAPF64[$36>>3];
   $38 = +HEAPF64[$jll>>3];
   $39 = $38 - $37;
   HEAPF64[$jll>>3] = $39;
  }
  $40 = HEAP32[$t>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$t>>2] = $41;
 }
 $42 = HEAP32[$0>>2]|0;
 $43 = +HEAPF64[$jll>>3];
 (_gretl_model_set_double($42,2592,$43)|0);
 $44 = HEAP32[$0>>2]|0;
 $45 = (_gretl_strdup($parent)|0);
 (_gretl_model_set_string_as_data($44,2600,$45)|0);
 STACKTOP = sp;return;
}
function _jackknife_vcv($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $err = 0;
 var $i = 0, $j = 0, $k = 0, $nc = 0, $nobs = 0, $p = 0, $st = 0, $t = 0, $t1 = 0, $t2 = 0, $tp = 0, $ustar = 0, $xx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $st = sp + 56|0;
 $ustar = sp + 52|0;
 $p = sp + 48|0;
 $nobs = sp + 44|0;
 $tp = sp + 40|0;
 $nc = sp + 36|0;
 $i = sp + 32|0;
 $j = sp + 28|0;
 $k = sp + 24|0;
 $t = sp + 20|0;
 $t1 = sp + 16|0;
 $t2 = sp + 12|0;
 $xx = sp;
 $err = sp + 8|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$st>>2] = 0;
 HEAP32[$ustar>>2] = 0;
 HEAP32[$p>>2] = 0;
 HEAP32[$nc>>2] = 0;
 HEAP32[$err>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$t1>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$t2>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$nobs>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$nc>>2] = $13;
 $14 = HEAP32[$nc>>2]|0;
 $15 = $14<<3;
 $16 = (_malloc($15)|0);
 HEAP32[$st>>2] = $16;
 $17 = HEAP32[$nobs>>2]|0;
 $18 = $17<<3;
 $19 = (_malloc($18)|0);
 HEAP32[$ustar>>2] = $19;
 $20 = HEAP32[$nc>>2]|0;
 $21 = HEAP32[$nobs>>2]|0;
 $22 = (_doubles_array_new($20,$21)|0);
 HEAP32[$p>>2] = $22;
 $23 = HEAP32[$st>>2]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  $25 = HEAP32[$p>>2]|0;
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   $27 = HEAP32[$ustar>>2]|0;
   $28 = ($27|0)==(0|0);
   if (!($28)) {
    $29 = HEAP32[$0>>2]|0;
    $30 = (($29) + 96|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(0|0);
    if ($32) {
     $33 = HEAP32[$0>>2]|0;
     $34 = (($33) + 96|0);
     $35 = HEAP32[$34>>2]|0;
     _free($35);
     $36 = HEAP32[$0>>2]|0;
     $37 = (($36) + 96|0);
     HEAP32[$37>>2] = 0;
    }
    $38 = HEAP32[$0>>2]|0;
    $39 = (_makevcv($38,1.0)|0);
    $40 = ($39|0)!=(0);
    if ($40) {
     HEAP32[$err>>2] = 12;
     $314 = HEAP32[$st>>2]|0;
     _free($314);
     $315 = HEAP32[$ustar>>2]|0;
     _free($315);
     $316 = HEAP32[$p>>2]|0;
     $317 = HEAP32[$nc>>2]|0;
     _doubles_array_free($316,$317);
     $318 = HEAP32[$err>>2]|0;
     STACKTOP = sp;return ($318|0);
    }
    HEAP32[$i>>2] = 0;
    while(1) {
     $41 = HEAP32[$i>>2]|0;
     $42 = HEAP32[$nc>>2]|0;
     $43 = ($41|0)<($42|0);
     HEAP32[$tp>>2] = 0;
     $44 = HEAP32[$t1>>2]|0;
     HEAP32[$t>>2] = $44;
     if (!($43)) {
      break;
     }
     while(1) {
      $45 = HEAP32[$t>>2]|0;
      $46 = HEAP32[$t2>>2]|0;
      $47 = ($45|0)<=($46|0);
      if (!($47)) {
       break;
      }
      $48 = HEAP32[$0>>2]|0;
      $49 = (($48) + 32|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)!=(0|0);
      if ($51) {
       $52 = HEAP32[$t>>2]|0;
       $53 = HEAP32[$0>>2]|0;
       $54 = (($53) + 32|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = (($55) + ($52)|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = $57 << 24 >> 24;
       $59 = ($58|0)==(49);
       if (!($59)) {
        label = 14;
       }
      } else {
       label = 14;
      }
      if ((label|0) == 14) {
       label = 0;
       HEAPF64[$xx>>3] = 0.0;
       HEAP32[$j>>2] = 0;
       while(1) {
        $60 = HEAP32[$j>>2]|0;
        $61 = HEAP32[$nc>>2]|0;
        $62 = ($60|0)<($61|0);
        if (!($62)) {
         break;
        }
        $63 = HEAP32[$i>>2]|0;
        $64 = HEAP32[$j>>2]|0;
        $65 = ($63|0)<=($64|0);
        if ($65) {
         $66 = HEAP32[$i>>2]|0;
         $67 = HEAP32[$j>>2]|0;
         $68 = HEAP32[$nc>>2]|0;
         $69 = (_ijton($66,$67,$68)|0);
         HEAP32[$k>>2] = $69;
        } else {
         $70 = HEAP32[$j>>2]|0;
         $71 = HEAP32[$i>>2]|0;
         $72 = HEAP32[$nc>>2]|0;
         $73 = (_ijton($70,$71,$72)|0);
         HEAP32[$k>>2] = $73;
        }
        $74 = HEAP32[$k>>2]|0;
        $75 = HEAP32[$0>>2]|0;
        $76 = (($75) + 96|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = (($77) + ($74<<3)|0);
        $79 = +HEAPF64[$78>>3];
        $80 = HEAP32[$t>>2]|0;
        $81 = HEAP32[$j>>2]|0;
        $82 = (($81) + 2)|0;
        $83 = HEAP32[$0>>2]|0;
        $84 = (($83) + 60|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = (($85) + ($82<<2)|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = HEAP32[$1>>2]|0;
        $89 = (($88) + 64|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = (($90) + ($87<<2)|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = (($92) + ($80<<3)|0);
        $94 = +HEAPF64[$93>>3];
        $95 = $79 * $94;
        $96 = +HEAPF64[$xx>>3];
        $97 = $96 + $95;
        HEAPF64[$xx>>3] = $97;
        $98 = HEAP32[$j>>2]|0;
        $99 = (($98) + 1)|0;
        HEAP32[$j>>2] = $99;
       }
       $100 = +HEAPF64[$xx>>3];
       $101 = HEAP32[$tp>>2]|0;
       $102 = (($101) + 1)|0;
       HEAP32[$tp>>2] = $102;
       $103 = HEAP32[$i>>2]|0;
       $104 = HEAP32[$p>>2]|0;
       $105 = (($104) + ($103<<2)|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = (($106) + ($101<<3)|0);
       HEAPF64[$107>>3] = $100;
      }
      $108 = HEAP32[$t>>2]|0;
      $109 = (($108) + 1)|0;
      HEAP32[$t>>2] = $109;
     }
     $110 = HEAP32[$i>>2]|0;
     $111 = (($110) + 1)|0;
     HEAP32[$i>>2] = $111;
    }
    while(1) {
     $112 = HEAP32[$t>>2]|0;
     $113 = HEAP32[$t2>>2]|0;
     $114 = ($112|0)<=($113|0);
     if (!($114)) {
      break;
     }
     $115 = HEAP32[$0>>2]|0;
     $116 = (($115) + 32|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ($117|0)!=(0|0);
     if ($118) {
      $119 = HEAP32[$t>>2]|0;
      $120 = HEAP32[$0>>2]|0;
      $121 = (($120) + 32|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($122) + ($119)|0);
      $124 = HEAP8[$123>>0]|0;
      $125 = $124 << 24 >> 24;
      $126 = ($125|0)==(49);
      if (!($126)) {
       label = 26;
      }
     } else {
      label = 26;
     }
     if ((label|0) == 26) {
      label = 0;
      HEAPF64[$xx>>3] = 0.0;
      HEAP32[$i>>2] = 0;
      while(1) {
       $127 = HEAP32[$i>>2]|0;
       $128 = HEAP32[$nc>>2]|0;
       $129 = ($127|0)<($128|0);
       if (!($129)) {
        break;
       }
       $130 = HEAP32[$t>>2]|0;
       $131 = HEAP32[$i>>2]|0;
       $132 = (($131) + 2)|0;
       $133 = HEAP32[$0>>2]|0;
       $134 = (($133) + 60|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = (($135) + ($132<<2)|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = (($138) + 64|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = (($140) + ($137<<2)|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = (($142) + ($130<<3)|0);
       $144 = +HEAPF64[$143>>3];
       $145 = HEAP32[$tp>>2]|0;
       $146 = HEAP32[$i>>2]|0;
       $147 = HEAP32[$p>>2]|0;
       $148 = (($147) + ($146<<2)|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = (($149) + ($145<<3)|0);
       $151 = +HEAPF64[$150>>3];
       $152 = $144 * $151;
       $153 = +HEAPF64[$xx>>3];
       $154 = $153 + $152;
       HEAPF64[$xx>>3] = $154;
       $155 = HEAP32[$i>>2]|0;
       $156 = (($155) + 1)|0;
       HEAP32[$i>>2] = $156;
      }
      $157 = +HEAPF64[$xx>>3];
      $158 = $157 - 1.0;
      $159 = (+Math_abs((+$158)));
      $160 = $159 < 2.22044604925031308085E-16;
      if ($160) {
       HEAPF64[$xx>>3] = 0.0;
      }
      $161 = HEAP32[$t>>2]|0;
      $162 = HEAP32[$0>>2]|0;
      $163 = (($162) + 84|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = (($164) + ($161<<3)|0);
      $166 = +HEAPF64[$165>>3];
      $167 = +HEAPF64[$xx>>3];
      $168 = 1.0 - $167;
      $169 = $166 / $168;
      $170 = HEAP32[$tp>>2]|0;
      $171 = (($170) + 1)|0;
      HEAP32[$tp>>2] = $171;
      $172 = HEAP32[$ustar>>2]|0;
      $173 = (($172) + ($170<<3)|0);
      HEAPF64[$173>>3] = $169;
     }
     $174 = HEAP32[$t>>2]|0;
     $175 = (($174) + 1)|0;
     HEAP32[$t>>2] = $175;
    }
    HEAP32[$i>>2] = 0;
    while(1) {
     $176 = HEAP32[$i>>2]|0;
     $177 = HEAP32[$nc>>2]|0;
     $178 = ($176|0)<($177|0);
     if (!($178)) {
      break;
     }
     HEAPF64[$xx>>3] = 0.0;
     HEAP32[$t>>2] = 0;
     while(1) {
      $179 = HEAP32[$t>>2]|0;
      $180 = HEAP32[$nobs>>2]|0;
      $181 = ($179|0)<($180|0);
      if (!($181)) {
       break;
      }
      $182 = HEAP32[$t>>2]|0;
      $183 = HEAP32[$i>>2]|0;
      $184 = HEAP32[$p>>2]|0;
      $185 = (($184) + ($183<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (($186) + ($182<<3)|0);
      $188 = +HEAPF64[$187>>3];
      $189 = HEAP32[$t>>2]|0;
      $190 = HEAP32[$ustar>>2]|0;
      $191 = (($190) + ($189<<3)|0);
      $192 = +HEAPF64[$191>>3];
      $193 = $188 * $192;
      $194 = +HEAPF64[$xx>>3];
      $195 = $194 + $193;
      HEAPF64[$xx>>3] = $195;
      $196 = HEAP32[$t>>2]|0;
      $197 = (($196) + 1)|0;
      HEAP32[$t>>2] = $197;
     }
     $198 = +HEAPF64[$xx>>3];
     $199 = HEAP32[$i>>2]|0;
     $200 = HEAP32[$st>>2]|0;
     $201 = (($200) + ($199<<3)|0);
     HEAPF64[$201>>3] = $198;
     $202 = HEAP32[$i>>2]|0;
     $203 = (($202) + 1)|0;
     HEAP32[$i>>2] = $203;
    }
    HEAP32[$t>>2] = 0;
    while(1) {
     $204 = HEAP32[$t>>2]|0;
     $205 = HEAP32[$nobs>>2]|0;
     $206 = ($204|0)<($205|0);
     if (!($206)) {
      break;
     }
     HEAP32[$i>>2] = 0;
     while(1) {
      $207 = HEAP32[$i>>2]|0;
      $208 = HEAP32[$nc>>2]|0;
      $209 = ($207|0)<($208|0);
      $210 = HEAP32[$t>>2]|0;
      if (!($209)) {
       break;
      }
      $211 = HEAP32[$ustar>>2]|0;
      $212 = (($211) + ($210<<3)|0);
      $213 = +HEAPF64[$212>>3];
      $214 = HEAP32[$t>>2]|0;
      $215 = HEAP32[$i>>2]|0;
      $216 = HEAP32[$p>>2]|0;
      $217 = (($216) + ($215<<2)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = (($218) + ($214<<3)|0);
      $220 = +HEAPF64[$219>>3];
      $221 = $220 * $213;
      HEAPF64[$219>>3] = $221;
      $222 = HEAP32[$i>>2]|0;
      $223 = (($222) + 1)|0;
      HEAP32[$i>>2] = $223;
     }
     $224 = (($210) + 1)|0;
     HEAP32[$t>>2] = $224;
    }
    HEAP32[$k>>2] = 0;
    HEAP32[$i>>2] = 0;
    while(1) {
     $225 = HEAP32[$i>>2]|0;
     $226 = HEAP32[$nc>>2]|0;
     $227 = ($225|0)<($226|0);
     if (!($227)) {
      break;
     }
     $228 = HEAP32[$i>>2]|0;
     HEAP32[$j>>2] = $228;
     while(1) {
      $229 = HEAP32[$j>>2]|0;
      $230 = HEAP32[$nc>>2]|0;
      $231 = ($229|0)<($230|0);
      if (!($231)) {
       break;
      }
      HEAPF64[$xx>>3] = 0.0;
      HEAP32[$t>>2] = 0;
      while(1) {
       $232 = HEAP32[$t>>2]|0;
       $233 = HEAP32[$nobs>>2]|0;
       $234 = ($232|0)<($233|0);
       if (!($234)) {
        break;
       }
       $235 = HEAP32[$t>>2]|0;
       $236 = HEAP32[$i>>2]|0;
       $237 = HEAP32[$p>>2]|0;
       $238 = (($237) + ($236<<2)|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = (($239) + ($235<<3)|0);
       $241 = +HEAPF64[$240>>3];
       $242 = HEAP32[$t>>2]|0;
       $243 = HEAP32[$j>>2]|0;
       $244 = HEAP32[$p>>2]|0;
       $245 = (($244) + ($243<<2)|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = (($246) + ($242<<3)|0);
       $248 = +HEAPF64[$247>>3];
       $249 = $241 * $248;
       $250 = +HEAPF64[$xx>>3];
       $251 = $250 + $249;
       HEAPF64[$xx>>3] = $251;
       $252 = HEAP32[$t>>2]|0;
       $253 = (($252) + 1)|0;
       HEAP32[$t>>2] = $253;
      }
      $254 = HEAP32[$i>>2]|0;
      $255 = HEAP32[$st>>2]|0;
      $256 = (($255) + ($254<<3)|0);
      $257 = +HEAPF64[$256>>3];
      $258 = HEAP32[$j>>2]|0;
      $259 = HEAP32[$st>>2]|0;
      $260 = (($259) + ($258<<3)|0);
      $261 = +HEAPF64[$260>>3];
      $262 = $257 * $261;
      $263 = HEAP32[$nobs>>2]|0;
      $264 = (+($263|0));
      $265 = $262 / $264;
      $266 = +HEAPF64[$xx>>3];
      $267 = $266 - $265;
      HEAPF64[$xx>>3] = $267;
      $268 = HEAP32[$nobs>>2]|0;
      $269 = (+($268|0));
      $270 = $269 - 1.0;
      $271 = HEAP32[$nobs>>2]|0;
      $272 = (+($271|0));
      $273 = $270 / $272;
      $274 = +HEAPF64[$xx>>3];
      $275 = $274 * $273;
      HEAPF64[$xx>>3] = $275;
      $276 = HEAP32[$i>>2]|0;
      $277 = HEAP32[$j>>2]|0;
      $278 = ($276|0)==($277|0);
      if ($278) {
       $279 = +HEAPF64[$xx>>3];
       $280 = (+Math_sqrt((+$279)));
       $281 = HEAP32[$i>>2]|0;
       $282 = HEAP32[$0>>2]|0;
       $283 = (($282) + 80|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = (($284) + ($281<<3)|0);
       HEAPF64[$285>>3] = $280;
      }
      $286 = +HEAPF64[$xx>>3];
      $287 = HEAP32[$k>>2]|0;
      $288 = (($287) + 1)|0;
      HEAP32[$k>>2] = $288;
      $289 = HEAP32[$0>>2]|0;
      $290 = (($289) + 96|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = (($291) + ($287<<3)|0);
      HEAPF64[$292>>3] = $286;
      $293 = HEAP32[$j>>2]|0;
      $294 = (($293) + 1)|0;
      HEAP32[$j>>2] = $294;
     }
     $295 = HEAP32[$i>>2]|0;
     $296 = (($295) + 1)|0;
     HEAP32[$i>>2] = $296;
    }
    $297 = HEAP32[$0>>2]|0;
    $298 = (($297) + 56|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = ($299|0)>(0);
    if ($300) {
     $301 = HEAP32[$0>>2]|0;
     $302 = (($301) + 52|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = ($303|0)>(1);
     if ($304) {
      $305 = HEAP32[$0>>2]|0;
      $306 = (+_wald_omit_F(0,$305));
      $307 = HEAP32[$0>>2]|0;
      $308 = (($307) + 144|0);
      HEAPF64[$308>>3] = $306;
     }
    }
    $309 = HEAP32[$0>>2]|0;
    $310 = (($309) + 12|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = $311 | 131584;
    HEAP32[$310>>2] = $312;
    $313 = HEAP32[$0>>2]|0;
    (_gretl_model_set_vcv_info($313,1,4)|0);
    $314 = HEAP32[$st>>2]|0;
    _free($314);
    $315 = HEAP32[$ustar>>2]|0;
    _free($315);
    $316 = HEAP32[$p>>2]|0;
    $317 = HEAP32[$nc>>2]|0;
    _doubles_array_free($316,$317);
    $318 = HEAP32[$err>>2]|0;
    STACKTOP = sp;return ($318|0);
   }
  }
 }
 HEAP32[$err>>2] = 12;
 $314 = HEAP32[$st>>2]|0;
 _free($314);
 $315 = HEAP32[$ustar>>2]|0;
 _free($315);
 $316 = HEAP32[$p>>2]|0;
 $317 = HEAP32[$nc>>2]|0;
 _doubles_array_free($316,$317);
 $318 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($318|0);
}
function _transcribe_ld_vcv($targ,$src) {
 $targ = $targ|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, $j = 0, $nv = 0, $nxpx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $nv = sp + 16|0;
 $nxpx = sp + 12|0;
 $i = sp + 8|0;
 $j = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $targ;
 HEAP32[$1>>2] = $src;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$nv>>2] = $4;
 $5 = HEAP32[$nv>>2]|0;
 $6 = HEAP32[$nv>>2]|0;
 $7 = Math_imul($5, $6)|0;
 $8 = HEAP32[$nv>>2]|0;
 $9 = (($7) + ($8))|0;
 $10 = (($9|0) / 2)&-1;
 HEAP32[$nxpx>>2] = $10;
 HEAP32[$err>>2] = 0;
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) + 120|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (_makevcv($11,$14)|0);
 HEAP32[$err>>2] = $15;
 $16 = HEAP32[$err>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + 96|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if ($21) {
   $22 = HEAP32[$nxpx>>2]|0;
   $23 = $22<<3;
   $24 = (_malloc($23)|0);
   $25 = HEAP32[$0>>2]|0;
   $26 = (($25) + 96|0);
   HEAP32[$26>>2] = $24;
   $27 = HEAP32[$0>>2]|0;
   $28 = (($27) + 96|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0|0);
   if ($30) {
    HEAP32[$err>>2] = 12;
   }
  }
 }
 $31 = HEAP32[$err>>2]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  $62 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($62|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $33 = HEAP32[$i>>2]|0;
  $34 = HEAP32[$nv>>2]|0;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = HEAP32[$i>>2]|0;
  HEAP32[$j>>2] = $36;
  while(1) {
   $37 = HEAP32[$j>>2]|0;
   $38 = HEAP32[$nv>>2]|0;
   $39 = ($37|0)<($38|0);
   $40 = HEAP32[$i>>2]|0;
   if (!($39)) {
    break;
   }
   $41 = HEAP32[$j>>2]|0;
   $42 = HEAP32[$1>>2]|0;
   $43 = (($42) + 48|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (_ijton($40,$41,$44)|0);
   $46 = HEAP32[$1>>2]|0;
   $47 = (($46) + 96|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($45<<3)|0);
   $50 = +HEAPF64[$49>>3];
   $51 = HEAP32[$i>>2]|0;
   $52 = HEAP32[$j>>2]|0;
   $53 = HEAP32[$nv>>2]|0;
   $54 = (_ijton($51,$52,$53)|0);
   $55 = HEAP32[$0>>2]|0;
   $56 = (($55) + 96|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + ($54<<3)|0);
   HEAPF64[$58>>3] = $50;
   $59 = HEAP32[$j>>2]|0;
   $60 = (($59) + 1)|0;
   HEAP32[$j>>2] = $60;
  }
  $61 = (($40) + 1)|0;
  HEAP32[$i>>2] = $61;
 }
 $62 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($62|0);
}
function _regress($pmod,$xpy,$ysum,$ypy,$dset,$rho,$opt) {
 $pmod = $pmod|0;
 $xpy = $xpy|0;
 $ysum = +$ysum;
 $ypy = +$ypy;
 $dset = $dset|0;
 $rho = +$rho;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $diag = 0;
 var $err = 0, $i = 0, $ifc = 0, $n = 0, $rss = 0, $s2 = 0, $vararg_buffer = 0, $zz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp + 48|0;
 $0 = sp + 88|0;
 $1 = sp + 84|0;
 $2 = sp + 40|0;
 $3 = sp + 32|0;
 $4 = sp + 80|0;
 $5 = sp + 24|0;
 $6 = sp + 76|0;
 $ifc = sp + 72|0;
 $n = sp + 68|0;
 $zz = sp + 16|0;
 $rss = sp + 8|0;
 $s2 = sp;
 $diag = sp + 64|0;
 $i = sp + 60|0;
 $err = sp + 56|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $xpy;
 HEAPF64[$2>>3] = $ysum;
 HEAPF64[$3>>3] = $ypy;
 HEAP32[$4>>2] = $dset;
 HEAPF64[$5>>3] = $rho;
 HEAP32[$6>>2] = $opt;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 64|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$ifc>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$n>>2] = $12;
 HEAPF64[$rss>>3] = 0.0;
 HEAPF64[$s2>>3] = 0.0;
 HEAP32[$diag>>2] = 0;
 HEAP32[$err>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $13 = HEAP32[$i>>2]|0;
  $14 = HEAP32[$n>>2]|0;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$i>>2]|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + 84|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16<<3)|0);
  HEAPF64[$20>>3] = 1.79769313486231570815E+308;
  $21 = HEAP32[$i>>2]|0;
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 88|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<3)|0);
  HEAPF64[$25>>3] = 1.79769313486231570815E+308;
  $26 = HEAP32[$i>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$i>>2] = $27;
 }
 $28 = +HEAPF64[$2>>3];
 $29 = +HEAPF64[$2>>3];
 $30 = $28 * $29;
 $31 = HEAP32[$0>>2]|0;
 $32 = (($31) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (+($33|0));
 $35 = $30 / $34;
 HEAPF64[$zz>>3] = $35;
 $36 = +HEAPF64[$3>>3];
 $37 = +HEAPF64[$zz>>3];
 $38 = $36 - $37;
 $39 = HEAP32[$0>>2]|0;
 $40 = (($39) + 112|0);
 HEAPF64[$40>>3] = $38;
 $41 = HEAP32[$0>>2]|0;
 $42 = HEAP32[$1>>2]|0;
 $43 = (_cholbeta($41,$42,$rss)|0);
 HEAP32[$err>>2] = $43;
 $44 = HEAP32[$err>>2]|0;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = HEAP32[$err>>2]|0;
  $47 = HEAP32[$0>>2]|0;
  $48 = (($47) + 228|0);
  HEAP32[$48>>2] = $46;
  STACKTOP = sp;return;
 }
 $49 = +HEAPF64[$5>>3];
 $50 = $49 != 0.0;
 if ($50) {
  $51 = +HEAPF64[$3>>3];
  $52 = +HEAPF64[$rss>>3];
  $53 = $51 - $52;
  $54 = HEAP32[$0>>2]|0;
  $55 = (($54) + 104|0);
  HEAPF64[$55>>3] = $53;
 } else {
  $56 = HEAP32[$0>>2]|0;
  $57 = HEAP32[$4>>2]|0;
  (_make_ess($56,$57)|0);
  $58 = +HEAPF64[$3>>3];
  $59 = HEAP32[$0>>2]|0;
  $60 = (($59) + 104|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $58 - $61;
  HEAPF64[$rss>>3] = $62;
 }
 $63 = HEAP32[$0>>2]|0;
 $64 = (($63) + 104|0);
 $65 = +HEAPF64[$64>>3];
 $66 = (+Math_abs((+$65)));
 $67 = $66 < 1.0000000000000000486E-22;
 $68 = HEAP32[$0>>2]|0;
 $69 = (($68) + 104|0);
 if ($67) {
  HEAPF64[$69>>3] = 0.0;
 } else {
  $70 = +HEAPF64[$69>>3];
  $71 = $70 < 0.0;
  if ($71) {
   $72 = HEAP32[$0>>2]|0;
   $73 = (($72) + 104|0);
   $74 = +HEAPF64[$73>>3];
   HEAPF64[tempDoublePtr>>3]=$74;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
   _gretl_errmsg_sprintf(2712,$vararg_buffer);
   STACKTOP = sp;return;
  }
 }
 $75 = HEAP32[$0>>2]|0;
 $76 = (($75) + 56|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0);
 $79 = HEAP32[$0>>2]|0;
 if ($78) {
  $80 = (($79) + 120|0);
  HEAPF64[$80>>3] = 0.0;
  $81 = HEAP32[$0>>2]|0;
  $82 = (($81) + 136|0);
  HEAPF64[$82>>3] = 1.79769313486231570815E+308;
 } else {
  $83 = (($79) + 12|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 & 8192;
  $86 = ($85|0)!=(0);
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + 104|0);
  $89 = +HEAPF64[$88>>3];
  $90 = HEAP32[$0>>2]|0;
  if ($86) {
   $91 = (($90) + 24|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (+($92|0));
   $94 = $89 / $93;
   HEAPF64[$s2>>3] = $94;
  } else {
   $95 = (($90) + 56|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (+($96|0));
   $98 = $89 / $97;
   HEAPF64[$s2>>3] = $98;
  }
  $99 = +HEAPF64[$s2>>3];
  $100 = (+Math_sqrt((+$99)));
  $101 = HEAP32[$0>>2]|0;
  $102 = (($101) + 120|0);
  HEAPF64[$102>>3] = $100;
 }
 $103 = HEAP32[$0>>2]|0;
 $104 = (($103) + 112|0);
 $105 = +HEAPF64[$104>>3];
 $106 = $105 < 2.22044604925031308085E-16;
 if ($106) {
  $107 = HEAP32[$0>>2]|0;
  $108 = (($107) + 136|0);
  HEAPF64[$108>>3] = 1.79769313486231570815E+308;
  $109 = HEAP32[$0>>2]|0;
  $110 = (($109) + 128|0);
  HEAPF64[$110>>3] = 1.79769313486231570815E+308;
 }
 $111 = HEAP32[$0>>2]|0;
 $112 = HEAP32[$n>>2]|0;
 $113 = HEAP32[$4>>2]|0;
 (_hatvar($111,$112,$113)|0);
 $114 = HEAP32[$0>>2]|0;
 $115 = (($114) + 228|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)!=(0);
 if ($117) {
  STACKTOP = sp;return;
 }
 $118 = HEAP32[$6>>2]|0;
 $119 = $118 & 2;
 $120 = ($119|0)!=(0);
 do {
  if (!($120)) {
   $121 = HEAP32[$0>>2]|0;
   $122 = (($121) + 112|0);
   $123 = +HEAPF64[$122>>3];
   $124 = $123 > 0.0;
   $125 = HEAP32[$0>>2]|0;
   if ($124) {
    $126 = HEAP32[$4>>2]|0;
    _compute_r_squared($125,$126,$ifc);
    break;
   }
   $127 = (($125) + 112|0);
   $128 = +HEAPF64[$127>>3];
   $129 = $128 == 0.0;
   if ($129) {
    $130 = HEAP32[$0>>2]|0;
    $131 = HEAP32[$4>>2]|0;
    _uncentered_r_squared($130,$131);
   }
  }
 } while(0);
 $132 = +HEAPF64[$s2>>3];
 $133 = $132 <= 0.0;
 do {
  if ($133) {
   label = 30;
  } else {
   $134 = HEAP32[$0>>2]|0;
   $135 = (($134) + 56|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($136|0)==(0);
   if ($137) {
    label = 30;
   } else {
    $138 = HEAP32[$0>>2]|0;
    $139 = (($138) + 52|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(0);
    if ($141) {
     label = 30;
    } else {
     $144 = HEAP32[$0>>2]|0;
     $145 = (($144) + 128|0);
     $146 = +HEAPF64[$145>>3];
     $147 = $146 == 1.0;
     if ($147) {
      $148 = HEAP32[$0>>2]|0;
      $149 = (($148) + 144|0);
      HEAPF64[$149>>3] = 1.79769313486231570815E+308;
      break;
     }
     $150 = +HEAPF64[$rss>>3];
     $151 = +HEAPF64[$zz>>3];
     $152 = HEAP32[$ifc>>2]|0;
     $153 = (+($152|0));
     $154 = $151 * $153;
     $155 = $150 - $154;
     $156 = +HEAPF64[$s2>>3];
     $157 = HEAP32[$0>>2]|0;
     $158 = (($157) + 52|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (+($159|0));
     $161 = $156 * $160;
     $162 = $155 / $161;
     $163 = HEAP32[$0>>2]|0;
     $164 = (($163) + 144|0);
     HEAPF64[$164>>3] = $162;
     $165 = HEAP32[$0>>2]|0;
     $166 = (($165) + 144|0);
     $167 = +HEAPF64[$166>>3];
     $168 = $167 < 0.0;
     if ($168) {
      $169 = HEAP32[$0>>2]|0;
      $170 = (($169) + 144|0);
      HEAPF64[$170>>3] = 0.0;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 30) {
  $142 = HEAP32[$0>>2]|0;
  $143 = (($142) + 144|0);
  HEAPF64[$143>>3] = 1.79769313486231570815E+308;
 }
 $171 = HEAP32[$0>>2]|0;
 $172 = (($171) + 48|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = $173<<3;
 $175 = (_malloc($174)|0);
 HEAP32[$diag>>2] = $175;
 $176 = HEAP32[$diag>>2]|0;
 $177 = ($176|0)==(0|0);
 $178 = HEAP32[$0>>2]|0;
 if ($177) {
  $179 = (($178) + 228|0);
  HEAP32[$179>>2] = 12;
  STACKTOP = sp;return;
 }
 $180 = (($178) + 92|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = HEAP32[$1>>2]|0;
 $183 = HEAP32[$diag>>2]|0;
 $184 = HEAP32[$0>>2]|0;
 $185 = (($184) + 48|0);
 $186 = HEAP32[$185>>2]|0;
 _diaginv($181,$182,$183,$186);
 HEAP32[$i>>2] = 0;
 while(1) {
  $187 = HEAP32[$i>>2]|0;
  $188 = HEAP32[$0>>2]|0;
  $189 = (($188) + 48|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = ($187|0)<($190|0);
  if (!($191)) {
   break;
  }
  $192 = HEAP32[$i>>2]|0;
  $193 = HEAP32[$diag>>2]|0;
  $194 = (($193) + ($192<<3)|0);
  $195 = +HEAPF64[$194>>3];
  $196 = $195 >= 0.0;
  if ($196) {
   $197 = HEAP32[$0>>2]|0;
   $198 = (($197) + 120|0);
   $199 = +HEAPF64[$198>>3];
   $200 = HEAP32[$i>>2]|0;
   $201 = HEAP32[$diag>>2]|0;
   $202 = (($201) + ($200<<3)|0);
   $203 = +HEAPF64[$202>>3];
   $204 = (+Math_sqrt((+$203)));
   $205 = $199 * $204;
   $206 = HEAP32[$i>>2]|0;
   $207 = HEAP32[$0>>2]|0;
   $208 = (($207) + 80|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = (($209) + ($206<<3)|0);
   HEAPF64[$210>>3] = $205;
  } else {
   $211 = HEAP32[$i>>2]|0;
   $212 = HEAP32[$0>>2]|0;
   $213 = (($212) + 80|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = (($214) + ($211<<3)|0);
   HEAPF64[$215>>3] = 0.0;
  }
  $216 = HEAP32[$i>>2]|0;
  $217 = (($216) + 1)|0;
  HEAP32[$i>>2] = $217;
 }
 $218 = HEAP32[$diag>>2]|0;
 _free($218);
 STACKTOP = sp;return;
}
function _cholbeta($pmod,$xpy,$rss) {
 $pmod = $pmod|0;
 $xpy = $xpy|0;
 $rss = $rss|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0;
 var $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $coeff = 0, $d = 0, $d1 = 0, $d2 = 0, $e = 0, $i = 0, $j = 0, $jm1 = 0, $k = 0;
 var $kk = 0, $l = 0, $nc = 0, $test = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $xpx = 0, $xx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer6 = sp + 48|0;
 $0 = sp + 108|0;
 $1 = sp + 104|0;
 $2 = sp + 100|0;
 $3 = sp + 96|0;
 $i = sp + 92|0;
 $j = sp + 88|0;
 $k = sp + 84|0;
 $kk = sp + 80|0;
 $l = sp + 76|0;
 $jm1 = sp + 72|0;
 $e = sp + 40|0;
 $d = sp + 32|0;
 $d1 = sp + 24|0;
 $d2 = sp + 16|0;
 $test = sp + 8|0;
 $xx = sp;
 $xpx = sp + 68|0;
 $coeff = sp + 64|0;
 $nc = sp + 60|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $xpy;
 HEAP32[$3>>2] = $rss;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 92|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$xpx>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$coeff>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$nc>>2] = $12;
 $13 = HEAP32[$xpx>>2]|0;
 $14 = +HEAPF64[$13>>3];
 $15 = $14 <= 0.0;
 if ($15) {
  $16 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer6>>2] = 2808;
  $vararg_ptr1 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 1644;
  (_fprintf(($16|0),(2784|0),($vararg_buffer6|0))|0);
  HEAP32[$0>>2] = 35;
  $250 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($250|0);
 }
 $17 = HEAP32[$xpx>>2]|0;
 $18 = +HEAPF64[$17>>3];
 $19 = (+Math_sqrt((+$18)));
 $20 = 1.0 / $19;
 HEAPF64[$e>>3] = $20;
 $21 = +HEAPF64[$e>>3];
 $22 = HEAP32[$xpx>>2]|0;
 HEAPF64[$22>>3] = $21;
 $23 = +HEAPF64[$e>>3];
 $24 = HEAP32[$2>>2]|0;
 $25 = +HEAPF64[$24>>3];
 $26 = $25 * $23;
 HEAPF64[$24>>3] = $26;
 HEAP32[$i>>2] = 1;
 while(1) {
  $27 = HEAP32[$i>>2]|0;
  $28 = HEAP32[$nc>>2]|0;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = +HEAPF64[$e>>3];
  $31 = HEAP32[$i>>2]|0;
  $32 = HEAP32[$xpx>>2]|0;
  $33 = (($32) + ($31<<3)|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $34 * $30;
  HEAPF64[$33>>3] = $35;
  $36 = HEAP32[$i>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$i>>2] = $37;
 }
 $38 = HEAP32[$nc>>2]|0;
 HEAP32[$kk>>2] = $38;
 HEAP32[$j>>2] = 1;
 while(1) {
  $39 = HEAP32[$j>>2]|0;
  $40 = HEAP32[$nc>>2]|0;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  HEAPF64[$d1>>3] = 0.0;
  HEAPF64[$d>>3] = 0.0;
  $42 = HEAP32[$j>>2]|0;
  HEAP32[$jm1>>2] = $42;
  HEAP32[$k>>2] = $42;
  HEAP32[$l>>2] = 1;
  while(1) {
   $43 = HEAP32[$l>>2]|0;
   $44 = HEAP32[$jm1>>2]|0;
   $45 = ($43|0)<=($44|0);
   if (!($45)) {
    break;
   }
   $46 = HEAP32[$k>>2]|0;
   $47 = HEAP32[$xpx>>2]|0;
   $48 = (($47) + ($46<<3)|0);
   $49 = +HEAPF64[$48>>3];
   HEAPF64[$xx>>3] = $49;
   $50 = +HEAPF64[$xx>>3];
   $51 = HEAP32[$l>>2]|0;
   $52 = (($51) - 1)|0;
   $53 = HEAP32[$2>>2]|0;
   $54 = (($53) + ($52<<3)|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $50 * $55;
   $57 = +HEAPF64[$d1>>3];
   $58 = $57 + $56;
   HEAPF64[$d1>>3] = $58;
   $59 = +HEAPF64[$xx>>3];
   $60 = +HEAPF64[$xx>>3];
   $61 = $59 * $60;
   $62 = +HEAPF64[$d>>3];
   $63 = $62 + $61;
   HEAPF64[$d>>3] = $63;
   $64 = HEAP32[$nc>>2]|0;
   $65 = HEAP32[$l>>2]|0;
   $66 = (($64) - ($65))|0;
   $67 = HEAP32[$k>>2]|0;
   $68 = (($67) + ($66))|0;
   HEAP32[$k>>2] = $68;
   $69 = HEAP32[$l>>2]|0;
   $70 = (($69) + 1)|0;
   HEAP32[$l>>2] = $70;
  }
  $71 = HEAP32[$kk>>2]|0;
  $72 = HEAP32[$xpx>>2]|0;
  $73 = (($72) + ($71<<3)|0);
  $74 = +HEAPF64[$73>>3];
  $75 = +HEAPF64[$d>>3];
  $76 = $74 - $75;
  HEAPF64[$d2>>3] = $76;
  $77 = +HEAPF64[$d2>>3];
  $78 = HEAP32[$kk>>2]|0;
  $79 = HEAP32[$xpx>>2]|0;
  $80 = (($79) + ($78<<3)|0);
  $81 = +HEAPF64[$80>>3];
  $82 = $77 / $81;
  HEAPF64[$test>>3] = $82;
  $83 = +HEAPF64[$test>>3];
  $84 = $83 < 8.00000000000000049825E-9;
  if ($84) {
   label = 12;
   break;
  }
  $89 = +HEAPF64[$test>>3];
  $90 = $89 < 1.00000000000000002092E-8;
  if ($90) {
   $91 = HEAP32[$1>>2]|0;
   (_gretl_model_set_int($91,2864,1)|0);
  }
  $92 = +HEAPF64[$d2>>3];
  $93 = (+Math_sqrt((+$92)));
  $94 = 1.0 / $93;
  HEAPF64[$e>>3] = $94;
  $95 = +HEAPF64[$e>>3];
  $96 = HEAP32[$kk>>2]|0;
  $97 = HEAP32[$xpx>>2]|0;
  $98 = (($97) + ($96<<3)|0);
  HEAPF64[$98>>3] = $95;
  $99 = HEAP32[$j>>2]|0;
  $100 = HEAP32[$2>>2]|0;
  $101 = (($100) + ($99<<3)|0);
  $102 = +HEAPF64[$101>>3];
  $103 = +HEAPF64[$d1>>3];
  $104 = $102 - $103;
  $105 = +HEAPF64[$e>>3];
  $106 = $104 * $105;
  $107 = HEAP32[$j>>2]|0;
  $108 = HEAP32[$2>>2]|0;
  $109 = (($108) + ($107<<3)|0);
  HEAPF64[$109>>3] = $106;
  $110 = HEAP32[$j>>2]|0;
  $111 = (($110) + 1)|0;
  HEAP32[$i>>2] = $111;
  while(1) {
   $112 = HEAP32[$i>>2]|0;
   $113 = HEAP32[$nc>>2]|0;
   $114 = ($112|0)<($113|0);
   $115 = HEAP32[$kk>>2]|0;
   $116 = (($115) + 1)|0;
   HEAP32[$kk>>2] = $116;
   if (!($114)) {
    break;
   }
   HEAPF64[$d>>3] = 0.0;
   $117 = HEAP32[$j>>2]|0;
   HEAP32[$k>>2] = $117;
   HEAP32[$l>>2] = 1;
   while(1) {
    $118 = HEAP32[$l>>2]|0;
    $119 = HEAP32[$jm1>>2]|0;
    $120 = ($118|0)<=($119|0);
    if (!($120)) {
     break;
    }
    $121 = HEAP32[$k>>2]|0;
    $122 = HEAP32[$xpx>>2]|0;
    $123 = (($122) + ($121<<3)|0);
    $124 = +HEAPF64[$123>>3];
    $125 = HEAP32[$k>>2]|0;
    $126 = HEAP32[$j>>2]|0;
    $127 = (($125) - ($126))|0;
    $128 = HEAP32[$i>>2]|0;
    $129 = (($127) + ($128))|0;
    $130 = HEAP32[$xpx>>2]|0;
    $131 = (($130) + ($129<<3)|0);
    $132 = +HEAPF64[$131>>3];
    $133 = $124 * $132;
    $134 = +HEAPF64[$d>>3];
    $135 = $134 + $133;
    HEAPF64[$d>>3] = $135;
    $136 = HEAP32[$nc>>2]|0;
    $137 = HEAP32[$l>>2]|0;
    $138 = (($136) - ($137))|0;
    $139 = HEAP32[$k>>2]|0;
    $140 = (($139) + ($138))|0;
    HEAP32[$k>>2] = $140;
    $141 = HEAP32[$l>>2]|0;
    $142 = (($141) + 1)|0;
    HEAP32[$l>>2] = $142;
   }
   $143 = HEAP32[$kk>>2]|0;
   $144 = HEAP32[$xpx>>2]|0;
   $145 = (($144) + ($143<<3)|0);
   $146 = +HEAPF64[$145>>3];
   $147 = +HEAPF64[$d>>3];
   $148 = $146 - $147;
   $149 = +HEAPF64[$e>>3];
   $150 = $148 * $149;
   $151 = HEAP32[$kk>>2]|0;
   $152 = HEAP32[$xpx>>2]|0;
   $153 = (($152) + ($151<<3)|0);
   HEAPF64[$153>>3] = $150;
   $154 = HEAP32[$i>>2]|0;
   $155 = (($154) + 1)|0;
   HEAP32[$i>>2] = $155;
  }
  $156 = HEAP32[$j>>2]|0;
  $157 = (($156) + 1)|0;
  HEAP32[$j>>2] = $157;
 }
 if ((label|0) == 12) {
  $85 = HEAP32[_stderr>>2]|0;
  $86 = HEAP32[$j>>2]|0;
  $87 = +HEAPF64[$test>>3];
  HEAP32[$vararg_buffer6>>2] = $86;
  $vararg_ptr5 = (($vararg_buffer6) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$87;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_fprintf(($85|0),(2832|0),($vararg_buffer6|0))|0);
  $88 = HEAP32[$3>>2]|0;
  HEAPF64[$88>>3] = -1.0;
  HEAP32[$0>>2] = 3;
  $250 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($250|0);
 }
 $158 = HEAP32[$kk>>2]|0;
 $159 = (($158) + -1)|0;
 HEAP32[$kk>>2] = $159;
 HEAPF64[$d>>3] = 0.0;
 HEAP32[$j>>2] = 0;
 while(1) {
  $160 = HEAP32[$j>>2]|0;
  $161 = HEAP32[$nc>>2]|0;
  $162 = ($160|0)<($161|0);
  if (!($162)) {
   break;
  }
  $163 = HEAP32[$j>>2]|0;
  $164 = HEAP32[$2>>2]|0;
  $165 = (($164) + ($163<<3)|0);
  $166 = +HEAPF64[$165>>3];
  $167 = HEAP32[$j>>2]|0;
  $168 = HEAP32[$2>>2]|0;
  $169 = (($168) + ($167<<3)|0);
  $170 = +HEAPF64[$169>>3];
  $171 = $166 * $170;
  $172 = +HEAPF64[$d>>3];
  $173 = $172 + $171;
  HEAPF64[$d>>3] = $173;
  $174 = HEAP32[$j>>2]|0;
  $175 = (($174) + 1)|0;
  HEAP32[$j>>2] = $175;
 }
 $176 = +HEAPF64[$d>>3];
 $177 = HEAP32[$3>>2]|0;
 HEAPF64[$177>>3] = $176;
 $178 = HEAP32[$nc>>2]|0;
 $179 = (($178) - 1)|0;
 $180 = HEAP32[$2>>2]|0;
 $181 = (($180) + ($179<<3)|0);
 $182 = +HEAPF64[$181>>3];
 $183 = HEAP32[$kk>>2]|0;
 $184 = HEAP32[$xpx>>2]|0;
 $185 = (($184) + ($183<<3)|0);
 $186 = +HEAPF64[$185>>3];
 $187 = $182 * $186;
 $188 = HEAP32[$nc>>2]|0;
 $189 = (($188) - 1)|0;
 $190 = HEAP32[$coeff>>2]|0;
 $191 = (($190) + ($189<<3)|0);
 HEAPF64[$191>>3] = $187;
 $192 = HEAP32[$nc>>2]|0;
 $193 = (($192) - 2)|0;
 HEAP32[$j>>2] = $193;
 while(1) {
  $194 = HEAP32[$j>>2]|0;
  $195 = ($194|0)>=(0);
  if (!($195)) {
   break;
  }
  $196 = HEAP32[$j>>2]|0;
  $197 = HEAP32[$2>>2]|0;
  $198 = (($197) + ($196<<3)|0);
  $199 = +HEAPF64[$198>>3];
  HEAPF64[$d>>3] = $199;
  $200 = HEAP32[$nc>>2]|0;
  $201 = (($200) - 1)|0;
  HEAP32[$i>>2] = $201;
  while(1) {
   $202 = HEAP32[$i>>2]|0;
   $203 = HEAP32[$j>>2]|0;
   $204 = ($202|0)>($203|0);
   if (!($204)) {
    break;
   }
   $205 = HEAP32[$i>>2]|0;
   $206 = HEAP32[$coeff>>2]|0;
   $207 = (($206) + ($205<<3)|0);
   $208 = +HEAPF64[$207>>3];
   $209 = HEAP32[$kk>>2]|0;
   $210 = (($209) + -1)|0;
   HEAP32[$kk>>2] = $210;
   $211 = HEAP32[$xpx>>2]|0;
   $212 = (($211) + ($210<<3)|0);
   $213 = +HEAPF64[$212>>3];
   $214 = $208 * $213;
   $215 = +HEAPF64[$d>>3];
   $216 = $215 - $214;
   HEAPF64[$d>>3] = $216;
   $217 = HEAP32[$i>>2]|0;
   $218 = (($217) + -1)|0;
   HEAP32[$i>>2] = $218;
  }
  $219 = +HEAPF64[$d>>3];
  $220 = HEAP32[$kk>>2]|0;
  $221 = (($220) + -1)|0;
  HEAP32[$kk>>2] = $221;
  $222 = HEAP32[$xpx>>2]|0;
  $223 = (($222) + ($221<<3)|0);
  $224 = +HEAPF64[$223>>3];
  $225 = $219 * $224;
  $226 = HEAP32[$j>>2]|0;
  $227 = HEAP32[$coeff>>2]|0;
  $228 = (($227) + ($226<<3)|0);
  HEAPF64[$228>>3] = $225;
  $229 = HEAP32[$j>>2]|0;
  $230 = (($229) + -1)|0;
  HEAP32[$j>>2] = $230;
 }
 HEAP32[$j>>2] = 0;
 while(1) {
  $231 = HEAP32[$j>>2]|0;
  $232 = HEAP32[$nc>>2]|0;
  $233 = ($231|0)<($232|0);
  if (!($233)) {
   label = 36;
   break;
  }
  $234 = HEAP32[$j>>2]|0;
  $235 = HEAP32[$coeff>>2]|0;
  $236 = (($235) + ($234<<3)|0);
  $237 = +HEAPF64[$236>>3];
  $238 = (___DOUBLE_BITS1459($237)|0);
  $239 = tempRet0;
  $240 = $239 & 2147483647;
  $241 = ($240>>>0)>(2146435072);
  $242 = ($240|0)==(2146435072);
  $243 = ($238>>>0)>(0);
  $244 = $242 & $243;
  $245 = $241 | $244;
  if ($245) {
   label = 34;
   break;
  }
  $248 = HEAP32[$j>>2]|0;
  $249 = (($248) + 1)|0;
  HEAP32[$j>>2] = $249;
 }
 if ((label|0) == 34) {
  $246 = HEAP32[_stderr>>2]|0;
  $247 = HEAP32[$j>>2]|0;
  HEAP32[$vararg_buffer6>>2] = 2808;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 1722;
  $vararg_ptr10 = (($vararg_buffer6) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $247;
  (_fprintf(($246|0),(2880|0),($vararg_buffer6|0))|0);
  HEAP32[$0>>2] = 35;
  $250 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($250|0);
 }
 else if ((label|0) == 36) {
  HEAP32[$0>>2] = 0;
  $250 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($250|0);
 }
 return 0|0;
}
function _make_ess($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $i = 0, $l0 = 0, $nwt = 0, $resid = 0, $t = 0, $yhat = 0, $yno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $i = sp + 32|0;
 $t = sp + 28|0;
 $yno = sp + 24|0;
 $l0 = sp + 20|0;
 $nwt = sp + 16|0;
 $yhat = sp + 8|0;
 $resid = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$yno>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$l0>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 68|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$nwt>>2] = $13;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 104|0);
 HEAPF64[$15>>3] = 0.0;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$t>>2] = $18;
 while(1) {
  $19 = HEAP32[$t>>2]|0;
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)<=($22|0);
  if (!($23)) {
   break;
  }
  $24 = HEAP32[$nwt>>2]|0;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = HEAP32[$t>>2]|0;
   $27 = HEAP32[$nwt>>2]|0;
   $28 = HEAP32[$1>>2]|0;
   $29 = (($28) + 64|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($26<<3)|0);
   $34 = +HEAPF64[$33>>3];
   $35 = $34 == 0.0;
   if (!($35)) {
    label = 5;
   }
  } else {
   label = 5;
  }
  do {
   if ((label|0) == 5) {
    label = 0;
    $36 = HEAP32[$0>>2]|0;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)!=(0|0);
    if ($39) {
     $40 = HEAP32[$t>>2]|0;
     $41 = HEAP32[$0>>2]|0;
     $42 = (($41) + 32|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (($43) + ($40)|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45 << 24 >> 24;
     $47 = ($46|0)==(49);
     if ($47) {
      break;
     }
    }
    HEAPF64[$yhat>>3] = 0.0;
    HEAP32[$i>>2] = 2;
    while(1) {
     $48 = HEAP32[$i>>2]|0;
     $49 = HEAP32[$l0>>2]|0;
     $50 = ($48|0)<=($49|0);
     if (!($50)) {
      break;
     }
     $51 = HEAP32[$i>>2]|0;
     $52 = (($51) - 2)|0;
     $53 = HEAP32[$0>>2]|0;
     $54 = (($53) + 76|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) + ($52<<3)|0);
     $57 = +HEAPF64[$56>>3];
     $58 = HEAP32[$t>>2]|0;
     $59 = HEAP32[$i>>2]|0;
     $60 = HEAP32[$0>>2]|0;
     $61 = (($60) + 60|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($62) + ($59<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = HEAP32[$1>>2]|0;
     $66 = (($65) + 64|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (($67) + ($64<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($69) + ($58<<3)|0);
     $71 = +HEAPF64[$70>>3];
     $72 = $57 * $71;
     $73 = +HEAPF64[$yhat>>3];
     $74 = $73 + $72;
     HEAPF64[$yhat>>3] = $74;
     $75 = HEAP32[$i>>2]|0;
     $76 = (($75) + 1)|0;
     HEAP32[$i>>2] = $76;
    }
    $77 = HEAP32[$t>>2]|0;
    $78 = HEAP32[$yno>>2]|0;
    $79 = HEAP32[$1>>2]|0;
    $80 = (($79) + 64|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81) + ($78<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (($83) + ($77<<3)|0);
    $85 = +HEAPF64[$84>>3];
    $86 = +HEAPF64[$yhat>>3];
    $87 = $85 - $86;
    HEAPF64[$resid>>3] = $87;
    $88 = HEAP32[$nwt>>2]|0;
    $89 = ($88|0)!=(0);
    if ($89) {
     $90 = HEAP32[$t>>2]|0;
     $91 = HEAP32[$nwt>>2]|0;
     $92 = HEAP32[$1>>2]|0;
     $93 = (($92) + 64|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = (($94) + ($91<<2)|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + ($90<<3)|0);
     $98 = +HEAPF64[$97>>3];
     $99 = (+Math_sqrt((+$98)));
     $100 = +HEAPF64[$resid>>3];
     $101 = $100 * $99;
     HEAPF64[$resid>>3] = $101;
    }
    $102 = +HEAPF64[$resid>>3];
    $103 = +HEAPF64[$resid>>3];
    $104 = $102 * $103;
    $105 = HEAP32[$0>>2]|0;
    $106 = (($105) + 104|0);
    $107 = +HEAPF64[$106>>3];
    $108 = $107 + $104;
    HEAPF64[$106>>3] = $108;
   }
  } while(0);
  $109 = HEAP32[$t>>2]|0;
  $110 = (($109) + 1)|0;
  HEAP32[$t>>2] = $110;
 }
 STACKTOP = sp;return 0;
}
function _hatvar($pmod,$n,$dset) {
 $pmod = $pmod|0;
 $n = $n|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0;
 var $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $t = 0, $x = 0, $xno = 0, $yno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $yno = sp + 20|0;
 $xno = sp + 16|0;
 $i = sp + 12|0;
 $t = sp + 8|0;
 $x = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $n;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$yno>>2] = $7;
 HEAP32[$t>>2] = 0;
 while(1) {
  $8 = HEAP32[$t>>2]|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$t>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 84|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<3)|0);
  HEAPF64[$15>>3] = 1.79769313486231570815E+308;
  $16 = HEAP32[$t>>2]|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + 88|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16<<3)|0);
  HEAPF64[$20>>3] = 1.79769313486231570815E+308;
  $21 = HEAP32[$t>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$t>>2] = $22;
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$t>>2] = $25;
 while(1) {
  $26 = HEAP32[$t>>2]|0;
  $27 = HEAP32[$0>>2]|0;
  $28 = (($27) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)<=($29|0);
  if (!($30)) {
   break;
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = HEAP32[$t>>2]|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = (($36) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($35)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 << 24 >> 24;
   $42 = ($41|0)==(49);
   if (!($42)) {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $43 = HEAP32[$t>>2]|0;
   $44 = HEAP32[$0>>2]|0;
   $45 = (($44) + 88|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($43<<3)|0);
   HEAPF64[$47>>3] = 0.0;
   HEAP32[$i>>2] = 0;
   while(1) {
    $48 = HEAP32[$i>>2]|0;
    $49 = HEAP32[$0>>2]|0;
    $50 = (($49) + 48|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($48|0)<($51|0);
    if (!($52)) {
     break;
    }
    $53 = HEAP32[$i>>2]|0;
    $54 = (($53) + 2)|0;
    $55 = HEAP32[$0>>2]|0;
    $56 = (($55) + 60|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) + ($54<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    HEAP32[$xno>>2] = $59;
    $60 = HEAP32[$t>>2]|0;
    $61 = HEAP32[$xno>>2]|0;
    $62 = HEAP32[$2>>2]|0;
    $63 = (($62) + 64|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + ($61<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + ($60<<3)|0);
    $68 = +HEAPF64[$67>>3];
    HEAPF64[$x>>3] = $68;
    $69 = HEAP32[$0>>2]|0;
    $70 = (($69) + 68|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)!=(0);
    if ($72) {
     $73 = HEAP32[$t>>2]|0;
     $74 = HEAP32[$0>>2]|0;
     $75 = (($74) + 68|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = HEAP32[$2>>2]|0;
     $78 = (($77) + 64|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + ($76<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($81) + ($73<<3)|0);
     $83 = +HEAPF64[$82>>3];
     $84 = (+Math_sqrt((+$83)));
     $85 = +HEAPF64[$x>>3];
     $86 = $85 * $84;
     HEAPF64[$x>>3] = $86;
    }
    $87 = HEAP32[$i>>2]|0;
    $88 = HEAP32[$0>>2]|0;
    $89 = (($88) + 76|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + ($87<<3)|0);
    $92 = +HEAPF64[$91>>3];
    $93 = +HEAPF64[$x>>3];
    $94 = $92 * $93;
    $95 = HEAP32[$t>>2]|0;
    $96 = HEAP32[$0>>2]|0;
    $97 = (($96) + 88|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) + ($95<<3)|0);
    $100 = +HEAPF64[$99>>3];
    $101 = $100 + $94;
    HEAPF64[$99>>3] = $101;
    $102 = HEAP32[$i>>2]|0;
    $103 = (($102) + 1)|0;
    HEAP32[$i>>2] = $103;
   }
   $104 = HEAP32[$t>>2]|0;
   $105 = HEAP32[$yno>>2]|0;
   $106 = HEAP32[$2>>2]|0;
   $107 = (($106) + 64|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + ($105<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + ($104<<3)|0);
   $112 = +HEAPF64[$111>>3];
   HEAPF64[$x>>3] = $112;
   $113 = HEAP32[$0>>2]|0;
   $114 = (($113) + 68|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ($115|0)!=(0);
   if ($116) {
    $117 = HEAP32[$t>>2]|0;
    $118 = HEAP32[$0>>2]|0;
    $119 = (($118) + 68|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = HEAP32[$2>>2]|0;
    $122 = (($121) + 64|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + ($120<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (($125) + ($117<<3)|0);
    $127 = +HEAPF64[$126>>3];
    $128 = (+Math_sqrt((+$127)));
    $129 = +HEAPF64[$x>>3];
    $130 = $129 * $128;
    HEAPF64[$x>>3] = $130;
   }
   $131 = +HEAPF64[$x>>3];
   $132 = HEAP32[$t>>2]|0;
   $133 = HEAP32[$0>>2]|0;
   $134 = (($133) + 88|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($135) + ($132<<3)|0);
   $137 = +HEAPF64[$136>>3];
   $138 = $131 - $137;
   $139 = HEAP32[$t>>2]|0;
   $140 = HEAP32[$0>>2]|0;
   $141 = (($140) + 84|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + ($139<<3)|0);
   HEAPF64[$143>>3] = $138;
  }
  $144 = HEAP32[$t>>2]|0;
  $145 = (($144) + 1)|0;
  HEAP32[$t>>2] = $145;
 }
 STACKTOP = sp;return 0;
}
function _compute_r_squared($pmod,$dset,$ifc) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $ifc = $ifc|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0;
 var $den = 0, $t = 0, $yno = 0, $yt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $yno = sp + 20|0;
 $yt = sp + 8|0;
 $den = sp;
 $t = sp + 16|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $ifc;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$yno>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 104|0);
 $10 = +HEAPF64[$9>>3];
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 112|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $10 / $13;
 $15 = 1.0 - $14;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 128|0);
 HEAPF64[$17>>3] = $15;
 $18 = HEAP32[$2>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = HEAP32[$0>>2]|0;
  $22 = HEAP32[$1>>2]|0;
  $23 = (_check_for_effective_const($21,$22)|0);
  $24 = HEAP32[$2>>2]|0;
  HEAP32[$24>>2] = $23;
 }
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 56|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)>(0);
 do {
  if ($28) {
   HEAPF64[$den>>3] = 0.0;
   $29 = HEAP32[$2>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0);
   $32 = HEAP32[$0>>2]|0;
   if ($31) {
    $33 = (($32) + 112|0);
    $34 = +HEAPF64[$33>>3];
    $35 = HEAP32[$0>>2]|0;
    $36 = (($35) + 56|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (+($37|0));
    $39 = $34 * $38;
    HEAPF64[$den>>3] = $39;
    $40 = HEAP32[$0>>2]|0;
    $41 = (($40) + 104|0);
    $42 = +HEAPF64[$41>>3];
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + 24|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - 1)|0;
    $47 = (+($46|0));
    $48 = $42 * $47;
    $49 = +HEAPF64[$den>>3];
    $50 = $48 / $49;
    $51 = 1.0 - $50;
    $52 = HEAP32[$0>>2]|0;
    $53 = (($52) + 136|0);
    HEAPF64[$53>>3] = $51;
    break;
   }
   $54 = (($32) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP32[$t>>2] = $55;
   while(1) {
    $56 = HEAP32[$t>>2]|0;
    $57 = HEAP32[$0>>2]|0;
    $58 = (($57) + 20|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($56|0)<=($59|0);
    if (!($60)) {
     break;
    }
    $61 = HEAP32[$t>>2]|0;
    $62 = HEAP32[$0>>2]|0;
    $63 = (($62) + 88|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + ($61<<3)|0);
    $66 = +HEAPF64[$65>>3];
    $67 = $66 == 1.79769313486231570815E+308;
    if (!($67)) {
     $68 = HEAP32[$t>>2]|0;
     $69 = HEAP32[$yno>>2]|0;
     $70 = HEAP32[$1>>2]|0;
     $71 = (($70) + 64|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (($72) + ($69<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + ($68<<3)|0);
     $76 = +HEAPF64[$75>>3];
     HEAPF64[$yt>>3] = $76;
     $77 = +HEAPF64[$yt>>3];
     $78 = +HEAPF64[$yt>>3];
     $79 = $77 * $78;
     $80 = +HEAPF64[$den>>3];
     $81 = $80 + $79;
     HEAPF64[$den>>3] = $81;
    }
    $82 = HEAP32[$t>>2]|0;
    $83 = (($82) + 1)|0;
    HEAP32[$t>>2] = $83;
   }
   $84 = HEAP32[$0>>2]|0;
   $85 = HEAP32[$0>>2]|0;
   $86 = (($85) + 128|0);
   $87 = +HEAPF64[$86>>3];
   (_gretl_model_set_double($84,2768,$87)|0);
   $88 = HEAP32[$0>>2]|0;
   $89 = (($88) + 104|0);
   $90 = +HEAPF64[$89>>3];
   $91 = +HEAPF64[$den>>3];
   $92 = $90 / $91;
   $93 = 1.0 - $92;
   $94 = HEAP32[$0>>2]|0;
   $95 = (($94) + 128|0);
   HEAPF64[$95>>3] = $93;
   $96 = HEAP32[$0>>2]|0;
   $97 = (($96) + 128|0);
   $98 = +HEAPF64[$97>>3];
   $99 = 1.0 - $98;
   $100 = HEAP32[$0>>2]|0;
   $101 = (($100) + 24|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (+($102|0));
   $104 = $103 - 1.0;
   $105 = $99 * $104;
   $106 = HEAP32[$0>>2]|0;
   $107 = (($106) + 56|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (+($108|0));
   $110 = $105 / $109;
   $111 = 1.0 - $110;
   $112 = HEAP32[$0>>2]|0;
   $113 = (($112) + 136|0);
   HEAPF64[$113>>3] = $111;
  }
 } while(0);
 $114 = HEAP32[$0>>2]|0;
 $115 = (($114) + 128|0);
 $116 = +HEAPF64[$115>>3];
 $117 = $116 < 0.0;
 if (!($117)) {
  STACKTOP = sp;return;
 }
 $118 = HEAP32[$0>>2]|0;
 $119 = (($118) + 128|0);
 HEAPF64[$119>>3] = 0.0;
 STACKTOP = sp;return;
}
function _uncentered_r_squared($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tss = 0, $y0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $y0 = sp + 8|0;
 $tss = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (($10) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($4<<3)|0);
 $16 = +HEAPF64[$15>>3];
 HEAPF64[$y0>>3] = $16;
 $17 = +HEAPF64[$y0>>3];
 $18 = $17 > 0.0;
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (+($21|0));
 $23 = +HEAPF64[$y0>>3];
 $24 = $22 * $23;
 $25 = +HEAPF64[$y0>>3];
 $26 = $24 * $25;
 HEAPF64[$tss>>3] = $26;
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + 104|0);
 $29 = +HEAPF64[$28>>3];
 $30 = +HEAPF64[$tss>>3];
 $31 = $29 / $30;
 $32 = 1.0 - $31;
 $33 = HEAP32[$0>>2]|0;
 $34 = (($33) + 128|0);
 HEAPF64[$34>>3] = $32;
 $35 = HEAP32[$0>>2]|0;
 (_gretl_model_set_int($35,2752,1)|0);
 STACKTOP = sp;return;
}
function _diaginv($xpx,$tmp,$diag,$nv) {
 $xpx = $xpx|0;
 $tmp = $tmp|0;
 $diag = $diag|0;
 $nv = $nv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $d = 0, $e = 0, $i = 0, $j = 0, $k = 0, $kk = 0, $l = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $kk = sp + 36|0;
 $l = sp + 32|0;
 $m = sp + 28|0;
 $k = sp + 24|0;
 $i = sp + 20|0;
 $j = sp + 16|0;
 $d = sp + 8|0;
 $e = sp;
 HEAP32[$0>>2] = $xpx;
 HEAP32[$1>>2] = $tmp;
 HEAP32[$2>>2] = $diag;
 HEAP32[$3>>2] = $nv;
 HEAP32[$kk>>2] = 0;
 HEAP32[$l>>2] = 0;
 while(1) {
  $4 = HEAP32[$l>>2]|0;
  $5 = HEAP32[$3>>2]|0;
  $6 = (($5) - 1)|0;
  $7 = ($4|0)<($6|0);
  $8 = HEAP32[$kk>>2]|0;
  $9 = HEAP32[$0>>2]|0;
  $10 = (($9) + ($8<<3)|0);
  $11 = +HEAPF64[$10>>3];
  if (!($7)) {
   break;
  }
  HEAPF64[$d>>3] = $11;
  $12 = +HEAPF64[$d>>3];
  $13 = HEAP32[$l>>2]|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + ($13<<3)|0);
  HEAPF64[$15>>3] = $12;
  $16 = +HEAPF64[$d>>3];
  $17 = +HEAPF64[$d>>3];
  $18 = $16 * $17;
  HEAPF64[$e>>3] = $18;
  HEAP32[$m>>2] = 0;
  $19 = HEAP32[$l>>2]|0;
  $20 = ($19|0)>(0);
  L4: do {
   if ($20) {
    HEAP32[$j>>2] = 1;
    while(1) {
     $21 = HEAP32[$j>>2]|0;
     $22 = HEAP32[$l>>2]|0;
     $23 = ($21|0)<=($22|0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP32[$3>>2]|0;
     $25 = HEAP32[$j>>2]|0;
     $26 = (($24) - ($25))|0;
     $27 = HEAP32[$m>>2]|0;
     $28 = (($27) + ($26))|0;
     HEAP32[$m>>2] = $28;
     $29 = HEAP32[$j>>2]|0;
     $30 = (($29) + 1)|0;
     HEAP32[$j>>2] = $30;
    }
   }
  } while(0);
  $31 = HEAP32[$l>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$i>>2] = $32;
  while(1) {
   $33 = HEAP32[$i>>2]|0;
   $34 = HEAP32[$3>>2]|0;
   $35 = ($33|0)<($34|0);
   if (!($35)) {
    break;
   }
   HEAPF64[$d>>3] = 0.0;
   $36 = HEAP32[$i>>2]|0;
   $37 = HEAP32[$m>>2]|0;
   $38 = (($36) + ($37))|0;
   HEAP32[$k>>2] = $38;
   $39 = HEAP32[$l>>2]|0;
   HEAP32[$j>>2] = $39;
   while(1) {
    $40 = HEAP32[$j>>2]|0;
    $41 = HEAP32[$i>>2]|0;
    $42 = ($40|0)<($41|0);
    if (!($42)) {
     break;
    }
    $43 = HEAP32[$j>>2]|0;
    $44 = HEAP32[$1>>2]|0;
    $45 = (($44) + ($43<<3)|0);
    $46 = +HEAPF64[$45>>3];
    $47 = HEAP32[$k>>2]|0;
    $48 = HEAP32[$0>>2]|0;
    $49 = (($48) + ($47<<3)|0);
    $50 = +HEAPF64[$49>>3];
    $51 = $46 * $50;
    $52 = +HEAPF64[$d>>3];
    $53 = $52 + $51;
    HEAPF64[$d>>3] = $53;
    $54 = HEAP32[$3>>2]|0;
    $55 = HEAP32[$j>>2]|0;
    $56 = (($55) + 1)|0;
    $57 = (($54) - ($56))|0;
    $58 = HEAP32[$k>>2]|0;
    $59 = (($58) + ($57))|0;
    HEAP32[$k>>2] = $59;
    $60 = HEAP32[$j>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[$j>>2] = $61;
   }
   $62 = +HEAPF64[$d>>3];
   $63 = -$62;
   $64 = HEAP32[$k>>2]|0;
   $65 = HEAP32[$0>>2]|0;
   $66 = (($65) + ($64<<3)|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $63 * $67;
   HEAPF64[$d>>3] = $68;
   $69 = +HEAPF64[$d>>3];
   $70 = HEAP32[$i>>2]|0;
   $71 = HEAP32[$1>>2]|0;
   $72 = (($71) + ($70<<3)|0);
   HEAPF64[$72>>3] = $69;
   $73 = +HEAPF64[$d>>3];
   $74 = +HEAPF64[$d>>3];
   $75 = $73 * $74;
   $76 = +HEAPF64[$e>>3];
   $77 = $76 + $75;
   HEAPF64[$e>>3] = $77;
   $78 = HEAP32[$i>>2]|0;
   $79 = (($78) + 1)|0;
   HEAP32[$i>>2] = $79;
  }
  $80 = HEAP32[$3>>2]|0;
  $81 = HEAP32[$l>>2]|0;
  $82 = (($80) - ($81))|0;
  $83 = HEAP32[$kk>>2]|0;
  $84 = (($83) + ($82))|0;
  HEAP32[$kk>>2] = $84;
  $85 = +HEAPF64[$e>>3];
  $86 = HEAP32[$l>>2]|0;
  $87 = HEAP32[$2>>2]|0;
  $88 = (($87) + ($86<<3)|0);
  HEAPF64[$88>>3] = $85;
  $89 = HEAP32[$l>>2]|0;
  $90 = (($89) + 1)|0;
  HEAP32[$l>>2] = $90;
 }
 $91 = HEAP32[$kk>>2]|0;
 $92 = HEAP32[$0>>2]|0;
 $93 = (($92) + ($91<<3)|0);
 $94 = +HEAPF64[$93>>3];
 $95 = $11 * $94;
 $96 = HEAP32[$3>>2]|0;
 $97 = (($96) - 1)|0;
 $98 = HEAP32[$2>>2]|0;
 $99 = (($98) + ($97<<3)|0);
 HEAPF64[$99>>3] = $95;
 STACKTOP = sp;return;
}
function ___FLOAT_BITS1458($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $__u = sp;
 HEAPF32[$0>>2] = $__f;
 $1 = +HEAPF32[$0>>2];
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS1459($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $__u = sp;
 HEAPF64[$0>>3] = $__f;
 $1 = +HEAPF64[$0>>3];
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _modelvar_iszero($pmod,$x) {
 $pmod = $pmod|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $t = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $x;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$t>>2] = $5;
 while(1) {
  $6 = HEAP32[$t>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<=($9|0);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = HEAP32[$t>>2]|0;
   $16 = HEAP32[$1>>2]|0;
   $17 = (($16) + 32|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($15)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)==(49);
   if (!($22)) {
    label = 5;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   label = 0;
   $23 = HEAP32[$t>>2]|0;
   $24 = HEAP32[$2>>2]|0;
   $25 = (($24) + ($23<<3)|0);
   $26 = +HEAPF64[$25>>3];
   $27 = $26 - 0.0;
   $28 = (+Math_abs((+$27)));
   $29 = $28 > 2.22044604925031308085E-16;
   if ($29) {
    label = 6;
    break;
   }
  }
  $30 = HEAP32[$t>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$t>>2] = $31;
 }
 if ((label|0) == 6) {
  HEAP32[$0>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 8) {
  HEAP32[$0>>2] = 1;
  $32 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 return 0|0;
}
function _lagdepvar($list,$dset) {
 $list = $list|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $depvar = 0, $gotlag = 0, $i = 0, $len = 0, $othervar = 0, $p = 0, $ret = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $depvar = sp + 64|0;
 $othervar = sp + 32|0;
 $p = sp + 20|0;
 $i = sp + 16|0;
 $t = sp + 12|0;
 $ret = sp + 8|0;
 $len = sp + 4|0;
 $gotlag = sp;
 HEAP32[$0>>2] = $list;
 HEAP32[$1>>2] = $dset;
 HEAP32[$ret>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 (_strcpy(($depvar|0),($9|0))|0);
 HEAP32[$i>>2] = 2;
 while(1) {
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)<=($12|0);
  if (!($13)) {
   label = 15;
   break;
  }
  $14 = HEAP32[$i>>2]|0;
  $15 = HEAP32[$0>>2]|0;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(-100);
  if ($18) {
   label = 15;
   break;
  }
  $19 = HEAP32[$i>>2]|0;
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$1>>2]|0;
  $24 = (($23) + 68|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  (_strcpy(($othervar|0),($27|0))|0);
  $28 = (_strrchr($othervar,95)|0);
  HEAP32[$p>>2] = $28;
  $29 = HEAP32[$p>>2]|0;
  $30 = ($29|0)!=(0|0);
  if ($30) {
   $31 = HEAP32[$p>>2]|0;
   $32 = (($31) + 1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = (_isdigit($34)|0);
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = (_strlen(($othervar|0))|0);
    $38 = HEAP32[$p>>2]|0;
    $39 = (_strlen(($38|0))|0);
    $40 = (($37) - ($39))|0;
    HEAP32[$len>>2] = $40;
    $41 = HEAP32[$len>>2]|0;
    $42 = (_strncmp($depvar,$othervar,$41)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     HEAP32[$gotlag>>2] = 1;
     $44 = HEAP32[$1>>2]|0;
     $45 = (($44) + 24|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + 1)|0;
     HEAP32[$t>>2] = $47;
     while(1) {
      $48 = HEAP32[$t>>2]|0;
      $49 = HEAP32[$1>>2]|0;
      $50 = (($49) + 28|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($48|0)<=($51|0);
      if (!($52)) {
       break;
      }
      $53 = HEAP32[$t>>2]|0;
      $54 = (($53) - 1)|0;
      $55 = HEAP32[$0>>2]|0;
      $56 = (($55) + 4|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = HEAP32[$1>>2]|0;
      $59 = (($58) + 64|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = (($60) + ($57<<2)|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = (($62) + ($54<<3)|0);
      $64 = +HEAPF64[$63>>3];
      $65 = HEAP32[$t>>2]|0;
      $66 = HEAP32[$i>>2]|0;
      $67 = HEAP32[$0>>2]|0;
      $68 = (($67) + ($66<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = (($70) + 64|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($72) + ($69<<2)|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($74) + ($65<<3)|0);
      $76 = +HEAPF64[$75>>3];
      $77 = $64 != $76;
      if ($77) {
       label = 10;
       break;
      }
      $78 = HEAP32[$t>>2]|0;
      $79 = (($78) + 1)|0;
      HEAP32[$t>>2] = $79;
     }
     if ((label|0) == 10) {
      label = 0;
      HEAP32[$gotlag>>2] = 0;
     }
     $80 = HEAP32[$gotlag>>2]|0;
     $81 = ($80|0)!=(0);
     if ($81) {
      label = 13;
      break;
     }
    }
   }
  }
  $83 = HEAP32[$i>>2]|0;
  $84 = (($83) + 1)|0;
  HEAP32[$i>>2] = $84;
 }
 if ((label|0) == 13) {
  $82 = HEAP32[$i>>2]|0;
  HEAP32[$ret>>2] = $82;
  $85 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($85|0);
 }
 else if ((label|0) == 15) {
  $85 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($85|0);
 }
 return 0|0;
}
function _expx2($x,$sign) {
 $x = +$x;
 $sign = $sign|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $f = 0, $m = 0, $u = 0, $u1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 40|0;
 $1 = sp + 32|0;
 $2 = sp + 48|0;
 $u = sp + 24|0;
 $u1 = sp + 16|0;
 $m = sp + 8|0;
 $f = sp;
 HEAPF64[$1>>3] = $x;
 HEAP32[$2>>2] = $sign;
 $3 = +HEAPF64[$1>>3];
 $4 = (+Math_abs((+$3)));
 HEAPF64[$1>>3] = $4;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)<(0);
 if ($6) {
  $7 = +HEAPF64[$1>>3];
  $8 = -$7;
  HEAPF64[$1>>3] = $8;
 }
 $9 = +HEAPF64[$1>>3];
 $10 = 128.0 * $9;
 $11 = $10 + 0.5;
 $12 = (+Math_floor((+$11)));
 $13 = 0.0078125 * $12;
 HEAPF64[$m>>3] = $13;
 $14 = +HEAPF64[$1>>3];
 $15 = +HEAPF64[$m>>3];
 $16 = $14 - $15;
 HEAPF64[$f>>3] = $16;
 $17 = +HEAPF64[$m>>3];
 $18 = +HEAPF64[$m>>3];
 $19 = $17 * $18;
 HEAPF64[$u>>3] = $19;
 $20 = +HEAPF64[$m>>3];
 $21 = 2.0 * $20;
 $22 = +HEAPF64[$f>>3];
 $23 = $21 * $22;
 $24 = +HEAPF64[$f>>3];
 $25 = +HEAPF64[$f>>3];
 $26 = $24 * $25;
 $27 = $23 + $26;
 HEAPF64[$u1>>3] = $27;
 $28 = HEAP32[$2>>2]|0;
 $29 = ($28|0)<(0);
 if ($29) {
  $30 = +HEAPF64[$u>>3];
  $31 = -$30;
  HEAPF64[$u>>3] = $31;
  $32 = +HEAPF64[$u1>>3];
  $33 = -$32;
  HEAPF64[$u1>>3] = $33;
 }
 $34 = +HEAPF64[$u>>3];
 $35 = +HEAPF64[$u1>>3];
 $36 = $34 + $35;
 $37 = +HEAPF64[2000>>3];
 $38 = $36 > $37;
 if ($38) {
  HEAPF64[$0>>3] = inf;
  $45 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$45);
 } else {
  $39 = +HEAPF64[$u>>3];
  $40 = (+Math_exp((+$39)));
  $41 = +HEAPF64[$u1>>3];
  $42 = (+Math_exp((+$41)));
  $43 = $40 * $42;
  HEAPF64[$u>>3] = $43;
  $44 = +HEAPF64[$u>>3];
  HEAPF64[$0>>3] = $44;
  $45 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$45);
 }
 return +0;
}
function _fdtrc($ia,$ib,$x) {
 $ia = $ia|0;
 $ib = $ib|0;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $a = 0, $b = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 24|0;
 $a = sp + 16|0;
 $b = sp + 8|0;
 $w = sp;
 HEAP32[$1>>2] = $ia;
 HEAP32[$2>>2] = $ib;
 HEAPF64[$3>>3] = $x;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)<(1);
 if (!($5)) {
  $6 = HEAP32[$2>>2]|0;
  $7 = ($6|0)<(1);
  if (!($7)) {
   $8 = +HEAPF64[$3>>3];
   $9 = $8 < 0.0;
   if (!($9)) {
    $10 = HEAP32[$1>>2]|0;
    $11 = (+($10|0));
    HEAPF64[$a>>3] = $11;
    $12 = HEAP32[$2>>2]|0;
    $13 = (+($12|0));
    HEAPF64[$b>>3] = $13;
    $14 = +HEAPF64[$b>>3];
    $15 = +HEAPF64[$b>>3];
    $16 = +HEAPF64[$a>>3];
    $17 = +HEAPF64[$3>>3];
    $18 = $16 * $17;
    $19 = $15 + $18;
    $20 = $14 / $19;
    HEAPF64[$w>>3] = $20;
    $21 = +HEAPF64[$b>>3];
    $22 = 0.5 * $21;
    $23 = +HEAPF64[$a>>3];
    $24 = 0.5 * $23;
    $25 = +HEAPF64[$w>>3];
    $26 = (+_incbet($22,$24,$25));
    HEAPF64[$0>>3] = $26;
    $27 = +HEAPF64[$0>>3];
    STACKTOP = sp;return (+$27);
   }
  }
 }
 (_mtherr(3144,1)|0);
 HEAPF64[$0>>3] = 0.0;
 $27 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$27);
}
function _forecast_matrix_cleanup() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[3152>>2]|0;
  _gretl_matrix_free($2);
  HEAP32[3152>>2] = 0;
 }
 $3 = HEAP32[3160>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[3160>>2]|0;
 _gretl_matrix_free($5);
 HEAP32[3160>>2] = 0;
 STACKTOP = sp;return;
}
function _cephes_gamma($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $i = 0, $p = 0, $q = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 24|0;
 $p = sp + 16|0;
 $q = sp + 8|0;
 $z = sp;
 $i = sp + 40|0;
 HEAPF64[$1>>3] = $x;
 HEAP32[3168>>2] = 1;
 $2 = +HEAPF64[$1>>3];
 $3 = (___DOUBLE_BITS1509($2)|0);
 $4 = tempRet0;
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2146435072);
 $7 = ($5|0)==(2146435072);
 $8 = ($3>>>0)>(0);
 $9 = $7 & $8;
 $10 = $6 | $9;
 $11 = +HEAPF64[$1>>3];
 if ($10) {
  HEAPF64[$0>>3] = $11;
  $123 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$123);
 }
 $12 = (___DOUBLE_BITS1509($11)|0);
 $13 = tempRet0;
 $14 = $13 & 2147483647;
 $15 = ($14>>>0)<(2146435072);
 $16 = ($14|0)==(2146435072);
 $17 = ($12>>>0)<(0);
 $18 = $16 & $17;
 $19 = $15 | $18;
 $20 = +HEAPF64[$1>>3];
 if (!($19)) {
  $21 = $20 < 0.0;
  $22 = +HEAPF64[$1>>3];
  $23 = $21 ? nan : $22;
  HEAPF64[$0>>3] = $23;
  $123 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$123);
 }
 $24 = (+Math_abs((+$20)));
 HEAPF64[$q>>3] = $24;
 $25 = +HEAPF64[$q>>3];
 $26 = $25 > 33.0;
 L9: do {
  if ($26) {
   $27 = +HEAPF64[$1>>3];
   $28 = $27 < 0.0;
   do {
    if ($28) {
     $29 = +HEAPF64[$q>>3];
     $30 = (+Math_floor((+$29)));
     HEAPF64[$p>>3] = $30;
     $31 = +HEAPF64[$p>>3];
     $32 = +HEAPF64[$q>>3];
     $33 = $31 == $32;
     if ($33) {
      break L9;
     }
     $35 = +HEAPF64[$p>>3];
     $36 = (~~(($35)));
     HEAP32[$i>>2] = $36;
     $37 = HEAP32[$i>>2]|0;
     $38 = $37 & 1;
     $39 = ($38|0)==(0);
     if ($39) {
      HEAP32[3168>>2] = -1;
     }
     $40 = +HEAPF64[$q>>3];
     $41 = +HEAPF64[$p>>3];
     $42 = $40 - $41;
     HEAPF64[$z>>3] = $42;
     $43 = +HEAPF64[$z>>3];
     $44 = $43 > 0.5;
     if ($44) {
      $45 = +HEAPF64[$p>>3];
      $46 = $45 + 1.0;
      HEAPF64[$p>>3] = $46;
      $47 = +HEAPF64[$q>>3];
      $48 = +HEAPF64[$p>>3];
      $49 = $47 - $48;
      HEAPF64[$z>>3] = $49;
     }
     $50 = +HEAPF64[$q>>3];
     $51 = +HEAPF64[2016>>3];
     $52 = +HEAPF64[$z>>3];
     $53 = $51 * $52;
     $54 = (+Math_sin((+$53)));
     $55 = $50 * $54;
     HEAPF64[$z>>3] = $55;
     $56 = +HEAPF64[$z>>3];
     $57 = $56 == 0.0;
     if (!($57)) {
      $62 = +HEAPF64[$z>>3];
      $63 = (+Math_abs((+$62)));
      HEAPF64[$z>>3] = $63;
      $64 = +HEAPF64[2016>>3];
      $65 = +HEAPF64[$z>>3];
      $66 = +HEAPF64[$q>>3];
      $67 = (+_stirf($66));
      $68 = $65 * $67;
      $69 = $64 / $68;
      HEAPF64[$z>>3] = $69;
      break;
     }
     $58 = HEAP32[3168>>2]|0;
     $59 = (+($58|0));
     $60 = $59 * inf;
     $61 = $60;
     HEAPF64[$0>>3] = $61;
     $123 = +HEAPF64[$0>>3];
     STACKTOP = sp;return (+$123);
    } else {
     $70 = +HEAPF64[$1>>3];
     $71 = (+_stirf($70));
     HEAPF64[$z>>3] = $71;
    }
   } while(0);
   $72 = HEAP32[3168>>2]|0;
   $73 = (+($72|0));
   $74 = +HEAPF64[$z>>3];
   $75 = $73 * $74;
   HEAPF64[$0>>3] = $75;
   $123 = +HEAPF64[$0>>3];
   STACKTOP = sp;return (+$123);
  } else {
   HEAPF64[$z>>3] = 1.0;
   while(1) {
    $76 = +HEAPF64[$1>>3];
    $77 = $76 >= 3.0;
    if (!($77)) {
     break;
    }
    $78 = +HEAPF64[$1>>3];
    $79 = $78 - 1.0;
    HEAPF64[$1>>3] = $79;
    $80 = +HEAPF64[$1>>3];
    $81 = +HEAPF64[$z>>3];
    $82 = $81 * $80;
    HEAPF64[$z>>3] = $82;
   }
   while(1) {
    $83 = +HEAPF64[$1>>3];
    $84 = $83 < 0.0;
    if (!($84)) {
     label = 24;
     break;
    }
    $85 = +HEAPF64[$1>>3];
    $86 = $85 > -1.00000000000000006228E-9;
    if ($86) {
     break;
    }
    $87 = +HEAPF64[$1>>3];
    $88 = +HEAPF64[$z>>3];
    $89 = $88 / $87;
    HEAPF64[$z>>3] = $89;
    $90 = +HEAPF64[$1>>3];
    $91 = $90 + 1.0;
    HEAPF64[$1>>3] = $91;
   }
   L35: do {
    if ((label|0) == 24) {
     while(1) {
      label = 0;
      $92 = +HEAPF64[$1>>3];
      $93 = $92 < 2.0;
      $94 = +HEAPF64[$1>>3];
      if (!($93)) {
       break;
      }
      $95 = $94 < 1.00000000000000006228E-9;
      if ($95) {
       break L35;
      }
      $96 = +HEAPF64[$1>>3];
      $97 = +HEAPF64[$z>>3];
      $98 = $97 / $96;
      HEAPF64[$z>>3] = $98;
      $99 = +HEAPF64[$1>>3];
      $100 = $99 + 1.0;
      HEAPF64[$1>>3] = $100;
      label = 24;
     }
     $101 = $94 == 2.0;
     if ($101) {
      $102 = +HEAPF64[$z>>3];
      HEAPF64[$0>>3] = $102;
      $123 = +HEAPF64[$0>>3];
      STACKTOP = sp;return (+$123);
     } else {
      $103 = +HEAPF64[$1>>3];
      $104 = $103 - 2.0;
      HEAPF64[$1>>3] = $104;
      $105 = +HEAPF64[$1>>3];
      $106 = (+_polevl($105,3184,6));
      HEAPF64[$p>>3] = $106;
      $107 = +HEAPF64[$1>>3];
      $108 = (+_polevl($107,3240,7));
      HEAPF64[$q>>3] = $108;
      $109 = +HEAPF64[$z>>3];
      $110 = +HEAPF64[$p>>3];
      $111 = $109 * $110;
      $112 = +HEAPF64[$q>>3];
      $113 = $111 / $112;
      HEAPF64[$0>>3] = $113;
      $123 = +HEAPF64[$0>>3];
      STACKTOP = sp;return (+$123);
     }
    }
   } while(0);
   $114 = +HEAPF64[$1>>3];
   $115 = $114 == 0.0;
   if (!($115)) {
    $116 = +HEAPF64[$z>>3];
    $117 = +HEAPF64[$1>>3];
    $118 = 0.577215664901532865549 * $117;
    $119 = 1.0 + $118;
    $120 = +HEAPF64[$1>>3];
    $121 = $119 * $120;
    $122 = $116 / $121;
    HEAPF64[$0>>3] = $122;
    $123 = +HEAPF64[$0>>3];
    STACKTOP = sp;return (+$123);
   }
  }
 } while(0);
 $34 = +HEAPF64[$1>>3];
 (_mtherr_with_arg(3176,1,$34)|0);
 HEAPF64[$0>>3] = nan;
 $123 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$123);
}
function ___FLOAT_BITS1508($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $__u = sp;
 HEAPF32[$0>>2] = $__f;
 $1 = +HEAPF32[$0>>2];
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS1509($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $__u = sp;
 HEAPF64[$0>>3] = $__f;
 $1 = +HEAPF64[$0>>3];
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _stirf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $v = 0, $w = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $y = sp + 16|0;
 $w = sp + 8|0;
 $v = sp;
 HEAPF64[$0>>3] = $x;
 $1 = +HEAPF64[$0>>3];
 $2 = 1.0 / $1;
 HEAPF64[$w>>3] = $2;
 $3 = +HEAPF64[$w>>3];
 $4 = +HEAPF64[$w>>3];
 $5 = (+_polevl($4,3464,4));
 $6 = $3 * $5;
 $7 = 1.0 + $6;
 HEAPF64[$w>>3] = $7;
 $8 = +HEAPF64[$0>>3];
 $9 = (+Math_exp((+$8)));
 HEAPF64[$y>>3] = $9;
 $10 = +HEAPF64[$0>>3];
 $11 = $10 > 143.016079999999988104;
 $12 = +HEAPF64[$0>>3];
 $13 = +HEAPF64[$0>>3];
 if ($11) {
  $14 = 0.5 * $13;
  $15 = $14 - 0.25;
  $16 = (+Math_pow((+$12),(+$15)));
  HEAPF64[$v>>3] = $16;
  $17 = +HEAPF64[$v>>3];
  $18 = +HEAPF64[$v>>3];
  $19 = +HEAPF64[$y>>3];
  $20 = $18 / $19;
  $21 = $17 * $20;
  HEAPF64[$y>>3] = $21;
  $26 = +HEAPF64[3504>>3];
  $27 = +HEAPF64[$y>>3];
  $28 = $26 * $27;
  $29 = +HEAPF64[$w>>3];
  $30 = $28 * $29;
  HEAPF64[$y>>3] = $30;
  $31 = +HEAPF64[$y>>3];
  STACKTOP = sp;return (+$31);
 } else {
  $22 = $13 - 0.5;
  $23 = (+Math_pow((+$12),(+$22)));
  $24 = +HEAPF64[$y>>3];
  $25 = $23 / $24;
  HEAPF64[$y>>3] = $25;
  $26 = +HEAPF64[3504>>3];
  $27 = +HEAPF64[$y>>3];
  $28 = $26 * $27;
  $29 = +HEAPF64[$w>>3];
  $30 = $28 * $29;
  HEAPF64[$y>>3] = $30;
  $31 = +HEAPF64[$y>>3];
  STACKTOP = sp;return (+$31);
 }
 return +0;
}
function _lgam($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $i = 0, $p = 0, $q = 0, $u = 0, $w = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 40|0;
 $p = sp + 32|0;
 $q = sp + 24|0;
 $u = sp + 16|0;
 $w = sp + 8|0;
 $z = sp;
 $i = sp + 56|0;
 HEAPF64[$1>>3] = $x;
 HEAP32[3168>>2] = 1;
 $2 = +HEAPF64[$1>>3];
 $3 = (___DOUBLE_BITS1509($2)|0);
 $4 = tempRet0;
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2146435072);
 $7 = ($5|0)==(2146435072);
 $8 = ($3>>>0)>(0);
 $9 = $7 & $8;
 $10 = $6 | $9;
 $11 = +HEAPF64[$1>>3];
 if ($10) {
  HEAPF64[$0>>3] = $11;
  $150 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$150);
 }
 $12 = (___DOUBLE_BITS1509($11)|0);
 $13 = tempRet0;
 $14 = $13 & 2147483647;
 $15 = ($14>>>0)<(2146435072);
 $16 = ($14|0)==(2146435072);
 $17 = ($12>>>0)<(0);
 $18 = $16 & $17;
 $19 = $15 | $18;
 if (!($19)) {
  HEAPF64[$0>>3] = inf;
  $150 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$150);
 }
 $20 = +HEAPF64[$1>>3];
 $21 = $20 < -34.0;
 $22 = +HEAPF64[$1>>3];
 L9: do {
  if ($21) {
   $23 = -$22;
   HEAPF64[$q>>3] = $23;
   $24 = +HEAPF64[$q>>3];
   $25 = (+_lgam($24));
   HEAPF64[$w>>3] = $25;
   $26 = +HEAPF64[$q>>3];
   $27 = (+Math_floor((+$26)));
   HEAPF64[$p>>3] = $27;
   $28 = +HEAPF64[$p>>3];
   $29 = +HEAPF64[$q>>3];
   $30 = $28 == $29;
   if (!($30)) {
    $32 = +HEAPF64[$p>>3];
    $33 = (~~(($32)));
    HEAP32[$i>>2] = $33;
    $34 = HEAP32[$i>>2]|0;
    $35 = $34 & 1;
    $36 = ($35|0)==(0);
    if ($36) {
     HEAP32[3168>>2] = -1;
    } else {
     HEAP32[3168>>2] = 1;
    }
    $37 = +HEAPF64[$q>>3];
    $38 = +HEAPF64[$p>>3];
    $39 = $37 - $38;
    HEAPF64[$z>>3] = $39;
    $40 = +HEAPF64[$z>>3];
    $41 = $40 > 0.5;
    if ($41) {
     $42 = +HEAPF64[$p>>3];
     $43 = $42 + 1.0;
     HEAPF64[$p>>3] = $43;
     $44 = +HEAPF64[$p>>3];
     $45 = +HEAPF64[$q>>3];
     $46 = $44 - $45;
     HEAPF64[$z>>3] = $46;
    }
    $47 = +HEAPF64[$q>>3];
    $48 = +HEAPF64[2016>>3];
    $49 = +HEAPF64[$z>>3];
    $50 = $48 * $49;
    $51 = (+Math_sin((+$50)));
    $52 = $47 * $51;
    HEAPF64[$z>>3] = $52;
    $53 = +HEAPF64[$z>>3];
    $54 = $53 == 0.0;
    if (!($54)) {
     $55 = +HEAPF64[3312>>3];
     $56 = +HEAPF64[$z>>3];
     $57 = (+Math_log((+$56)));
     $58 = $55 - $57;
     $59 = +HEAPF64[$w>>3];
     $60 = $58 - $59;
     HEAPF64[$z>>3] = $60;
     $61 = +HEAPF64[$z>>3];
     HEAPF64[$0>>3] = $61;
     $150 = +HEAPF64[$0>>3];
     STACKTOP = sp;return (+$150);
    }
   }
  } else {
   $62 = $22 < 13.0;
   if (!($62)) {
    $110 = +HEAPF64[$1>>3];
    $111 = $110 > 2.55634799999999982258E+305;
    if ($111) {
     $112 = HEAP32[3168>>2]|0;
     $113 = (+($112|0));
     $114 = $113 * inf;
     $115 = $114;
     HEAPF64[$0>>3] = $115;
     $150 = +HEAPF64[$0>>3];
     STACKTOP = sp;return (+$150);
    }
    $116 = +HEAPF64[$1>>3];
    $117 = $116 - 0.5;
    $118 = +HEAPF64[$1>>3];
    $119 = (+Math_log((+$118)));
    $120 = $117 * $119;
    $121 = +HEAPF64[$1>>3];
    $122 = $120 - $121;
    $123 = +HEAPF64[3416>>3];
    $124 = $122 + $123;
    HEAPF64[$q>>3] = $124;
    $125 = +HEAPF64[$1>>3];
    $126 = $125 > 1.0E+8;
    if ($126) {
     $127 = +HEAPF64[$q>>3];
     HEAPF64[$0>>3] = $127;
     $150 = +HEAPF64[$0>>3];
     STACKTOP = sp;return (+$150);
    }
    $128 = +HEAPF64[$1>>3];
    $129 = +HEAPF64[$1>>3];
    $130 = $128 * $129;
    $131 = 1.0 / $130;
    HEAPF64[$p>>3] = $131;
    $132 = +HEAPF64[$1>>3];
    $133 = $132 >= 1000.0;
    $134 = +HEAPF64[$p>>3];
    if ($133) {
     $135 = 7.93650793650793650105E-4 * $134;
     $136 = $135 - 0.00277777777777777788379;
     $137 = +HEAPF64[$p>>3];
     $138 = $136 * $137;
     $139 = $138 + 0.0833333333333333287074;
     $140 = +HEAPF64[$1>>3];
     $141 = $139 / $140;
     $142 = +HEAPF64[$q>>3];
     $143 = $142 + $141;
     HEAPF64[$q>>3] = $143;
    } else {
     $144 = (+_polevl($134,3424,4));
     $145 = +HEAPF64[$1>>3];
     $146 = $144 / $145;
     $147 = +HEAPF64[$q>>3];
     $148 = $147 + $146;
     HEAPF64[$q>>3] = $148;
    }
    $149 = +HEAPF64[$q>>3];
    HEAPF64[$0>>3] = $149;
    $150 = +HEAPF64[$0>>3];
    STACKTOP = sp;return (+$150);
   }
   HEAPF64[$z>>3] = 1.0;
   HEAPF64[$p>>3] = 0.0;
   $63 = +HEAPF64[$1>>3];
   HEAPF64[$u>>3] = $63;
   while(1) {
    $64 = +HEAPF64[$u>>3];
    $65 = $64 >= 3.0;
    if (!($65)) {
     break;
    }
    $66 = +HEAPF64[$p>>3];
    $67 = $66 - 1.0;
    HEAPF64[$p>>3] = $67;
    $68 = +HEAPF64[$1>>3];
    $69 = +HEAPF64[$p>>3];
    $70 = $68 + $69;
    HEAPF64[$u>>3] = $70;
    $71 = +HEAPF64[$u>>3];
    $72 = +HEAPF64[$z>>3];
    $73 = $72 * $71;
    HEAPF64[$z>>3] = $73;
   }
   while(1) {
    $74 = +HEAPF64[$u>>3];
    $75 = $74 < 2.0;
    if (!($75)) {
     break;
    }
    $76 = +HEAPF64[$u>>3];
    $77 = $76 == 0.0;
    if ($77) {
     break L9;
    }
    $78 = +HEAPF64[$u>>3];
    $79 = +HEAPF64[$z>>3];
    $80 = $79 / $78;
    HEAPF64[$z>>3] = $80;
    $81 = +HEAPF64[$p>>3];
    $82 = $81 + 1.0;
    HEAPF64[$p>>3] = $82;
    $83 = +HEAPF64[$1>>3];
    $84 = +HEAPF64[$p>>3];
    $85 = $83 + $84;
    HEAPF64[$u>>3] = $85;
   }
   $86 = +HEAPF64[$z>>3];
   $87 = $86 < 0.0;
   if ($87) {
    HEAP32[3168>>2] = -1;
    $88 = +HEAPF64[$z>>3];
    $89 = -$88;
    HEAPF64[$z>>3] = $89;
   } else {
    HEAP32[3168>>2] = 1;
   }
   $90 = +HEAPF64[$u>>3];
   $91 = $90 == 2.0;
   if ($91) {
    $92 = +HEAPF64[$z>>3];
    $93 = (+Math_log((+$92)));
    HEAPF64[$0>>3] = $93;
    $150 = +HEAPF64[$0>>3];
    STACKTOP = sp;return (+$150);
   } else {
    $94 = +HEAPF64[$p>>3];
    $95 = $94 - 2.0;
    HEAPF64[$p>>3] = $95;
    $96 = +HEAPF64[$1>>3];
    $97 = +HEAPF64[$p>>3];
    $98 = $96 + $97;
    HEAPF64[$1>>3] = $98;
    $99 = +HEAPF64[$1>>3];
    $100 = +HEAPF64[$1>>3];
    $101 = (+_polevl($100,3320,5));
    $102 = $99 * $101;
    $103 = +HEAPF64[$1>>3];
    $104 = (+_p1evl($103,3368,6));
    $105 = $102 / $104;
    HEAPF64[$p>>3] = $105;
    $106 = +HEAPF64[$z>>3];
    $107 = (+Math_log((+$106)));
    $108 = +HEAPF64[$p>>3];
    $109 = $107 + $108;
    HEAPF64[$0>>3] = $109;
    $150 = +HEAPF64[$0>>3];
    STACKTOP = sp;return (+$150);
   }
  }
 } while(0);
 $31 = +HEAPF64[$1>>3];
 (_mtherr_with_arg(3304,2,$31)|0);
 HEAPF64[$0>>3] = inf;
 $150 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$150);
}
function _orthdev_series($x,$y,$dset) {
 $x = $x|0;
 $y = $y|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $Tt = 0, $n = 0, $s = 0, $t = 0, $xbar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $xbar = sp;
 $n = sp + 20|0;
 $s = sp + 16|0;
 $t = sp + 12|0;
 $Tt = sp + 8|0;
 HEAP32[$0>>2] = $x;
 HEAP32[$1>>2] = $y;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$t>>2] = $5;
 while(1) {
  $6 = HEAP32[$t>>2]|0;
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$t>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + ($11<<3)|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $14 == 1.79769313486231570815E+308;
  if (!($15)) {
   $16 = HEAP32[$2>>2]|0;
   $17 = ($16|0)!=(0|0);
   if ($17) {
    $18 = HEAP32[$2>>2]|0;
    $19 = (($18) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(2);
    if ($21) {
     $22 = HEAP32[$2>>2]|0;
     $23 = (($22) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = HEAP32[$t>>2]|0;
     $26 = HEAP32[$2>>2]|0;
     $27 = (($26) + 8|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($25|0) % ($28|0))&-1;
     $30 = (($24) - ($29))|0;
     $31 = (($30) - 1)|0;
     HEAP32[$Tt>>2] = $31;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    label = 0;
    $32 = HEAP32[$2>>2]|0;
    $33 = (($32) + 28|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$t>>2]|0;
    $36 = (($34) - ($35))|0;
    HEAP32[$Tt>>2] = $36;
   }
   HEAPF64[$xbar>>3] = 0.0;
   HEAP32[$n>>2] = 0;
   HEAP32[$s>>2] = 1;
   while(1) {
    $37 = HEAP32[$s>>2]|0;
    $38 = HEAP32[$Tt>>2]|0;
    $39 = ($37|0)<=($38|0);
    if (!($39)) {
     break;
    }
    $40 = HEAP32[$t>>2]|0;
    $41 = HEAP32[$s>>2]|0;
    $42 = (($40) + ($41))|0;
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($42<<3)|0);
    $45 = +HEAPF64[$44>>3];
    $46 = $45 == 1.79769313486231570815E+308;
    if (!($46)) {
     $47 = HEAP32[$t>>2]|0;
     $48 = HEAP32[$s>>2]|0;
     $49 = (($47) + ($48))|0;
     $50 = HEAP32[$0>>2]|0;
     $51 = (($50) + ($49<<3)|0);
     $52 = +HEAPF64[$51>>3];
     $53 = +HEAPF64[$xbar>>3];
     $54 = $53 + $52;
     HEAPF64[$xbar>>3] = $54;
     $55 = HEAP32[$n>>2]|0;
     $56 = (($55) + 1)|0;
     HEAP32[$n>>2] = $56;
    }
    $57 = HEAP32[$s>>2]|0;
    $58 = (($57) + 1)|0;
    HEAP32[$s>>2] = $58;
   }
   $59 = HEAP32[$n>>2]|0;
   $60 = ($59|0)>(0);
   if ($60) {
    $61 = HEAP32[$n>>2]|0;
    $62 = (+($61|0));
    $63 = +HEAPF64[$xbar>>3];
    $64 = $63 / $62;
    HEAPF64[$xbar>>3] = $64;
    $65 = HEAP32[$n>>2]|0;
    $66 = (+($65|0));
    $67 = HEAP32[$n>>2]|0;
    $68 = (+($67|0));
    $69 = $68 + 1.0;
    $70 = $66 / $69;
    $71 = (+Math_sqrt((+$70)));
    $72 = HEAP32[$t>>2]|0;
    $73 = HEAP32[$0>>2]|0;
    $74 = (($73) + ($72<<3)|0);
    $75 = +HEAPF64[$74>>3];
    $76 = +HEAPF64[$xbar>>3];
    $77 = $75 - $76;
    $78 = $71 * $77;
    $79 = HEAP32[$t>>2]|0;
    $80 = (($79) + 1)|0;
    $81 = HEAP32[$1>>2]|0;
    $82 = (($81) + ($80<<3)|0);
    HEAPF64[$82>>3] = $78;
   }
  }
  $83 = HEAP32[$t>>2]|0;
  $84 = (($83) + 1)|0;
  HEAP32[$t>>2] = $84;
 }
 STACKTOP = sp;return 0;
}
function _dummy($dset,$center) {
 $dset = $dset|0;
 $center = $center|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cx = 0, $di = 0, $di0 = 0, $dx = 0, $mm = 0, $ndums = 0, $nnew = 0, $or$cond = 0, $p0 = 0;
 var $pp = 0, $t = 0, $vi = 0, $vimax = 0, $vlabel = 0, $vname = 0, $xx = 0, $yy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $0 = sp + 76|0;
 $1 = sp + 72|0;
 $2 = sp + 68|0;
 $vname = sp + 208|0;
 $vlabel = sp + 80|0;
 $vi = sp + 64|0;
 $t = sp + 60|0;
 $pp = sp + 56|0;
 $ndums = sp + 52|0;
 $nnew = sp + 48|0;
 $di = sp + 44|0;
 $di0 = sp + 40|0;
 $xx = sp + 16|0;
 $dx = sp + 8|0;
 $yy = sp + 36|0;
 $mm = sp + 32|0;
 $p0 = sp + 28|0;
 $cx = sp;
 $vimax = sp + 24|0;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $center;
 HEAP32[$nnew>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = HEAP32[$1>>2]|0;
   $10 = (($9) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$ndums>>2] = $11;
   $12 = HEAP32[$1>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$di0>>2] = $13;
   $14 = HEAP32[$ndums>>2]|0;
   $15 = ($14|0)<(2);
   $16 = HEAP32[$ndums>>2]|0;
   $17 = ($16|0)>(99999);
   $or$cond = $15 | $17;
   if ($or$cond) {
    _gretl_errmsg_set(3536);
    HEAP32[$0>>2] = 0;
    $230 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($230|0);
   }
   HEAP32[$vi>>2] = 0;
   L8: while(1) {
    $18 = HEAP32[$vi>>2]|0;
    $19 = HEAP32[$ndums>>2]|0;
    $20 = ($18|0)<($19|0);
    if (!($20)) {
     break;
    }
    $21 = HEAP32[$vi>>2]|0;
    $22 = (($21) + 1)|0;
    $23 = HEAP32[$1>>2]|0;
    $24 = HEAP32[$2>>2]|0;
    _make_dummy_name_and_label($22,$23,$24,$vname,$vlabel);
    $25 = HEAP32[$1>>2]|0;
    $26 = (_series_index($25,$vname)|0);
    HEAP32[$di>>2] = $26;
    $27 = HEAP32[$di>>2]|0;
    $28 = HEAP32[$1>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27|0)>=($29|0);
    do {
     if ($30) {
      label = 10;
     } else {
      $31 = HEAP32[$1>>2]|0;
      $32 = HEAP32[$di>>2]|0;
      $33 = (_series_get_label($31,$32)|0);
      $34 = (_strcmp($vlabel,$33)|0);
      $35 = ($34|0)!=(0);
      if ($35) {
       label = 10;
      } else {
       $38 = HEAP32[$vi>>2]|0;
       $39 = ($38|0)==(0);
       $40 = HEAP32[$di>>2]|0;
       if ($39) {
        HEAP32[$di0>>2] = $40;
        break;
       } else {
        $41 = HEAP32[$di0>>2]|0;
        $42 = HEAP32[$vi>>2]|0;
        $43 = (($41) + ($42))|0;
        $44 = ($40|0)!=($43|0);
        if ($44) {
         label = 14;
         break L8;
        } else {
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 10) {
     label = 0;
     $36 = HEAP32[$nnew>>2]|0;
     $37 = (($36) + 1)|0;
     HEAP32[$nnew>>2] = $37;
    }
    $48 = HEAP32[$vi>>2]|0;
    $49 = (($48) + 1)|0;
    HEAP32[$vi>>2] = $49;
   }
   if ((label|0) == 14) {
    $45 = HEAP32[$1>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    HEAP32[$di0>>2] = $46;
    $47 = HEAP32[$ndums>>2]|0;
    HEAP32[$nnew>>2] = $47;
   }
   $50 = HEAP32[$nnew>>2]|0;
   $51 = ($50|0)==(0);
   if ($51) {
    $52 = HEAP32[$di0>>2]|0;
    HEAP32[$0>>2] = $52;
    $230 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($230|0);
   }
   $53 = HEAP32[$1>>2]|0;
   $54 = (($53) + 64|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0|0);
   if ($56) {
    HEAP32[$0>>2] = -1;
    $230 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($230|0);
   }
   $57 = HEAP32[$1>>2]|0;
   $58 = HEAP32[$ndums>>2]|0;
   $59 = (_dataset_add_series($57,$58)|0);
   $60 = ($59|0)!=(0);
   if ($60) {
    _gretl_errmsg_set(3592);
    HEAP32[$0>>2] = 0;
    $230 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($230|0);
   }
   HEAP32[$vi>>2] = 1;
   $61 = HEAP32[$di0>>2]|0;
   HEAP32[$di>>2] = $61;
   while(1) {
    $62 = HEAP32[$vi>>2]|0;
    $63 = HEAP32[$ndums>>2]|0;
    $64 = ($62|0)<=($63|0);
    if (!($64)) {
     break;
    }
    $65 = HEAP32[$vi>>2]|0;
    $66 = HEAP32[$1>>2]|0;
    $67 = HEAP32[$2>>2]|0;
    _make_dummy_name_and_label($65,$66,$67,$vname,$vlabel);
    $68 = HEAP32[$di>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = (($69) + 68|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($68<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    (_strcpy(($73|0),($vname|0))|0);
    $74 = HEAP32[$1>>2]|0;
    $75 = HEAP32[$di>>2]|0;
    _series_set_label($74,$75,$vlabel);
    $76 = HEAP32[$vi>>2]|0;
    $77 = (($76) + 1)|0;
    HEAP32[$vi>>2] = $77;
    $78 = HEAP32[$di>>2]|0;
    $79 = (($78) + 1)|0;
    HEAP32[$di>>2] = $79;
   }
   $80 = HEAP32[$1>>2]|0;
   $81 = ($80|0)!=(0|0);
   L39: do {
    if ($81) {
     $82 = HEAP32[$1>>2]|0;
     $83 = (($82) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==(1);
     if ($85) {
      $86 = HEAP32[$1>>2]|0;
      $87 = (($86) + 8|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = ($88|0)==(5);
      if (!($89)) {
       $90 = HEAP32[$1>>2]|0;
       $91 = (($90) + 8|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ($92|0)==(6);
       if (!($93)) {
        $94 = HEAP32[$1>>2]|0;
        $95 = (($94) + 8|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ($96|0)==(7);
        if (!($97)) {
         label = 39;
         break;
        }
       }
      }
      HEAP32[$mm>>2] = 10;
      $98 = HEAP32[$1>>2]|0;
      $99 = (($98) + 8|0);
      $100 = HEAP32[$99>>2]|0;
      HEAP32[$pp>>2] = $100;
      while(1) {
       $101 = HEAP32[$pp>>2]|0;
       $102 = (($101|0) / 10)&-1;
       HEAP32[$pp>>2] = $102;
       $103 = ($102|0)!=(0);
       if (!($103)) {
        break;
       }
       $104 = HEAP32[$mm>>2]|0;
       $105 = ($104*10)|0;
       HEAP32[$mm>>2] = $105;
      }
      HEAP32[$vi>>2] = 1;
      $106 = HEAP32[$di0>>2]|0;
      HEAP32[$di>>2] = $106;
      while(1) {
       $107 = HEAP32[$vi>>2]|0;
       $108 = HEAP32[$ndums>>2]|0;
       $109 = ($107|0)<=($108|0);
       if (!($109)) {
        break L39;
       }
       HEAP32[$t>>2] = 0;
       while(1) {
        $110 = HEAP32[$t>>2]|0;
        $111 = HEAP32[$1>>2]|0;
        $112 = (($111) + 4|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = ($110|0)<($113|0);
        if (!($114)) {
         break;
        }
        $115 = HEAP32[$t>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = (($116) + 8|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = HEAP32[$1>>2]|0;
        $120 = (($119) + 16|0);
        $121 = +HEAPF64[$120>>3];
        $122 = (+_date_as_double($115,$118,$121));
        $123 = $122 + 0.100000000000000005551;
        HEAPF64[$xx>>3] = $123;
        $124 = +HEAPF64[$xx>>3];
        $125 = (~~(($124)));
        HEAP32[$yy>>2] = $125;
        $126 = HEAP32[$mm>>2]|0;
        $127 = (+($126|0));
        $128 = +HEAPF64[$xx>>3];
        $129 = HEAP32[$yy>>2]|0;
        $130 = (+($129|0));
        $131 = $128 - $130;
        $132 = $127 * $131;
        $133 = $132 + 0.5;
        $134 = (~~(($133)));
        HEAP32[$pp>>2] = $134;
        $135 = HEAP32[$pp>>2]|0;
        $136 = HEAP32[$vi>>2]|0;
        $137 = ($135|0)==($136|0);
        $138 = $137 ? 1.0 : 0.0;
        HEAPF64[$dx>>3] = $138;
        $139 = +HEAPF64[$dx>>3];
        $140 = HEAP32[$t>>2]|0;
        $141 = HEAP32[$di>>2]|0;
        $142 = HEAP32[$1>>2]|0;
        $143 = (($142) + 64|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (($144) + ($141<<2)|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = (($146) + ($140<<3)|0);
        HEAPF64[$147>>3] = $139;
        $148 = HEAP32[$t>>2]|0;
        $149 = (($148) + 1)|0;
        HEAP32[$t>>2] = $149;
       }
       $150 = HEAP32[$vi>>2]|0;
       $151 = (($150) + 1)|0;
       HEAP32[$vi>>2] = $151;
       $152 = HEAP32[$di>>2]|0;
       $153 = (($152) + 1)|0;
       HEAP32[$di>>2] = $153;
      }
     } else {
      label = 39;
     }
    } else {
     label = 39;
    }
   } while(0);
   L57: do {
    if ((label|0) == 39) {
     $154 = HEAP32[$1>>2]|0;
     $155 = (_get_subperiod(0,$154,0)|0);
     HEAP32[$p0>>2] = $155;
     HEAP32[$t>>2] = 0;
     while(1) {
      $156 = HEAP32[$t>>2]|0;
      $157 = HEAP32[$1>>2]|0;
      $158 = (($157) + 4|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($156|0)<($159|0);
      if (!($160)) {
       break L57;
      }
      $161 = HEAP32[$t>>2]|0;
      $162 = HEAP32[$p0>>2]|0;
      $163 = (($161) + ($162))|0;
      $164 = HEAP32[$1>>2]|0;
      $165 = (($164) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = (($163|0) % ($166|0))&-1;
      HEAP32[$pp>>2] = $167;
      HEAP32[$vi>>2] = 0;
      $168 = HEAP32[$di0>>2]|0;
      HEAP32[$di>>2] = $168;
      while(1) {
       $169 = HEAP32[$vi>>2]|0;
       $170 = HEAP32[$ndums>>2]|0;
       $171 = ($169|0)<($170|0);
       if (!($171)) {
        break;
       }
       $172 = HEAP32[$pp>>2]|0;
       $173 = HEAP32[$vi>>2]|0;
       $174 = ($172|0)==($173|0);
       $175 = $174 ? 1 : 0;
       $176 = (+($175|0));
       HEAPF64[$dx>>3] = $176;
       $177 = +HEAPF64[$dx>>3];
       $178 = HEAP32[$t>>2]|0;
       $179 = HEAP32[$di>>2]|0;
       $180 = HEAP32[$1>>2]|0;
       $181 = (($180) + 64|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (($182) + ($179<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (($184) + ($178<<3)|0);
       HEAPF64[$185>>3] = $177;
       $186 = HEAP32[$vi>>2]|0;
       $187 = (($186) + 1)|0;
       HEAP32[$vi>>2] = $187;
       $188 = HEAP32[$di>>2]|0;
       $189 = (($188) + 1)|0;
       HEAP32[$di>>2] = $189;
      }
      $190 = HEAP32[$t>>2]|0;
      $191 = (($190) + 1)|0;
      HEAP32[$t>>2] = $191;
     }
    }
   } while(0);
   $192 = HEAP32[$2>>2]|0;
   $193 = ($192|0)>(0);
   L67: do {
    if ($193) {
     $194 = HEAP32[$1>>2]|0;
     $195 = (($194) + 8|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = (+($196|0));
     $198 = 1.0 / $197;
     HEAPF64[$cx>>3] = $198;
     $199 = HEAP32[$di0>>2]|0;
     $200 = HEAP32[$1>>2]|0;
     $201 = (($200) + 8|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = (($199) + ($202))|0;
     $204 = (($203) - 1)|0;
     HEAP32[$vimax>>2] = $204;
     $205 = HEAP32[$di0>>2]|0;
     HEAP32[$vi>>2] = $205;
     while(1) {
      $206 = HEAP32[$vi>>2]|0;
      $207 = HEAP32[$vimax>>2]|0;
      $208 = ($206|0)<=($207|0);
      if (!($208)) {
       break L67;
      }
      HEAP32[$t>>2] = 0;
      while(1) {
       $209 = HEAP32[$t>>2]|0;
       $210 = HEAP32[$1>>2]|0;
       $211 = (($210) + 4|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = ($209|0)<($212|0);
       if (!($213)) {
        break;
       }
       $214 = +HEAPF64[$cx>>3];
       $215 = HEAP32[$t>>2]|0;
       $216 = HEAP32[$vi>>2]|0;
       $217 = HEAP32[$1>>2]|0;
       $218 = (($217) + 64|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = (($219) + ($216<<2)|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = (($221) + ($215<<3)|0);
       $223 = +HEAPF64[$222>>3];
       $224 = $223 - $214;
       HEAPF64[$222>>3] = $224;
       $225 = HEAP32[$t>>2]|0;
       $226 = (($225) + 1)|0;
       HEAP32[$t>>2] = $226;
      }
      $227 = HEAP32[$vi>>2]|0;
      $228 = (($227) + 1)|0;
      HEAP32[$vi>>2] = $228;
     }
    }
   } while(0);
   $229 = HEAP32[$di0>>2]|0;
   HEAP32[$0>>2] = $229;
   $230 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($230|0);
  }
 }
 _gretl_errmsg_set(3512);
 HEAP32[$0>>2] = 0;
 $230 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($230|0);
}
function _make_dummy_name_and_label($vi,$dset,$center,$vname,$vlabel) {
 $vi = $vi|0;
 $dset = $dset|0;
 $center = $center|0;
 $vname = $vname|0;
 $vlabel = $vlabel|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dumstr = 0, $len = 0, $numstr = 0, $vararg_buffer23 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer23 = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $dumstr = sp + 40|0;
 $numstr = sp + 32|0;
 $len = sp + 8|0;
 HEAP32[$0>>2] = $vi;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $center;
 HEAP32[$3>>2] = $vname;
 HEAP32[$4>>2] = $vlabel;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer23>>2] = $8;
  (_sprintf($7,3888,$vararg_buffer23)|0);
  $9 = HEAP32[$4>>2]|0;
  (_strcpy(($9|0),(3896|0))|0);
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = ($10|0)<(0);
 if ($11) {
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer23>>2] = $13;
  (_sprintf($12,3888,$vararg_buffer23)|0);
  $14 = HEAP32[$4>>2]|0;
  (_strcpy(($14|0),(3920|0))|0);
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$1>>2]|0;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(4);
 if ($18) {
  $19 = HEAP32[$1>>2]|0;
  $20 = (($19) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(1);
  if ($22) {
   $23 = HEAP32[$3>>2]|0;
   $24 = HEAP32[$0>>2]|0;
   HEAP32[$vararg_buffer23>>2] = $24;
   (_sprintf($23,3952,$vararg_buffer23)|0);
   $25 = HEAP32[$4>>2]|0;
   $26 = HEAP32[$0>>2]|0;
   HEAP32[$vararg_buffer23>>2] = $26;
   (_sprintf($25,3960,$vararg_buffer23)|0);
   STACKTOP = sp;return;
  }
 }
 $27 = HEAP32[$1>>2]|0;
 $28 = (($27) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(12);
 if ($30) {
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(1);
  if ($34) {
   $35 = HEAP32[$3>>2]|0;
   $36 = HEAP32[$0>>2]|0;
   HEAP32[$vararg_buffer23>>2] = $36;
   (_sprintf($35,4000,$vararg_buffer23)|0);
   $37 = HEAP32[$4>>2]|0;
   $38 = HEAP32[$0>>2]|0;
   HEAP32[$vararg_buffer23>>2] = $38;
   (_sprintf($37,4008,$vararg_buffer23)|0);
   STACKTOP = sp;return;
  }
 }
 ;HEAP8[$dumstr+0>>0]=HEAP8[4040+0>>0]|0;HEAP8[$dumstr+1>>0]=HEAP8[4040+1>>0]|0;HEAP8[$dumstr+2>>0]=HEAP8[4040+2>>0]|0;HEAP8[$dumstr+3>>0]=HEAP8[4040+3>>0]|0;HEAP8[$dumstr+4>>0]=HEAP8[4040+4>>0]|0;HEAP8[$dumstr+5>>0]=HEAP8[4040+5>>0]|0;HEAP8[$dumstr+6>>0]=HEAP8[4040+6>>0]|0;HEAP8[$dumstr+7>>0]=HEAP8[4040+7>>0]|0;
 $39 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer23>>2] = $39;
 (_sprintf($numstr,3640,$vararg_buffer23)|0);
 $40 = (_strlen(($numstr|0))|0);
 HEAP32[$len>>2] = $40;
 $41 = HEAP32[$len>>2]|0;
 $42 = (8 - ($41))|0;
 $43 = (($dumstr) + ($42)|0);
 HEAP8[$43>>0] = 0;
 $44 = HEAP32[$3>>2]|0;
 $45 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer23>>2] = $dumstr;
 $vararg_ptr22 = (($vararg_buffer23) + 4|0);
 HEAP32[$vararg_ptr22>>2] = $45;
 (_sprintf($44,4048,$vararg_buffer23)|0);
 $46 = HEAP32[$4>>2]|0;
 $47 = HEAP32[$3>>2]|0;
 $48 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer23>>2] = $47;
 $vararg_ptr26 = (($vararg_buffer23) + 4|0);
 HEAP32[$vararg_ptr26>>2] = $48;
 (_sprintf($46,4056,$vararg_buffer23)|0);
 STACKTOP = sp;return;
}
function _panel_unit_first_obs($t,$dset) {
 $t = $t|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obs = 0, $p = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $p = sp + 4|0;
 $obs = sp + 16|0;
 $ret = sp;
 HEAP32[$0>>2] = $t;
 HEAP32[$1>>2] = $dset;
 HEAP32[$ret>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 (_ntodate($obs,$2,$3)|0);
 $4 = (_strchr($obs,58)|0);
 HEAP32[$p>>2] = $4;
 $5 = HEAP32[$p>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$p>>2]|0;
  $8 = (($7) + 1|0);
  $9 = (_atoi($8)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   HEAP32[$ret>>2] = 1;
  }
 }
 $11 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function _gretl_plotx($dset,$opt) {
 $dset = $dset|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $T = 0, $datestr = 0, $failed = 0, $new_ptype = 0, $panvar = 0, $rm = 0, $sd0 = 0, $t = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $t = sp + 32|0;
 $y1 = sp + 28|0;
 $T = sp + 24|0;
 $new_ptype = sp + 20|0;
 $panvar = sp + 16|0;
 $failed = sp + 12|0;
 $sd0 = sp;
 $rm = sp + 8|0;
 $datestr = sp + 48|0;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $opt;
 HEAP32[$T>>2] = 0;
 HEAP32[$new_ptype>>2] = 0;
 HEAP32[$panvar>>2] = 0;
 HEAP32[$failed>>2] = 0;
 HEAPF64[$sd0>>3] = 0.0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = HEAP32[3608>>2]|0;
  _free($5);
  HEAP32[3608>>2] = 0;
  HEAP32[3616>>2] = 0;
  HEAP32[$T>>2] = 0;
  HEAPF64[$sd0>>3] = 0.0;
  HEAP32[$0>>2] = 0;
  $247 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($247|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = HEAP32[$1>>2]|0;
   $9 = (($8) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(2);
   if ($11) {
    $12 = HEAP32[$2>>2]|0;
    $13 = $12 & 32768;
    $14 = ($13|0)!=(0);
    if (!($14)) {
     $15 = HEAP32[$1>>2]|0;
     $16 = ($15|0)==(0|0);
     if ($16) {
      $28 = 0;
     } else {
      $17 = HEAP32[$1>>2]|0;
      $18 = (($17) + 28|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = HEAP32[$1>>2]|0;
      $21 = (($20) + 24|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = (($19) - ($22))|0;
      $24 = (($23) + 1)|0;
      $28 = $24;
     }
     $25 = HEAP32[$1>>2]|0;
     $26 = (($25) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $29 = ($28|0)==($27|0);
     if (!($29)) {
      break;
     }
    }
    $30 = HEAP32[$1>>2]|0;
    $31 = (_panel_plotvar_code($30)|0);
    HEAP32[$new_ptype>>2] = $31;
    $32 = HEAP32[$new_ptype>>2]|0;
    $33 = ($32|0)!=(0);
    $34 = HEAP32[$1>>2]|0;
    do {
     if ($33) {
      $35 = (($34) + 112|0);
      $36 = +HEAPF64[$35>>3];
      HEAPF64[$sd0>>3] = $36;
     } else {
      $37 = (_plausible_panel_time_var($34)|0);
      HEAP32[$panvar>>2] = $37;
      $38 = HEAP32[$panvar>>2]|0;
      $39 = ($38|0)>(0);
      if ($39) {
       HEAP32[$new_ptype>>2] = 9;
       break;
      } else {
       HEAP32[$new_ptype>>2] = 1;
       break;
      }
     }
    } while(0);
    $40 = HEAP32[$1>>2]|0;
    $41 = (($40) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    HEAP32[$T>>2] = $42;
   }
  }
 } while(0);
 $43 = HEAP32[$new_ptype>>2]|0;
 $44 = ($43|0)==(0);
 if ($44) {
  $45 = HEAP32[$1>>2]|0;
  $46 = (_plotvar_code($45)|0);
  HEAP32[$new_ptype>>2] = $46;
 }
 $47 = HEAP32[$T>>2]|0;
 $48 = ($47|0)==(0);
 if ($48) {
  $49 = HEAP32[$1>>2]|0;
  $50 = (($49) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$T>>2] = $51;
 }
 $52 = +HEAPF64[$sd0>>3];
 $53 = $52 == 0.0;
 if ($53) {
  $54 = HEAP32[$1>>2]|0;
  $55 = (($54) + 16|0);
  $56 = +HEAPF64[$55>>3];
  HEAPF64[$sd0>>3] = $56;
 }
 $57 = HEAP32[3608>>2]|0;
 $58 = ($57|0)!=(0|0);
 if ($58) {
  $59 = HEAP32[$new_ptype>>2]|0;
  $60 = HEAP32[3616>>2]|0;
  $61 = ($59|0)==($60|0);
  if ($61) {
   $62 = HEAP32[3624>>2]|0;
   $63 = HEAP32[$T>>2]|0;
   $64 = ($62|0)==($63|0);
   if ($64) {
    $65 = +HEAPF64[$sd0>>3];
    $66 = +HEAPF64[3632>>3];
    $67 = $65 == $66;
    if ($67) {
     $68 = HEAP32[3608>>2]|0;
     HEAP32[$0>>2] = $68;
     $247 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($247|0);
    }
   }
  }
 }
 $69 = HEAP32[3608>>2]|0;
 $70 = ($69|0)!=(0|0);
 if ($70) {
  $71 = HEAP32[3608>>2]|0;
  _free($71);
 }
 $72 = HEAP32[$new_ptype>>2]|0;
 $73 = ($72|0)==(9);
 if ($73) {
  $74 = HEAP32[$panvar>>2]|0;
  $75 = HEAP32[$1>>2]|0;
  $76 = (($75) + 64|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($74<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = HEAP32[$1>>2]|0;
  $81 = (($80) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (_copyvec($79,$82)|0);
  HEAP32[3608>>2] = $83;
 } else {
  $84 = HEAP32[$T>>2]|0;
  $85 = $84<<3;
  $86 = (_malloc($85)|0);
  HEAP32[3608>>2] = $86;
 }
 $87 = HEAP32[3608>>2]|0;
 $88 = ($87|0)==(0|0);
 if (!($88)) {
  $89 = HEAP32[$new_ptype>>2]|0;
  $90 = ($89|0)==(9);
  if (!($90)) {
   while(1) {
    $92 = HEAP32[$T>>2]|0;
    HEAP32[3624>>2] = $92;
    $93 = HEAP32[$new_ptype>>2]|0;
    HEAP32[3616>>2] = $93;
    $94 = +HEAPF64[$sd0>>3];
    HEAPF64[3632>>3] = $94;
    $95 = +HEAPF64[$sd0>>3];
    $96 = (~~(($95)));
    HEAP32[$y1>>2] = $96;
    $97 = +HEAPF64[$sd0>>3];
    $98 = HEAP32[$y1>>2]|0;
    $99 = (+($98|0));
    $100 = $97 - $99;
    $101 = $100;
    HEAPF32[$rm>>2] = $101;
    $102 = HEAP32[3616>>2]|0;
    L49: do {
     switch ($102|0) {
     case 2: case 1:  {
      HEAP32[$t>>2] = 0;
      while(1) {
       $231 = HEAP32[$t>>2]|0;
       $232 = HEAP32[$T>>2]|0;
       $233 = ($231|0)<($232|0);
       if (!($233)) {
        break L49;
       }
       $234 = HEAP32[$t>>2]|0;
       $235 = (($234) + 1)|0;
       $236 = (+($235|0));
       $237 = HEAP32[$t>>2]|0;
       $238 = HEAP32[3608>>2]|0;
       $239 = (($238) + ($237<<3)|0);
       HEAPF64[$239>>3] = $236;
       $240 = HEAP32[$t>>2]|0;
       $241 = (($240) + 1)|0;
       HEAP32[$t>>2] = $241;
      }
      break;
     }
     case 5:  {
      $138 = HEAP32[$y1>>2]|0;
      $139 = (+($138|0));
      $140 = +HEAPF32[$rm>>2];
      $141 = $140;
      $142 = 100.0 * $141;
      $143 = $142 - 1.0;
      $144 = $143 / 12.0;
      $145 = $139 + $144;
      $146 = HEAP32[3608>>2]|0;
      HEAPF64[$146>>3] = $145;
      HEAP32[$t>>2] = 1;
      while(1) {
       $147 = HEAP32[$t>>2]|0;
       $148 = HEAP32[$T>>2]|0;
       $149 = ($147|0)<($148|0);
       if (!($149)) {
        break L49;
       }
       $150 = HEAP32[$t>>2]|0;
       $151 = (($150) - 1)|0;
       $152 = HEAP32[3608>>2]|0;
       $153 = (($152) + ($151<<3)|0);
       $154 = +HEAPF64[$153>>3];
       $155 = $154 + 0.0833333333333333287074;
       $156 = HEAP32[$t>>2]|0;
       $157 = HEAP32[3608>>2]|0;
       $158 = (($157) + ($156<<3)|0);
       HEAPF64[$158>>3] = $155;
       $159 = HEAP32[$t>>2]|0;
       $160 = (($159) + 1)|0;
       HEAP32[$t>>2] = $160;
      }
      break;
     }
     case 3:  {
      HEAP32[$t>>2] = 0;
      while(1) {
       $103 = HEAP32[$t>>2]|0;
       $104 = HEAP32[$T>>2]|0;
       $105 = ($103|0)<($104|0);
       if (!($105)) {
        break L49;
       }
       $106 = +HEAPF64[$sd0>>3];
       $107 = HEAP32[$t>>2]|0;
       $108 = (+($107|0));
       $109 = $106 + $108;
       $110 = HEAP32[$t>>2]|0;
       $111 = HEAP32[3608>>2]|0;
       $112 = (($111) + ($110<<3)|0);
       HEAPF64[$112>>3] = $109;
       $113 = HEAP32[$t>>2]|0;
       $114 = (($113) + 1)|0;
       HEAP32[$t>>2] = $114;
      }
      break;
     }
     case 7:  {
      HEAP32[$t>>2] = 0;
      while(1) {
       $216 = HEAP32[$t>>2]|0;
       $217 = HEAP32[$T>>2]|0;
       $218 = ($216|0)<($217|0);
       if (!($218)) {
        break L49;
       }
       $219 = HEAP32[$1>>2]|0;
       $220 = (($219) + 16|0);
       $221 = +HEAPF64[$220>>3];
       $222 = HEAP32[$t>>2]|0;
       $223 = ($222*10)|0;
       $224 = (+($223|0));
       $225 = $221 + $224;
       $226 = HEAP32[$t>>2]|0;
       $227 = HEAP32[3608>>2]|0;
       $228 = (($227) + ($226<<3)|0);
       HEAPF64[$228>>3] = $225;
       $229 = HEAP32[$t>>2]|0;
       $230 = (($229) + 1)|0;
       HEAP32[$t>>2] = $230;
      }
      break;
     }
     case 6:  {
      HEAP32[$t>>2] = 0;
      while(1) {
       $184 = HEAP32[$t>>2]|0;
       $185 = HEAP32[$T>>2]|0;
       $186 = ($184|0)<($185|0);
       if (!($186)) {
        break L49;
       }
       $187 = HEAP32[$1>>2]|0;
       $188 = (($187) + 80|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = ($189|0)!=(0|0);
       if ($190) {
        $191 = HEAP32[$t>>2]|0;
        $192 = HEAP32[$1>>2]|0;
        $193 = (($192) + 80|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = (($194) + ($191<<2)|0);
        $196 = HEAP32[$195>>2]|0;
        $197 = (+_get_dec_date($196));
        $198 = HEAP32[$t>>2]|0;
        $199 = HEAP32[3608>>2]|0;
        $200 = (($199) + ($198<<3)|0);
        HEAPF64[$200>>3] = $197;
       } else {
        $201 = HEAP32[$t>>2]|0;
        $202 = HEAP32[$1>>2]|0;
        (_calendar_date_string($datestr,$201,$202)|0);
        $203 = (+_get_dec_date($datestr));
        $204 = HEAP32[$t>>2]|0;
        $205 = HEAP32[3608>>2]|0;
        $206 = (($205) + ($204<<3)|0);
        HEAPF64[$206>>3] = $203;
       }
       $207 = HEAP32[$t>>2]|0;
       $208 = HEAP32[3608>>2]|0;
       $209 = (($208) + ($207<<3)|0);
       $210 = +HEAPF64[$209>>3];
       $211 = $210 == 1.79769313486231570815E+308;
       if ($211) {
        break;
       }
       $214 = HEAP32[$t>>2]|0;
       $215 = (($214) + 1)|0;
       HEAP32[$t>>2] = $215;
      }
      $212 = HEAP32[$failed>>2]|0;
      $213 = (($212) + 1)|0;
      HEAP32[$failed>>2] = $213;
      break;
     }
     case 8:  {
      $161 = HEAP32[$y1>>2]|0;
      $162 = (+($161|0));
      $163 = +HEAPF32[$rm>>2];
      $164 = $163;
      $165 = 100.0 * $164;
      $166 = $165 - 1.0;
      $167 = $166 / 24.0;
      $168 = $162 + $167;
      $169 = HEAP32[3608>>2]|0;
      HEAPF64[$169>>3] = $168;
      HEAP32[$t>>2] = 1;
      while(1) {
       $170 = HEAP32[$t>>2]|0;
       $171 = HEAP32[$T>>2]|0;
       $172 = ($170|0)<($171|0);
       if (!($172)) {
        break L49;
       }
       $173 = HEAP32[$t>>2]|0;
       $174 = (($173) - 1)|0;
       $175 = HEAP32[3608>>2]|0;
       $176 = (($175) + ($174<<3)|0);
       $177 = +HEAPF64[$176>>3];
       $178 = $177 + 0.0416666666666666643537;
       $179 = HEAP32[$t>>2]|0;
       $180 = HEAP32[3608>>2]|0;
       $181 = (($180) + ($179<<3)|0);
       HEAPF64[$181>>3] = $178;
       $182 = HEAP32[$t>>2]|0;
       $183 = (($182) + 1)|0;
       HEAP32[$t>>2] = $183;
      }
      break;
     }
     case 4:  {
      $115 = HEAP32[$y1>>2]|0;
      $116 = (+($115|0));
      $117 = +HEAPF32[$rm>>2];
      $118 = $117;
      $119 = 10.0 * $118;
      $120 = $119 - 1.0;
      $121 = $120 / 4.0;
      $122 = $116 + $121;
      $123 = HEAP32[3608>>2]|0;
      HEAPF64[$123>>3] = $122;
      HEAP32[$t>>2] = 1;
      while(1) {
       $124 = HEAP32[$t>>2]|0;
       $125 = HEAP32[$T>>2]|0;
       $126 = ($124|0)<($125|0);
       if (!($126)) {
        break L49;
       }
       $127 = HEAP32[$t>>2]|0;
       $128 = (($127) - 1)|0;
       $129 = HEAP32[3608>>2]|0;
       $130 = (($129) + ($128<<3)|0);
       $131 = +HEAPF64[$130>>3];
       $132 = $131 + 0.25;
       $133 = HEAP32[$t>>2]|0;
       $134 = HEAP32[3608>>2]|0;
       $135 = (($134) + ($133<<3)|0);
       HEAPF64[$135>>3] = $132;
       $136 = HEAP32[$t>>2]|0;
       $137 = (($136) + 1)|0;
       HEAP32[$t>>2] = $137;
      }
      break;
     }
     default: {
     }
     }
    } while(0);
    $242 = HEAP32[$failed>>2]|0;
    $243 = ($242|0)==(1);
    if (!($243)) {
     break;
    }
    $244 = HEAP32[$failed>>2]|0;
    $245 = (($244) + 1)|0;
    HEAP32[$failed>>2] = $245;
    HEAP32[$new_ptype>>2] = 2;
   }
   $246 = HEAP32[3608>>2]|0;
   HEAP32[$0>>2] = $246;
   $247 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($247|0);
  }
 }
 $91 = HEAP32[3608>>2]|0;
 HEAP32[$0>>2] = $91;
 $247 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($247|0);
}
function _panel_plotvar_code($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $pd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $pd = sp;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 108|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$pd>>2] = $4;
 $5 = HEAP32[$pd>>2]|0;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   HEAP32[$0>>2] = 0;
  } else {
   $7 = HEAP32[$pd>>2]|0;
   $8 = ($7|0)==(1);
   if ($8) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $9 = HEAP32[$pd>>2]|0;
   $10 = ($9|0)==(4);
   if ($10) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $11 = HEAP32[$pd>>2]|0;
   $12 = ($11|0)==(12);
   if ($12) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $13 = HEAP32[$pd>>2]|0;
   $14 = ($13|0)==(24);
   if ($14) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $15 = HEAP32[$pd>>2]|0;
   $16 = ($15|0)==(5);
   $17 = HEAP32[$pd>>2]|0;
   $18 = ($17|0)==(6);
   $or$cond = $16 | $18;
   $19 = HEAP32[$pd>>2]|0;
   $20 = ($19|0)==(7);
   $or$cond3 = $or$cond | $20;
   $21 = HEAP32[$pd>>2]|0;
   $22 = ($21|0)==(52);
   $or$cond5 = $or$cond3 | $22;
   if ($or$cond5) {
    $23 = HEAP32[$1>>2]|0;
    $24 = (($23) + 112|0);
    $25 = +HEAPF64[$24>>3];
    $26 = $25 > 1.0E+4;
    if ($26) {
     HEAP32[$0>>2] = 6;
     break;
    }
   }
   $27 = HEAP32[$pd>>2]|0;
   $28 = ($27|0)==(10);
   if ($28) {
    HEAP32[$0>>2] = 7;
    break;
   } else {
    HEAP32[$0>>2] = 0;
    break;
   }
  }
 } while(0);
 $29 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _plotvar_code($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = HEAP32[$1>>2]|0;
   $5 = (($4) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(1);
   if (!($7)) {
    $8 = HEAP32[$1>>2]|0;
    $9 = (($8) + 12|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(5);
    if (!($11)) {
     label = 4;
     break;
    }
   }
   $12 = HEAP32[$1>>2]|0;
   $13 = (($12) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(1);
   if ($15) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $16 = HEAP32[$1>>2]|0;
   $17 = (($16) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(4);
   if ($19) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $20 = HEAP32[$1>>2]|0;
   $21 = (($20) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(12);
   if ($23) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $24 = HEAP32[$1>>2]|0;
   $25 = (($24) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(24);
   if ($27) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $28 = HEAP32[$1>>2]|0;
   $29 = ($28|0)!=(0|0);
   do {
    if ($29) {
     $30 = HEAP32[$1>>2]|0;
     $31 = (($30) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(1);
     if ($33) {
      $34 = HEAP32[$1>>2]|0;
      $35 = (($34) + 8|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ($36|0)==(5);
      if (!($37)) {
       $38 = HEAP32[$1>>2]|0;
       $39 = (($38) + 8|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(6);
       if (!($41)) {
        $42 = HEAP32[$1>>2]|0;
        $43 = (($42) + 8|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = ($44|0)==(7);
        if (!($45)) {
         $46 = HEAP32[$1>>2]|0;
         $47 = (($46) + 8|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = ($48|0)==(52);
         if (!($49)) {
          break;
         }
        }
       }
      }
      $50 = HEAP32[$1>>2]|0;
      $51 = (($50) + 16|0);
      $52 = +HEAPF64[$51>>3];
      $53 = $52 > 1.0E+4;
      if ($53) {
       HEAP32[$0>>2] = 6;
       break L1;
      }
     }
    }
   } while(0);
   $54 = HEAP32[$1>>2]|0;
   $55 = ($54|0)!=(0|0);
   if ($55) {
    $56 = HEAP32[$1>>2]|0;
    $57 = (($56) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)==(1);
    if ($59) {
     $60 = HEAP32[$1>>2]|0;
     $61 = (($60) + 8|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)==(10);
     if ($63) {
      HEAP32[$0>>2] = 7;
      break;
     }
    }
   }
   HEAP32[$0>>2] = 2;
  } else {
   label = 4;
  }
 } while(0);
 if ((label|0) == 4) {
  HEAP32[$0>>2] = 1;
 }
 $64 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($64|0);
}
function _imhof($m,$arg,$err) {
 $m = $m|0;
 $arg = +$arg;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bound = 0, $free_lambda = 0, $k = 0, $lambda = 0, $ret = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp + 24|0;
 $0 = sp + 44|0;
 $1 = sp + 16|0;
 $2 = sp + 40|0;
 $lambda = sp + 36|0;
 $bound = sp + 8|0;
 $ret = sp;
 $k = sp + 32|0;
 $free_lambda = sp + 28|0;
 HEAP32[$0>>2] = $m;
 HEAPF64[$1>>3] = $arg;
 HEAP32[$2>>2] = $err;
 HEAP32[$lambda>>2] = 0;
 HEAPF64[$ret>>3] = 1.79769313486231570815E+308;
 HEAP32[$k>>2] = 0;
 HEAP32[$free_lambda>>2] = 0;
 $3 = (___errno_location()|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(1);
 $8 = HEAP32[$0>>2]|0;
 do {
  if ($7) {
   $9 = (($8) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   HEAP32[$lambda>>2] = $10;
   $11 = HEAP32[$0>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$k>>2] = $12;
  } else {
   $13 = HEAP32[$8>>2]|0;
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($13|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$0>>2]|0;
    $19 = (_imhof_get_eigenvals($18,$lambda,$k)|0);
    $20 = HEAP32[$2>>2]|0;
    HEAP32[$20>>2] = $19;
    HEAP32[$free_lambda>>2] = 1;
    break;
   } else {
    $21 = HEAP32[$2>>2]|0;
    HEAP32[$21>>2] = 2;
    break;
   }
  }
 } while(0);
 $22 = HEAP32[$2>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $25 = HEAP32[$lambda>>2]|0;
  $26 = HEAP32[$k>>2]|0;
  $27 = HEAP32[$2>>2]|0;
  $28 = (+_imhof_bound($25,$26,$27));
  HEAPF64[$bound>>3] = $28;
 }
 $29 = HEAP32[$2>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0);
 if (!($31)) {
  $32 = +HEAPF64[$1>>3];
  $33 = HEAP32[$lambda>>2]|0;
  $34 = HEAP32[$k>>2]|0;
  $35 = +HEAPF64[$bound>>3];
  $36 = HEAP32[$2>>2]|0;
  $37 = (+_imhof_integral($32,$33,$34,$35,$36));
  HEAPF64[$ret>>3] = $37;
 }
 $38 = (___errno_location()|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = HEAP32[_stderr>>2]|0;
  $42 = (___errno_location()|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (_strerror(($43|0))|0);
  HEAP32[$vararg_buffer>>2] = $44;
  (_fprintf(($41|0),(3648|0),($vararg_buffer|0))|0);
  $45 = HEAP32[$2>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0);
  if (!($47)) {
   $48 = HEAP32[$2>>2]|0;
   HEAP32[$48>>2] = 32;
  }
  HEAPF64[$ret>>3] = 1.79769313486231570815E+308;
  $49 = (___errno_location()|0);
  HEAP32[$49>>2] = 0;
 }
 $50 = HEAP32[$free_lambda>>2]|0;
 $51 = ($50|0)!=(0);
 if (!($51)) {
  $53 = +HEAPF64[$ret>>3];
  STACKTOP = sp;return (+$53);
 }
 $52 = HEAP32[$lambda>>2]|0;
 _free($52);
 $53 = +HEAPF64[$ret>>3];
 STACKTOP = sp;return (+$53);
}
function _imhof_get_eigenvals($m,$plam,$pk) {
 $m = $m|0;
 $plam = $plam|0;
 $pk = $pk|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $A = 0, $E = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $E = sp + 8|0;
 $A = sp + 4|0;
 $err = sp;
 HEAP32[$1>>2] = $m;
 HEAP32[$2>>2] = $plam;
 HEAP32[$3>>2] = $pk;
 HEAP32[$err>>2] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (_gretl_matrix_copy($4)|0);
 HEAP32[$A>>2] = $5;
 $6 = HEAP32[$A>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$0>>2] = 12;
  $21 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($21|0);
 }
 $8 = HEAP32[$A>>2]|0;
 $9 = (_gretl_general_matrix_eigenvals($8,0,$err)|0);
 HEAP32[$E>>2] = $9;
 $10 = HEAP32[$err>>2]|0;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $12 = HEAP32[$E>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$3>>2]|0;
  HEAP32[$14>>2] = $13;
  $15 = HEAP32[$E>>2]|0;
  $16 = (_gretl_matrix_steal_data($15)|0);
  $17 = HEAP32[$2>>2]|0;
  HEAP32[$17>>2] = $16;
 }
 $18 = HEAP32[$A>>2]|0;
 _gretl_matrix_free($18);
 $19 = HEAP32[$E>>2]|0;
 _gretl_matrix_free($19);
 $20 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $20;
 $21 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($21|0);
}
function _imhof_bound($lambda,$k,$err) {
 $lambda = $lambda|0;
 $k = $k|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $absl = 0, $bound = 0, $e1 = 0, $e2 = 0, $i = 0, $nl = 0, $sum = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer1 = sp + 56|0;
 $0 = sp + 48|0;
 $1 = sp + 72|0;
 $2 = sp + 68|0;
 $3 = sp + 64|0;
 $e1 = sp + 40|0;
 $e2 = sp + 32|0;
 $absl = sp + 24|0;
 $bound = sp + 16|0;
 $nl = sp + 8|0;
 $sum = sp;
 $i = sp + 60|0;
 HEAP32[$1>>2] = $lambda;
 HEAP32[$2>>2] = $k;
 HEAP32[$3>>2] = $err;
 HEAPF64[$e1>>3] = 1.00000000000000004792E-4;
 HEAPF64[$e2>>3] = 1.00000000000000004792E-4;
 HEAPF64[$nl>>3] = 0.0;
 HEAPF64[$sum>>3] = 0.0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $4 = HEAP32[$i>>2]|0;
  $5 = HEAP32[$2>>2]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + ($7<<3)|0);
  $10 = +HEAPF64[$9>>3];
  $11 = (+Math_abs((+$10)));
  HEAPF64[$absl>>3] = $11;
  $12 = +HEAPF64[$absl>>3];
  $13 = +HEAPF64[$e2>>3];
  $14 = $12 > $13;
  if ($14) {
   $15 = +HEAPF64[$nl>>3];
   $16 = $15 + 1.0;
   HEAPF64[$nl>>3] = $16;
   $17 = +HEAPF64[$absl>>3];
   $18 = (+Math_log((+$17)));
   $19 = +HEAPF64[$sum>>3];
   $20 = $19 + $18;
   HEAPF64[$sum>>3] = $20;
  }
  $21 = HEAP32[$i>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$i>>2] = $22;
 }
 $23 = +HEAPF64[$nl>>3];
 $24 = $23 == 0.0;
 if ($24) {
  $25 = HEAP32[_stderr>>2]|0;
  (_fprintf(($25|0),(3800|0),($vararg_buffer1|0))|0);
  $26 = HEAP32[$3>>2]|0;
  HEAP32[$26>>2] = 2;
  HEAPF64[$0>>3] = 1.79769313486231570815E+308;
  $52 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$52);
 }
 $27 = +HEAPF64[$nl>>3];
 $28 = $27 * 0.5;
 HEAPF64[$nl>>3] = $28;
 $29 = +HEAPF64[$sum>>3];
 $30 = 0.5 * $29;
 $31 = +HEAPF64[$nl>>3];
 $32 = 3.141592653589793116 * $31;
 $33 = (+Math_log((+$32)));
 $34 = $30 + $33;
 HEAPF64[$sum>>3] = $34;
 $35 = +HEAPF64[$sum>>3];
 $36 = +HEAPF64[$e1>>3];
 $37 = (+Math_log((+$36)));
 $38 = $35 + $37;
 $39 = -$38;
 $40 = +HEAPF64[$nl>>3];
 $41 = $39 / $40;
 $42 = (+Math_exp((+$41)));
 HEAPF64[$bound>>3] = $42;
 $43 = +HEAPF64[$nl>>3];
 $44 = 5.0 / $43;
 $45 = +HEAPF64[$bound>>3];
 $46 = $45 + $44;
 HEAPF64[$bound>>3] = $46;
 $47 = +HEAPF64[$bound>>3];
 $48 = $47 < 0.0;
 if ($48) {
  $49 = HEAP32[_stderr>>2]|0;
  (_fprintf(($49|0),(3848|0),($vararg_buffer1|0))|0);
  $50 = HEAP32[$3>>2]|0;
  HEAP32[$50>>2] = 2;
  HEAPF64[$bound>>3] = 1.79769313486231570815E+308;
 }
 $51 = +HEAPF64[$bound>>3];
 HEAPF64[$0>>3] = $51;
 $52 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$52);
}
function _imhof_integral($arg,$lambda,$k,$bound,$err) {
 $arg = +$arg;
 $lambda = $lambda|0;
 $k = $k|0;
 $bound = +$bound;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $9 = 0.0;
 var $base = 0, $e3 = 0, $eps4 = 0, $int0 = 0, $int1 = 0, $j = 0, $n = 0, $or$cond = 0, $ret = 0, $step = 0, $sum1 = 0, $sum4 = 0, $vararg_buffer2 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer2 = sp + 88|0;
 $0 = sp + 80|0;
 $1 = sp + 116|0;
 $2 = sp + 112|0;
 $3 = sp + 72|0;
 $4 = sp + 108|0;
 $e3 = sp + 64|0;
 $base = sp + 56|0;
 $step = sp + 48|0;
 $sum1 = sp + 40|0;
 $int0 = sp + 32|0;
 $int1 = sp + 24|0;
 $eps4 = sp + 16|0;
 $sum4 = sp + 8|0;
 $ret = sp;
 $j = sp + 104|0;
 $n = sp + 100|0;
 HEAPF64[$0>>3] = $arg;
 HEAP32[$1>>2] = $lambda;
 HEAP32[$2>>2] = $k;
 HEAPF64[$3>>3] = $bound;
 HEAP32[$4>>2] = $err;
 HEAPF64[$e3>>3] = 1.00000000000000004792E-4;
 HEAPF64[$int0>>3] = 0.0;
 HEAPF64[$int1>>3] = 0.0;
 $5 = +HEAPF64[$e3>>3];
 $6 = 9.42477796076937934799 * $5;
 HEAPF64[$eps4>>3] = $6;
 HEAPF64[$sum4>>3] = 0.0;
 HEAPF64[$ret>>3] = 1.79769313486231570815E+308;
 HEAP32[$n>>2] = 2;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = +HEAPF64[$0>>3];
 $10 = (+_imhof_f(0.0,$7,$8,$9));
 HEAPF64[$base>>3] = $10;
 $11 = +HEAPF64[$3>>3];
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = +HEAPF64[$0>>3];
 $15 = (+_imhof_f($11,$12,$13,$14));
 $16 = +HEAPF64[$base>>3];
 $17 = $16 + $15;
 HEAPF64[$base>>3] = $17;
 while(1) {
  $18 = HEAP32[$n>>2]|0;
  $19 = ($18|0)<(2048);
  if (!($19)) {
   break;
  }
  $20 = +HEAPF64[$3>>3];
  $21 = HEAP32[$n>>2]|0;
  $22 = (+($21|0));
  $23 = $20 / $22;
  HEAPF64[$step>>3] = $23;
  $24 = +HEAPF64[$base>>3];
  $25 = +HEAPF64[$sum4>>3];
  $26 = $25 * 2.0;
  $27 = $24 + $26;
  HEAPF64[$sum1>>3] = $27;
  $28 = +HEAPF64[$sum1>>3];
  HEAPF64[$base>>3] = $28;
  HEAPF64[$sum4>>3] = 0.0;
  HEAP32[$j>>2] = 1;
  while(1) {
   $29 = HEAP32[$j>>2]|0;
   $30 = HEAP32[$n>>2]|0;
   $31 = ($29|0)<=($30|0);
   if (!($31)) {
    break;
   }
   $32 = HEAP32[$j>>2]|0;
   $33 = (+($32|0));
   $34 = +HEAPF64[$step>>3];
   $35 = $33 * $34;
   $36 = HEAP32[$1>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = +HEAPF64[$0>>3];
   $39 = (+_imhof_f($35,$36,$37,$38));
   $40 = +HEAPF64[$sum4>>3];
   $41 = $40 + $39;
   HEAPF64[$sum4>>3] = $41;
   $42 = HEAP32[$j>>2]|0;
   $43 = (($42) + 2)|0;
   HEAP32[$j>>2] = $43;
  }
  $44 = +HEAPF64[$sum1>>3];
  $45 = +HEAPF64[$sum4>>3];
  $46 = 4.0 * $45;
  $47 = $44 + $46;
  $48 = +HEAPF64[$step>>3];
  $49 = $47 * $48;
  HEAPF64[$int1>>3] = $49;
  $50 = HEAP32[$n>>2]|0;
  $51 = ($50|0)>(8);
  if ($51) {
   $52 = +HEAPF64[$int1>>3];
   $53 = +HEAPF64[$int0>>3];
   $54 = $52 - $53;
   $55 = (+Math_abs((+$54)));
   $56 = +HEAPF64[$eps4>>3];
   $57 = $55 < $56;
   if ($57) {
    break;
   }
  }
  $58 = +HEAPF64[$int1>>3];
  HEAPF64[$int0>>3] = $58;
  $59 = HEAP32[$n>>2]|0;
  $60 = $59<<1;
  HEAP32[$n>>2] = $60;
 }
 $61 = HEAP32[$n>>2]|0;
 $62 = ($61|0)>(2048);
 if ($62) {
  $63 = HEAP32[_stderr>>2]|0;
  $64 = HEAP32[$n>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $64;
  (_fprintf(($63|0),(3664|0),($vararg_buffer2|0))|0);
  $65 = HEAP32[$4>>2]|0;
  HEAP32[$65>>2] = 32;
  $79 = +HEAPF64[$ret>>3];
  STACKTOP = sp;return (+$79);
 }
 $66 = +HEAPF64[$int1>>3];
 $67 = $66 / 9.42477796076937934799;
 $68 = 0.5 - $67;
 HEAPF64[$ret>>3] = $68;
 $69 = +HEAPF64[$ret>>3];
 $70 = $69 < 0.0;
 $71 = +HEAPF64[$ret>>3];
 $72 = $71 > -9.99999999999999998819E-15;
 $or$cond = $70 & $72;
 if ($or$cond) {
  HEAPF64[$ret>>3] = 0.0;
  $79 = +HEAPF64[$ret>>3];
  STACKTOP = sp;return (+$79);
 }
 $73 = +HEAPF64[$ret>>3];
 $74 = $73 < 0.0;
 if (!($74)) {
  $79 = +HEAPF64[$ret>>3];
  STACKTOP = sp;return (+$79);
 }
 $75 = HEAP32[_stderr>>2]|0;
 $76 = HEAP32[$n>>2]|0;
 $77 = +HEAPF64[$ret>>3];
 HEAP32[$vararg_buffer2>>2] = $76;
 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$77;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_fprintf(($75|0),(3712|0),($vararg_buffer2|0))|0);
 _gretl_errmsg_set(3760);
 $78 = HEAP32[$4>>2]|0;
 HEAP32[$78>>2] = 2;
 HEAPF64[$ret>>3] = 1.79769313486231570815E+308;
 $79 = +HEAPF64[$ret>>3];
 STACKTOP = sp;return (+$79);
}
function _dw_pval($u,$X,$pDW,$perr) {
 $u = $u|0;
 $X = $X|0;
 $pDW = $pDW|0;
 $perr = $perr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $A = 0, $DW = 0, $E = 0;
 var $M = 0, $MA = 0, $XX = 0, $err = 0, $i = 0, $k = 0, $n = 0, $pv = 0, $uu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 72|0;
 $1 = sp + 68|0;
 $2 = sp + 64|0;
 $3 = sp + 60|0;
 $M = sp + 56|0;
 $A = sp + 52|0;
 $MA = sp + 48|0;
 $XX = sp + 44|0;
 $E = sp + 40|0;
 $uu = sp + 16|0;
 $DW = sp + 8|0;
 $pv = sp;
 $k = sp + 36|0;
 $n = sp + 32|0;
 $i = sp + 28|0;
 $err = sp + 24|0;
 HEAP32[$0>>2] = $u;
 HEAP32[$1>>2] = $X;
 HEAP32[$2>>2] = $pDW;
 HEAP32[$3>>2] = $perr;
 HEAP32[$M>>2] = 0;
 HEAP32[$A>>2] = 0;
 HEAP32[$MA>>2] = 0;
 HEAP32[$XX>>2] = 0;
 HEAP32[$E>>2] = 0;
 HEAPF64[$pv>>3] = 1.79769313486231570815E+308;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$k>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$n>>2] = $8;
 HEAP32[$err>>2] = 0;
 $9 = HEAP32[$n>>2]|0;
 $10 = (_gretl_identity_matrix_new($9)|0);
 HEAP32[$M>>2] = $10;
 $11 = HEAP32[$n>>2]|0;
 $12 = (_gretl_DW_matrix_new($11)|0);
 HEAP32[$A>>2] = $12;
 $13 = HEAP32[$n>>2]|0;
 $14 = HEAP32[$n>>2]|0;
 $15 = (_gretl_matrix_alloc($13,$14)|0);
 HEAP32[$MA>>2] = $15;
 $16 = HEAP32[$k>>2]|0;
 $17 = HEAP32[$k>>2]|0;
 $18 = (_gretl_matrix_alloc($16,$17)|0);
 HEAP32[$XX>>2] = $18;
 $19 = HEAP32[$M>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  label = 5;
 } else {
  $21 = HEAP32[$A>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   label = 5;
  } else {
   $23 = HEAP32[$MA>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    label = 5;
   } else {
    $25 = HEAP32[$XX>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     label = 5;
    } else {
     $27 = HEAP32[$1>>2]|0;
     $28 = HEAP32[$1>>2]|0;
     $29 = HEAP32[$XX>>2]|0;
     (_gretl_matrix_multiply_mod($27,1,$28,0,$29,0)|0);
     $30 = HEAP32[$XX>>2]|0;
     $31 = (_gretl_invert_symmetric_matrix($30)|0);
     HEAP32[$err>>2] = $31;
     $32 = HEAP32[$err>>2]|0;
     $33 = ($32|0)!=(0);
     if (!($33)) {
      $34 = HEAP32[$1>>2]|0;
      $35 = HEAP32[$XX>>2]|0;
      $36 = HEAP32[$M>>2]|0;
      $37 = (_gretl_matrix_qform($34,0,$35,$36,4)|0);
      HEAP32[$err>>2] = $37;
     }
     $38 = HEAP32[$err>>2]|0;
     $39 = ($38|0)!=(0);
     if (!($39)) {
      $40 = HEAP32[$M>>2]|0;
      $41 = HEAP32[$A>>2]|0;
      $42 = HEAP32[$MA>>2]|0;
      $43 = (_gretl_matrix_multiply($40,$41,$42)|0);
      HEAP32[$err>>2] = $43;
     }
     $44 = HEAP32[$err>>2]|0;
     $45 = ($44|0)!=(0);
     if (!($45)) {
      $46 = HEAP32[$0>>2]|0;
      $47 = HEAP32[$0>>2]|0;
      $48 = (+_gretl_matrix_dot_product($46,1,$47,0,$err));
      HEAPF64[$uu>>3] = $48;
     }
     $49 = HEAP32[$err>>2]|0;
     $50 = ($49|0)!=(0);
     if (!($50)) {
      $51 = HEAP32[$0>>2]|0;
      $52 = HEAP32[$A>>2]|0;
      $53 = (+_gretl_scalar_qform($51,$52,$err));
      HEAPF64[$DW>>3] = $53;
     }
     $54 = HEAP32[$err>>2]|0;
     $55 = ($54|0)!=(0);
     if (!($55)) {
      $56 = +HEAPF64[$uu>>3];
      $57 = +HEAPF64[$DW>>3];
      $58 = $57 / $56;
      HEAPF64[$DW>>3] = $58;
      $59 = HEAP32[$MA>>2]|0;
      $60 = (_gretl_general_matrix_eigenvals($59,0,$err)|0);
      HEAP32[$E>>2] = $60;
     }
     $61 = HEAP32[$err>>2]|0;
     $62 = ($61|0)!=(0);
     if (!($62)) {
      $63 = HEAP32[$n>>2]|0;
      $64 = HEAP32[$k>>2]|0;
      $65 = (($63) - ($64))|0;
      HEAP32[$k>>2] = $65;
      HEAP32[$i>>2] = 0;
      while(1) {
       $66 = HEAP32[$i>>2]|0;
       $67 = HEAP32[$k>>2]|0;
       $68 = ($66|0)<($67|0);
       if (!($68)) {
        break;
       }
       $69 = +HEAPF64[$DW>>3];
       $70 = HEAP32[$i>>2]|0;
       $71 = HEAP32[$E>>2]|0;
       $72 = (($71) + 8|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (($73) + ($70<<3)|0);
       $75 = +HEAPF64[$74>>3];
       $76 = $75 - $69;
       HEAPF64[$74>>3] = $76;
       $77 = HEAP32[$i>>2]|0;
       $78 = (($77) + 1)|0;
       HEAP32[$i>>2] = $78;
      }
      $79 = HEAP32[$E>>2]|0;
      $80 = HEAP32[$k>>2]|0;
      (_gretl_matrix_reuse($79,$80,1)|0);
      $81 = HEAP32[$E>>2]|0;
      $82 = (+_imhof($81,0.0,$err));
      HEAPF64[$pv>>3] = $82;
      $83 = HEAP32[$err>>2]|0;
      $84 = ($83|0)!=(0);
      if (!($84)) {
       $85 = HEAP32[$2>>2]|0;
       $86 = ($85|0)!=(0|0);
       if ($86) {
        $87 = +HEAPF64[$DW>>3];
        $88 = HEAP32[$2>>2]|0;
        HEAPF64[$88>>3] = $87;
       }
      }
     }
    }
   }
  }
 }
 if ((label|0) == 5) {
  HEAP32[$err>>2] = 12;
 }
 $89 = HEAP32[$M>>2]|0;
 _gretl_matrix_free($89);
 $90 = HEAP32[$A>>2]|0;
 _gretl_matrix_free($90);
 $91 = HEAP32[$MA>>2]|0;
 _gretl_matrix_free($91);
 $92 = HEAP32[$XX>>2]|0;
 _gretl_matrix_free($92);
 $93 = HEAP32[$E>>2]|0;
 _gretl_matrix_free($93);
 $94 = HEAP32[$err>>2]|0;
 $95 = HEAP32[$3>>2]|0;
 HEAP32[$95>>2] = $94;
 $96 = +HEAPF64[$pv>>3];
 STACKTOP = sp;return (+$96);
}
function _imhof_f($u,$lambda,$k,$arg) {
 $u = +$u;
 $lambda = $lambda|0;
 $k = $k|0;
 $arg = +$arg;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $i = 0, $rho = 0, $theta = 0, $ul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 40|0;
 $1 = sp + 32|0;
 $2 = sp + 56|0;
 $3 = sp + 52|0;
 $4 = sp + 24|0;
 $ul = sp + 16|0;
 $rho = sp + 8|0;
 $theta = sp;
 $i = sp + 48|0;
 HEAPF64[$1>>3] = $u;
 HEAP32[$2>>2] = $lambda;
 HEAP32[$3>>2] = $k;
 HEAPF64[$4>>3] = $arg;
 HEAPF64[$rho>>3] = 0.0;
 $5 = +HEAPF64[$1>>3];
 $6 = -$5;
 $7 = +HEAPF64[$4>>3];
 $8 = $6 * $7;
 HEAPF64[$theta>>3] = $8;
 $9 = +HEAPF64[$1>>3];
 $10 = $9 == 0.0;
 if ($10) {
  $11 = +HEAPF64[$4>>3];
  $12 = -$11;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = (+_vecsum($13,$14));
  $16 = $12 + $15;
  $17 = 0.5 * $16;
  HEAPF64[$0>>3] = $17;
  $49 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$49);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $18 = HEAP32[$i>>2]|0;
  $19 = HEAP32[$3>>2]|0;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = +HEAPF64[$1>>3];
  $22 = HEAP32[$i>>2]|0;
  $23 = HEAP32[$2>>2]|0;
  $24 = (($23) + ($22<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $21 * $25;
  HEAPF64[$ul>>3] = $26;
  $27 = +HEAPF64[$ul>>3];
  $28 = (+Math_atan((+$27)));
  $29 = +HEAPF64[$theta>>3];
  $30 = $29 + $28;
  HEAPF64[$theta>>3] = $30;
  $31 = +HEAPF64[$ul>>3];
  $32 = +HEAPF64[$ul>>3];
  $33 = $31 * $32;
  $34 = 1.0 + $33;
  $35 = (+Math_log((+$34)));
  $36 = +HEAPF64[$rho>>3];
  $37 = $36 + $35;
  HEAPF64[$rho>>3] = $37;
  $38 = HEAP32[$i>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[$i>>2] = $39;
 }
 $40 = +HEAPF64[$theta>>3];
 $41 = 0.5 * $40;
 $42 = (+Math_sin((+$41)));
 $43 = +HEAPF64[$1>>3];
 $44 = +HEAPF64[$rho>>3];
 $45 = 0.25 * $44;
 $46 = (+Math_exp((+$45)));
 $47 = $43 * $46;
 $48 = $42 / $47;
 HEAPF64[$0>>3] = $48;
 $49 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$49);
}
function _vecsum($x,$k) {
 $x = $x|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $i = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $sum = sp;
 $i = sp + 8|0;
 HEAP32[$0>>2] = $x;
 HEAP32[$1>>2] = $k;
 HEAPF64[$sum>>3] = 0.0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + ($5<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = +HEAPF64[$sum>>3];
  $10 = $9 + $8;
  HEAPF64[$sum>>3] = $10;
  $11 = HEAP32[$i>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$i>>2] = $12;
 }
 $13 = +HEAPF64[$sum>>3];
 STACKTOP = sp;return (+$13);
}
function _gretl_function_hash_cleanup() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_real_function_lookup(0,0)|0);
 STACKTOP = sp;return;
}
function _real_function_lookup($s,$a) {
 $s = $s|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $p = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $s;
 HEAP32[$2>>2] = $a;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = HEAP32[8864>>2]|0;
 if ($4) {
  $6 = ($5|0)!=(0|0);
  if ($6) {
   $7 = HEAP32[8864>>2]|0;
   _g_hash_table_destroy($7);
   HEAP32[8864>>2] = 0;
  }
  HEAP32[$0>>2] = 0;
  $34 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($34|0);
 }
 $8 = ($5|0)==(0|0);
 if ($8) {
  $9 = (_gretl_function_hash_init()|0);
  HEAP32[8864>>2] = $9;
 }
 $10 = HEAP32[8864>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = (_g_hash_table_lookup($10,$11)|0);
 HEAP32[$p>>2] = $12;
 $13 = HEAP32[$p>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = HEAP32[$p>>2]|0;
  $16 = $15;
  HEAP32[$0>>2] = $16;
  $34 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($34|0);
 }
 $17 = HEAP32[$2>>2]|0;
 $18 = ($17|0)==(1);
 L15: do {
  if ($18) {
   HEAP32[$i>>2] = 0;
   while(1) {
    $19 = HEAP32[$i>>2]|0;
    $20 = (8808 + ($19<<3)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)!=(0);
    if (!($22)) {
     break L15;
    }
    $23 = HEAP32[$1>>2]|0;
    $24 = HEAP32[$i>>2]|0;
    $25 = (8808 + ($24<<3)|0);
    $26 = (($25) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (_strcmp($23,$27)|0);
    $29 = ($28|0)!=(0);
    $30 = HEAP32[$i>>2]|0;
    if (!($29)) {
     break;
    }
    $33 = (($30) + 1)|0;
    HEAP32[$i>>2] = $33;
   }
   $31 = (8808 + ($30<<3)|0);
   $32 = HEAP32[$31>>2]|0;
   HEAP32[$0>>2] = $32;
   $34 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($34|0);
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $34 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _gretl_function_hash_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ht = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ht = sp + 4|0;
 $i = sp;
 $0 = (_g_hash_table_new(1,1)|0);
 HEAP32[$ht>>2] = $0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $1 = HEAP32[$i>>2]|0;
  $2 = (6616 + ($1<<3)|0);
  $3 = (($2) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  $6 = HEAP32[$ht>>2]|0;
  if (!($5)) {
   break;
  }
  $7 = HEAP32[$i>>2]|0;
  $8 = (6616 + ($7<<3)|0);
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$i>>2]|0;
  $12 = (6616 + ($11<<3)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13;
  (_g_hash_table_insert($6,$10,$14)|0);
  $15 = HEAP32[$i>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$i>>2] = $16;
 }
 STACKTOP = sp;return ($6|0);
}
function _series_index($dset,$varname) {
 $dset = $dset|0;
 $varname = $varname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $fd = 0, $i = 0, $ret = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $s = sp + 12|0;
 $fd = sp + 8|0;
 $ret = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $varname;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$s>>2] = $2;
 HEAP32[$fd>>2] = 0;
 HEAP32[$ret>>2] = -1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)!=(0|0);
 L1: do {
  if ($4) {
   $5 = HEAP32[$0>>2]|0;
   $6 = HEAP32[$5>>2]|0;
   HEAP32[$ret>>2] = $6;
   $7 = HEAP32[$s>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = HEAP32[$s>>2]|0;
    $10 = HEAP8[$9>>0]|0;
    $11 = $10 << 24 >> 24;
    $12 = ($11|0)==(0);
    if (!($12)) {
     $13 = HEAP32[$s>>2]|0;
     $14 = HEAP8[$13>>0]|0;
     $15 = $14 << 24 >> 24;
     $16 = (_isdigit($15)|0);
     $17 = ($16|0)!=(0);
     if (!($17)) {
      $18 = HEAP32[$s>>2]|0;
      $19 = (_strcmp($18,8872)|0);
      $20 = ($19|0)==(0);
      if ($20) {
       HEAP32[$ret>>2] = 0;
       break;
      }
      $21 = HEAP32[$s>>2]|0;
      $22 = (_strchr($21,46)|0);
      $23 = ($22|0)!=(0|0);
      if ($23) {
       $24 = HEAP32[$0>>2]|0;
       $25 = HEAP32[$s>>2]|0;
       $26 = (_try_for_listvar($24,$25)|0);
       HEAP32[$ret>>2] = $26;
       break;
      }
      $27 = (_gretl_function_depth()|0);
      HEAP32[$fd>>2] = $27;
      $28 = HEAP32[$fd>>2]|0;
      $29 = ($28|0)==(0);
      HEAP32[$i>>2] = 1;
      if ($29) {
       while(1) {
        $30 = HEAP32[$i>>2]|0;
        $31 = HEAP32[$0>>2]|0;
        $32 = HEAP32[$31>>2]|0;
        $33 = ($30|0)<($32|0);
        if (!($33)) {
         break L1;
        }
        $34 = HEAP32[$i>>2]|0;
        $35 = HEAP32[$0>>2]|0;
        $36 = (($35) + 68|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = (($37) + ($34<<2)|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = HEAP32[$s>>2]|0;
        $41 = (_strcmp($39,$40)|0);
        $42 = ($41|0)==(0);
        $43 = HEAP32[$i>>2]|0;
        if ($42) {
         break;
        }
        $44 = (($43) + 1)|0;
        HEAP32[$i>>2] = $44;
       }
       HEAP32[$ret>>2] = $43;
       break;
      }
      while(1) {
       $45 = HEAP32[$i>>2]|0;
       $46 = HEAP32[$0>>2]|0;
       $47 = HEAP32[$46>>2]|0;
       $48 = ($45|0)<($47|0);
       if (!($48)) {
        break L1;
       }
       $49 = HEAP32[$fd>>2]|0;
       $50 = HEAP32[$0>>2]|0;
       $51 = HEAP32[$i>>2]|0;
       $52 = (_series_get_stack_level($50,$51)|0);
       $53 = ($49|0)==($52|0);
       if ($53) {
        $54 = HEAP32[$0>>2]|0;
        $55 = HEAP32[$i>>2]|0;
        $56 = (_series_is_listarg($54,$55)|0);
        $57 = ($56|0)!=(0);
        if (!($57)) {
         $58 = HEAP32[$i>>2]|0;
         $59 = HEAP32[$0>>2]|0;
         $60 = (($59) + 68|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = (($61) + ($58<<2)|0);
         $63 = HEAP32[$62>>2]|0;
         $64 = HEAP32[$s>>2]|0;
         $65 = (_strcmp($63,$64)|0);
         $66 = ($65|0)==(0);
         if ($66) {
          break;
         }
        }
       }
       $68 = HEAP32[$i>>2]|0;
       $69 = (($68) + 1)|0;
       HEAP32[$i>>2] = $69;
      }
      $67 = HEAP32[$i>>2]|0;
      HEAP32[$ret>>2] = $67;
     }
    }
   }
  }
 } while(0);
 $70 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($70|0);
}
function _try_for_listvar($dset,$s) {
 $dset = $dset|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, $i = 0, $list = 0, $lname = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vi = 0, $vname = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer2 = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $vname = sp + 80|0;
 $lname = sp + 48|0;
 $fmt = sp + 32|0;
 $list = sp + 16|0;
 $i = sp + 12|0;
 $vi = sp + 8|0;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $s;
 HEAP32[$vararg_buffer2>>2] = 31;
 $vararg_ptr1 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 31;
 (_sprintf($fmt,8880,$vararg_buffer2)|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $lname;
 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $vname;
 $4 = (_sscanf($3,$fmt,$vararg_buffer2)|0);
 $5 = ($4|0)==(2);
 L1: do {
  if ($5) {
   $6 = (_get_list_by_name($lname)|0);
   HEAP32[$list>>2] = $6;
   $7 = HEAP32[$list>>2]|0;
   $8 = ($7|0)!=(0|0);
   if ($8) {
    HEAP32[$i>>2] = 1;
    while(1) {
     $9 = HEAP32[$i>>2]|0;
     $10 = HEAP32[$list>>2]|0;
     $11 = HEAP32[$10>>2]|0;
     $12 = ($9|0)<=($11|0);
     if (!($12)) {
      break L1;
     }
     $13 = HEAP32[$i>>2]|0;
     $14 = HEAP32[$list>>2]|0;
     $15 = (($14) + ($13<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     HEAP32[$vi>>2] = $16;
     $17 = HEAP32[$vi>>2]|0;
     $18 = HEAP32[$1>>2]|0;
     $19 = (($18) + 68|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + ($17<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (_strcmp($vname,$22)|0);
     $24 = ($23|0)!=(0);
     if (!($24)) {
      break;
     }
     $26 = HEAP32[$i>>2]|0;
     $27 = (($26) + 1)|0;
     HEAP32[$i>>2] = $27;
    }
    $25 = HEAP32[$vi>>2]|0;
    HEAP32[$0>>2] = $25;
    $30 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($30|0);
   }
  }
 } while(0);
 $28 = HEAP32[$1>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 HEAP32[$0>>2] = $29;
 $30 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($30|0);
}
function _current_series_index($dset,$vname) {
 $dset = $dset|0;
 $vname = $vname|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $v = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$1>>2] = $vname;
 HEAP32[$v>>2] = -1;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = HEAP32[$1>>2]|0;
   $7 = HEAP8[$6>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = ($8|0)!=(0);
   if ($9) {
    $10 = HEAP32[$0>>2]|0;
    $11 = HEAP32[$1>>2]|0;
    $12 = (_series_index($10,$11)|0);
    HEAP32[$v>>2] = $12;
    $13 = HEAP32[$v>>2]|0;
    $14 = HEAP32[$0>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    $16 = ($13|0)>=($15|0);
    $$ = $16 ? -1 : $12;
    HEAP32[$v>>2] = $$;
   }
  }
 }
 $17 = HEAP32[$v>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _gnuplot_cleanup() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $fname = 0, $p = 0, $pnum = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $p = sp + 12|0;
 $fname = sp + 8|0;
 $pnum = sp + 4|0;
 $0 = (_gretl_plotfile()|0);
 HEAP32[$fname>>2] = $0;
 $1 = HEAP32[$fname>>2]|0;
 $2 = (_strstr($1,8896)|0);
 HEAP32[$p>>2] = $2;
 $3 = HEAP32[$p>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$p>>2]|0;
 HEAP32[$vararg_buffer>>2] = $pnum;
 $6 = (_sscanf($5,8904,$vararg_buffer)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$fname>>2]|0;
 (_gretl_remove($8)|0);
 STACKTOP = sp;return;
}
function _gretl_bundle_destroy($bundle) {
 $bundle = $bundle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $bundle;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  _g_hash_table_destroy($7);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = HEAP32[$0>>2]|0;
 _free($11);
 STACKTOP = sp;return;
}
function _bundle_contains_data($b,$data) {
 $b = $b|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $b;
 HEAP32[$1>>2] = $data;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (_g_hash_table_find($3,2,$4)|0);
 $6 = ($5|0)!=(0|0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _match_by_data($key,$value,$p) {
 $key = $key|0;
 $value = $value|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $item = sp;
 HEAP32[$0>>2] = $key;
 HEAP32[$1>>2] = $value;
 HEAP32[$2>>2] = $p;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$item>>2] = $3;
 $4 = HEAP32[$item>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($6|0)==($7|0);
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function _gretl_command_hash_cleanup() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8920>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[8920>>2]|0;
 _g_hash_table_destroy($2);
 STACKTOP = sp;return;
}
function _gretl_errmsg_get() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (8928|0);
}
function _gretl_errmsg_set($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $m = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $n = sp + 4|0;
 $m = sp;
 HEAP32[$0>>2] = $str;
 $1 = HEAP32[13040>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = HEAP8[8928>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  if ($5) {
   STACKTOP = sp;return;
  }
 }
 $6 = HEAP8[8928>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)==(0);
 $9 = HEAP32[$0>>2]|0;
 if ($8) {
  (_strncat(8928,$9,2047)|0);
  STACKTOP = sp;return;
 }
 $10 = (_strcmp(8928,$9)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (_strlen((8928|0))|0);
 HEAP32[$n>>2] = $12;
 $13 = HEAP32[$0>>2]|0;
 $14 = (_strlen(($13|0))|0);
 HEAP32[$m>>2] = $14;
 $15 = HEAP32[$n>>2]|0;
 $16 = HEAP32[$m>>2]|0;
 $17 = (($15) + ($16))|0;
 $18 = (($17) + 2)|0;
 $19 = ($18|0)<(2048);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 (_strcat((8928|0),(13048|0))|0);
 $20 = HEAP32[$0>>2]|0;
 (_strcat((8928|0),($20|0))|0);
 STACKTOP = sp;return;
}
function _gretl_errmsg_sprintf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $ap1 = 0, $len0 = 0, $n = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0;
 $0 = sp + 40|0;
 $ap = sp + 24|0;
 $len0 = sp + 20|0;
 $n = sp + 16|0;
 $tmp = sp + 48|0;
 $ap1 = sp;
 HEAP32[$0>>2] = $fmt;
 $1 = HEAP8[8928>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$ap>>2] = $varargs;
  $4 = HEAP32[$0>>2]|0;
  (_vsnprintf(8928,2048,$4,$ap)|0);
  STACKTOP = sp;return;
 }
 $5 = (_strstr(8928,13056)|0);
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (_strstr($7,13056)|0);
  $9 = ($8|0)!=(0|0);
  if ($9) {
   STACKTOP = sp;return;
  }
 }
 $10 = (_strlen((8928|0))|0);
 HEAP32[$len0>>2] = $10;
 $11 = HEAP32[$len0>>2]|0;
 $12 = (2048 - ($11))|0;
 $13 = (($12) - 2)|0;
 HEAP32[$n>>2] = $13;
 $14 = HEAP32[$n>>2]|0;
 $15 = ($14|0)>(31);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 HEAP8[$tmp>>0] = 0;
 HEAP32[$ap1>>2] = $varargs;
 $16 = HEAP32[$n>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 (_vsnprintf($tmp,$16,$17,$ap1)|0);
 $18 = HEAP32[$len0>>2]|0;
 $19 = (($18) - 1)|0;
 $20 = (8928 + ($19)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21 << 24 >> 24;
 $23 = ($22|0)!=(10);
 if ($23) {
  (_strncat(8928,13048,1)|0);
 }
 $24 = (_strlen(($tmp|0))|0);
 (_strncat(8928,$tmp,$24)|0);
 STACKTOP = sp;return;
}
function _gretl_errmsg_set_from_errno($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $msg = sp + 8|0;
 HEAP32[$0>>2] = $s;
 HEAP32[$msg>>2] = 0;
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = (___errno_location()|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_strerror(($5|0))|0);
  HEAP32[$msg>>2] = $6;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
 }
 $8 = HEAP32[$msg>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$msg>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  _gretl_errmsg_sprintf(13080,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  $14 = HEAP32[$msg>>2]|0;
  _gretl_errmsg_set($14);
  STACKTOP = sp;return;
 }
}
function _gretl_error_clear() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[13040>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  HEAP8[8928>>0] = 0;
 }
 HEAP32[13032>>2] = 0;
 $2 = (___errno_location()|0);
 HEAP32[$2>>2] = 0;
 HEAP32[10976>>2] = 0;
 HEAP8[10984>>0] = 0;
 STACKTOP = sp;return;
}
function _set_gretl_warning($w) {
 $w = $w|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $w;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[10976>>2] = $1;
 STACKTOP = sp;return;
}
function _gretl_function_depth() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[13088>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _function_package_free($pkg) {
 $pkg = $pkg|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $pkg;
 $1 = HEAP32[$0>>2]|0;
 _real_function_package_free($1,0);
 STACKTOP = sp;return;
}
function _free_params_array($params,$n) {
 $params = $params|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $params;
 HEAP32[$1>>2] = $n;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $4 = HEAP32[$i>>2]|0;
  $5 = HEAP32[$1>>2]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + (($7*56)|0)|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + (($11*56)|0)|0);
  $14 = (($13) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  _free($15);
  $16 = HEAP32[$i>>2]|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + (($16*56)|0)|0);
  $19 = (($18) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$i>>2]|0;
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + (($21*56)|0)|0);
  $24 = (($23) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  _strings_array_free($20,$25);
  $26 = HEAP32[$i>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$i>>2] = $27;
 }
 $28 = HEAP32[$0>>2]|0;
 _free($28);
 STACKTOP = sp;return;
}
function _gretl_functions_cleanup() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = sp;
 HEAP32[$i>>2] = 0;
 while(1) {
  $0 = HEAP32[$i>>2]|0;
  $1 = HEAP32[13096>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[13104>>2]|0;
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  _ufunc_free($6);
  $7 = HEAP32[$i>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$i>>2] = $8;
 }
 $9 = HEAP32[13104>>2]|0;
 _free($9);
 HEAP32[13104>>2] = 0;
 HEAP32[13096>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[13112>>2]|0;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[$i>>2]|0;
  $14 = HEAP32[13120>>2]|0;
  $15 = (($14) + ($13<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  _function_package_free($16);
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[13120>>2]|0;
 _free($19);
 HEAP32[13120>>2] = 0;
 HEAP32[13112>>2] = 0;
 STACKTOP = sp;return;
}
function _ufunc_free($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $fun;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 _strings_array_free($3,$6);
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 _free_params_array($9,$12);
 $13 = HEAP32[$0>>2]|0;
 _free($13);
 STACKTOP = sp;return;
}
function _real_function_package_free($pkg,$full) {
 $pkg = $pkg|0;
 $full = $full|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $pkg;
 HEAP32[$1>>2] = $full;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)!=(0);
 HEAP32[$i>>2] = 0;
 L4: do {
  if ($5) {
   while(1) {
    $6 = HEAP32[$i>>2]|0;
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 100|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($6|0)<($9|0);
    if (!($10)) {
     break;
    }
    $11 = HEAP32[$i>>2]|0;
    $12 = HEAP32[$0>>2]|0;
    $13 = (($12) + 92|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + ($11<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    _ufunc_free($16);
    $17 = HEAP32[$i>>2]|0;
    $18 = (($17) + 1)|0;
    HEAP32[$i>>2] = $18;
   }
   HEAP32[$i>>2] = 0;
   while(1) {
    $19 = HEAP32[$i>>2]|0;
    $20 = HEAP32[$0>>2]|0;
    $21 = (($20) + 104|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($19|0)<($22|0);
    if (!($23)) {
     break L4;
    }
    $24 = HEAP32[$i>>2]|0;
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + 96|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + ($24<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    _ufunc_free($29);
    $30 = HEAP32[$i>>2]|0;
    $31 = (($30) + 1)|0;
    HEAP32[$i>>2] = $31;
   }
  } else {
   while(1) {
    $32 = HEAP32[$i>>2]|0;
    $33 = HEAP32[13096>>2]|0;
    $34 = ($32|0)<($33|0);
    if (!($34)) {
     break L4;
    }
    $35 = HEAP32[$i>>2]|0;
    $36 = HEAP32[13104>>2]|0;
    $37 = (($36) + ($35<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) + 32|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = HEAP32[$0>>2]|0;
    $42 = ($40|0)==($41|0);
    if ($42) {
     $43 = HEAP32[$i>>2]|0;
     $44 = HEAP32[13104>>2]|0;
     $45 = (($44) + ($43<<2)|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + 32|0);
     HEAP32[$47>>2] = 0;
     $48 = HEAP32[$i>>2]|0;
     $49 = HEAP32[13104>>2]|0;
     $50 = (($49) + ($48<<2)|0);
     $51 = HEAP32[$50>>2]|0;
     _set_function_private($51,0);
    }
    $52 = HEAP32[$i>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$i>>2] = $53;
   }
  }
 } while(0);
 $54 = HEAP32[$0>>2]|0;
 $55 = (($54) + 92|0);
 $56 = HEAP32[$55>>2]|0;
 _free($56);
 $57 = HEAP32[$0>>2]|0;
 $58 = (($57) + 96|0);
 $59 = HEAP32[$58>>2]|0;
 _free($59);
 $60 = HEAP32[$0>>2]|0;
 $61 = (($60) + 36|0);
 $62 = HEAP32[$61>>2]|0;
 _free($62);
 $63 = HEAP32[$0>>2]|0;
 $64 = (($63) + 40|0);
 $65 = HEAP32[$64>>2]|0;
 _free($65);
 $66 = HEAP32[$0>>2]|0;
 $67 = (($66) + 44|0);
 $68 = HEAP32[$67>>2]|0;
 _free($68);
 $69 = HEAP32[$0>>2]|0;
 $70 = (($69) + 48|0);
 $71 = HEAP32[$70>>2]|0;
 _free($71);
 $72 = HEAP32[$0>>2]|0;
 $73 = (($72) + 52|0);
 $74 = HEAP32[$73>>2]|0;
 _free($74);
 $75 = HEAP32[$0>>2]|0;
 $76 = (($75) + 56|0);
 $77 = HEAP32[$76>>2]|0;
 _free($77);
 $78 = HEAP32[$0>>2]|0;
 $79 = (($78) + 60|0);
 $80 = HEAP32[$79>>2]|0;
 _free($80);
 $81 = HEAP32[$0>>2]|0;
 $82 = (($81) + 64|0);
 $83 = HEAP32[$82>>2]|0;
 _free($83);
 $84 = HEAP32[$0>>2]|0;
 $85 = (($84) + 68|0);
 $86 = HEAP32[$85>>2]|0;
 _free($86);
 $87 = HEAP32[$0>>2]|0;
 $88 = (($87) + 72|0);
 $89 = HEAP32[$88>>2]|0;
 _free($89);
 $90 = HEAP32[$0>>2]|0;
 _free($90);
 STACKTOP = sp;return;
}
function _set_function_private($u,$s) {
 $u = $u|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $u;
 HEAP32[$1>>2] = $s;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 if ($3) {
  $7 = $6 | 1;
  HEAP32[$5>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $6 & -2;
  HEAP32[$5>>2] = $8;
  STACKTOP = sp;return;
 }
}
function _doing_nls() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[13128>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $10 = HEAP32[13136>>2]|0;
  STACKTOP = sp;return ($10|0);
 }
 $2 = (_strcmp(13144,13144)|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $9 = 1;
 } else {
  $4 = (_strcmp(13160,13160)|0);
  $5 = ($4|0)!=(0);
  if ($5) {
   $9 = 1;
  } else {
   $6 = (_strcmp(13176,13176)|0);
   $7 = ($6|0)!=(0);
   $9 = $7;
  }
 }
 $8 = $9&1;
 HEAP32[13136>>2] = $8;
 HEAP32[13128>>2] = 1;
 $10 = HEAP32[13136>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function _get_local_decpoint() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 46;
}
function _set_alt_gettext_mode($prn) {
 $prn = $prn|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 STACKTOP = sp;return;
}
function _get_utf_width($str,$width) {
 $str = $str|0;
 $width = $width|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $invis = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $invis = sp;
 HEAP32[$0>>2] = $str;
 HEAP32[$1>>2] = $width;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_strlen(($2|0))|0);
 $4 = HEAP32[$0>>2]|0;
 $5 = (_g_utf8_strlen($4,-1)|0);
 $6 = (($3) - ($5))|0;
 HEAP32[$invis>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$invis>>2]|0;
 $9 = (($7) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function _get_translated_width($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $w = sp;
 HEAP32[$0>>2] = $str;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strlen(($1|0))|0);
 HEAP32[$w>>2] = $2;
 $3 = HEAP32[$w>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_g_utf8_strlen($4,-1)|0);
 $6 = (($3) - ($5))|0;
 $7 = HEAP32[$w>>2]|0;
 $8 = (($7) + ($6))|0;
 HEAP32[$w>>2] = $8;
 $9 = HEAP32[$w>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function _get_list_by_name($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ret = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $u = sp + 4|0;
 $ret = sp;
 HEAP32[$0>>2] = $name;
 HEAP32[$ret>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_get_user_var_of_type_by_name($1,4)|0);
 HEAP32[$u>>2] = $2;
 $3 = HEAP32[$u>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $7 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($7|0);
 }
 $5 = HEAP32[$u>>2]|0;
 $6 = (_user_var_get_value($5)|0);
 HEAP32[$ret>>2] = $6;
 $7 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _gretl_list_copy($src) {
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $targ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $targ = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $src;
 HEAP32[$targ>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$0>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 1)|0;
  HEAP32[$n>>2] = $5;
  $6 = HEAP32[$n>>2]|0;
  $7 = $6<<2;
  $8 = (_malloc($7)|0);
  HEAP32[$targ>>2] = $8;
  $9 = HEAP32[$targ>>2]|0;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = HEAP32[$targ>>2]|0;
   $12 = HEAP32[$0>>2]|0;
   $13 = HEAP32[$n>>2]|0;
   $14 = $13<<2;
   _memcpy(($11|0),($12|0),($14|0))|0;
  }
 }
 $15 = HEAP32[$targ>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _gretl_list_new($nterms) {
 $nterms = $nterms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $list = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $nterms;
 HEAP32[$list>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  HEAP32[$0>>2] = 0;
  $21 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($21|0);
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = $5<<2;
 $7 = (_malloc($6)|0);
 HEAP32[$list>>2] = $7;
 $8 = HEAP32[$list>>2]|0;
 $9 = ($8|0)!=(0|0);
 L5: do {
  if ($9) {
   $10 = HEAP32[$1>>2]|0;
   $11 = HEAP32[$list>>2]|0;
   HEAP32[$11>>2] = $10;
   HEAP32[$i>>2] = 1;
   while(1) {
    $12 = HEAP32[$i>>2]|0;
    $13 = HEAP32[$1>>2]|0;
    $14 = ($12|0)<=($13|0);
    if (!($14)) {
     break L5;
    }
    $15 = HEAP32[$i>>2]|0;
    $16 = HEAP32[$list>>2]|0;
    $17 = (($16) + ($15<<2)|0);
    HEAP32[$17>>2] = 0;
    $18 = HEAP32[$i>>2]|0;
    $19 = (($18) + 1)|0;
    HEAP32[$i>>2] = $19;
   }
  }
 } while(0);
 $20 = HEAP32[$list>>2]|0;
 HEAP32[$0>>2] = $20;
 $21 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($21|0);
}
function _gretl_list_append_term($plist,$v) {
 $plist = $plist|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, $oldn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $list = sp + 4|0;
 $oldn = sp;
 HEAP32[$0>>2] = $plist;
 HEAP32[$1>>2] = $v;
 HEAP32[$list>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $5 = (_gretl_list_new(1)|0);
   HEAP32[$list>>2] = $5;
   $6 = HEAP32[$list>>2]|0;
   $7 = ($6|0)!=(0|0);
   if ($7) {
    $8 = HEAP32[$1>>2]|0;
    $9 = HEAP32[$list>>2]|0;
    $10 = (($9) + 4|0);
    HEAP32[$10>>2] = $8;
   }
  } else {
   $11 = HEAP32[$0>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$oldn>>2] = $13;
   $14 = HEAP32[$0>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$oldn>>2]|0;
   $17 = (($16) + 2)|0;
   $18 = $17<<2;
   $19 = (_realloc($15,$18)|0);
   HEAP32[$list>>2] = $19;
   $20 = HEAP32[$list>>2]|0;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = HEAP32[$list>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + 1)|0;
    HEAP32[$22>>2] = $24;
    $25 = HEAP32[$1>>2]|0;
    $26 = HEAP32[$list>>2]|0;
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[$list>>2]|0;
    $29 = (($28) + ($27<<2)|0);
    HEAP32[$29>>2] = $25;
    break;
   } else {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    _free($31);
    break;
   }
  }
 } while(0);
 $32 = HEAP32[$list>>2]|0;
 $33 = HEAP32[$0>>2]|0;
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$list>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _gretl_null_list() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $list = sp;
 $0 = (_malloc(4)|0);
 HEAP32[$list>>2] = $0;
 $1 = HEAP32[$list>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$list>>2]|0;
  HEAP32[$3>>2] = 0;
 }
 $4 = HEAP32[$list>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _in_gretl_list($list,$k) {
 $list = $list|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $list;
 HEAP32[$2>>2] = $k;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0|0);
 L1: do {
  if ($4) {
   HEAP32[$i>>2] = 1;
   while(1) {
    $5 = HEAP32[$i>>2]|0;
    $6 = HEAP32[$1>>2]|0;
    $7 = HEAP32[$6>>2]|0;
    $8 = ($5|0)<=($7|0);
    if (!($8)) {
     break L1;
    }
    $9 = HEAP32[$i>>2]|0;
    $10 = HEAP32[$1>>2]|0;
    $11 = (($10) + ($9<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$2>>2]|0;
    $14 = ($12|0)==($13|0);
    $15 = HEAP32[$i>>2]|0;
    if ($14) {
     break;
    }
    $16 = (($15) + 1)|0;
    HEAP32[$i>>2] = $16;
   }
   HEAP32[$0>>2] = $15;
   $17 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($17|0);
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $17 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _reglist_check_for_const($list,$dset) {
 $list = $list|0;
 $dset = $dset|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cpos = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $cpos = sp + 4|0;
 $ret = sp;
 HEAP32[$0>>2] = $list;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_gretl_list_const_pos($2,2,$3)|0);
 HEAP32[$cpos>>2] = $4;
 HEAP32[$ret>>2] = 0;
 $5 = HEAP32[$cpos>>2]|0;
 $6 = ($5|0)>(1);
 $$ = $6 ? 1 : 0;
 HEAP32[$ret>>2] = $$;
 $7 = HEAP32[$cpos>>2]|0;
 $8 = ($7|0)>(2);
 if (!($8)) {
  $11 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($11|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$cpos>>2]|0;
 _reglist_move_const($9,$10);
 $11 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function _gretl_list_const_pos($list,$minpos,$dset) {
 $list = $list|0;
 $minpos = $minpos|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $list;
 HEAP32[$2>>2] = $minpos;
 HEAP32[$3>>2] = $dset;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  HEAP32[$0>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$i>>2] = $6;
 while(1) {
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<=($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + ($11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0);
  $16 = HEAP32[$i>>2]|0;
  if ($15) {
   label = 6;
   break;
  }
  $17 = (($16) + 1)|0;
  HEAP32[$i>>2] = $17;
 }
 if ((label|0) == 6) {
  HEAP32[$0>>2] = $16;
  $32 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $18 = HEAP32[$2>>2]|0;
 HEAP32[$i>>2] = $18;
 while(1) {
  $19 = HEAP32[$i>>2]|0;
  $20 = HEAP32[$1>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($19|0)<=($21|0);
  if (!($22)) {
   label = 13;
   break;
  }
  $23 = HEAP32[$i>>2]|0;
  $24 = HEAP32[$1>>2]|0;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$3>>2]|0;
  $28 = (_true_const($26,$27)|0);
  $29 = ($28|0)!=(0);
  $30 = HEAP32[$i>>2]|0;
  if ($29) {
   label = 11;
   break;
  }
  $31 = (($30) + 1)|0;
  HEAP32[$i>>2] = $31;
 }
 if ((label|0) == 11) {
  HEAP32[$0>>2] = $30;
  $32 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 13) {
  HEAP32[$0>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 return 0|0;
}
function _reglist_move_const($list,$k) {
 $list = $list|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnum = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $i = sp + 4|0;
 $cnum = sp;
 HEAP32[$0>>2] = $list;
 HEAP32[$1>>2] = $k;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + ($2<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$cnum>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 HEAP32[$i>>2] = $6;
 while(1) {
  $7 = HEAP32[$i>>2]|0;
  $8 = ($7|0)>(2);
  if (!($8)) {
   break;
  }
  $9 = HEAP32[$i>>2]|0;
  $10 = (($9) - 1)|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$i>>2]|0;
  $15 = HEAP32[$0>>2]|0;
  $16 = (($15) + ($14<<2)|0);
  HEAP32[$16>>2] = $13;
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + -1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[$cnum>>2]|0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 8|0);
 HEAP32[$21>>2] = $19;
 STACKTOP = sp;return;
}
function _gretl_list_delete_at_pos($list,$pos) {
 $list = $list|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $i = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $list;
 HEAP32[$1>>2] = $pos;
 HEAP32[$err>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(1);
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)>($6|0);
  if (!($7)) {
   $8 = HEAP32[$1>>2]|0;
   HEAP32[$i>>2] = $8;
   while(1) {
    $9 = HEAP32[$i>>2]|0;
    $10 = HEAP32[$0>>2]|0;
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)<($11|0);
    if (!($12)) {
     break;
    }
    $13 = HEAP32[$i>>2]|0;
    $14 = (($13) + 1)|0;
    $15 = HEAP32[$0>>2]|0;
    $16 = (($15) + ($14<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$i>>2]|0;
    $19 = HEAP32[$0>>2]|0;
    $20 = (($19) + ($18<<2)|0);
    HEAP32[$20>>2] = $17;
    $21 = HEAP32[$i>>2]|0;
    $22 = (($21) + 1)|0;
    HEAP32[$i>>2] = $22;
   }
   $23 = HEAP32[$0>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$0>>2]|0;
   $26 = (($25) + ($24<<2)|0);
   HEAP32[$26>>2] = 0;
   $27 = HEAP32[$0>>2]|0;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) - 1)|0;
   HEAP32[$27>>2] = $29;
   $30 = HEAP32[$err>>2]|0;
   STACKTOP = sp;return ($30|0);
  }
 }
 HEAP32[$err>>2] = 1;
 $30 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($30|0);
}
function _gretl_list_separator_position($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $list;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   HEAP32[$i>>2] = 1;
   while(1) {
    $4 = HEAP32[$i>>2]|0;
    $5 = HEAP32[$1>>2]|0;
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)<=($6|0);
    if (!($7)) {
     break L1;
    }
    $8 = HEAP32[$i>>2]|0;
    $9 = HEAP32[$1>>2]|0;
    $10 = (($9) + ($8<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(-100);
    $13 = HEAP32[$i>>2]|0;
    if ($12) {
     break;
    }
    $14 = (($13) + 1)|0;
    HEAP32[$i>>2] = $14;
   }
   HEAP32[$0>>2] = $13;
   $15 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($15|0);
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _lapack_mem_free() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[13192>>2]|0;
 _free($0);
 HEAP32[13192>>2] = 0;
 HEAP32[13200>>2] = 0;
 STACKTOP = sp;return;
}
function _gretl_matrix_alloc($rows,$cols) {
 $rows = $rows|0;
 $cols = $cols|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0;
 var $n = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $m = sp + 12|0;
 $n = sp + 8|0;
 HEAP32[$1>>2] = $rows;
 HEAP32[$2>>2] = $cols;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ($5|0)<(0);
  if (!($6)) {
   $10 = (_malloc(16)|0);
   HEAP32[$m>>2] = $10;
   $11 = HEAP32[$m>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    _set_gretl_matrix_err(12);
    HEAP32[$0>>2] = 0;
    $38 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($38|0);
   }
   $13 = HEAP32[$1>>2]|0;
   $14 = HEAP32[$2>>2]|0;
   $15 = Math_imul($13, $14)|0;
   HEAP32[$n>>2] = $15;
   $16 = HEAP32[$n>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = HEAP32[$m>>2]|0;
    $19 = (($18) + 8|0);
    HEAP32[$19>>2] = 0;
   } else {
    $20 = HEAP32[$n>>2]|0;
    $21 = $20<<3;
    $22 = (_malloc($21)|0);
    $23 = HEAP32[$m>>2]|0;
    $24 = (($23) + 8|0);
    HEAP32[$24>>2] = $22;
    $25 = HEAP32[$m>>2]|0;
    $26 = (($25) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if ($28) {
     _set_gretl_matrix_err(12);
     $29 = HEAP32[$m>>2]|0;
     _free($29);
     HEAP32[$0>>2] = 0;
     $38 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($38|0);
    }
   }
   $30 = HEAP32[$1>>2]|0;
   $31 = HEAP32[$m>>2]|0;
   HEAP32[$31>>2] = $30;
   $32 = HEAP32[$2>>2]|0;
   $33 = HEAP32[$m>>2]|0;
   $34 = (($33) + 4|0);
   HEAP32[$34>>2] = $32;
   $35 = HEAP32[$m>>2]|0;
   $36 = (($35) + 12|0);
   HEAP32[$36>>2] = 0;
   $37 = HEAP32[$m>>2]|0;
   HEAP32[$0>>2] = $37;
   $38 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($38|0);
  }
 }
 $7 = HEAP32[_stderr>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer>>2] = $8;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $9;
 (_fprintf(($7|0),(13208|0),($vararg_buffer|0))|0);
 HEAP32[$0>>2] = 0;
 $38 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($38|0);
}
function _set_gretl_matrix_err($err) {
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $err;
 $1 = HEAP32[13184>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 HEAP32[13184>>2] = $3;
 STACKTOP = sp;return;
}
function _gretl_matrix_block_destroy($B) {
 $B = $B|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $B;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  HEAP32[$i>>2] = 0;
  while(1) {
   $7 = HEAP32[$i>>2]|0;
   $8 = HEAP32[$0>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7|0)<($9|0);
   if (!($10)) {
    break;
   }
   $11 = HEAP32[$i>>2]|0;
   $12 = HEAP32[$0>>2]|0;
   $13 = (($12) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($11<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   _free($16);
   $17 = HEAP32[$i>>2]|0;
   $18 = (($17) + 1)|0;
   HEAP32[$i>>2] = $18;
  }
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  _free($21);
 }
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 _free($24);
 $25 = HEAP32[$0>>2]|0;
 _free($25);
 STACKTOP = sp;return;
}
function _gretl_matrix_zero($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $n = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $i = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $m;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($2, $5)|0;
 HEAP32[$n>>2] = $6;
 HEAP32[$i>>2] = 0;
 while(1) {
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$n>>2]|0;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<3)|0);
  HEAPF64[$14>>3] = 0.0;
  $15 = HEAP32[$i>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$i>>2] = $16;
 }
 STACKTOP = sp;return;
}
function ___FLOAT_BITS3934($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $__u = sp;
 HEAPF32[$0>>2] = $__f;
 $1 = +HEAPF32[$0>>2];
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS3935($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $__u = sp;
 HEAPF64[$0>>3] = $__f;
 $1 = +HEAPF64[$0>>3];
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _gretl_matrix_reuse($m,$rows,$cols) {
 $m = $m|0;
 $rows = $rows|0;
 $cols = $cols|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = $m;
 HEAP32[$1>>2] = $rows;
 HEAP32[$2>>2] = $cols;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  HEAP32[$6>>2] = $5;
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  $12 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function _gretl_matrix_destroy_info($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $m;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==((-559038737)|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 _strings_array_free($15,$18);
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 _strings_array_free($23,$25);
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 _free($28);
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + 12|0);
 HEAP32[$30>>2] = 0;
 STACKTOP = sp;return;
}
function _matrix_block_error($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 HEAP32[$0>>2] = $f;
 $1 = HEAP32[_stderr>>2]|0;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 (_fprintf(($1|0),(14768|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return 2;
}
function _gretl_matrix_init($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $m;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function _gretl_matrix_replace($pa,$b) {
 $pa = $pa|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $pa;
 HEAP32[$1>>2] = $b;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 _gretl_matrix_free($3);
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _gretl_matrix_free($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $m;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((-559038737)|0);
 if ($6) {
  (_matrix_block_error(13264)|0);
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = HEAP32[$0>>2]|0;
  _gretl_matrix_destroy_info($18);
 }
 $19 = HEAP32[$0>>2]|0;
 _free($19);
 STACKTOP = sp;return;
}
function _gretl_identity_matrix_new($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $k = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $m = sp + 8|0;
 $i = sp + 4|0;
 $k = sp;
 HEAP32[$1>>2] = $n;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  HEAP32[$0>>2] = 0;
  $33 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($33|0);
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_gretl_null_matrix_new()|0);
  HEAP32[$0>>2] = $6;
  $33 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($33|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (_gretl_matrix_alloc($7,$8)|0);
 HEAP32[$m>>2] = $9;
 $10 = HEAP32[$m>>2]|0;
 $11 = ($10|0)!=(0|0);
 L9: do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = HEAP32[$1>>2]|0;
   $14 = Math_imul($12, $13)|0;
   HEAP32[$k>>2] = $14;
   $15 = HEAP32[$1>>2]|0;
   $16 = (($15) + 1)|0;
   HEAP32[$1>>2] = $16;
   HEAP32[$i>>2] = 0;
   while(1) {
    $17 = HEAP32[$i>>2]|0;
    $18 = HEAP32[$k>>2]|0;
    $19 = ($17|0)<($18|0);
    if (!($19)) {
     break L9;
    }
    $20 = HEAP32[$i>>2]|0;
    $21 = HEAP32[$1>>2]|0;
    $22 = (($20|0) % ($21|0))&-1;
    $23 = ($22|0)!=(0);
    $24 = $23 ? 0.0 : 1.0;
    $25 = HEAP32[$i>>2]|0;
    $26 = HEAP32[$m>>2]|0;
    $27 = (($26) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($25<<3)|0);
    HEAPF64[$29>>3] = $24;
    $30 = HEAP32[$i>>2]|0;
    $31 = (($30) + 1)|0;
    HEAP32[$i>>2] = $31;
   }
  }
 } while(0);
 $32 = HEAP32[$m>>2]|0;
 HEAP32[$0>>2] = $32;
 $33 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($33|0);
}
function _gretl_null_matrix_new() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $m = sp;
 $1 = (_malloc(16)|0);
 HEAP32[$m>>2] = $1;
 $2 = HEAP32[$m>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _set_gretl_matrix_err(12);
  HEAP32[$0>>2] = 0;
  $6 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($6|0);
 } else {
  $4 = HEAP32[$m>>2]|0;
  _gretl_matrix_init($4);
  $5 = HEAP32[$m>>2]|0;
  HEAP32[$0>>2] = $5;
  $6 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($6|0);
 }
 return 0|0;
}
function _gretl_DW_matrix_new($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $m = sp + 8|0;
 $i = sp + 4|0;
 $j = sp;
 HEAP32[$1>>2] = $n;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_gretl_zero_matrix_new($2,$3)|0);
 HEAP32[$m>>2] = $4;
 $5 = HEAP32[$m>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  HEAP32[$0>>2] = 0;
  $65 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($65|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  HEAP32[$j>>2] = 0;
  while(1) {
   $10 = HEAP32[$j>>2]|0;
   $11 = HEAP32[$1>>2]|0;
   $12 = ($10|0)<($11|0);
   if (!($12)) {
    break;
   }
   $13 = HEAP32[$j>>2]|0;
   $14 = HEAP32[$i>>2]|0;
   $15 = ($13|0)==($14|0);
   do {
    if ($15) {
     $16 = HEAP32[$i>>2]|0;
     $17 = ($16|0)==(0);
     if (!($17)) {
      $18 = HEAP32[$i>>2]|0;
      $19 = HEAP32[$1>>2]|0;
      $20 = (($19) - 1)|0;
      $21 = ($18|0)==($20|0);
      if (!($21)) {
       $32 = HEAP32[$j>>2]|0;
       $33 = HEAP32[$m>>2]|0;
       $34 = HEAP32[$33>>2]|0;
       $35 = Math_imul($32, $34)|0;
       $36 = HEAP32[$i>>2]|0;
       $37 = (($35) + ($36))|0;
       $38 = HEAP32[$m>>2]|0;
       $39 = (($38) + 8|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = (($40) + ($37<<3)|0);
       HEAPF64[$41>>3] = 2.0;
       break;
      }
     }
     $22 = HEAP32[$j>>2]|0;
     $23 = HEAP32[$m>>2]|0;
     $24 = HEAP32[$23>>2]|0;
     $25 = Math_imul($22, $24)|0;
     $26 = HEAP32[$i>>2]|0;
     $27 = (($25) + ($26))|0;
     $28 = HEAP32[$m>>2]|0;
     $29 = (($28) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + ($27<<3)|0);
     HEAPF64[$31>>3] = 1.0;
    } else {
     $42 = HEAP32[$j>>2]|0;
     $43 = HEAP32[$i>>2]|0;
     $44 = (($43) + 1)|0;
     $45 = ($42|0)==($44|0);
     if (!($45)) {
      $46 = HEAP32[$i>>2]|0;
      $47 = HEAP32[$j>>2]|0;
      $48 = (($47) + 1)|0;
      $49 = ($46|0)==($48|0);
      if (!($49)) {
       break;
      }
     }
     $50 = HEAP32[$j>>2]|0;
     $51 = HEAP32[$m>>2]|0;
     $52 = HEAP32[$51>>2]|0;
     $53 = Math_imul($50, $52)|0;
     $54 = HEAP32[$i>>2]|0;
     $55 = (($53) + ($54))|0;
     $56 = HEAP32[$m>>2]|0;
     $57 = (($56) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (($58) + ($55<<3)|0);
     HEAPF64[$59>>3] = -1.0;
    }
   } while(0);
   $60 = HEAP32[$j>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$j>>2] = $61;
  }
  $62 = HEAP32[$i>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$i>>2] = $63;
 }
 $64 = HEAP32[$m>>2]|0;
 HEAP32[$0>>2] = $64;
 $65 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($65|0);
}
function _gretl_zero_matrix_new($r,$c) {
 $r = $r|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $r;
 HEAP32[$1>>2] = $c;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_gretl_filled_matrix_new($2,$3,0.0)|0);
 STACKTOP = sp;return ($4|0);
}
function _gretl_filled_matrix_new($r,$c,$val) {
 $r = $r|0;
 $c = $c|0;
 $val = +$val;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $m = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp;
 $m = sp + 16|0;
 $i = sp + 12|0;
 $n = sp + 8|0;
 HEAP32[$1>>2] = $r;
 HEAP32[$2>>2] = $c;
 HEAPF64[$3>>3] = $val;
 HEAP32[$m>>2] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  $6 = HEAP32[$2>>2]|0;
  $7 = ($6|0)<(0);
  if (!($7)) {
   $8 = HEAP32[$1>>2]|0;
   $9 = ($8|0)==(0);
   L4: do {
    if ($9) {
     label = 6;
    } else {
     $10 = HEAP32[$2>>2]|0;
     $11 = ($10|0)==(0);
     if ($11) {
      label = 6;
     } else {
      $20 = HEAP32[$1>>2]|0;
      $21 = HEAP32[$2>>2]|0;
      $22 = Math_imul($20, $21)|0;
      HEAP32[$n>>2] = $22;
      $23 = HEAP32[$1>>2]|0;
      $24 = HEAP32[$2>>2]|0;
      $25 = (_gretl_matrix_alloc($23,$24)|0);
      HEAP32[$m>>2] = $25;
      $26 = HEAP32[$m>>2]|0;
      $27 = ($26|0)!=(0|0);
      if ($27) {
       HEAP32[$i>>2] = 0;
       while(1) {
        $28 = HEAP32[$i>>2]|0;
        $29 = HEAP32[$n>>2]|0;
        $30 = ($28|0)<($29|0);
        if (!($30)) {
         break L4;
        }
        $31 = +HEAPF64[$3>>3];
        $32 = HEAP32[$i>>2]|0;
        $33 = HEAP32[$m>>2]|0;
        $34 = (($33) + 8|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (($35) + ($32<<3)|0);
        HEAPF64[$36>>3] = $31;
        $37 = HEAP32[$i>>2]|0;
        $38 = (($37) + 1)|0;
        HEAP32[$i>>2] = $38;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 6) {
    $12 = (_gretl_null_matrix_new()|0);
    HEAP32[$m>>2] = $12;
    $13 = HEAP32[$m>>2]|0;
    $14 = ($13|0)!=(0|0);
    if ($14) {
     $15 = HEAP32[$1>>2]|0;
     $16 = HEAP32[$m>>2]|0;
     HEAP32[$16>>2] = $15;
     $17 = HEAP32[$2>>2]|0;
     $18 = HEAP32[$m>>2]|0;
     $19 = (($18) + 4|0);
     HEAP32[$19>>2] = $17;
    }
   }
   $39 = HEAP32[$m>>2]|0;
   HEAP32[$0>>2] = $39;
   $40 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($40|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $40 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function _gretl_matrix_copy($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $m;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_gretl_matrix_copy_mod($1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _gretl_matrix_copy_mod($m,$mod) {
 $m = $m|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $cols = 0, $i = 0, $j = 0, $k = 0, $n = 0, $rows = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $c = sp + 32|0;
 $rows = sp + 28|0;
 $cols = sp + 24|0;
 $i = sp + 20|0;
 $j = sp + 16|0;
 $x = sp;
 $k = sp + 12|0;
 $n = sp + 8|0;
 HEAP32[$1>>2] = $m;
 HEAP32[$2>>2] = $mod;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$0>>2] = 0;
  $68 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($68|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(1);
 $7 = HEAP32[$1>>2]|0;
 if ($6) {
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$rows>>2] = $9;
  $10 = HEAP32[$1>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$cols>>2] = $11;
 } else {
  $12 = HEAP32[$7>>2]|0;
  HEAP32[$rows>>2] = $12;
  $13 = HEAP32[$1>>2]|0;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$cols>>2] = $15;
 }
 $16 = HEAP32[$rows>>2]|0;
 $17 = HEAP32[$cols>>2]|0;
 $18 = (_gretl_matrix_alloc($16,$17)|0);
 HEAP32[$c>>2] = $18;
 $19 = HEAP32[$c>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  HEAP32[$0>>2] = 0;
  $68 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($68|0);
 }
 $21 = HEAP32[$2>>2]|0;
 $22 = ($21|0)==(1);
 L13: do {
  if ($22) {
   HEAP32[$k>>2] = 0;
   HEAP32[$j>>2] = 0;
   while(1) {
    $23 = HEAP32[$j>>2]|0;
    $24 = HEAP32[$1>>2]|0;
    $25 = (($24) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($23|0)<($26|0);
    if (!($27)) {
     break L13;
    }
    HEAP32[$i>>2] = 0;
    while(1) {
     $28 = HEAP32[$i>>2]|0;
     $29 = HEAP32[$1>>2]|0;
     $30 = HEAP32[$29>>2]|0;
     $31 = ($28|0)<($30|0);
     if (!($31)) {
      break;
     }
     $32 = HEAP32[$k>>2]|0;
     $33 = (($32) + 1)|0;
     HEAP32[$k>>2] = $33;
     $34 = HEAP32[$1>>2]|0;
     $35 = (($34) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (($36) + ($32<<3)|0);
     $38 = +HEAPF64[$37>>3];
     HEAPF64[$x>>3] = $38;
     $39 = +HEAPF64[$x>>3];
     $40 = HEAP32[$i>>2]|0;
     $41 = HEAP32[$c>>2]|0;
     $42 = HEAP32[$41>>2]|0;
     $43 = Math_imul($40, $42)|0;
     $44 = HEAP32[$j>>2]|0;
     $45 = (($43) + ($44))|0;
     $46 = HEAP32[$c>>2]|0;
     $47 = (($46) + 8|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($48) + ($45<<3)|0);
     HEAPF64[$49>>3] = $39;
     $50 = HEAP32[$i>>2]|0;
     $51 = (($50) + 1)|0;
     HEAP32[$i>>2] = $51;
    }
    $52 = HEAP32[$j>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$j>>2] = $53;
   }
  } else {
   $54 = HEAP32[$rows>>2]|0;
   $55 = HEAP32[$cols>>2]|0;
   $56 = Math_imul($54, $55)|0;
   HEAP32[$n>>2] = $56;
   $57 = HEAP32[$c>>2]|0;
   $58 = (($57) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$1>>2]|0;
   $61 = (($60) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$n>>2]|0;
   $64 = $63<<3;
   _memcpy(($59|0),($62|0),($64|0))|0;
   $65 = HEAP32[$c>>2]|0;
   $66 = HEAP32[$1>>2]|0;
   (_gretl_matrix_copy_info($65,$66)|0);
  }
 } while(0);
 $67 = HEAP32[$c>>2]|0;
 HEAP32[$0>>2] = $67;
 $68 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($68|0);
}
function _gretl_matrix_get_t1($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $m;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==((-559038737)|0);
  if (!($7)) {
   $8 = HEAP32[$1>>2]|0;
   $9 = (($8) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0|0);
   if ($11) {
    $12 = HEAP32[$1>>2]|0;
    $13 = (($12) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    HEAP32[$0>>2] = $15;
    $16 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($16|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _gretl_matrix_multiply_by_scalar($m,$x) {
 $m = $m|0;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $i = sp + 12|0;
 $n = sp + 8|0;
 HEAP32[$0>>2] = $m;
 HEAPF64[$1>>3] = $x;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($3, $6)|0;
 HEAP32[$n>>2] = $7;
 HEAP32[$i>>2] = 0;
 while(1) {
  $8 = HEAP32[$i>>2]|0;
  $9 = HEAP32[$n>>2]|0;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = +HEAPF64[$1>>3];
  $12 = HEAP32[$i>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $17 * $11;
  HEAPF64[$16>>3] = $18;
  $19 = HEAP32[$i>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$i>>2] = $20;
 }
 STACKTOP = sp;return;
}
function _gretl_matrix_divide_by_scalar($m,$x) {
 $m = $m|0;
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp;
 HEAP32[$1>>2] = $m;
 HEAPF64[$2>>3] = $x;
 $3 = +HEAPF64[$2>>3];
 $4 = $3 == 0.0;
 if ($4) {
  HEAP32[$0>>2] = 1;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  $5 = HEAP32[$1>>2]|0;
  $6 = +HEAPF64[$2>>3];
  $7 = 1.0 / $6;
  _gretl_matrix_multiply_by_scalar($5,$7);
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _gretl_matrix_multiply($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $err = sp;
 HEAP32[$1>>2] = $a;
 HEAP32[$2>>2] = $b;
 HEAP32[$3>>2] = $c;
 HEAP32[$err>>2] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = HEAP32[$1>>2]|0;
   $10 = (($9) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = HEAP32[$2>>2]|0;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     $15 = HEAP32[$2>>2]|0;
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0);
     if (!($17)) {
      $18 = HEAP32[$2>>2]|0;
      $19 = (($18) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(0);
      if (!($21)) {
       $22 = HEAP32[$3>>2]|0;
       $23 = ($22|0)==(0|0);
       if (!($23)) {
        $24 = HEAP32[$3>>2]|0;
        $25 = HEAP32[$24>>2]|0;
        $26 = ($25|0)==(0);
        if (!($26)) {
         $27 = HEAP32[$3>>2]|0;
         $28 = (($27) + 4|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = ($29|0)==(0);
         if (!($30)) {
          $31 = HEAP32[$1>>2]|0;
          $32 = HEAP32[$31>>2]|0;
          $33 = ($32|0)==(1);
          if ($33) {
           $34 = HEAP32[$1>>2]|0;
           $35 = (($34) + 4|0);
           $36 = HEAP32[$35>>2]|0;
           $37 = ($36|0)==(1);
           if ($37) {
            $38 = HEAP32[$3>>2]|0;
            $39 = HEAP32[$2>>2]|0;
            $40 = (_gretl_matrix_copy_values($38,$39)|0);
            HEAP32[$err>>2] = $40;
            $41 = HEAP32[$err>>2]|0;
            $42 = ($41|0)!=(0);
            if (!($42)) {
             $43 = HEAP32[$3>>2]|0;
             $44 = HEAP32[$1>>2]|0;
             $45 = (($44) + 8|0);
             $46 = HEAP32[$45>>2]|0;
             $47 = +HEAPF64[$46>>3];
             _gretl_matrix_multiply_by_scalar($43,$47);
            }
           } else {
            label = 15;
           }
          } else {
           label = 15;
          }
          do {
           if ((label|0) == 15) {
            $48 = HEAP32[$2>>2]|0;
            $49 = HEAP32[$48>>2]|0;
            $50 = ($49|0)==(1);
            if ($50) {
             $51 = HEAP32[$2>>2]|0;
             $52 = (($51) + 4|0);
             $53 = HEAP32[$52>>2]|0;
             $54 = ($53|0)==(1);
             if ($54) {
              $55 = HEAP32[$3>>2]|0;
              $56 = HEAP32[$1>>2]|0;
              $57 = (_gretl_matrix_copy_values($55,$56)|0);
              HEAP32[$err>>2] = $57;
              $58 = HEAP32[$err>>2]|0;
              $59 = ($58|0)!=(0);
              if ($59) {
               break;
              }
              $60 = HEAP32[$3>>2]|0;
              $61 = HEAP32[$2>>2]|0;
              $62 = (($61) + 8|0);
              $63 = HEAP32[$62>>2]|0;
              $64 = +HEAPF64[$63>>3];
              _gretl_matrix_multiply_by_scalar($60,$64);
              break;
             }
            }
            $65 = HEAP32[$1>>2]|0;
            $66 = HEAP32[$2>>2]|0;
            $67 = HEAP32[$3>>2]|0;
            $68 = (_gretl_matrix_multiply_mod($65,0,$66,0,$67,0)|0);
            HEAP32[$err>>2] = $68;
           }
          } while(0);
          $69 = HEAP32[$err>>2]|0;
          HEAP32[$0>>2] = $69;
          $70 = HEAP32[$0>>2]|0;
          STACKTOP = sp;return ($70|0);
         }
        }
       }
      }
     }
    }
   }
  }
 }
 HEAP32[$0>>2] = 2;
 $70 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($70|0);
}
function _gretl_matrix_copy_values($targ,$src) {
 $targ = $targ|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $n = sp + 16|0;
 HEAP32[$1>>2] = $targ;
 HEAP32[$2>>2] = $src;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = HEAP32[_stderr>>2]|0;
  (_fprintf(($5|0),(13288|0),($vararg_buffer1|0))|0);
  HEAP32[$0>>2] = 2;
  $48 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($48|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($6|0)==($7|0);
 if ($8) {
  HEAP32[$0>>2] = 0;
  $48 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($48|0);
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)!=($12|0);
 if (!($13)) {
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$2>>2]|0;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)!=($19|0);
  if (!($20)) {
   $32 = HEAP32[$2>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$2>>2]|0;
   $35 = (($34) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = Math_imul($33, $36)|0;
   HEAP32[$n>>2] = $37;
   $38 = HEAP32[$n>>2]|0;
   $39 = ($38|0)>(0);
   if ($39) {
    $40 = HEAP32[$1>>2]|0;
    $41 = (($40) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[$2>>2]|0;
    $44 = (($43) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$n>>2]|0;
    $47 = $46<<3;
    _memcpy(($42|0),($45|0),($47|0))|0;
   }
   HEAP32[$0>>2] = 0;
   $48 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($48|0);
  }
 }
 $21 = HEAP32[_stderr>>2]|0;
 $22 = HEAP32[$1>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$2>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$2>>2]|0;
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $23;
 $vararg_ptr3 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $26;
 $vararg_ptr4 = (($vararg_buffer1) + 8|0);
 HEAP32[$vararg_ptr4>>2] = $28;
 $vararg_ptr5 = (($vararg_buffer1) + 12|0);
 HEAP32[$vararg_ptr5>>2] = $31;
 (_fprintf(($21|0),(13328|0),($vararg_buffer1|0))|0);
 HEAP32[$0>>2] = 36;
 $48 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($48|0);
}
function _gretl_matrix_add_to($targ,$src) {
 $targ = $targ|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $n = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $i = sp + 20|0;
 $n = sp + 16|0;
 HEAP32[$1>>2] = $targ;
 HEAP32[$2>>2] = $src;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)!=($6|0);
 if (!($7)) {
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)!=($13|0);
  if (!($14)) {
   $39 = HEAP32[$2>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = HEAP32[$2>>2]|0;
   $42 = (($41) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = Math_imul($40, $43)|0;
   HEAP32[$n>>2] = $44;
   HEAP32[$i>>2] = 0;
   while(1) {
    $45 = HEAP32[$i>>2]|0;
    $46 = HEAP32[$n>>2]|0;
    $47 = ($45|0)<($46|0);
    if (!($47)) {
     break;
    }
    $48 = HEAP32[$i>>2]|0;
    $49 = HEAP32[$2>>2]|0;
    $50 = (($49) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + ($48<<3)|0);
    $53 = +HEAPF64[$52>>3];
    $54 = HEAP32[$i>>2]|0;
    $55 = HEAP32[$1>>2]|0;
    $56 = (($55) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) + ($54<<3)|0);
    $59 = +HEAPF64[$58>>3];
    $60 = $59 + $53;
    HEAPF64[$58>>3] = $60;
    $61 = HEAP32[$i>>2]|0;
    $62 = (($61) + 1)|0;
    HEAP32[$i>>2] = $62;
   }
   HEAP32[$0>>2] = 0;
   $63 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($63|0);
  }
 }
 $15 = HEAP32[$2>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(1);
 if ($17) {
  $18 = HEAP32[$2>>2]|0;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(1);
  if ($21) {
   $22 = HEAP32[$1>>2]|0;
   $23 = HEAP32[$2>>2]|0;
   $24 = (($23) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = +HEAPF64[$25>>3];
   $27 = (_add_scalar_to_matrix($22,$26)|0);
   HEAP32[$0>>2] = $27;
   $63 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($63|0);
  }
 }
 $28 = HEAP32[_stderr>>2]|0;
 $29 = HEAP32[$2>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$2>>2]|0;
 $32 = (($31) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$1>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$1>>2]|0;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$vararg_buffer>>2] = $30;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $33;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $35;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $38;
 (_fprintf(($28|0),(13408|0),($vararg_buffer|0))|0);
 HEAP32[$0>>2] = 36;
 $63 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($63|0);
}
function _gretl_matrix_copy_info($targ,$src) {
 $targ = $targ|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $err = sp;
 HEAP32[$1>>2] = $targ;
 HEAP32[$2>>2] = $src;
 HEAP32[$err>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==((-559038737)|0);
 if (!($6)) {
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==((-559038737)|0);
  if (!($10)) {
   $11 = HEAP32[$2>>2]|0;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   $15 = HEAP32[$1>>2]|0;
   $16 = (($15) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   if ($14) {
    $18 = ($17|0)!=(0|0);
    if ($18) {
     $19 = HEAP32[$1>>2]|0;
     _gretl_matrix_destroy_info($19);
    }
    HEAP32[$0>>2] = 0;
    $119 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($119|0);
   }
   $20 = ($17|0)==(0|0);
   if ($20) {
    $21 = (_malloc(16)|0);
    $22 = HEAP32[$1>>2]|0;
    $23 = (($22) + 12|0);
    HEAP32[$23>>2] = $21;
   } else {
    $24 = HEAP32[$1>>2]|0;
    $25 = (($24) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$1>>2]|0;
    $30 = (($29) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    _strings_array_free($28,$31);
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$1>>2]|0;
    $38 = HEAP32[$37>>2]|0;
    _strings_array_free($36,$38);
   }
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   if ($42) {
    HEAP32[$err>>2] = 12;
   } else {
    $43 = HEAP32[$2>>2]|0;
    $44 = (($43) + 12|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP32[$1>>2]|0;
    $48 = (($47) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    HEAP32[$49>>2] = $46;
    $50 = HEAP32[$2>>2]|0;
    $51 = (($50) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = HEAP32[$1>>2]|0;
    $56 = (($55) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) + 4|0);
    HEAP32[$58>>2] = $54;
    $59 = HEAP32[$1>>2]|0;
    $60 = (($59) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + 8|0);
    HEAP32[$62>>2] = 0;
    $63 = HEAP32[$1>>2]|0;
    $64 = (($63) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + 12|0);
    HEAP32[$66>>2] = 0;
    $67 = HEAP32[$2>>2]|0;
    $68 = (($67) + 12|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + 8|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)!=(0|0);
    if ($72) {
     $73 = HEAP32[$2>>2]|0;
     $74 = (($73) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (($75) + 8|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = HEAP32[$2>>2]|0;
     $79 = (($78) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (_strings_array_dup($77,$80)|0);
     $82 = HEAP32[$1>>2]|0;
     $83 = (($82) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + 8|0);
     HEAP32[$85>>2] = $81;
     $86 = HEAP32[$1>>2]|0;
     $87 = (($86) + 12|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (($88) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ($90|0)==(0|0);
     if ($91) {
      HEAP32[$err>>2] = 12;
     }
    }
    $92 = HEAP32[$err>>2]|0;
    $93 = ($92|0)!=(0);
    if (!($93)) {
     $94 = HEAP32[$2>>2]|0;
     $95 = (($94) + 12|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + 12|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)!=(0|0);
     if ($99) {
      $100 = HEAP32[$2>>2]|0;
      $101 = (($100) + 12|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (($102) + 12|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = HEAP32[$2>>2]|0;
      $106 = HEAP32[$105>>2]|0;
      $107 = (_strings_array_dup($104,$106)|0);
      $108 = HEAP32[$1>>2]|0;
      $109 = (($108) + 12|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (($110) + 12|0);
      HEAP32[$111>>2] = $107;
      $112 = HEAP32[$1>>2]|0;
      $113 = (($112) + 12|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = (($114) + 12|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       HEAP32[$err>>2] = 12;
      }
     }
    }
   }
   $118 = HEAP32[$err>>2]|0;
   HEAP32[$0>>2] = $118;
   $119 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($119|0);
  }
 }
 HEAP32[$0>>2] = 2;
 $119 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($119|0);
}
function _get_simd_k_max() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[13392>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _get_simd_mn_min() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[13400>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _add_scalar_to_matrix($targ,$x) {
 $targ = $targ|0;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $i = sp + 12|0;
 $n = sp + 8|0;
 HEAP32[$0>>2] = $targ;
 HEAPF64[$1>>3] = $x;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($3, $6)|0;
 HEAP32[$n>>2] = $7;
 HEAP32[$i>>2] = 0;
 while(1) {
  $8 = HEAP32[$i>>2]|0;
  $9 = HEAP32[$n>>2]|0;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = +HEAPF64[$1>>3];
  $12 = HEAP32[$i>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $17 + $11;
  HEAPF64[$16>>3] = $18;
  $19 = HEAP32[$i>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$i>>2] = $20;
 }
 STACKTOP = sp;return 0;
}
function _gretl_matrix_xtr_symmetric($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $mij = 0, $mji = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $x = sp;
 $mij = sp + 20|0;
 $mji = sp + 16|0;
 $i = sp + 12|0;
 $j = sp + 8|0;
 HEAP32[$0>>2] = $m;
 HEAP32[$i>>2] = 0;
 while(1) {
  $1 = HEAP32[$i>>2]|0;
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($1|0)<($3|0);
  if (!($4)) {
   break;
  }
  HEAP32[$j>>2] = 0;
  while(1) {
   $5 = HEAP32[$j>>2]|0;
   $6 = HEAP32[$i>>2]|0;
   $7 = ($5|0)<($6|0);
   if (!($7)) {
    break;
   }
   $8 = HEAP32[$j>>2]|0;
   $9 = HEAP32[$0>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = Math_imul($8, $10)|0;
   $12 = HEAP32[$i>>2]|0;
   $13 = (($11) + ($12))|0;
   HEAP32[$mij>>2] = $13;
   $14 = HEAP32[$i>>2]|0;
   $15 = HEAP32[$0>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = Math_imul($14, $16)|0;
   $18 = HEAP32[$j>>2]|0;
   $19 = (($17) + ($18))|0;
   HEAP32[$mji>>2] = $19;
   $20 = HEAP32[$mij>>2]|0;
   $21 = HEAP32[$0>>2]|0;
   $22 = (($21) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($20<<3)|0);
   $25 = +HEAPF64[$24>>3];
   HEAPF64[$x>>3] = $25;
   $26 = HEAP32[$mji>>2]|0;
   $27 = HEAP32[$0>>2]|0;
   $28 = (($27) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26<<3)|0);
   $31 = +HEAPF64[$30>>3];
   $32 = +HEAPF64[$x>>3];
   $33 = $32 + $31;
   HEAPF64[$x>>3] = $33;
   $34 = +HEAPF64[$x>>3];
   $35 = 0.5 * $34;
   $36 = HEAP32[$mji>>2]|0;
   $37 = HEAP32[$0>>2]|0;
   $38 = (($37) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36<<3)|0);
   HEAPF64[$40>>3] = $35;
   $41 = HEAP32[$mij>>2]|0;
   $42 = HEAP32[$0>>2]|0;
   $43 = (($42) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($41<<3)|0);
   HEAPF64[$45>>3] = $35;
   $46 = HEAP32[$j>>2]|0;
   $47 = (($46) + 1)|0;
   HEAP32[$j>>2] = $47;
  }
  $48 = HEAP32[$i>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[$i>>2] = $49;
 }
 STACKTOP = sp;return;
}
function _gretl_matrix_add_self_transpose($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $j = 0, $mij = 0, $mji = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $x = sp;
 $mij = sp + 20|0;
 $mji = sp + 16|0;
 $i = sp + 12|0;
 $j = sp + 8|0;
 HEAP32[$1>>2] = $m;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3|0)!=($6|0);
 if ($7) {
  $8 = HEAP32[_stderr>>2]|0;
  (_fputs((13456|0),($8|0))|0);
  HEAP32[$0>>2] = 36;
  $59 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($59|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $9 = HEAP32[$i>>2]|0;
  $10 = HEAP32[$1>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[$i>>2]|0;
  HEAP32[$j>>2] = $13;
  while(1) {
   $14 = HEAP32[$j>>2]|0;
   $15 = HEAP32[$1>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)<($16|0);
   if (!($17)) {
    break;
   }
   $18 = HEAP32[$j>>2]|0;
   $19 = HEAP32[$1>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $21 = Math_imul($18, $20)|0;
   $22 = HEAP32[$i>>2]|0;
   $23 = (($21) + ($22))|0;
   HEAP32[$mij>>2] = $23;
   $24 = HEAP32[$i>>2]|0;
   $25 = HEAP32[$1>>2]|0;
   $26 = HEAP32[$25>>2]|0;
   $27 = Math_imul($24, $26)|0;
   $28 = HEAP32[$j>>2]|0;
   $29 = (($27) + ($28))|0;
   HEAP32[$mji>>2] = $29;
   $30 = HEAP32[$mij>>2]|0;
   $31 = HEAP32[$1>>2]|0;
   $32 = (($31) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($30<<3)|0);
   $35 = +HEAPF64[$34>>3];
   HEAPF64[$x>>3] = $35;
   $36 = HEAP32[$mji>>2]|0;
   $37 = HEAP32[$1>>2]|0;
   $38 = (($37) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36<<3)|0);
   $41 = +HEAPF64[$40>>3];
   $42 = +HEAPF64[$x>>3];
   $43 = $42 + $41;
   HEAPF64[$x>>3] = $43;
   $44 = +HEAPF64[$x>>3];
   $45 = HEAP32[$mji>>2]|0;
   $46 = HEAP32[$1>>2]|0;
   $47 = (($46) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($45<<3)|0);
   HEAPF64[$49>>3] = $44;
   $50 = HEAP32[$mij>>2]|0;
   $51 = HEAP32[$1>>2]|0;
   $52 = (($51) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + ($50<<3)|0);
   HEAPF64[$54>>3] = $44;
   $55 = HEAP32[$j>>2]|0;
   $56 = (($55) + 1)|0;
   HEAP32[$j>>2] = $56;
  }
  $57 = HEAP32[$i>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$i>>2] = $58;
 }
 HEAP32[$0>>2] = 0;
 $59 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($59|0);
}
function _gretl_matrix_steal_data($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $vals = sp;
 HEAP32[$1>>2] = $m;
 HEAP32[$vals>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = HEAP32[$1>>2]|0;
   $5 = (($4) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==((-559038737)|0);
   if (!($7)) {
    $8 = HEAP32[$1>>2]|0;
    $9 = (($8) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    HEAP32[$vals>>2] = $10;
    $11 = HEAP32[$1>>2]|0;
    $12 = (($11) + 8|0);
    HEAP32[$12>>2] = 0;
    break;
   }
   (_matrix_block_error(13512)|0);
   HEAP32[$0>>2] = 0;
   $14 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($14|0);
  }
 } while(0);
 $13 = HEAP32[$vals>>2]|0;
 HEAP32[$0>>2] = $13;
 $14 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _gretl_matrix_print($m,$msg) {
 $m = $m|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $envstr = 0, $fmt = 0, $i = 0, $j = 0, $mt1 = 0, $mt2 = 0, $vararg_buffer12 = 0, $vararg_ptr11 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer12 = sp;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $fmt = sp + 32|0;
 $envstr = sp + 28|0;
 $i = sp + 24|0;
 $j = sp + 20|0;
 $mt1 = sp + 16|0;
 $mt2 = sp + 12|0;
 HEAP32[$0>>2] = $m;
 HEAP32[$1>>2] = $msg;
 HEAP32[$fmt>>2] = 13536;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $17 = (_getenv((13592|0))|0);
   HEAP32[$envstr>>2] = $17;
   $18 = HEAP32[$envstr>>2]|0;
   $19 = ($18|0)!=(0|0);
   if ($19) {
    $20 = HEAP32[$envstr>>2]|0;
    $21 = (_atoi($20)|0);
    $22 = ($21|0)>(0);
    if ($22) {
     HEAP32[$fmt>>2] = 13616;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    $23 = (_getenv((13632|0))|0);
    HEAP32[$envstr>>2] = $23;
    $24 = HEAP32[$envstr>>2]|0;
    $25 = ($24|0)!=(0|0);
    if ($25) {
     $26 = HEAP32[$envstr>>2]|0;
     $27 = (_atoi($26)|0);
     $28 = ($27|0)>(0);
     if ($28) {
      HEAP32[$fmt>>2] = 13656;
     }
    }
   }
   $29 = HEAP32[$1>>2]|0;
   $30 = ($29|0)!=(0|0);
   do {
    if ($30) {
     $31 = HEAP32[$1>>2]|0;
     $32 = HEAP8[$31>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = ($33|0)!=(0);
     if ($34) {
      $35 = HEAP32[_stderr>>2]|0;
      $36 = HEAP32[$1>>2]|0;
      $37 = HEAP32[$0>>2]|0;
      $38 = HEAP32[$37>>2]|0;
      $39 = HEAP32[$0>>2]|0;
      $40 = (($39) + 4|0);
      $41 = HEAP32[$40>>2]|0;
      HEAP32[$vararg_buffer12>>2] = $36;
      $vararg_ptr4 = (($vararg_buffer12) + 4|0);
      HEAP32[$vararg_ptr4>>2] = $38;
      $vararg_ptr5 = (($vararg_buffer12) + 8|0);
      HEAP32[$vararg_ptr5>>2] = $41;
      (_fprintf(($35|0),(13672|0),($vararg_buffer12|0))|0);
      $42 = HEAP32[$0>>2]|0;
      $43 = (($42) + 12|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==((-559038737)|0);
      if ($45) {
       $46 = HEAP32[_stderr>>2]|0;
       (_fprintf(($46|0),(13688|0),($vararg_buffer12|0))|0);
       break;
      }
      $47 = HEAP32[$0>>2]|0;
      $48 = (_gretl_matrix_is_dated($47)|0);
      $49 = ($48|0)!=(0);
      if ($49) {
       $50 = HEAP32[$0>>2]|0;
       $51 = (_gretl_matrix_get_t1($50)|0);
       HEAP32[$mt1>>2] = $51;
       $52 = HEAP32[$0>>2]|0;
       $53 = (_gretl_matrix_get_t2($52)|0);
       HEAP32[$mt2>>2] = $53;
       $54 = HEAP32[_stderr>>2]|0;
       $55 = HEAP32[$mt1>>2]|0;
       $56 = (($55) + 1)|0;
       $57 = HEAP32[$mt2>>2]|0;
       $58 = (($57) + 1)|0;
       HEAP32[$vararg_buffer12>>2] = $56;
       $vararg_ptr11 = (($vararg_buffer12) + 4|0);
       HEAP32[$vararg_ptr11>>2] = $58;
       (_fprintf(($54|0),(13720|0),($vararg_buffer12|0))|0);
       break;
      } else {
       $59 = HEAP32[_stderr>>2]|0;
       (_fputs((13744|0),($59|0))|0);
       break;
      }
     }
    }
   } while(0);
   HEAP32[$i>>2] = 0;
   while(1) {
    $60 = HEAP32[$i>>2]|0;
    $61 = HEAP32[$0>>2]|0;
    $62 = HEAP32[$61>>2]|0;
    $63 = ($60|0)<($62|0);
    if (!($63)) {
     break;
    }
    HEAP32[$j>>2] = 0;
    while(1) {
     $64 = HEAP32[$j>>2]|0;
     $65 = HEAP32[$0>>2]|0;
     $66 = (($65) + 4|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($64|0)<($67|0);
     $69 = HEAP32[_stderr>>2]|0;
     if (!($68)) {
      break;
     }
     $70 = HEAP32[$fmt>>2]|0;
     $71 = HEAP32[$j>>2]|0;
     $72 = HEAP32[$0>>2]|0;
     $73 = HEAP32[$72>>2]|0;
     $74 = Math_imul($71, $73)|0;
     $75 = HEAP32[$i>>2]|0;
     $76 = (($74) + ($75))|0;
     $77 = HEAP32[$0>>2]|0;
     $78 = (($77) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + ($76<<3)|0);
     $81 = +HEAPF64[$80>>3];
     HEAPF64[tempDoublePtr>>3]=$81;HEAP32[$vararg_buffer12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_fprintf(($69|0),($70|0),($vararg_buffer12|0))|0);
     $82 = HEAP32[$j>>2]|0;
     $83 = (($82) + 1)|0;
     HEAP32[$j>>2] = $83;
    }
    (_fputc(10,($69|0))|0);
    $84 = HEAP32[$i>>2]|0;
    $85 = (($84) + 1)|0;
    HEAP32[$i>>2] = $85;
   }
   $86 = HEAP32[_stderr>>2]|0;
   (_fputc(10,($86|0))|0);
   STACKTOP = sp;return;
  }
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[$1>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = HEAP32[_stderr>>2]|0;
   $15 = HEAP32[$1>>2]|0;
   HEAP32[$vararg_buffer12>>2] = $15;
   (_fprintf(($14|0),(13552|0),($vararg_buffer12|0))|0);
   STACKTOP = sp;return;
  }
 }
 $16 = HEAP32[_stderr>>2]|0;
 (_fputs((13576|0),($16|0))|0);
 STACKTOP = sp;return;
}
function _gretl_matrix_is_dated($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $m;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==((-559038737)|0);
  if (!($7)) {
   $8 = HEAP32[$1>>2]|0;
   $9 = (($8) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0|0);
   if ($11) {
    $12 = HEAP32[$1>>2]|0;
    $13 = (($12) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)>=(0);
    if ($16) {
     $17 = HEAP32[$1>>2]|0;
     $18 = (($17) + 12|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($19) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP32[$1>>2]|0;
     $23 = (($22) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ($21|0)>($25|0);
     $28 = $26;
    } else {
     $28 = 0;
    }
    $27 = $28&1;
    HEAP32[$0>>2] = $27;
    $29 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($29|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $29 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _gretl_matrix_get_t2($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $m;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==((-559038737)|0);
  if (!($7)) {
   $8 = HEAP32[$1>>2]|0;
   $9 = (($8) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0|0);
   if ($11) {
    $12 = HEAP32[$1>>2]|0;
    $13 = (($12) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    HEAP32[$0>>2] = $16;
    $17 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($17|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $17 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _real_gretl_matrix_is_symmetric($m,$verbose) {
 $m = $m|0;
 $verbose = $verbose|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp + 16|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $x = sp + 8|0;
 $y = sp;
 $i = sp + 52|0;
 $j = sp + 48|0;
 HEAP32[$1>>2] = $m;
 HEAP32[$2>>2] = $verbose;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = HEAP32[$1>>2]|0;
   $9 = (($8) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if (!($11)) {
    HEAP32[$i>>2] = 1;
    L5: while(1) {
     $12 = HEAP32[$i>>2]|0;
     $13 = HEAP32[$1>>2]|0;
     $14 = HEAP32[$13>>2]|0;
     $15 = ($12|0)<($14|0);
     if (!($15)) {
      label = 16;
      break;
     }
     HEAP32[$j>>2] = 0;
     while(1) {
      $16 = HEAP32[$j>>2]|0;
      $17 = HEAP32[$i>>2]|0;
      $18 = ($16|0)<($17|0);
      if (!($18)) {
       break;
      }
      $19 = HEAP32[$j>>2]|0;
      $20 = HEAP32[$1>>2]|0;
      $21 = HEAP32[$20>>2]|0;
      $22 = Math_imul($19, $21)|0;
      $23 = HEAP32[$i>>2]|0;
      $24 = (($22) + ($23))|0;
      $25 = HEAP32[$1>>2]|0;
      $26 = (($25) + 8|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = (($27) + ($24<<3)|0);
      $29 = +HEAPF64[$28>>3];
      HEAPF64[$x>>3] = $29;
      $30 = HEAP32[$i>>2]|0;
      $31 = HEAP32[$1>>2]|0;
      $32 = HEAP32[$31>>2]|0;
      $33 = Math_imul($30, $32)|0;
      $34 = HEAP32[$j>>2]|0;
      $35 = (($33) + ($34))|0;
      $36 = HEAP32[$1>>2]|0;
      $37 = (($36) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (($38) + ($35<<3)|0);
      $40 = +HEAPF64[$39>>3];
      HEAPF64[$y>>3] = $40;
      $41 = +HEAPF64[$x>>3];
      $42 = +HEAPF64[$y>>3];
      $43 = (_sneq($41,$42)|0);
      $44 = ($43|0)!=(0);
      if ($44) {
       break L5;
      }
      $58 = HEAP32[$j>>2]|0;
      $59 = (($58) + 1)|0;
      HEAP32[$j>>2] = $59;
     }
     $60 = HEAP32[$i>>2]|0;
     $61 = (($60) + 1)|0;
     HEAP32[$i>>2] = $61;
    }
    if ((label|0) == 16) {
     HEAP32[$0>>2] = 1;
     $62 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($62|0);
    }
    $45 = HEAP32[$2>>2]|0;
    $46 = ($45|0)!=(0);
    if ($46) {
     $47 = HEAP32[_stderr>>2]|0;
     $48 = HEAP32[$i>>2]|0;
     $49 = HEAP32[$j>>2]|0;
     $50 = +HEAPF64[$x>>3];
     $51 = HEAP32[$j>>2]|0;
     $52 = HEAP32[$i>>2]|0;
     $53 = +HEAPF64[$y>>3];
     HEAP32[$vararg_buffer>>2] = $48;
     $vararg_ptr1 = (($vararg_buffer) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $49;
     $vararg_ptr2 = (($vararg_buffer) + 8|0);
     HEAPF64[tempDoublePtr>>3]=$50;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $vararg_ptr3 = (($vararg_buffer) + 16|0);
     HEAP32[$vararg_ptr3>>2] = $51;
     $vararg_ptr4 = (($vararg_buffer) + 20|0);
     HEAP32[$vararg_ptr4>>2] = $52;
     $vararg_ptr5 = (($vararg_buffer) + 24|0);
     HEAPF64[tempDoublePtr>>3]=$53;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_fprintf(($47|0),(14696|0),($vararg_buffer|0))|0);
     $54 = HEAP32[$1>>2]|0;
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)<(100);
     if ($56) {
      $57 = HEAP32[$1>>2]|0;
      _gretl_matrix_print($57,14736);
     }
    }
    HEAP32[$0>>2] = 0;
    $62 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($62|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $62 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($62|0);
}
function _lapack_malloc($sz) {
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $mem = sp + 4|0;
 $chunk = sp;
 HEAP32[$0>>2] = $sz;
 HEAP32[$mem>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[13200>>2]|0;
 $3 = ($1>>>0)>($2>>>0);
 $4 = HEAP32[13192>>2]|0;
 if ($3) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (_realloc($4,$5)|0);
  HEAP32[$chunk>>2] = $6;
  $7 = HEAP32[$chunk>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = HEAP32[$chunk>>2]|0;
   HEAP32[$mem>>2] = $9;
   HEAP32[13192>>2] = $9;
   $10 = HEAP32[$0>>2]|0;
   HEAP32[13200>>2] = $10;
  }
 } else {
  HEAP32[$mem>>2] = $4;
 }
 $11 = HEAP32[$mem>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function _wspace_fail($info,$w0) {
 $info = $info|0;
 $w0 = +$w0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $iinfo = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp + 8|0;
 $0 = sp + 24|0;
 $1 = sp;
 $iinfo = sp + 20|0;
 HEAP32[$0>>2] = $info;
 HEAPF64[$1>>3] = $w0;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$iinfo>>2] = $2;
 $3 = HEAP32[_stderr>>2]|0;
 $4 = HEAP32[$iinfo>>2]|0;
 $5 = +HEAPF64[$1>>3];
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$5;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_fprintf(($3|0),(14632|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return 2;
}
function _lapack_realloc($p,$sz) {
 $p = $p|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $p;
 HEAP32[$1>>2] = $sz;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_lapack_malloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _lapack_free($p) {
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function _gretl_matrix_mirror($m,$uplo) {
 $m = $m|0;
 $uplo = $uplo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $n = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 28|0;
 $i = sp + 16|0;
 $j = sp + 12|0;
 $n = sp + 8|0;
 $x = sp;
 HEAP32[$1>>2] = $m;
 HEAP8[$2>>0] = $uplo;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)!=($7|0);
 if ($8) {
  $9 = HEAP32[_stderr>>2]|0;
  (_fputs((14120|0),($9|0))|0);
  HEAP32[$0>>2] = 1;
  $71 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($71|0);
 }
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$n>>2] = $11;
 HEAP32[$i>>2] = 0;
 while(1) {
  $12 = HEAP32[$i>>2]|0;
  $13 = HEAP32[$n>>2]|0;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$i>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$j>>2] = $16;
  while(1) {
   $17 = HEAP32[$j>>2]|0;
   $18 = HEAP32[$n>>2]|0;
   $19 = ($17|0)<($18|0);
   if (!($19)) {
    break;
   }
   $20 = HEAP8[$2>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)==(85);
   if ($22) {
    $23 = HEAP32[$j>>2]|0;
    $24 = HEAP32[$1>>2]|0;
    $25 = HEAP32[$24>>2]|0;
    $26 = Math_imul($23, $25)|0;
    $27 = HEAP32[$i>>2]|0;
    $28 = (($26) + ($27))|0;
    $29 = HEAP32[$1>>2]|0;
    $30 = (($29) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + ($28<<3)|0);
    $33 = +HEAPF64[$32>>3];
    HEAPF64[$x>>3] = $33;
    $34 = +HEAPF64[$x>>3];
    $35 = HEAP32[$i>>2]|0;
    $36 = HEAP32[$1>>2]|0;
    $37 = HEAP32[$36>>2]|0;
    $38 = Math_imul($35, $37)|0;
    $39 = HEAP32[$j>>2]|0;
    $40 = (($38) + ($39))|0;
    $41 = HEAP32[$1>>2]|0;
    $42 = (($41) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($40<<3)|0);
    HEAPF64[$44>>3] = $34;
   } else {
    $45 = HEAP32[$i>>2]|0;
    $46 = HEAP32[$1>>2]|0;
    $47 = HEAP32[$46>>2]|0;
    $48 = Math_imul($45, $47)|0;
    $49 = HEAP32[$j>>2]|0;
    $50 = (($48) + ($49))|0;
    $51 = HEAP32[$1>>2]|0;
    $52 = (($51) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($50<<3)|0);
    $55 = +HEAPF64[$54>>3];
    HEAPF64[$x>>3] = $55;
    $56 = +HEAPF64[$x>>3];
    $57 = HEAP32[$j>>2]|0;
    $58 = HEAP32[$1>>2]|0;
    $59 = HEAP32[$58>>2]|0;
    $60 = Math_imul($57, $59)|0;
    $61 = HEAP32[$i>>2]|0;
    $62 = (($60) + ($61))|0;
    $63 = HEAP32[$1>>2]|0;
    $64 = (($63) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + ($62<<3)|0);
    HEAPF64[$66>>3] = $56;
   }
   $67 = HEAP32[$j>>2]|0;
   $68 = (($67) + 1)|0;
   HEAP32[$j>>2] = $68;
  }
  $69 = HEAP32[$i>>2]|0;
  $70 = (($69) + 1)|0;
  HEAP32[$i>>2] = $70;
 }
 HEAP32[$0>>2] = 0;
 $71 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($71|0);
}
function _get_blas_mnk_min() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[13760>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _matrix_multiply_self_transpose($a,$atr,$c,$cmod) {
 $a = $a|0;
 $atr = $atr|0;
 $c = $c|0;
 $cmod = $cmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $idx1 = 0;
 var $idx2 = 0, $j = 0, $k = 0, $nc = 0, $nr = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $i = sp + 32|0;
 $j = sp + 28|0;
 $k = sp + 24|0;
 $nc = sp + 20|0;
 $nr = sp + 16|0;
 $idx1 = sp + 12|0;
 $idx2 = sp + 8|0;
 $x = sp;
 HEAP32[$1>>2] = $a;
 HEAP32[$2>>2] = $atr;
 HEAP32[$3>>2] = $c;
 HEAP32[$4>>2] = $cmod;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$1>>2]|0;
 if ($6) {
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = $10;
 }
 HEAP32[$nc>>2] = $11;
 $12 = HEAP32[$2>>2]|0;
 $13 = ($12|0)!=(0);
 $14 = HEAP32[$1>>2]|0;
 if ($13) {
  $15 = HEAP32[$14>>2]|0;
  $18 = $15;
 } else {
  $16 = (($14) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17;
 }
 HEAP32[$nr>>2] = $18;
 $19 = HEAP32[$3>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$nc>>2]|0;
 $22 = ($20|0)!=($21|0);
 if ($22) {
  HEAP32[$0>>2] = 36;
  $297 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($297|0);
 }
 $23 = HEAP32[$nc>>2]|0;
 $24 = HEAP32[$nc>>2]|0;
 $25 = HEAP32[$nr>>2]|0;
 $26 = (_use_blas($23,$24,$25)|0);
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = HEAP32[$1>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = HEAP32[$3>>2]|0;
  $31 = HEAP32[$4>>2]|0;
  _gretl_blas_dsyrk($28,$29,$30,$31);
  HEAP32[$0>>2] = 0;
  $297 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($297|0);
 }
 $32 = HEAP32[$3>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(1);
 if ($34) {
  $35 = HEAP32[$1>>2]|0;
  $36 = (($35) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$1>>2]|0;
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($37, $39)|0;
  HEAP32[$k>>2] = $40;
  $41 = HEAP32[$4>>2]|0;
  $42 = ($41|0)!=(3);
  if ($42) {
   $43 = HEAP32[$3>>2]|0;
   $44 = (($43) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   HEAPF64[$45>>3] = 0.0;
  }
  HEAP32[$i>>2] = 0;
  while(1) {
   $46 = HEAP32[$i>>2]|0;
   $47 = HEAP32[$k>>2]|0;
   $48 = ($46|0)<($47|0);
   if (!($48)) {
    break;
   }
   $49 = HEAP32[$i>>2]|0;
   $50 = HEAP32[$1>>2]|0;
   $51 = (($50) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($49<<3)|0);
   $54 = +HEAPF64[$53>>3];
   $55 = HEAP32[$i>>2]|0;
   $56 = HEAP32[$1>>2]|0;
   $57 = (($56) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + ($55<<3)|0);
   $60 = +HEAPF64[$59>>3];
   $61 = $54 * $60;
   $62 = HEAP32[$3>>2]|0;
   $63 = (($62) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = +HEAPF64[$64>>3];
   $66 = $65 + $61;
   HEAPF64[$64>>3] = $66;
   $67 = HEAP32[$i>>2]|0;
   $68 = (($67) + 1)|0;
   HEAP32[$i>>2] = $68;
  }
  HEAP32[$0>>2] = 0;
  $297 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($297|0);
 }
 $69 = HEAP32[$2>>2]|0;
 $70 = ($69|0)!=(0);
 HEAP32[$i>>2] = 0;
 L28: do {
  if ($70) {
   while(1) {
    $71 = HEAP32[$i>>2]|0;
    $72 = HEAP32[$nc>>2]|0;
    $73 = ($71|0)<($72|0);
    if (!($73)) {
     break L28;
    }
    $74 = HEAP32[$i>>2]|0;
    HEAP32[$j>>2] = $74;
    while(1) {
     $75 = HEAP32[$j>>2]|0;
     $76 = HEAP32[$nc>>2]|0;
     $77 = ($75|0)<($76|0);
     $78 = HEAP32[$i>>2]|0;
     if (!($77)) {
      break;
     }
     $79 = HEAP32[$1>>2]|0;
     $80 = HEAP32[$79>>2]|0;
     $81 = Math_imul($78, $80)|0;
     HEAP32[$idx1>>2] = $81;
     $82 = HEAP32[$j>>2]|0;
     $83 = HEAP32[$1>>2]|0;
     $84 = HEAP32[$83>>2]|0;
     $85 = Math_imul($82, $84)|0;
     HEAP32[$idx2>>2] = $85;
     HEAPF64[$x>>3] = 0.0;
     HEAP32[$k>>2] = 0;
     while(1) {
      $86 = HEAP32[$k>>2]|0;
      $87 = HEAP32[$nr>>2]|0;
      $88 = ($86|0)<($87|0);
      if (!($88)) {
       break;
      }
      $89 = HEAP32[$idx1>>2]|0;
      $90 = (($89) + 1)|0;
      HEAP32[$idx1>>2] = $90;
      $91 = HEAP32[$1>>2]|0;
      $92 = (($91) + 8|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($93) + ($89<<3)|0);
      $95 = +HEAPF64[$94>>3];
      $96 = HEAP32[$idx2>>2]|0;
      $97 = (($96) + 1)|0;
      HEAP32[$idx2>>2] = $97;
      $98 = HEAP32[$1>>2]|0;
      $99 = (($98) + 8|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = (($100) + ($96<<3)|0);
      $102 = +HEAPF64[$101>>3];
      $103 = $95 * $102;
      $104 = +HEAPF64[$x>>3];
      $105 = $104 + $103;
      HEAPF64[$x>>3] = $105;
      $106 = HEAP32[$k>>2]|0;
      $107 = (($106) + 1)|0;
      HEAP32[$k>>2] = $107;
     }
     $108 = HEAP32[$4>>2]|0;
     $109 = ($108|0)==(3);
     do {
      if ($109) {
       $110 = +HEAPF64[$x>>3];
       $111 = HEAP32[$j>>2]|0;
       $112 = HEAP32[$3>>2]|0;
       $113 = HEAP32[$112>>2]|0;
       $114 = Math_imul($111, $113)|0;
       $115 = HEAP32[$i>>2]|0;
       $116 = (($114) + ($115))|0;
       $117 = HEAP32[$3>>2]|0;
       $118 = (($117) + 8|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = (($119) + ($116<<3)|0);
       $121 = +HEAPF64[$120>>3];
       $122 = $121 + $110;
       HEAPF64[$120>>3] = $122;
       $123 = HEAP32[$i>>2]|0;
       $124 = HEAP32[$j>>2]|0;
       $125 = ($123|0)!=($124|0);
       if ($125) {
        $126 = +HEAPF64[$x>>3];
        $127 = HEAP32[$i>>2]|0;
        $128 = HEAP32[$3>>2]|0;
        $129 = HEAP32[$128>>2]|0;
        $130 = Math_imul($127, $129)|0;
        $131 = HEAP32[$j>>2]|0;
        $132 = (($130) + ($131))|0;
        $133 = HEAP32[$3>>2]|0;
        $134 = (($133) + 8|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = (($135) + ($132<<3)|0);
        $137 = +HEAPF64[$136>>3];
        $138 = $137 + $126;
        HEAPF64[$136>>3] = $138;
       }
      } else {
       $139 = HEAP32[$4>>2]|0;
       $140 = ($139|0)==(4);
       $141 = +HEAPF64[$x>>3];
       $142 = HEAP32[$j>>2]|0;
       $143 = HEAP32[$3>>2]|0;
       $144 = HEAP32[$143>>2]|0;
       $145 = Math_imul($142, $144)|0;
       $146 = HEAP32[$i>>2]|0;
       $147 = (($145) + ($146))|0;
       $148 = HEAP32[$3>>2]|0;
       $149 = (($148) + 8|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (($150) + ($147<<3)|0);
       if (!($140)) {
        HEAPF64[$151>>3] = $141;
        $170 = +HEAPF64[$x>>3];
        $171 = HEAP32[$i>>2]|0;
        $172 = HEAP32[$3>>2]|0;
        $173 = HEAP32[$172>>2]|0;
        $174 = Math_imul($171, $173)|0;
        $175 = HEAP32[$j>>2]|0;
        $176 = (($174) + ($175))|0;
        $177 = HEAP32[$3>>2]|0;
        $178 = (($177) + 8|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = (($179) + ($176<<3)|0);
        HEAPF64[$180>>3] = $170;
        break;
       }
       $152 = +HEAPF64[$151>>3];
       $153 = $152 - $141;
       HEAPF64[$151>>3] = $153;
       $154 = HEAP32[$i>>2]|0;
       $155 = HEAP32[$j>>2]|0;
       $156 = ($154|0)!=($155|0);
       if ($156) {
        $157 = +HEAPF64[$x>>3];
        $158 = HEAP32[$i>>2]|0;
        $159 = HEAP32[$3>>2]|0;
        $160 = HEAP32[$159>>2]|0;
        $161 = Math_imul($158, $160)|0;
        $162 = HEAP32[$j>>2]|0;
        $163 = (($161) + ($162))|0;
        $164 = HEAP32[$3>>2]|0;
        $165 = (($164) + 8|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (($166) + ($163<<3)|0);
        $168 = +HEAPF64[$167>>3];
        $169 = $168 - $157;
        HEAPF64[$167>>3] = $169;
       }
      }
     } while(0);
     $181 = HEAP32[$j>>2]|0;
     $182 = (($181) + 1)|0;
     HEAP32[$j>>2] = $182;
    }
    $183 = (($78) + 1)|0;
    HEAP32[$i>>2] = $183;
   }
  } else {
   while(1) {
    $184 = HEAP32[$i>>2]|0;
    $185 = HEAP32[$nc>>2]|0;
    $186 = ($184|0)<($185|0);
    if (!($186)) {
     break L28;
    }
    $187 = HEAP32[$i>>2]|0;
    HEAP32[$j>>2] = $187;
    while(1) {
     $188 = HEAP32[$j>>2]|0;
     $189 = HEAP32[$nc>>2]|0;
     $190 = ($188|0)<($189|0);
     $191 = HEAP32[$i>>2]|0;
     if (!($190)) {
      break;
     }
     HEAP32[$idx1>>2] = $191;
     $192 = HEAP32[$j>>2]|0;
     HEAP32[$idx2>>2] = $192;
     HEAPF64[$x>>3] = 0.0;
     HEAP32[$k>>2] = 0;
     while(1) {
      $193 = HEAP32[$k>>2]|0;
      $194 = HEAP32[$nr>>2]|0;
      $195 = ($193|0)<($194|0);
      if (!($195)) {
       break;
      }
      $196 = HEAP32[$idx1>>2]|0;
      $197 = HEAP32[$1>>2]|0;
      $198 = (($197) + 8|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = (($199) + ($196<<3)|0);
      $201 = +HEAPF64[$200>>3];
      $202 = HEAP32[$idx2>>2]|0;
      $203 = HEAP32[$1>>2]|0;
      $204 = (($203) + 8|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = (($205) + ($202<<3)|0);
      $207 = +HEAPF64[$206>>3];
      $208 = $201 * $207;
      $209 = +HEAPF64[$x>>3];
      $210 = $209 + $208;
      HEAPF64[$x>>3] = $210;
      $211 = HEAP32[$1>>2]|0;
      $212 = HEAP32[$211>>2]|0;
      $213 = HEAP32[$idx1>>2]|0;
      $214 = (($213) + ($212))|0;
      HEAP32[$idx1>>2] = $214;
      $215 = HEAP32[$1>>2]|0;
      $216 = HEAP32[$215>>2]|0;
      $217 = HEAP32[$idx2>>2]|0;
      $218 = (($217) + ($216))|0;
      HEAP32[$idx2>>2] = $218;
      $219 = HEAP32[$k>>2]|0;
      $220 = (($219) + 1)|0;
      HEAP32[$k>>2] = $220;
     }
     $221 = HEAP32[$4>>2]|0;
     $222 = ($221|0)==(3);
     do {
      if ($222) {
       $223 = +HEAPF64[$x>>3];
       $224 = HEAP32[$j>>2]|0;
       $225 = HEAP32[$3>>2]|0;
       $226 = HEAP32[$225>>2]|0;
       $227 = Math_imul($224, $226)|0;
       $228 = HEAP32[$i>>2]|0;
       $229 = (($227) + ($228))|0;
       $230 = HEAP32[$3>>2]|0;
       $231 = (($230) + 8|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = (($232) + ($229<<3)|0);
       $234 = +HEAPF64[$233>>3];
       $235 = $234 + $223;
       HEAPF64[$233>>3] = $235;
       $236 = HEAP32[$i>>2]|0;
       $237 = HEAP32[$j>>2]|0;
       $238 = ($236|0)!=($237|0);
       if ($238) {
        $239 = +HEAPF64[$x>>3];
        $240 = HEAP32[$i>>2]|0;
        $241 = HEAP32[$3>>2]|0;
        $242 = HEAP32[$241>>2]|0;
        $243 = Math_imul($240, $242)|0;
        $244 = HEAP32[$j>>2]|0;
        $245 = (($243) + ($244))|0;
        $246 = HEAP32[$3>>2]|0;
        $247 = (($246) + 8|0);
        $248 = HEAP32[$247>>2]|0;
        $249 = (($248) + ($245<<3)|0);
        $250 = +HEAPF64[$249>>3];
        $251 = $250 + $239;
        HEAPF64[$249>>3] = $251;
       }
      } else {
       $252 = HEAP32[$4>>2]|0;
       $253 = ($252|0)==(4);
       $254 = +HEAPF64[$x>>3];
       $255 = HEAP32[$j>>2]|0;
       $256 = HEAP32[$3>>2]|0;
       $257 = HEAP32[$256>>2]|0;
       $258 = Math_imul($255, $257)|0;
       $259 = HEAP32[$i>>2]|0;
       $260 = (($258) + ($259))|0;
       $261 = HEAP32[$3>>2]|0;
       $262 = (($261) + 8|0);
       $263 = HEAP32[$262>>2]|0;
       $264 = (($263) + ($260<<3)|0);
       if (!($253)) {
        HEAPF64[$264>>3] = $254;
        $283 = +HEAPF64[$x>>3];
        $284 = HEAP32[$i>>2]|0;
        $285 = HEAP32[$3>>2]|0;
        $286 = HEAP32[$285>>2]|0;
        $287 = Math_imul($284, $286)|0;
        $288 = HEAP32[$j>>2]|0;
        $289 = (($287) + ($288))|0;
        $290 = HEAP32[$3>>2]|0;
        $291 = (($290) + 8|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = (($292) + ($289<<3)|0);
        HEAPF64[$293>>3] = $283;
        break;
       }
       $265 = +HEAPF64[$264>>3];
       $266 = $265 - $254;
       HEAPF64[$264>>3] = $266;
       $267 = HEAP32[$i>>2]|0;
       $268 = HEAP32[$j>>2]|0;
       $269 = ($267|0)!=($268|0);
       if ($269) {
        $270 = +HEAPF64[$x>>3];
        $271 = HEAP32[$i>>2]|0;
        $272 = HEAP32[$3>>2]|0;
        $273 = HEAP32[$272>>2]|0;
        $274 = Math_imul($271, $273)|0;
        $275 = HEAP32[$j>>2]|0;
        $276 = (($274) + ($275))|0;
        $277 = HEAP32[$3>>2]|0;
        $278 = (($277) + 8|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = (($279) + ($276<<3)|0);
        $281 = +HEAPF64[$280>>3];
        $282 = $281 - $270;
        HEAPF64[$280>>3] = $282;
       }
      }
     } while(0);
     $294 = HEAP32[$j>>2]|0;
     $295 = (($294) + 1)|0;
     HEAP32[$j>>2] = $295;
    }
    $296 = (($191) + 1)|0;
    HEAP32[$i>>2] = $296;
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $297 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($297|0);
}
function _gretl_matrix_multiply_mod($a,$amod,$b,$bmod,$c,$cmod) {
 $a = $a|0;
 $amod = $amod|0;
 $b = $b|0;
 $bmod = $bmod|0;
 $c = $c|0;
 $cmod = $cmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atr = 0, $btr = 0, $lcols = 0;
 var $lrows = 0, $rcols = 0, $rrows = 0, $vararg_buffer11 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer11 = sp;
 $0 = sp + 72|0;
 $1 = sp + 68|0;
 $2 = sp + 64|0;
 $3 = sp + 60|0;
 $4 = sp + 56|0;
 $5 = sp + 52|0;
 $6 = sp + 48|0;
 $atr = sp + 44|0;
 $btr = sp + 40|0;
 $lrows = sp + 36|0;
 $lcols = sp + 32|0;
 $rrows = sp + 28|0;
 $rcols = sp + 24|0;
 HEAP32[$1>>2] = $a;
 HEAP32[$2>>2] = $amod;
 HEAP32[$3>>2] = $b;
 HEAP32[$4>>2] = $bmod;
 HEAP32[$5>>2] = $c;
 HEAP32[$6>>2] = $cmod;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)==(1);
 $9 = $8&1;
 HEAP32[$atr>>2] = $9;
 $10 = HEAP32[$4>>2]|0;
 $11 = ($10|0)==(1);
 $12 = $11&1;
 HEAP32[$btr>>2] = $12;
 $13 = HEAP32[$1>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = HEAP32[$1>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = HEAP32[$1>>2]|0;
   $19 = (($18) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0);
   if (!($21)) {
    $22 = HEAP32[$3>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $24 = HEAP32[$3>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(0);
     if (!($26)) {
      $27 = HEAP32[$3>>2]|0;
      $28 = (($27) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $31 = HEAP32[$5>>2]|0;
       $32 = ($31|0)==(0|0);
       if (!($32)) {
        $33 = HEAP32[$5>>2]|0;
        $34 = HEAP32[$33>>2]|0;
        $35 = ($34|0)==(0);
        if (!($35)) {
         $36 = HEAP32[$5>>2]|0;
         $37 = (($36) + 4|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = ($38|0)==(0);
         if (!($39)) {
          $40 = HEAP32[$1>>2]|0;
          $41 = HEAP32[$5>>2]|0;
          $42 = ($40|0)==($41|0);
          if (!($42)) {
           $43 = HEAP32[$3>>2]|0;
           $44 = HEAP32[$5>>2]|0;
           $45 = ($43|0)==($44|0);
           if (!($45)) {
            $51 = HEAP32[$1>>2]|0;
            $52 = HEAP32[$3>>2]|0;
            $53 = ($51|0)==($52|0);
            if ($53) {
             $54 = HEAP32[$atr>>2]|0;
             $55 = HEAP32[$btr>>2]|0;
             $56 = ($54|0)!=($55|0);
             if ($56) {
              $57 = HEAP32[$5>>2]|0;
              $58 = HEAP32[$57>>2]|0;
              $59 = HEAP32[$5>>2]|0;
              $60 = (($59) + 4|0);
              $61 = HEAP32[$60>>2]|0;
              $62 = ($58|0)==($61|0);
              if ($62) {
               $63 = HEAP32[$1>>2]|0;
               $64 = HEAP32[$atr>>2]|0;
               $65 = HEAP32[$5>>2]|0;
               $66 = HEAP32[$6>>2]|0;
               $67 = (_matrix_multiply_self_transpose($63,$64,$65,$66)|0);
               HEAP32[$0>>2] = $67;
               $176 = HEAP32[$0>>2]|0;
               STACKTOP = sp;return ($176|0);
              }
             }
            }
            $68 = HEAP32[$1>>2]|0;
            $69 = HEAP32[$68>>2]|0;
            $70 = ($69|0)==(1);
            if ($70) {
             $71 = HEAP32[$1>>2]|0;
             $72 = (($71) + 4|0);
             $73 = HEAP32[$72>>2]|0;
             $74 = ($73|0)==(1);
             if ($74) {
              $75 = HEAP32[$1>>2]|0;
              $76 = (($75) + 8|0);
              $77 = HEAP32[$76>>2]|0;
              $78 = +HEAPF64[$77>>3];
              $79 = HEAP32[$3>>2]|0;
              $80 = HEAP32[$btr>>2]|0;
              $81 = HEAP32[$5>>2]|0;
              $82 = HEAP32[$6>>2]|0;
              $83 = (_matmul_mod_w_scalar($78,$79,$80,$81,$82)|0);
              HEAP32[$0>>2] = $83;
              $176 = HEAP32[$0>>2]|0;
              STACKTOP = sp;return ($176|0);
             }
            }
            $84 = HEAP32[$3>>2]|0;
            $85 = HEAP32[$84>>2]|0;
            $86 = ($85|0)==(1);
            if ($86) {
             $87 = HEAP32[$3>>2]|0;
             $88 = (($87) + 4|0);
             $89 = HEAP32[$88>>2]|0;
             $90 = ($89|0)==(1);
             if ($90) {
              $91 = HEAP32[$3>>2]|0;
              $92 = (($91) + 8|0);
              $93 = HEAP32[$92>>2]|0;
              $94 = +HEAPF64[$93>>3];
              $95 = HEAP32[$1>>2]|0;
              $96 = HEAP32[$atr>>2]|0;
              $97 = HEAP32[$5>>2]|0;
              $98 = HEAP32[$6>>2]|0;
              $99 = (_matmul_mod_w_scalar($94,$95,$96,$97,$98)|0);
              HEAP32[$0>>2] = $99;
              $176 = HEAP32[$0>>2]|0;
              STACKTOP = sp;return ($176|0);
             }
            }
            $100 = HEAP32[$atr>>2]|0;
            $101 = ($100|0)!=(0);
            $102 = HEAP32[$1>>2]|0;
            if ($101) {
             $103 = (($102) + 4|0);
             $104 = HEAP32[$103>>2]|0;
             $106 = $104;
            } else {
             $105 = HEAP32[$102>>2]|0;
             $106 = $105;
            }
            HEAP32[$lrows>>2] = $106;
            $107 = HEAP32[$atr>>2]|0;
            $108 = ($107|0)!=(0);
            $109 = HEAP32[$1>>2]|0;
            if ($108) {
             $110 = HEAP32[$109>>2]|0;
             $113 = $110;
            } else {
             $111 = (($109) + 4|0);
             $112 = HEAP32[$111>>2]|0;
             $113 = $112;
            }
            HEAP32[$lcols>>2] = $113;
            $114 = HEAP32[$btr>>2]|0;
            $115 = ($114|0)!=(0);
            $116 = HEAP32[$3>>2]|0;
            if ($115) {
             $117 = (($116) + 4|0);
             $118 = HEAP32[$117>>2]|0;
             $120 = $118;
            } else {
             $119 = HEAP32[$116>>2]|0;
             $120 = $119;
            }
            HEAP32[$rrows>>2] = $120;
            $121 = HEAP32[$btr>>2]|0;
            $122 = ($121|0)!=(0);
            $123 = HEAP32[$3>>2]|0;
            if ($122) {
             $124 = HEAP32[$123>>2]|0;
             $127 = $124;
            } else {
             $125 = (($123) + 4|0);
             $126 = HEAP32[$125>>2]|0;
             $127 = $126;
            }
            HEAP32[$rcols>>2] = $127;
            $128 = HEAP32[$lcols>>2]|0;
            $129 = HEAP32[$rrows>>2]|0;
            $130 = ($128|0)!=($129|0);
            if ($130) {
             $131 = HEAP32[_stderr>>2]|0;
             (_fputs((13880|0),($131|0))|0);
             $132 = HEAP32[_stderr>>2]|0;
             $133 = HEAP32[$lrows>>2]|0;
             $134 = HEAP32[$lcols>>2]|0;
             $135 = HEAP32[$rrows>>2]|0;
             $136 = HEAP32[$rcols>>2]|0;
             $137 = HEAP32[$5>>2]|0;
             $138 = HEAP32[$137>>2]|0;
             $139 = HEAP32[$5>>2]|0;
             $140 = (($139) + 4|0);
             $141 = HEAP32[$140>>2]|0;
             HEAP32[$vararg_buffer11>>2] = $133;
             $vararg_ptr6 = (($vararg_buffer11) + 4|0);
             HEAP32[$vararg_ptr6>>2] = $134;
             $vararg_ptr7 = (($vararg_buffer11) + 8|0);
             HEAP32[$vararg_ptr7>>2] = $135;
             $vararg_ptr8 = (($vararg_buffer11) + 12|0);
             HEAP32[$vararg_ptr8>>2] = $136;
             $vararg_ptr9 = (($vararg_buffer11) + 16|0);
             HEAP32[$vararg_ptr9>>2] = $138;
             $vararg_ptr10 = (($vararg_buffer11) + 20|0);
             HEAP32[$vararg_ptr10>>2] = $141;
             (_fprintf(($132|0),(13936|0),($vararg_buffer11|0))|0);
             HEAP32[$0>>2] = 36;
             $176 = HEAP32[$0>>2]|0;
             STACKTOP = sp;return ($176|0);
            }
            $142 = HEAP32[$5>>2]|0;
            $143 = HEAP32[$142>>2]|0;
            $144 = HEAP32[$lrows>>2]|0;
            $145 = ($143|0)!=($144|0);
            do {
             if (!($145)) {
              $146 = HEAP32[$5>>2]|0;
              $147 = (($146) + 4|0);
              $148 = HEAP32[$147>>2]|0;
              $149 = HEAP32[$rcols>>2]|0;
              $150 = ($148|0)!=($149|0);
              if ($150) {
               break;
              }
              $162 = HEAP32[$lrows>>2]|0;
              $163 = HEAP32[$rcols>>2]|0;
              $164 = HEAP32[$lcols>>2]|0;
              $165 = (_use_blas($162,$163,$164)|0);
              $166 = ($165|0)!=(0);
              $167 = HEAP32[$1>>2]|0;
              $168 = HEAP32[$atr>>2]|0;
              $169 = HEAP32[$3>>2]|0;
              $170 = HEAP32[$btr>>2]|0;
              $171 = HEAP32[$5>>2]|0;
              $172 = HEAP32[$6>>2]|0;
              $173 = HEAP32[$lrows>>2]|0;
              $174 = HEAP32[$rcols>>2]|0;
              $175 = HEAP32[$lcols>>2]|0;
              if ($166) {
               _gretl_blas_dgemm($167,$168,$169,$170,$171,$172,$173,$174,$175);
              } else {
               _gretl_dgemm($167,$168,$169,$170,$171,$172,$173,$174,$175);
              }
              HEAP32[$0>>2] = 0;
              $176 = HEAP32[$0>>2]|0;
              STACKTOP = sp;return ($176|0);
             }
            } while(0);
            $151 = HEAP32[_stderr>>2]|0;
            (_fputs((13880|0),($151|0))|0);
            $152 = HEAP32[_stderr>>2]|0;
            $153 = HEAP32[$lrows>>2]|0;
            $154 = HEAP32[$lcols>>2]|0;
            $155 = HEAP32[$rrows>>2]|0;
            $156 = HEAP32[$rcols>>2]|0;
            $157 = HEAP32[$5>>2]|0;
            $158 = HEAP32[$157>>2]|0;
            $159 = HEAP32[$5>>2]|0;
            $160 = (($159) + 4|0);
            $161 = HEAP32[$160>>2]|0;
            HEAP32[$vararg_buffer11>>2] = $153;
            $vararg_ptr14 = (($vararg_buffer11) + 4|0);
            HEAP32[$vararg_ptr14>>2] = $154;
            $vararg_ptr15 = (($vararg_buffer11) + 8|0);
            HEAP32[$vararg_ptr15>>2] = $155;
            $vararg_ptr16 = (($vararg_buffer11) + 12|0);
            HEAP32[$vararg_ptr16>>2] = $156;
            $vararg_ptr17 = (($vararg_buffer11) + 16|0);
            HEAP32[$vararg_ptr17>>2] = $158;
            $vararg_ptr18 = (($vararg_buffer11) + 20|0);
            HEAP32[$vararg_ptr18>>2] = $161;
            (_fprintf(($152|0),(13936|0),($vararg_buffer11|0))|0);
            HEAP32[$0>>2] = 36;
            $176 = HEAP32[$0>>2]|0;
            STACKTOP = sp;return ($176|0);
           }
          }
          $46 = HEAP32[_stderr>>2]|0;
          (_fputs((13768|0),($46|0))|0);
          $47 = HEAP32[_stderr>>2]|0;
          $48 = HEAP32[$1>>2]|0;
          $49 = HEAP32[$3>>2]|0;
          $50 = HEAP32[$5>>2]|0;
          HEAP32[$vararg_buffer11>>2] = $48;
          $vararg_ptr1 = (($vararg_buffer11) + 4|0);
          HEAP32[$vararg_ptr1>>2] = $49;
          $vararg_ptr2 = (($vararg_buffer11) + 8|0);
          HEAP32[$vararg_ptr2>>2] = $50;
          (_fprintf(($47|0),(13856|0),($vararg_buffer11|0))|0);
          HEAP32[$0>>2] = 1;
          $176 = HEAP32[$0>>2]|0;
          STACKTOP = sp;return ($176|0);
         }
        }
       }
      }
     }
    }
   }
  }
 }
 HEAP32[$0>>2] = 2;
 $176 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($176|0);
}
function _matmul_mod_w_scalar($x,$m,$mtr,$c,$cmod) {
 $x = +$x;
 $m = $m|0;
 $mtr = $mtr|0;
 $c = $c|0;
 $cmod = $cmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $cc = 0, $cij = 0, $cr = 0, $i = 0, $i2 = 0, $j = 0, $k = 0, $n = 0, $xm = 0, $xm1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 76|0;
 $1 = sp + 24|0;
 $2 = sp + 72|0;
 $3 = sp + 68|0;
 $4 = sp + 64|0;
 $5 = sp + 60|0;
 $cr = sp + 56|0;
 $cc = sp + 52|0;
 $xm = sp + 16|0;
 $cij = sp + 8|0;
 $i = sp + 48|0;
 $j = sp + 44|0;
 $k = sp + 40|0;
 $xm1 = sp;
 $i2 = sp + 36|0;
 $n = sp + 32|0;
 HEAPF64[$1>>3] = $x;
 HEAP32[$2>>2] = $m;
 HEAP32[$3>>2] = $mtr;
 HEAP32[$4>>2] = $c;
 HEAP32[$5>>2] = $cmod;
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = HEAP32[$2>>2]|0;
 if ($7) {
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = $11;
 }
 HEAP32[$cr>>2] = $12;
 $13 = HEAP32[$3>>2]|0;
 $14 = ($13|0)!=(0);
 $15 = HEAP32[$2>>2]|0;
 if ($14) {
  $16 = HEAP32[$15>>2]|0;
  $19 = $16;
 } else {
  $17 = (($15) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18;
 }
 HEAP32[$cc>>2] = $19;
 $20 = HEAP32[$4>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$cr>>2]|0;
 $23 = ($21|0)!=($22|0);
 if (!($23)) {
  $24 = HEAP32[$4>>2]|0;
  $25 = (($24) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$cc>>2]|0;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   $29 = HEAP32[$3>>2]|0;
   $30 = ($29|0)!=(0);
   L12: do {
    if ($30) {
     HEAP32[$k>>2] = 0;
     HEAP32[$i>>2] = 0;
     while(1) {
      $31 = HEAP32[$i>>2]|0;
      $32 = HEAP32[$cr>>2]|0;
      $33 = ($31|0)<($32|0);
      if (!($33)) {
       break L12;
      }
      HEAP32[$j>>2] = 0;
      while(1) {
       $34 = HEAP32[$j>>2]|0;
       $35 = HEAP32[$cc>>2]|0;
       $36 = ($34|0)<($35|0);
       if (!($36)) {
        break;
       }
       $37 = +HEAPF64[$1>>3];
       $38 = HEAP32[$k>>2]|0;
       $39 = (($38) + 1)|0;
       HEAP32[$k>>2] = $39;
       $40 = HEAP32[$2>>2]|0;
       $41 = (($40) + 8|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (($42) + ($38<<3)|0);
       $44 = +HEAPF64[$43>>3];
       $45 = $37 * $44;
       HEAPF64[$xm>>3] = $45;
       $46 = HEAP32[$5>>2]|0;
       $47 = ($46|0)==(3);
       do {
        if ($47) {
         $48 = HEAP32[$j>>2]|0;
         $49 = HEAP32[$4>>2]|0;
         $50 = HEAP32[$49>>2]|0;
         $51 = Math_imul($48, $50)|0;
         $52 = HEAP32[$i>>2]|0;
         $53 = (($51) + ($52))|0;
         $54 = HEAP32[$4>>2]|0;
         $55 = (($54) + 8|0);
         $56 = HEAP32[$55>>2]|0;
         $57 = (($56) + ($53<<3)|0);
         $58 = +HEAPF64[$57>>3];
         $59 = +HEAPF64[$xm>>3];
         $60 = $58 + $59;
         HEAPF64[$cij>>3] = $60;
        } else {
         $61 = HEAP32[$5>>2]|0;
         $62 = ($61|0)==(4);
         if ($62) {
          $63 = HEAP32[$j>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = HEAP32[$64>>2]|0;
          $66 = Math_imul($63, $65)|0;
          $67 = HEAP32[$i>>2]|0;
          $68 = (($66) + ($67))|0;
          $69 = HEAP32[$4>>2]|0;
          $70 = (($69) + 8|0);
          $71 = HEAP32[$70>>2]|0;
          $72 = (($71) + ($68<<3)|0);
          $73 = +HEAPF64[$72>>3];
          $74 = +HEAPF64[$xm>>3];
          $75 = $73 - $74;
          HEAPF64[$cij>>3] = $75;
          break;
         } else {
          $76 = +HEAPF64[$xm>>3];
          HEAPF64[$cij>>3] = $76;
          break;
         }
        }
       } while(0);
       $77 = +HEAPF64[$cij>>3];
       $78 = HEAP32[$j>>2]|0;
       $79 = HEAP32[$4>>2]|0;
       $80 = HEAP32[$79>>2]|0;
       $81 = Math_imul($78, $80)|0;
       $82 = HEAP32[$i>>2]|0;
       $83 = (($81) + ($82))|0;
       $84 = HEAP32[$4>>2]|0;
       $85 = (($84) + 8|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = (($86) + ($83<<3)|0);
       HEAPF64[$87>>3] = $77;
       $88 = HEAP32[$j>>2]|0;
       $89 = (($88) + 1)|0;
       HEAP32[$j>>2] = $89;
      }
      $90 = HEAP32[$i>>2]|0;
      $91 = (($90) + 1)|0;
      HEAP32[$i>>2] = $91;
     }
    } else {
     $92 = HEAP32[$cr>>2]|0;
     $93 = HEAP32[$cc>>2]|0;
     $94 = Math_imul($92, $93)|0;
     HEAP32[$n>>2] = $94;
     HEAP32[$i2>>2] = 0;
     while(1) {
      $95 = HEAP32[$i2>>2]|0;
      $96 = HEAP32[$n>>2]|0;
      $97 = ($95|0)<($96|0);
      if (!($97)) {
       break L12;
      }
      $98 = +HEAPF64[$1>>3];
      $99 = HEAP32[$i2>>2]|0;
      $100 = HEAP32[$2>>2]|0;
      $101 = (($100) + 8|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (($102) + ($99<<3)|0);
      $104 = +HEAPF64[$103>>3];
      $105 = $98 * $104;
      HEAPF64[$xm1>>3] = $105;
      $106 = HEAP32[$5>>2]|0;
      $107 = ($106|0)==(3);
      do {
       if ($107) {
        $108 = +HEAPF64[$xm1>>3];
        $109 = HEAP32[$i2>>2]|0;
        $110 = HEAP32[$4>>2]|0;
        $111 = (($110) + 8|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = (($112) + ($109<<3)|0);
        $114 = +HEAPF64[$113>>3];
        $115 = $114 + $108;
        HEAPF64[$113>>3] = $115;
       } else {
        $116 = HEAP32[$5>>2]|0;
        $117 = ($116|0)==(4);
        $118 = +HEAPF64[$xm1>>3];
        $119 = HEAP32[$i2>>2]|0;
        $120 = HEAP32[$4>>2]|0;
        $121 = (($120) + 8|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = (($122) + ($119<<3)|0);
        if ($117) {
         $124 = +HEAPF64[$123>>3];
         $125 = $124 - $118;
         HEAPF64[$123>>3] = $125;
         break;
        } else {
         HEAPF64[$123>>3] = $118;
         break;
        }
       }
      } while(0);
      $126 = HEAP32[$i2>>2]|0;
      $127 = (($126) + 1)|0;
      HEAP32[$i2>>2] = $127;
     }
    }
   } while(0);
   HEAP32[$0>>2] = 0;
   $128 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($128|0);
  }
 }
 HEAP32[$0>>2] = 36;
 $128 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($128|0);
}
function _use_blas($m,$n,$k) {
 $m = $m|0;
 $n = $n|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mnk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $mnk = sp;
 HEAP32[$1>>2] = $m;
 HEAP32[$2>>2] = $n;
 HEAP32[$3>>2] = $k;
 $4 = HEAP32[13760>>2]|0;
 $5 = ($4|0)>=(0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$2>>2]|0;
  $8 = Math_imul($6, $7)|0;
  $9 = HEAP32[$3>>2]|0;
  $10 = Math_imul($8, $9)|0;
  HEAP32[$mnk>>2] = $10;
  $11 = HEAP32[$mnk>>2]|0;
  $12 = HEAP32[13760>>2]|0;
  $13 = ($11>>>0)>=($12>>>0);
  $14 = $13&1;
  HEAP32[$0>>2] = $14;
  $15 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($15|0);
 } else {
  HEAP32[$0>>2] = 0;
  $15 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($15|0);
 }
 return 0|0;
}
function _gretl_blas_dgemm($a,$atr,$b,$btr,$c,$cmod,$m,$n,$k) {
 $a = $a|0;
 $atr = $atr|0;
 $b = $b|0;
 $btr = $btr|0;
 $c = $c|0;
 $cmod = $cmod|0;
 $m = $m|0;
 $n = $n|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $TransA = 0, $TransB = 0, $alpha = 0, $beta = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $TransA = sp + 53|0;
 $TransB = sp + 52|0;
 $alpha = sp + 8|0;
 $beta = sp;
 HEAP32[$0>>2] = $a;
 HEAP32[$1>>2] = $atr;
 HEAP32[$2>>2] = $b;
 HEAP32[$3>>2] = $btr;
 HEAP32[$4>>2] = $c;
 HEAP32[$5>>2] = $cmod;
 HEAP32[$6>>2] = $m;
 HEAP32[$7>>2] = $n;
 HEAP32[$8>>2] = $k;
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)!=(0);
 $11 = $10 ? 84 : 78;
 $12 = $11&255;
 HEAP8[$TransA>>0] = $12;
 $13 = HEAP32[$3>>2]|0;
 $14 = ($13|0)!=(0);
 $15 = $14 ? 84 : 78;
 $16 = $15&255;
 HEAP8[$TransB>>0] = $16;
 HEAPF64[$alpha>>3] = 1.0;
 HEAPF64[$beta>>3] = 0.0;
 $17 = HEAP32[$5>>2]|0;
 $18 = ($17|0)==(3);
 if ($18) {
  HEAPF64[$beta>>3] = 1.0;
 } else {
  $19 = HEAP32[$5>>2]|0;
  $20 = ($19|0)==(4);
  if ($20) {
   HEAPF64[$alpha>>3] = -1.0;
   HEAPF64[$beta>>3] = 1.0;
  }
 }
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[$2>>2]|0;
 $26 = (($25) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$2>>2]|0;
 $29 = HEAP32[$4>>2]|0;
 $30 = (($29) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$4>>2]|0;
 _dgemm_(($TransA|0),($TransB|0),($6|0),($7|0),($8|0),($alpha|0),($23|0),($24|0),($27|0),($28|0),($beta|0),($31|0),($32|0));
 STACKTOP = sp;return;
}
function _gretl_dgemm($a,$atr,$b,$btr,$c,$cmod,$m,$n,$k) {
 $a = $a|0;
 $atr = $atr|0;
 $b = $b|0;
 $btr = $btr|0;
 $c = $c|0;
 $cmod = $cmod|0;
 $m = $m|0;
 $n = $n|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $A = 0, $B = 0, $C = 0, $alpha = 0, $ar = 0, $beta = 0, $br = 0, $cr = 0, $i = 0, $j = 0, $l = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = sp + 88|0;
 $1 = sp + 84|0;
 $2 = sp + 80|0;
 $3 = sp + 76|0;
 $4 = sp + 72|0;
 $5 = sp + 68|0;
 $6 = sp + 64|0;
 $7 = sp + 60|0;
 $8 = sp + 56|0;
 $A = sp + 52|0;
 $B = sp + 48|0;
 $C = sp + 44|0;
 $x = sp + 8|0;
 $alpha = sp;
 $beta = sp + 40|0;
 $ar = sp + 36|0;
 $br = sp + 32|0;
 $cr = sp + 28|0;
 $i = sp + 24|0;
 $j = sp + 20|0;
 $l = sp + 16|0;
 HEAP32[$0>>2] = $a;
 HEAP32[$1>>2] = $atr;
 HEAP32[$2>>2] = $b;
 HEAP32[$3>>2] = $btr;
 HEAP32[$4>>2] = $c;
 HEAP32[$5>>2] = $cmod;
 HEAP32[$6>>2] = $m;
 HEAP32[$7>>2] = $n;
 HEAP32[$8>>2] = $k;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$A>>2] = $11;
 $12 = HEAP32[$2>>2]|0;
 $13 = (($12) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$B>>2] = $14;
 $15 = HEAP32[$4>>2]|0;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$C>>2] = $17;
 HEAPF64[$alpha>>3] = 1.0;
 HEAP32[$beta>>2] = 0;
 $18 = HEAP32[$0>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$ar>>2] = $19;
 $20 = HEAP32[$2>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$br>>2] = $21;
 $22 = HEAP32[$4>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$cr>>2] = $23;
 $24 = HEAP32[$5>>2]|0;
 $25 = ($24|0)==(3);
 if ($25) {
  HEAP32[$beta>>2] = 1;
 } else {
  $26 = HEAP32[$5>>2]|0;
  $27 = ($26|0)==(4);
  if ($27) {
   HEAPF64[$alpha>>3] = -1.0;
   HEAP32[$beta>>2] = 1;
  }
 }
 $28 = HEAP32[$3>>2]|0;
 $29 = ($28|0)!=(0);
 $30 = HEAP32[$1>>2]|0;
 $31 = ($30|0)!=(0);
 HEAP32[$j>>2] = 0;
 if ($29) {
  if ($31) {
   while(1) {
    $213 = HEAP32[$j>>2]|0;
    $214 = HEAP32[$7>>2]|0;
    $215 = ($213|0)<($214|0);
    if (!($215)) {
     break;
    }
    HEAP32[$i>>2] = 0;
    while(1) {
     $216 = HEAP32[$i>>2]|0;
     $217 = HEAP32[$6>>2]|0;
     $218 = ($216|0)<($217|0);
     if (!($218)) {
      break;
     }
     HEAPF64[$x>>3] = 0.0;
     HEAP32[$l>>2] = 0;
     while(1) {
      $219 = HEAP32[$l>>2]|0;
      $220 = HEAP32[$8>>2]|0;
      $221 = ($219|0)<($220|0);
      if (!($221)) {
       break;
      }
      $222 = HEAP32[$i>>2]|0;
      $223 = HEAP32[$ar>>2]|0;
      $224 = Math_imul($222, $223)|0;
      $225 = HEAP32[$l>>2]|0;
      $226 = (($224) + ($225))|0;
      $227 = HEAP32[$A>>2]|0;
      $228 = (($227) + ($226<<3)|0);
      $229 = +HEAPF64[$228>>3];
      $230 = HEAP32[$l>>2]|0;
      $231 = HEAP32[$br>>2]|0;
      $232 = Math_imul($230, $231)|0;
      $233 = HEAP32[$j>>2]|0;
      $234 = (($232) + ($233))|0;
      $235 = HEAP32[$B>>2]|0;
      $236 = (($235) + ($234<<3)|0);
      $237 = +HEAPF64[$236>>3];
      $238 = $229 * $237;
      $239 = +HEAPF64[$x>>3];
      $240 = $239 + $238;
      HEAPF64[$x>>3] = $240;
      $241 = HEAP32[$l>>2]|0;
      $242 = (($241) + 1)|0;
      HEAP32[$l>>2] = $242;
     }
     $243 = HEAP32[$beta>>2]|0;
     $244 = ($243|0)==(0);
     $245 = +HEAPF64[$alpha>>3];
     $246 = +HEAPF64[$x>>3];
     $247 = $245 * $246;
     $248 = HEAP32[$j>>2]|0;
     $249 = HEAP32[$cr>>2]|0;
     $250 = Math_imul($248, $249)|0;
     $251 = HEAP32[$i>>2]|0;
     $252 = (($250) + ($251))|0;
     $253 = HEAP32[$C>>2]|0;
     $254 = (($253) + ($252<<3)|0);
     if ($244) {
      HEAPF64[$254>>3] = $247;
     } else {
      $255 = +HEAPF64[$254>>3];
      $256 = $255 + $247;
      HEAPF64[$254>>3] = $256;
     }
     $257 = HEAP32[$i>>2]|0;
     $258 = (($257) + 1)|0;
     HEAP32[$i>>2] = $258;
    }
    $259 = HEAP32[$j>>2]|0;
    $260 = (($259) + 1)|0;
    HEAP32[$j>>2] = $260;
   }
   STACKTOP = sp;return;
  }
  while(1) {
   $146 = HEAP32[$j>>2]|0;
   $147 = HEAP32[$7>>2]|0;
   $148 = ($146|0)<($147|0);
   if (!($148)) {
    break;
   }
   $149 = HEAP32[$beta>>2]|0;
   $150 = ($149|0)==(0);
   L66: do {
    if ($150) {
     HEAP32[$i>>2] = 0;
     while(1) {
      $151 = HEAP32[$i>>2]|0;
      $152 = HEAP32[$6>>2]|0;
      $153 = ($151|0)<($152|0);
      if (!($153)) {
       break L66;
      }
      $154 = HEAP32[$j>>2]|0;
      $155 = HEAP32[$cr>>2]|0;
      $156 = Math_imul($154, $155)|0;
      $157 = HEAP32[$i>>2]|0;
      $158 = (($156) + ($157))|0;
      $159 = HEAP32[$C>>2]|0;
      $160 = (($159) + ($158<<3)|0);
      HEAPF64[$160>>3] = 0.0;
      $161 = HEAP32[$i>>2]|0;
      $162 = (($161) + 1)|0;
      HEAP32[$i>>2] = $162;
     }
    }
   } while(0);
   HEAP32[$l>>2] = 0;
   while(1) {
    $163 = HEAP32[$l>>2]|0;
    $164 = HEAP32[$8>>2]|0;
    $165 = ($163|0)<($164|0);
    if (!($165)) {
     break;
    }
    $166 = HEAP32[$l>>2]|0;
    $167 = HEAP32[$br>>2]|0;
    $168 = Math_imul($166, $167)|0;
    $169 = HEAP32[$j>>2]|0;
    $170 = (($168) + ($169))|0;
    $171 = HEAP32[$B>>2]|0;
    $172 = (($171) + ($170<<3)|0);
    $173 = +HEAPF64[$172>>3];
    $174 = $173 != 0.0;
    L75: do {
     if ($174) {
      $175 = +HEAPF64[$alpha>>3];
      $176 = HEAP32[$l>>2]|0;
      $177 = HEAP32[$br>>2]|0;
      $178 = Math_imul($176, $177)|0;
      $179 = HEAP32[$j>>2]|0;
      $180 = (($178) + ($179))|0;
      $181 = HEAP32[$B>>2]|0;
      $182 = (($181) + ($180<<3)|0);
      $183 = +HEAPF64[$182>>3];
      $184 = $175 * $183;
      HEAPF64[$x>>3] = $184;
      HEAP32[$i>>2] = 0;
      while(1) {
       $185 = HEAP32[$i>>2]|0;
       $186 = HEAP32[$6>>2]|0;
       $187 = ($185|0)<($186|0);
       if (!($187)) {
        break L75;
       }
       $188 = +HEAPF64[$x>>3];
       $189 = HEAP32[$l>>2]|0;
       $190 = HEAP32[$ar>>2]|0;
       $191 = Math_imul($189, $190)|0;
       $192 = HEAP32[$i>>2]|0;
       $193 = (($191) + ($192))|0;
       $194 = HEAP32[$A>>2]|0;
       $195 = (($194) + ($193<<3)|0);
       $196 = +HEAPF64[$195>>3];
       $197 = $188 * $196;
       $198 = HEAP32[$j>>2]|0;
       $199 = HEAP32[$cr>>2]|0;
       $200 = Math_imul($198, $199)|0;
       $201 = HEAP32[$i>>2]|0;
       $202 = (($200) + ($201))|0;
       $203 = HEAP32[$C>>2]|0;
       $204 = (($203) + ($202<<3)|0);
       $205 = +HEAPF64[$204>>3];
       $206 = $205 + $197;
       HEAPF64[$204>>3] = $206;
       $207 = HEAP32[$i>>2]|0;
       $208 = (($207) + 1)|0;
       HEAP32[$i>>2] = $208;
      }
     }
    } while(0);
    $209 = HEAP32[$l>>2]|0;
    $210 = (($209) + 1)|0;
    HEAP32[$l>>2] = $210;
   }
   $211 = HEAP32[$j>>2]|0;
   $212 = (($211) + 1)|0;
   HEAP32[$j>>2] = $212;
  }
  STACKTOP = sp;return;
 } else {
  if ($31) {
   while(1) {
    $98 = HEAP32[$j>>2]|0;
    $99 = HEAP32[$7>>2]|0;
    $100 = ($98|0)<($99|0);
    if (!($100)) {
     break;
    }
    HEAP32[$i>>2] = 0;
    while(1) {
     $101 = HEAP32[$i>>2]|0;
     $102 = HEAP32[$6>>2]|0;
     $103 = ($101|0)<($102|0);
     if (!($103)) {
      break;
     }
     HEAPF64[$x>>3] = 0.0;
     HEAP32[$l>>2] = 0;
     while(1) {
      $104 = HEAP32[$l>>2]|0;
      $105 = HEAP32[$8>>2]|0;
      $106 = ($104|0)<($105|0);
      if (!($106)) {
       break;
      }
      $107 = HEAP32[$i>>2]|0;
      $108 = HEAP32[$ar>>2]|0;
      $109 = Math_imul($107, $108)|0;
      $110 = HEAP32[$l>>2]|0;
      $111 = (($109) + ($110))|0;
      $112 = HEAP32[$A>>2]|0;
      $113 = (($112) + ($111<<3)|0);
      $114 = +HEAPF64[$113>>3];
      $115 = HEAP32[$j>>2]|0;
      $116 = HEAP32[$br>>2]|0;
      $117 = Math_imul($115, $116)|0;
      $118 = HEAP32[$l>>2]|0;
      $119 = (($117) + ($118))|0;
      $120 = HEAP32[$B>>2]|0;
      $121 = (($120) + ($119<<3)|0);
      $122 = +HEAPF64[$121>>3];
      $123 = $114 * $122;
      $124 = +HEAPF64[$x>>3];
      $125 = $124 + $123;
      HEAPF64[$x>>3] = $125;
      $126 = HEAP32[$l>>2]|0;
      $127 = (($126) + 1)|0;
      HEAP32[$l>>2] = $127;
     }
     $128 = HEAP32[$beta>>2]|0;
     $129 = ($128|0)==(0);
     $130 = +HEAPF64[$alpha>>3];
     $131 = +HEAPF64[$x>>3];
     $132 = $130 * $131;
     $133 = HEAP32[$j>>2]|0;
     $134 = HEAP32[$cr>>2]|0;
     $135 = Math_imul($133, $134)|0;
     $136 = HEAP32[$i>>2]|0;
     $137 = (($135) + ($136))|0;
     $138 = HEAP32[$C>>2]|0;
     $139 = (($138) + ($137<<3)|0);
     if ($129) {
      HEAPF64[$139>>3] = $132;
     } else {
      $140 = +HEAPF64[$139>>3];
      $141 = $140 + $132;
      HEAPF64[$139>>3] = $141;
     }
     $142 = HEAP32[$i>>2]|0;
     $143 = (($142) + 1)|0;
     HEAP32[$i>>2] = $143;
    }
    $144 = HEAP32[$j>>2]|0;
    $145 = (($144) + 1)|0;
    HEAP32[$j>>2] = $145;
   }
   STACKTOP = sp;return;
  }
  while(1) {
   $32 = HEAP32[$j>>2]|0;
   $33 = HEAP32[$7>>2]|0;
   $34 = ($32|0)<($33|0);
   if (!($34)) {
    break;
   }
   $35 = HEAP32[$beta>>2]|0;
   $36 = ($35|0)==(0);
   L28: do {
    if ($36) {
     HEAP32[$i>>2] = 0;
     while(1) {
      $37 = HEAP32[$i>>2]|0;
      $38 = HEAP32[$6>>2]|0;
      $39 = ($37|0)<($38|0);
      if (!($39)) {
       break L28;
      }
      $40 = HEAP32[$j>>2]|0;
      $41 = HEAP32[$cr>>2]|0;
      $42 = Math_imul($40, $41)|0;
      $43 = HEAP32[$i>>2]|0;
      $44 = (($42) + ($43))|0;
      $45 = HEAP32[$C>>2]|0;
      $46 = (($45) + ($44<<3)|0);
      HEAPF64[$46>>3] = 0.0;
      $47 = HEAP32[$i>>2]|0;
      $48 = (($47) + 1)|0;
      HEAP32[$i>>2] = $48;
     }
    }
   } while(0);
   HEAP32[$l>>2] = 0;
   while(1) {
    $49 = HEAP32[$l>>2]|0;
    $50 = HEAP32[$8>>2]|0;
    $51 = ($49|0)<($50|0);
    $52 = HEAP32[$j>>2]|0;
    if (!($51)) {
     break;
    }
    $53 = HEAP32[$br>>2]|0;
    $54 = Math_imul($52, $53)|0;
    $55 = HEAP32[$l>>2]|0;
    $56 = (($54) + ($55))|0;
    $57 = HEAP32[$B>>2]|0;
    $58 = (($57) + ($56<<3)|0);
    $59 = +HEAPF64[$58>>3];
    $60 = $59 != 0.0;
    L37: do {
     if ($60) {
      $61 = +HEAPF64[$alpha>>3];
      $62 = HEAP32[$j>>2]|0;
      $63 = HEAP32[$br>>2]|0;
      $64 = Math_imul($62, $63)|0;
      $65 = HEAP32[$l>>2]|0;
      $66 = (($64) + ($65))|0;
      $67 = HEAP32[$B>>2]|0;
      $68 = (($67) + ($66<<3)|0);
      $69 = +HEAPF64[$68>>3];
      $70 = $61 * $69;
      HEAPF64[$x>>3] = $70;
      HEAP32[$i>>2] = 0;
      while(1) {
       $71 = HEAP32[$i>>2]|0;
       $72 = HEAP32[$6>>2]|0;
       $73 = ($71|0)<($72|0);
       if (!($73)) {
        break L37;
       }
       $74 = +HEAPF64[$x>>3];
       $75 = HEAP32[$l>>2]|0;
       $76 = HEAP32[$ar>>2]|0;
       $77 = Math_imul($75, $76)|0;
       $78 = HEAP32[$i>>2]|0;
       $79 = (($77) + ($78))|0;
       $80 = HEAP32[$A>>2]|0;
       $81 = (($80) + ($79<<3)|0);
       $82 = +HEAPF64[$81>>3];
       $83 = $74 * $82;
       $84 = HEAP32[$j>>2]|0;
       $85 = HEAP32[$cr>>2]|0;
       $86 = Math_imul($84, $85)|0;
       $87 = HEAP32[$i>>2]|0;
       $88 = (($86) + ($87))|0;
       $89 = HEAP32[$C>>2]|0;
       $90 = (($89) + ($88<<3)|0);
       $91 = +HEAPF64[$90>>3];
       $92 = $91 + $83;
       HEAPF64[$90>>3] = $92;
       $93 = HEAP32[$i>>2]|0;
       $94 = (($93) + 1)|0;
       HEAP32[$i>>2] = $94;
      }
     }
    } while(0);
    $95 = HEAP32[$l>>2]|0;
    $96 = (($95) + 1)|0;
    HEAP32[$l>>2] = $96;
   }
   $97 = (($52) + 1)|0;
   HEAP32[$j>>2] = $97;
  }
  STACKTOP = sp;return;
 }
}
function _gretl_vector_dot_product($a,$b,$err) {
 $a = $a|0;
 $b = $b|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $9 = 0;
 var $dima = 0, $dimb = 0, $dp = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 8|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $i = sp + 24|0;
 $dima = sp + 20|0;
 $dimb = sp + 16|0;
 $dp = sp;
 HEAP32[$1>>2] = $a;
 HEAP32[$2>>2] = $b;
 HEAP32[$3>>2] = $err;
 HEAPF64[$dp>>3] = 0.0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = HEAP32[$1>>2]|0;
   $10 = (($9) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = HEAP32[$2>>2]|0;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     $15 = HEAP32[$2>>2]|0;
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0);
     if (!($17)) {
      $18 = HEAP32[$2>>2]|0;
      $19 = (($18) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(0);
      if (!($21)) {
       $22 = HEAP32[$1>>2]|0;
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)>(1);
       $25 = HEAP32[$1>>2]|0;
       if ($24) {
        $26 = HEAP32[$25>>2]|0;
        $29 = $26;
       } else {
        $27 = (($25) + 4|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = $28;
       }
       HEAP32[$dima>>2] = $29;
       $30 = HEAP32[$2>>2]|0;
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)>(1);
       $33 = HEAP32[$2>>2]|0;
       if ($32) {
        $34 = HEAP32[$33>>2]|0;
        $37 = $34;
       } else {
        $35 = (($33) + 4|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = $36;
       }
       HEAP32[$dimb>>2] = $37;
       $38 = HEAP32[$1>>2]|0;
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39|0)==(1);
       if ($40) {
        label = 16;
       } else {
        $41 = HEAP32[$1>>2]|0;
        $42 = (($41) + 4|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = ($43|0)==(1);
        if ($44) {
         label = 16;
        } else {
         label = 19;
        }
       }
       L18: do {
        if ((label|0) == 16) {
         $45 = HEAP32[$2>>2]|0;
         $46 = HEAP32[$45>>2]|0;
         $47 = ($46|0)==(1);
         if (!($47)) {
          $48 = HEAP32[$2>>2]|0;
          $49 = (($48) + 4|0);
          $50 = HEAP32[$49>>2]|0;
          $51 = ($50|0)==(1);
          if (!($51)) {
           label = 19;
           break;
          }
         }
         $52 = HEAP32[$dima>>2]|0;
         $53 = HEAP32[$dimb>>2]|0;
         $54 = ($52|0)!=($53|0);
         if ($54) {
          label = 19;
         } else {
          HEAP32[$i>>2] = 0;
          while(1) {
           $58 = HEAP32[$i>>2]|0;
           $59 = HEAP32[$dima>>2]|0;
           $60 = ($58|0)<($59|0);
           if (!($60)) {
            break L18;
           }
           $61 = HEAP32[$i>>2]|0;
           $62 = HEAP32[$1>>2]|0;
           $63 = (($62) + 8|0);
           $64 = HEAP32[$63>>2]|0;
           $65 = (($64) + ($61<<3)|0);
           $66 = +HEAPF64[$65>>3];
           $67 = HEAP32[$i>>2]|0;
           $68 = HEAP32[$2>>2]|0;
           $69 = (($68) + 8|0);
           $70 = HEAP32[$69>>2]|0;
           $71 = (($70) + ($67<<3)|0);
           $72 = +HEAPF64[$71>>3];
           $73 = $66 * $72;
           $74 = +HEAPF64[$dp>>3];
           $75 = $74 + $73;
           HEAPF64[$dp>>3] = $75;
           $76 = HEAP32[$i>>2]|0;
           $77 = (($76) + 1)|0;
           HEAP32[$i>>2] = $77;
          }
         }
        }
       } while(0);
       if ((label|0) == 19) {
        $55 = HEAP32[$3>>2]|0;
        $56 = ($55|0)!=(0|0);
        if ($56) {
         $57 = HEAP32[$3>>2]|0;
         HEAP32[$57>>2] = 36;
        }
        HEAPF64[$dp>>3] = 1.79769313486231570815E+308;
       }
       $78 = +HEAPF64[$dp>>3];
       HEAPF64[$0>>3] = $78;
       $79 = +HEAPF64[$0>>3];
       STACKTOP = sp;return (+$79);
      }
     }
    }
   }
  }
 }
 HEAPF64[$0>>3] = 1.79769313486231570815E+308;
 $79 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$79);
}
function _gretl_matrix_dot_product($a,$amod,$b,$bmod,$err) {
 $a = $a|0;
 $amod = $amod|0;
 $b = $b|0;
 $bmod = $bmod|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $myerr = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 8|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $c = sp + 20|0;
 $ret = sp;
 $myerr = sp + 16|0;
 HEAP32[$1>>2] = $a;
 HEAP32[$2>>2] = $amod;
 HEAP32[$3>>2] = $b;
 HEAP32[$4>>2] = $bmod;
 HEAP32[$5>>2] = $err;
 HEAP32[$c>>2] = 0;
 HEAPF64[$ret>>3] = 1.79769313486231570815E+308;
 HEAP32[$myerr>>2] = 0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = HEAP32[$1>>2]|0;
   $12 = (($11) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0);
   if (!($14)) {
    $15 = HEAP32[$3>>2]|0;
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     $17 = HEAP32[$3>>2]|0;
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0);
     if (!($19)) {
      $20 = HEAP32[$3>>2]|0;
      $21 = (($20) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(0);
      if (!($23)) {
       $24 = HEAP32[$1>>2]|0;
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(1);
       if ($26) {
        label = 10;
       } else {
        $27 = HEAP32[$1>>2]|0;
        $28 = (($27) + 4|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = ($29|0)==(1);
        if ($30) {
         label = 10;
        }
       }
       do {
        if ((label|0) == 10) {
         $31 = HEAP32[$3>>2]|0;
         $32 = HEAP32[$31>>2]|0;
         $33 = ($32|0)==(1);
         if (!($33)) {
          $34 = HEAP32[$3>>2]|0;
          $35 = (($34) + 4|0);
          $36 = HEAP32[$35>>2]|0;
          $37 = ($36|0)==(1);
          if (!($37)) {
           break;
          }
         }
         $38 = HEAP32[$1>>2]|0;
         $39 = HEAP32[$3>>2]|0;
         $40 = HEAP32[$5>>2]|0;
         $41 = (+_gretl_vector_dot_product($38,$39,$40));
         HEAPF64[$0>>3] = $41;
         $65 = +HEAPF64[$0>>3];
         STACKTOP = sp;return (+$65);
        }
       } while(0);
       $42 = (_gretl_matrix_alloc(1,1)|0);
       HEAP32[$c>>2] = $42;
       $43 = HEAP32[$c>>2]|0;
       $44 = ($43|0)==(0|0);
       if ($44) {
        HEAP32[$myerr>>2] = 12;
       }
       $45 = HEAP32[$myerr>>2]|0;
       $46 = ($45|0)!=(0);
       if (!($46)) {
        $47 = HEAP32[$1>>2]|0;
        $48 = HEAP32[$2>>2]|0;
        $49 = HEAP32[$3>>2]|0;
        $50 = HEAP32[$4>>2]|0;
        $51 = HEAP32[$c>>2]|0;
        $52 = (_gretl_matrix_multiply_mod($47,$48,$49,$50,$51,0)|0);
        HEAP32[$myerr>>2] = $52;
       }
       $53 = HEAP32[$myerr>>2]|0;
       $54 = ($53|0)!=(0);
       if (!($54)) {
        $55 = HEAP32[$c>>2]|0;
        $56 = (($55) + 8|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = +HEAPF64[$57>>3];
        HEAPF64[$ret>>3] = $58;
       }
       $59 = HEAP32[$c>>2]|0;
       _gretl_matrix_free($59);
       $60 = HEAP32[$5>>2]|0;
       $61 = ($60|0)!=(0|0);
       if ($61) {
        $62 = HEAP32[$myerr>>2]|0;
        $63 = HEAP32[$5>>2]|0;
        HEAP32[$63>>2] = $62;
       }
       $64 = +HEAPF64[$ret>>3];
       HEAPF64[$0>>3] = $64;
       $65 = +HEAPF64[$0>>3];
       STACKTOP = sp;return (+$65);
      }
     }
    }
   }
  }
 }
 HEAPF64[$0>>3] = 1.79769313486231570815E+308;
 $65 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$65);
}
function _gretl_matrix_QR_decomp($M,$R) {
 $M = $M|0;
 $R = $R|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $i = 0, $info = 0, $j = 0, $lda = 0, $lwork = 0, $m = 0, $n = 0, $tau = 0, $vararg_buffer4 = 0, $work = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer4 = sp + 8|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $m = sp + 48|0;
 $n = sp + 44|0;
 $lda = sp + 40|0;
 $info = sp + 36|0;
 $lwork = sp + 32|0;
 $tau = sp + 28|0;
 $work = sp + 24|0;
 $i = sp + 20|0;
 $j = sp + 16|0;
 $err = sp + 12|0;
 $x = sp;
 HEAP32[$1>>2] = $M;
 HEAP32[$2>>2] = $R;
 HEAP32[$info>>2] = 0;
 HEAP32[$lwork>>2] = -1;
 HEAP32[$tau>>2] = 0;
 HEAP32[$work>>2] = 0;
 HEAP32[$err>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = HEAP32[$1>>2]|0;
   $9 = (($8) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = HEAP32[$1>>2]|0;
    $13 = HEAP32[$12>>2]|0;
    HEAP32[$m>>2] = $13;
    HEAP32[$lda>>2] = $13;
    $14 = HEAP32[$1>>2]|0;
    $15 = (($14) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    HEAP32[$n>>2] = $16;
    $17 = HEAP32[$n>>2]|0;
    $18 = HEAP32[$m>>2]|0;
    $19 = ($17|0)>($18|0);
    if ($19) {
     HEAP32[$0>>2] = 36;
     $123 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($123|0);
    }
    $20 = HEAP32[$2>>2]|0;
    $21 = ($20|0)!=(0|0);
    do {
     if ($21) {
      $22 = HEAP32[$2>>2]|0;
      $23 = HEAP32[$22>>2]|0;
      $24 = HEAP32[$n>>2]|0;
      $25 = ($23|0)!=($24|0);
      if (!($25)) {
       $26 = HEAP32[$2>>2]|0;
       $27 = (($26) + 4|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = HEAP32[$n>>2]|0;
       $30 = ($28|0)!=($29|0);
       if (!($30)) {
        break;
       }
      }
      HEAP32[$0>>2] = 36;
      $123 = HEAP32[$0>>2]|0;
      STACKTOP = sp;return ($123|0);
     }
    } while(0);
    $31 = HEAP32[$n>>2]|0;
    $32 = $31<<3;
    $33 = (_malloc($32)|0);
    HEAP32[$tau>>2] = $33;
    $34 = (_lapack_malloc(8)|0);
    HEAP32[$work>>2] = $34;
    $35 = HEAP32[$tau>>2]|0;
    $36 = ($35|0)==(0|0);
    do {
     if ($36) {
      label = 13;
     } else {
      $37 = HEAP32[$work>>2]|0;
      $38 = ($37|0)==(0|0);
      if ($38) {
       label = 13;
      } else {
       $39 = HEAP32[$1>>2]|0;
       $40 = (($39) + 8|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = HEAP32[$tau>>2]|0;
       $43 = HEAP32[$work>>2]|0;
       (_dgeqrf_(($m|0),($n|0),($41|0),($lda|0),($42|0),($43|0),($lwork|0),($info|0))|0);
       $44 = HEAP32[$info>>2]|0;
       $45 = ($44|0)!=(0);
       if ($45) {
        $46 = HEAP32[_stderr>>2]|0;
        $47 = HEAP32[$info>>2]|0;
        HEAP32[$vararg_buffer4>>2] = $47;
        (_fprintf(($46|0),(13984|0),($vararg_buffer4|0))|0);
        HEAP32[$err>>2] = 1;
        break;
       }
       $48 = HEAP32[$work>>2]|0;
       $49 = +HEAPF64[$48>>3];
       $50 = (~~(($49)));
       HEAP32[$lwork>>2] = $50;
       $51 = HEAP32[$work>>2]|0;
       $52 = HEAP32[$lwork>>2]|0;
       $53 = $52<<3;
       $54 = (_lapack_realloc($51,$53)|0);
       HEAP32[$work>>2] = $54;
       $55 = HEAP32[$work>>2]|0;
       $56 = ($55|0)==(0|0);
       if ($56) {
        HEAP32[$err>>2] = 12;
        break;
       }
       $57 = HEAP32[$1>>2]|0;
       $58 = (($57) + 8|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = HEAP32[$tau>>2]|0;
       $61 = HEAP32[$work>>2]|0;
       (_dgeqrf_(($m|0),($n|0),($59|0),($lda|0),($60|0),($61|0),($lwork|0),($info|0))|0);
       $62 = HEAP32[$info>>2]|0;
       $63 = ($62|0)!=(0);
       if ($63) {
        $64 = HEAP32[_stderr>>2]|0;
        $65 = HEAP32[$info>>2]|0;
        HEAP32[$vararg_buffer4>>2] = $65;
        (_fprintf(($64|0),(13984|0),($vararg_buffer4|0))|0);
        HEAP32[$err>>2] = 1;
        break;
       }
       $66 = HEAP32[$2>>2]|0;
       $67 = ($66|0)!=(0|0);
       L28: do {
        if ($67) {
         HEAP32[$i>>2] = 0;
         while(1) {
          $68 = HEAP32[$i>>2]|0;
          $69 = HEAP32[$n>>2]|0;
          $70 = ($68|0)<($69|0);
          if (!($70)) {
           break L28;
          }
          HEAP32[$j>>2] = 0;
          while(1) {
           $71 = HEAP32[$j>>2]|0;
           $72 = HEAP32[$n>>2]|0;
           $73 = ($71|0)<($72|0);
           $74 = HEAP32[$i>>2]|0;
           if (!($73)) {
            break;
           }
           $75 = HEAP32[$j>>2]|0;
           $76 = ($74|0)<=($75|0);
           $77 = HEAP32[$j>>2]|0;
           if ($76) {
            $78 = HEAP32[$1>>2]|0;
            $79 = HEAP32[$78>>2]|0;
            $80 = Math_imul($77, $79)|0;
            $81 = HEAP32[$i>>2]|0;
            $82 = (($80) + ($81))|0;
            $83 = HEAP32[$1>>2]|0;
            $84 = (($83) + 8|0);
            $85 = HEAP32[$84>>2]|0;
            $86 = (($85) + ($82<<3)|0);
            $87 = +HEAPF64[$86>>3];
            HEAPF64[$x>>3] = $87;
            $88 = +HEAPF64[$x>>3];
            $89 = HEAP32[$j>>2]|0;
            $90 = HEAP32[$2>>2]|0;
            $91 = HEAP32[$90>>2]|0;
            $92 = Math_imul($89, $91)|0;
            $93 = HEAP32[$i>>2]|0;
            $94 = (($92) + ($93))|0;
            $95 = HEAP32[$2>>2]|0;
            $96 = (($95) + 8|0);
            $97 = HEAP32[$96>>2]|0;
            $98 = (($97) + ($94<<3)|0);
            HEAPF64[$98>>3] = $88;
           } else {
            $99 = HEAP32[$2>>2]|0;
            $100 = HEAP32[$99>>2]|0;
            $101 = Math_imul($77, $100)|0;
            $102 = HEAP32[$i>>2]|0;
            $103 = (($101) + ($102))|0;
            $104 = HEAP32[$2>>2]|0;
            $105 = (($104) + 8|0);
            $106 = HEAP32[$105>>2]|0;
            $107 = (($106) + ($103<<3)|0);
            HEAPF64[$107>>3] = 0.0;
           }
           $108 = HEAP32[$j>>2]|0;
           $109 = (($108) + 1)|0;
           HEAP32[$j>>2] = $109;
          }
          $110 = (($74) + 1)|0;
          HEAP32[$i>>2] = $110;
         }
        }
       } while(0);
       $111 = HEAP32[$1>>2]|0;
       $112 = (($111) + 8|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = HEAP32[$tau>>2]|0;
       $115 = HEAP32[$work>>2]|0;
       (_dorgqr_(($m|0),($n|0),($n|0),($113|0),($lda|0),($114|0),($115|0),($lwork|0),($info|0))|0);
       $116 = HEAP32[$info>>2]|0;
       $117 = ($116|0)!=(0);
       if ($117) {
        $118 = HEAP32[_stderr>>2]|0;
        $119 = HEAP32[$info>>2]|0;
        HEAP32[$vararg_buffer4>>2] = $119;
        (_fprintf(($118|0),(14008|0),($vararg_buffer4|0))|0);
        HEAP32[$err>>2] = 1;
       }
      }
     }
    } while(0);
    if ((label|0) == 13) {
     HEAP32[$err>>2] = 12;
    }
    $120 = HEAP32[$tau>>2]|0;
    _free($120);
    $121 = HEAP32[$work>>2]|0;
    _lapack_free($121);
    $122 = HEAP32[$err>>2]|0;
    HEAP32[$0>>2] = $122;
    $123 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($123|0);
   }
  }
 }
 HEAP32[$0>>2] = 2;
 $123 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($123|0);
}
function _gretl_check_QR_rank($R,$err,$rcnd) {
 $R = $R|0;
 $err = $err|0;
 $rcnd = $rcnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $diag = 0, $info = 0, $iwork = 0;
 var $n = 0, $norm = 0, $rank = 0, $rcond = 0, $uplo = 0, $vararg_buffer4 = 0, $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer4 = sp + 8|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $iwork = sp + 32|0;
 $work = sp + 28|0;
 $n = sp + 24|0;
 $info = sp + 20|0;
 $rcond = sp;
 $uplo = sp + 54|0;
 $diag = sp + 53|0;
 $norm = sp + 52|0;
 $rank = sp + 16|0;
 HEAP32[$1>>2] = $R;
 HEAP32[$2>>2] = $err;
 HEAP32[$3>>2] = $rcnd;
 HEAP32[$iwork>>2] = 0;
 HEAP32[$work>>2] = 0;
 HEAP32[$info>>2] = 0;
 HEAP8[$uplo>>0] = 85;
 HEAP8[$diag>>0] = 78;
 HEAP8[$norm>>0] = 49;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = HEAP32[$1>>2]|0;
   $10 = (($9) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $14 = HEAP32[$2>>2]|0;
    HEAP32[$14>>2] = 0;
    $15 = HEAP32[$1>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    HEAP32[$n>>2] = $16;
    HEAP32[$rank>>2] = $16;
    $17 = HEAP32[$n>>2]|0;
    $18 = ($17*3)|0;
    $19 = $18<<3;
    $20 = (_lapack_malloc($19)|0);
    HEAP32[$work>>2] = $20;
    $21 = HEAP32[$n>>2]|0;
    $22 = $21<<2;
    $23 = (_malloc($22)|0);
    HEAP32[$iwork>>2] = $23;
    $24 = HEAP32[$work>>2]|0;
    $25 = ($24|0)==(0|0);
    do {
     if ($25) {
      label = 7;
     } else {
      $26 = HEAP32[$iwork>>2]|0;
      $27 = ($26|0)==(0|0);
      if ($27) {
       label = 7;
      } else {
       $29 = HEAP32[$1>>2]|0;
       $30 = (($29) + 8|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = HEAP32[$work>>2]|0;
       $33 = HEAP32[$iwork>>2]|0;
       (_dtrcon_(($norm|0),($uplo|0),($diag|0),($n|0),($31|0),($n|0),($rcond|0),($32|0),($33|0),($info|0))|0);
       $34 = HEAP32[$info>>2]|0;
       $35 = ($34|0)!=(0);
       if ($35) {
        $36 = HEAP32[_stderr>>2]|0;
        $37 = HEAP32[$info>>2]|0;
        HEAP32[$vararg_buffer4>>2] = $37;
        (_fprintf(($36|0),(14032|0),($vararg_buffer4|0))|0);
        $38 = HEAP32[$2>>2]|0;
        HEAP32[$38>>2] = 1;
        break;
       }
       $39 = +HEAPF64[$rcond>>3];
       $40 = $39 < 9.99999999999999998819E-15;
       if ($40) {
        $41 = HEAP32[_stderr>>2]|0;
        $42 = +HEAPF64[$rcond>>3];
        HEAPF64[tempDoublePtr>>3]=$42;HEAP32[$vararg_buffer4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer4+4>>2]=HEAP32[tempDoublePtr+4>>2];
        (_fprintf(($41|0),(14056|0),($vararg_buffer4|0))|0);
        $43 = HEAP32[$1>>2]|0;
        $44 = (_get_R_rank($43)|0);
        HEAP32[$rank>>2] = $44;
       } else {
        $45 = +HEAPF64[$rcond>>3];
        $46 = $45 < 9.99999999999999954748E-8;
        if ($46) {
         $47 = HEAP32[_stderr>>2]|0;
         $48 = +HEAPF64[$rcond>>3];
         HEAPF64[tempDoublePtr>>3]=$48;HEAP32[$vararg_buffer4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer4+4>>2]=HEAP32[tempDoublePtr+4>>2];
         (_fprintf(($47|0),(14096|0),($vararg_buffer4|0))|0);
        }
       }
       $49 = HEAP32[$3>>2]|0;
       $50 = ($49|0)!=(0|0);
       if ($50) {
        $51 = +HEAPF64[$rcond>>3];
        $52 = HEAP32[$3>>2]|0;
        HEAPF64[$52>>3] = $51;
       }
      }
     }
    } while(0);
    if ((label|0) == 7) {
     $28 = HEAP32[$2>>2]|0;
     HEAP32[$28>>2] = 12;
    }
    $53 = HEAP32[$work>>2]|0;
    _lapack_free($53);
    $54 = HEAP32[$iwork>>2]|0;
    _free($54);
    $55 = HEAP32[$rank>>2]|0;
    HEAP32[$0>>2] = $55;
    $56 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($56|0);
   }
  }
 }
 $13 = HEAP32[$2>>2]|0;
 HEAP32[$13>>2] = 2;
 HEAP32[$0>>2] = 0;
 $56 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($56|0);
}
function _get_R_rank($R) {
 $R = $R|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $d = 0, $i = 0, $rank = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $d = sp;
 $i = sp + 12|0;
 $rank = sp + 8|0;
 HEAP32[$0>>2] = $R;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$rank>>2] = $2;
 HEAP32[$i>>2] = 0;
 while(1) {
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[$0>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = Math_imul($7, $9)|0;
  $11 = HEAP32[$i>>2]|0;
  $12 = (($10) + ($11))|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12<<3)|0);
  $17 = +HEAPF64[$16>>3];
  HEAPF64[$d>>3] = $17;
  $18 = +HEAPF64[$d>>3];
  $19 = (___DOUBLE_BITS3935($18)|0);
  $20 = tempRet0;
  $21 = $20 & 2147483647;
  $22 = ($21>>>0)>(2146435072);
  $23 = ($21|0)==(2146435072);
  $24 = ($19>>>0)>(0);
  $25 = $23 & $24;
  $26 = $22 | $25;
  if ($26) {
   label = 6;
  } else {
   $27 = +HEAPF64[$d>>3];
   $28 = (___DOUBLE_BITS3935($27)|0);
   $29 = tempRet0;
   $30 = $29 & 2147483647;
   $31 = ($28|0)==(0);
   $32 = ($30|0)==(2146435072);
   $33 = $31 & $32;
   if ($33) {
    label = 6;
   } else {
    $34 = +HEAPF64[$d>>3];
    $35 = (+Math_abs((+$34)));
    $36 = $35 < 1.00000000000000002092E-8;
    if ($36) {
     label = 6;
    }
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $37 = HEAP32[$rank>>2]|0;
   $38 = (($37) + -1)|0;
   HEAP32[$rank>>2] = $38;
  }
  $39 = HEAP32[$i>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$i>>2] = $40;
 }
 $41 = HEAP32[$rank>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function _gretl_invert_symmetric_matrix($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $aval = 0, $bytes = 0, $err = 0, $info = 0, $n = 0, $uplo = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer2 = sp;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $n = sp + 24|0;
 $info = sp + 20|0;
 $aval = sp + 16|0;
 $bytes = sp + 12|0;
 $uplo = sp + 36|0;
 $err = sp + 8|0;
 HEAP32[$1>>2] = $a;
 HEAP32[$aval>>2] = 0;
 HEAP8[$uplo>>0] = 76;
 HEAP32[$err>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = HEAP32[$1>>2]|0;
   $8 = (($7) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = HEAP32[$1>>2]|0;
    $12 = (($11) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP32[$1>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    $16 = ($13|0)!=($15|0);
    if ($16) {
     $17 = HEAP32[_stderr>>2]|0;
     (_fputs((14168|0),($17|0))|0);
     HEAP32[$0>>2] = 36;
     $81 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($81|0);
    }
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    HEAP32[$n>>2] = $20;
    $21 = HEAP32[$n>>2]|0;
    $22 = ($21|0)==(1);
    $23 = HEAP32[$1>>2]|0;
    if ($22) {
     $24 = (($23) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = +HEAPF64[$25>>3];
     $27 = 1.0 / $26;
     $28 = HEAP32[$1>>2]|0;
     $29 = (($28) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     HEAPF64[$30>>3] = $27;
     HEAP32[$0>>2] = 0;
     $81 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($81|0);
    }
    $31 = (_real_gretl_matrix_is_symmetric($23,1)|0);
    $32 = ($31|0)!=(0);
    if (!($32)) {
     $33 = HEAP32[_stderr>>2]|0;
     (_fputs((14224|0),($33|0))|0);
     HEAP32[$0>>2] = 44;
     $81 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($81|0);
    }
    $34 = HEAP32[$n>>2]|0;
    $35 = HEAP32[$n>>2]|0;
    $36 = Math_imul($34, $35)|0;
    $37 = $36<<3;
    HEAP32[$bytes>>2] = $37;
    $38 = HEAP32[$bytes>>2]|0;
    $39 = (_lapack_malloc($38)|0);
    HEAP32[$aval>>2] = $39;
    $40 = HEAP32[$aval>>2]|0;
    $41 = ($40|0)==(0|0);
    if ($41) {
     HEAP32[$0>>2] = 12;
     $81 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($81|0);
    }
    $42 = HEAP32[$aval>>2]|0;
    $43 = HEAP32[$1>>2]|0;
    $44 = (($43) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$bytes>>2]|0;
    _memcpy(($42|0),($45|0),($46|0))|0;
    $47 = HEAP32[$1>>2]|0;
    $48 = (($47) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    (_dpotrf_(($uplo|0),($n|0),($49|0),($n|0),($info|0))|0);
    $50 = HEAP32[$info>>2]|0;
    $51 = ($50|0)!=(0);
    if ($51) {
     $52 = HEAP32[_stderr>>2]|0;
     $53 = HEAP32[$info>>2]|0;
     $54 = HEAP32[$n>>2]|0;
     HEAP32[$vararg_buffer2>>2] = $53;
     $vararg_ptr1 = (($vararg_buffer2) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $54;
     (_fprintf(($52|0),(14280|0),($vararg_buffer2|0))|0);
     $55 = HEAP32[$info>>2]|0;
     $56 = ($55|0)>(0);
     $57 = $56 ? 44 : 2;
     HEAP32[$err>>2] = $57;
    }
    $58 = HEAP32[$err>>2]|0;
    $59 = ($58|0)!=(0);
    do {
     if (!($59)) {
      $60 = HEAP32[$1>>2]|0;
      $61 = (($60) + 8|0);
      $62 = HEAP32[$61>>2]|0;
      (_dpotri_(($uplo|0),($n|0),($62|0),($n|0),($info|0))|0);
      $63 = HEAP32[$info>>2]|0;
      $64 = ($63|0)!=(0);
      if ($64) {
       HEAP32[$err>>2] = 44;
       $65 = HEAP32[_stderr>>2]|0;
       $66 = HEAP32[$info>>2]|0;
       HEAP32[$vararg_buffer2>>2] = $66;
       (_fprintf(($65|0),(14352|0),($vararg_buffer2|0))|0);
       break;
      } else {
       $67 = HEAP32[$1>>2]|0;
       $68 = HEAP8[$uplo>>0]|0;
       (_gretl_matrix_mirror($67,$68)|0);
       break;
      }
     }
    } while(0);
    $69 = HEAP32[$err>>2]|0;
    $70 = ($69|0)!=(0);
    if ($70) {
     $71 = HEAP32[$1>>2]|0;
     $72 = (($71) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = HEAP32[$aval>>2]|0;
     $75 = HEAP32[$bytes>>2]|0;
     _memcpy(($73|0),($74|0),($75|0))|0;
     $76 = (_getenv((13592|0))|0);
     $77 = ($76|0)!=(0|0);
     if ($77) {
      $78 = HEAP32[$1>>2]|0;
      _gretl_matrix_print($78,14416);
     }
    }
    $79 = HEAP32[$aval>>2]|0;
    _lapack_free($79);
    $80 = HEAP32[$err>>2]|0;
    HEAP32[$0>>2] = $80;
    $81 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($81|0);
   }
  }
 }
 HEAP32[$0>>2] = 2;
 $81 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($81|0);
}
function _gretl_general_matrix_eigenvals($m,$eigenvecs,$err) {
 $m = $m|0;
 $eigenvecs = $eigenvecs|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $evals = 0, $info = 0, $jvl = 0, $jvr = 0, $lwork = 0, $n = 0;
 var $nullvl = 0, $nullvr = 0, $nvl = 0, $nvr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vr = 0, $wi = 0, $work = 0, $wr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp + 32|0;
 $0 = sp + 92|0;
 $1 = sp + 88|0;
 $2 = sp + 84|0;
 $3 = sp + 80|0;
 $evals = sp + 76|0;
 $n = sp + 72|0;
 $info = sp + 68|0;
 $lwork = sp + 64|0;
 $nvr = sp + 60|0;
 $nvl = sp + 56|0;
 $jvr = sp + 97|0;
 $jvl = sp + 96|0;
 $work = sp + 52|0;
 $wr = sp + 48|0;
 $wi = sp + 44|0;
 $vr = sp + 40|0;
 $nullvl = sp + 16|0;
 $nullvr = sp;
 HEAP32[$1>>2] = $m;
 HEAP32[$2>>2] = $eigenvecs;
 HEAP32[$3>>2] = $err;
 HEAP32[$evals>>2] = 0;
 HEAP32[$nvl>>2] = 2;
 HEAP8[$jvl>>0] = 78;
 HEAP32[$wr>>2] = 0;
 HEAP32[$wi>>2] = 0;
 HEAP32[$vr>>2] = 0;
 ;HEAP32[$nullvl+0>>2]=0|0;HEAP32[$nullvl+4>>2]=0|0;HEAP32[$nullvl+8>>2]=0|0;HEAP32[$nullvl+12>>2]=0|0;
 ;HEAP32[$nullvr+0>>2]=0|0;HEAP32[$nullvr+4>>2]=0|0;HEAP32[$nullvr+8>>2]=0|0;HEAP32[$nullvr+12>>2]=0|0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$1>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   if (!($13)) {
    $15 = HEAP32[$1>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$1>>2]|0;
    $18 = (($17) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($16|0)!=($19|0);
    if ($20) {
     $21 = HEAP32[_stderr>>2]|0;
     $22 = HEAP32[$1>>2]|0;
     $23 = HEAP32[$22>>2]|0;
     $24 = HEAP32[$1>>2]|0;
     $25 = (($24) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     HEAP32[$vararg_buffer>>2] = $23;
     $vararg_ptr1 = (($vararg_buffer) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $26;
     (_fprintf(($21|0),(14432|0),($vararg_buffer|0))|0);
     $27 = HEAP32[$3>>2]|0;
     HEAP32[$27>>2] = 36;
     HEAP32[$0>>2] = 0;
     $113 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($113|0);
    }
    $28 = HEAP32[$1>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    HEAP32[$n>>2] = $29;
    $30 = (_lapack_malloc(8)|0);
    HEAP32[$work>>2] = $30;
    $31 = HEAP32[$work>>2]|0;
    $32 = ($31|0)==(0|0);
    if ($32) {
     $33 = HEAP32[$3>>2]|0;
     HEAP32[$33>>2] = 12;
     HEAP32[$0>>2] = 0;
     $113 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($113|0);
    }
    $34 = HEAP32[$n>>2]|0;
    $35 = (_gretl_zero_matrix_new($34,2)|0);
    HEAP32[$evals>>2] = $35;
    $36 = HEAP32[$evals>>2]|0;
    $37 = ($36|0)==(0|0);
    L13: do {
     if ($37) {
      $38 = HEAP32[$3>>2]|0;
      HEAP32[$38>>2] = 12;
     } else {
      $39 = HEAP32[$evals>>2]|0;
      $40 = (($39) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      HEAP32[$wr>>2] = $41;
      $42 = HEAP32[$wr>>2]|0;
      $43 = HEAP32[$n>>2]|0;
      $44 = (($42) + ($43<<3)|0);
      HEAP32[$wi>>2] = $44;
      $45 = HEAP32[$2>>2]|0;
      $46 = ($45|0)!=(0);
      do {
       if ($46) {
        $47 = HEAP32[$n>>2]|0;
        $48 = HEAP32[$n>>2]|0;
        $49 = Math_imul($47, $48)|0;
        $50 = $49<<3;
        $51 = (_malloc($50)|0);
        HEAP32[$vr>>2] = $51;
        $52 = HEAP32[$vr>>2]|0;
        $53 = ($52|0)==(0|0);
        if ($53) {
         $54 = HEAP32[$3>>2]|0;
         HEAP32[$54>>2] = 12;
         break L13;
        } else {
         $55 = HEAP32[$n>>2]|0;
         HEAP32[$nvr>>2] = $55;
         HEAP8[$jvr>>0] = 86;
         break;
        }
       } else {
        HEAP32[$vr>>2] = $nullvr;
        HEAP32[$nvr>>2] = 2;
        HEAP8[$jvr>>0] = 78;
       }
      } while(0);
      HEAP32[$lwork>>2] = -1;
      $56 = HEAP32[$1>>2]|0;
      $57 = (($56) + 8|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = HEAP32[$wr>>2]|0;
      $60 = HEAP32[$wi>>2]|0;
      $61 = HEAP32[$vr>>2]|0;
      $62 = HEAP32[$work>>2]|0;
      (_dgeev_(($jvl|0),($jvr|0),($n|0),($58|0),($n|0),($59|0),($60|0),($nullvl|0),($nvl|0),($61|0),($nvr|0),($62|0),($lwork|0),($info|0))|0);
      $63 = HEAP32[$info>>2]|0;
      $64 = ($63|0)!=(0);
      if (!($64)) {
       $65 = HEAP32[$work>>2]|0;
       $66 = +HEAPF64[$65>>3];
       $67 = $66 <= 0.0;
       if (!($67)) {
        $73 = HEAP32[$work>>2]|0;
        $74 = +HEAPF64[$73>>3];
        $75 = (~~(($74)));
        HEAP32[$lwork>>2] = $75;
        $76 = HEAP32[$work>>2]|0;
        $77 = HEAP32[$lwork>>2]|0;
        $78 = $77<<3;
        $79 = (_lapack_realloc($76,$78)|0);
        HEAP32[$work>>2] = $79;
        $80 = HEAP32[$work>>2]|0;
        $81 = ($80|0)==(0|0);
        if ($81) {
         $82 = HEAP32[$3>>2]|0;
         HEAP32[$82>>2] = 12;
         break;
        }
        $83 = HEAP32[$1>>2]|0;
        $84 = (($83) + 8|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = HEAP32[$wr>>2]|0;
        $87 = HEAP32[$wi>>2]|0;
        $88 = HEAP32[$vr>>2]|0;
        $89 = HEAP32[$work>>2]|0;
        (_dgeev_(($jvl|0),($jvr|0),($n|0),($85|0),($n|0),($86|0),($87|0),($nullvl|0),($nvl|0),($88|0),($nvr|0),($89|0),($lwork|0),($info|0))|0);
        $90 = HEAP32[$info>>2]|0;
        $91 = ($90|0)!=(0);
        if (!($91)) {
         break;
        }
        $92 = HEAP32[$3>>2]|0;
        HEAP32[$92>>2] = 1;
        break;
       }
      }
      $68 = HEAP32[$info>>2]|0;
      $69 = HEAP32[$work>>2]|0;
      $70 = +HEAPF64[$69>>3];
      $71 = (_wspace_fail($68,$70)|0);
      $72 = HEAP32[$3>>2]|0;
      HEAP32[$72>>2] = $71;
     }
    } while(0);
    $93 = HEAP32[$work>>2]|0;
    _lapack_free($93);
    $94 = HEAP32[$3>>2]|0;
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)!=(0);
    if ($96) {
     $97 = HEAP32[$evals>>2]|0;
     _gretl_matrix_free($97);
     HEAP32[$evals>>2] = 0;
     $98 = HEAP32[$vr>>2]|0;
     $99 = ($98|0)!=(0|0);
     if ($99) {
      $100 = HEAP32[$vr>>2]|0;
      _free($100);
     }
    } else {
     $101 = HEAP32[$2>>2]|0;
     $102 = ($101|0)!=(0);
     if ($102) {
      $103 = HEAP32[$1>>2]|0;
      $104 = (($103) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = HEAP32[$vr>>2]|0;
      $107 = HEAP32[$n>>2]|0;
      $108 = HEAP32[$n>>2]|0;
      $109 = Math_imul($107, $108)|0;
      $110 = $109<<3;
      _memcpy(($105|0),($106|0),($110|0))|0;
      $111 = HEAP32[$vr>>2]|0;
      _free($111);
     }
    }
    $112 = HEAP32[$evals>>2]|0;
    HEAP32[$0>>2] = $112;
    $113 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($113|0);
   }
  }
 }
 $14 = HEAP32[$3>>2]|0;
 HEAP32[$14>>2] = 2;
 HEAP32[$0>>2] = 0;
 $113 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($113|0);
}
function _gretl_matrix_qform($A,$amod,$X,$C,$cmod) {
 $A = $A|0;
 $amod = $amod|0;
 $X = $X|0;
 $C = $C|0;
 $cmod = $cmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $N = 0, $i = 0, $ii = 0, $j = 0, $jj = 0, $k = 0, $m = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $xi = 0, $xij = 0, $xj = 0, $xx = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp + 32|0;
 $0 = sp + 100|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 88|0;
 $4 = sp + 84|0;
 $5 = sp + 80|0;
 $i = sp + 76|0;
 $j = sp + 72|0;
 $ii = sp + 68|0;
 $jj = sp + 64|0;
 $xi = sp + 24|0;
 $xj = sp + 16|0;
 $xij = sp + 8|0;
 $xx = sp;
 $m = sp + 60|0;
 $k = sp + 56|0;
 $N = sp + 52|0;
 HEAP32[$1>>2] = $A;
 HEAP32[$2>>2] = $amod;
 HEAP32[$3>>2] = $X;
 HEAP32[$4>>2] = $C;
 HEAP32[$5>>2] = $cmod;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = HEAP32[$1>>2]|0;
   $12 = (($11) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0);
   if (!($14)) {
    $15 = HEAP32[$3>>2]|0;
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     $17 = HEAP32[$3>>2]|0;
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0);
     if (!($19)) {
      $20 = HEAP32[$3>>2]|0;
      $21 = (($20) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(0);
      if (!($23)) {
       $24 = HEAP32[$4>>2]|0;
       $25 = ($24|0)==(0|0);
       if (!($25)) {
        $26 = HEAP32[$4>>2]|0;
        $27 = HEAP32[$26>>2]|0;
        $28 = ($27|0)==(0);
        if (!($28)) {
         $29 = HEAP32[$4>>2]|0;
         $30 = (($29) + 4|0);
         $31 = HEAP32[$30>>2]|0;
         $32 = ($31|0)==(0);
         if (!($32)) {
          $33 = HEAP32[$2>>2]|0;
          $34 = ($33|0)!=(0);
          $35 = HEAP32[$1>>2]|0;
          if ($34) {
           $36 = (($35) + 4|0);
           $37 = HEAP32[$36>>2]|0;
           $39 = $37;
          } else {
           $38 = HEAP32[$35>>2]|0;
           $39 = $38;
          }
          HEAP32[$m>>2] = $39;
          $40 = HEAP32[$2>>2]|0;
          $41 = ($40|0)!=(0);
          $42 = HEAP32[$1>>2]|0;
          if ($41) {
           $43 = HEAP32[$42>>2]|0;
           $46 = $43;
          } else {
           $44 = (($42) + 4|0);
           $45 = HEAP32[$44>>2]|0;
           $46 = $45;
          }
          HEAP32[$k>>2] = $46;
          $47 = HEAP32[$k>>2]|0;
          $48 = HEAP32[$3>>2]|0;
          $49 = HEAP32[$48>>2]|0;
          $50 = ($47|0)!=($49|0);
          if ($50) {
           $51 = HEAP32[_stderr>>2]|0;
           $52 = HEAP32[$2>>2]|0;
           $53 = ($52|0)!=(0);
           $54 = $53 ? 14560 : 14568;
           $55 = HEAP32[$m>>2]|0;
           $56 = HEAP32[$k>>2]|0;
           $57 = HEAP32[$3>>2]|0;
           $58 = HEAP32[$57>>2]|0;
           $59 = HEAP32[$3>>2]|0;
           $60 = (($59) + 4|0);
           $61 = HEAP32[$60>>2]|0;
           HEAP32[$vararg_buffer>>2] = $54;
           $vararg_ptr1 = (($vararg_buffer) + 4|0);
           HEAP32[$vararg_ptr1>>2] = $55;
           $vararg_ptr2 = (($vararg_buffer) + 8|0);
           HEAP32[$vararg_ptr2>>2] = $56;
           $vararg_ptr3 = (($vararg_buffer) + 12|0);
           HEAP32[$vararg_ptr3>>2] = $58;
           $vararg_ptr4 = (($vararg_buffer) + 16|0);
           HEAP32[$vararg_ptr4>>2] = $61;
           (_fprintf(($51|0),(14504|0),($vararg_buffer|0))|0);
           HEAP32[$0>>2] = 36;
           $322 = HEAP32[$0>>2]|0;
           STACKTOP = sp;return ($322|0);
          }
          $62 = HEAP32[$4>>2]|0;
          $63 = HEAP32[$62>>2]|0;
          $64 = HEAP32[$m>>2]|0;
          $65 = ($63|0)!=($64|0);
          if (!($65)) {
           $66 = HEAP32[$4>>2]|0;
           $67 = (($66) + 4|0);
           $68 = HEAP32[$67>>2]|0;
           $69 = HEAP32[$m>>2]|0;
           $70 = ($68|0)!=($69|0);
           if (!($70)) {
            $72 = HEAP32[$m>>2]|0;
            $73 = HEAP32[$m>>2]|0;
            $74 = Math_imul($72, $73)|0;
            $75 = HEAP32[$k>>2]|0;
            $76 = Math_imul($74, $75)|0;
            $77 = HEAP32[$k>>2]|0;
            $78 = Math_imul($76, $77)|0;
            HEAP32[$N>>2] = $78;
            $79 = HEAP32[$N>>2]|0;
            $80 = ($79>>>0)>(100000);
            if ($80) {
             $81 = HEAP32[$1>>2]|0;
             $82 = HEAP32[$2>>2]|0;
             $83 = HEAP32[$3>>2]|0;
             $84 = HEAP32[$4>>2]|0;
             $85 = HEAP32[$5>>2]|0;
             $86 = HEAP32[$m>>2]|0;
             $87 = (_alt_qform($81,$82,$83,$84,$85,$86)|0);
             HEAP32[$0>>2] = $87;
             $322 = HEAP32[$0>>2]|0;
             STACKTOP = sp;return ($322|0);
            }
            $88 = HEAP32[$2>>2]|0;
            $89 = ($88|0)!=(0);
            HEAP32[$i>>2] = 0;
            L30: do {
             if ($89) {
              while(1) {
               $90 = HEAP32[$i>>2]|0;
               $91 = HEAP32[$m>>2]|0;
               $92 = ($90|0)<($91|0);
               if (!($92)) {
                break L30;
               }
               $93 = HEAP32[$i>>2]|0;
               HEAP32[$j>>2] = $93;
               while(1) {
                $94 = HEAP32[$j>>2]|0;
                $95 = HEAP32[$m>>2]|0;
                $96 = ($94|0)<($95|0);
                if (!($96)) {
                 break;
                }
                HEAPF64[$xx>>3] = 0.0;
                HEAP32[$ii>>2] = 0;
                while(1) {
                 $97 = HEAP32[$ii>>2]|0;
                 $98 = HEAP32[$k>>2]|0;
                 $99 = ($97|0)<($98|0);
                 if (!($99)) {
                  break;
                 }
                 $100 = HEAP32[$i>>2]|0;
                 $101 = HEAP32[$1>>2]|0;
                 $102 = HEAP32[$101>>2]|0;
                 $103 = Math_imul($100, $102)|0;
                 $104 = HEAP32[$ii>>2]|0;
                 $105 = (($103) + ($104))|0;
                 $106 = HEAP32[$1>>2]|0;
                 $107 = (($106) + 8|0);
                 $108 = HEAP32[$107>>2]|0;
                 $109 = (($108) + ($105<<3)|0);
                 $110 = +HEAPF64[$109>>3];
                 HEAPF64[$xi>>3] = $110;
                 $111 = +HEAPF64[$xi>>3];
                 $112 = (+Math_abs((+$111)));
                 $113 = $112 > 9.99999999999999945153E-21;
                 L40: do {
                  if ($113) {
                   HEAP32[$jj>>2] = 0;
                   while(1) {
                    $114 = HEAP32[$jj>>2]|0;
                    $115 = HEAP32[$k>>2]|0;
                    $116 = ($114|0)<($115|0);
                    if (!($116)) {
                     break L40;
                    }
                    $117 = HEAP32[$j>>2]|0;
                    $118 = HEAP32[$1>>2]|0;
                    $119 = HEAP32[$118>>2]|0;
                    $120 = Math_imul($117, $119)|0;
                    $121 = HEAP32[$jj>>2]|0;
                    $122 = (($120) + ($121))|0;
                    $123 = HEAP32[$1>>2]|0;
                    $124 = (($123) + 8|0);
                    $125 = HEAP32[$124>>2]|0;
                    $126 = (($125) + ($122<<3)|0);
                    $127 = +HEAPF64[$126>>3];
                    HEAPF64[$xj>>3] = $127;
                    $128 = HEAP32[$jj>>2]|0;
                    $129 = HEAP32[$3>>2]|0;
                    $130 = HEAP32[$129>>2]|0;
                    $131 = Math_imul($128, $130)|0;
                    $132 = HEAP32[$ii>>2]|0;
                    $133 = (($131) + ($132))|0;
                    $134 = HEAP32[$3>>2]|0;
                    $135 = (($134) + 8|0);
                    $136 = HEAP32[$135>>2]|0;
                    $137 = (($136) + ($133<<3)|0);
                    $138 = +HEAPF64[$137>>3];
                    HEAPF64[$xij>>3] = $138;
                    $139 = +HEAPF64[$xij>>3];
                    $140 = +HEAPF64[$xi>>3];
                    $141 = $139 * $140;
                    $142 = +HEAPF64[$xj>>3];
                    $143 = $141 * $142;
                    $144 = +HEAPF64[$xx>>3];
                    $145 = $144 + $143;
                    HEAPF64[$xx>>3] = $145;
                    $146 = HEAP32[$jj>>2]|0;
                    $147 = (($146) + 1)|0;
                    HEAP32[$jj>>2] = $147;
                   }
                  }
                 } while(0);
                 $148 = HEAP32[$ii>>2]|0;
                 $149 = (($148) + 1)|0;
                 HEAP32[$ii>>2] = $149;
                }
                $150 = HEAP32[$5>>2]|0;
                $151 = ($150|0)==(3);
                do {
                 if ($151) {
                  $152 = HEAP32[$j>>2]|0;
                  $153 = HEAP32[$4>>2]|0;
                  $154 = HEAP32[$153>>2]|0;
                  $155 = Math_imul($152, $154)|0;
                  $156 = HEAP32[$i>>2]|0;
                  $157 = (($155) + ($156))|0;
                  $158 = HEAP32[$4>>2]|0;
                  $159 = (($158) + 8|0);
                  $160 = HEAP32[$159>>2]|0;
                  $161 = (($160) + ($157<<3)|0);
                  $162 = +HEAPF64[$161>>3];
                  $163 = +HEAPF64[$xx>>3];
                  $164 = $163 + $162;
                  HEAPF64[$xx>>3] = $164;
                 } else {
                  $165 = HEAP32[$5>>2]|0;
                  $166 = ($165|0)==(4);
                  if (!($166)) {
                   break;
                  }
                  $167 = HEAP32[$j>>2]|0;
                  $168 = HEAP32[$4>>2]|0;
                  $169 = HEAP32[$168>>2]|0;
                  $170 = Math_imul($167, $169)|0;
                  $171 = HEAP32[$i>>2]|0;
                  $172 = (($170) + ($171))|0;
                  $173 = HEAP32[$4>>2]|0;
                  $174 = (($173) + 8|0);
                  $175 = HEAP32[$174>>2]|0;
                  $176 = (($175) + ($172<<3)|0);
                  $177 = +HEAPF64[$176>>3];
                  $178 = +HEAPF64[$xx>>3];
                  $179 = $177 - $178;
                  HEAPF64[$xx>>3] = $179;
                 }
                } while(0);
                $180 = +HEAPF64[$xx>>3];
                $181 = HEAP32[$j>>2]|0;
                $182 = HEAP32[$4>>2]|0;
                $183 = HEAP32[$182>>2]|0;
                $184 = Math_imul($181, $183)|0;
                $185 = HEAP32[$i>>2]|0;
                $186 = (($184) + ($185))|0;
                $187 = HEAP32[$4>>2]|0;
                $188 = (($187) + 8|0);
                $189 = HEAP32[$188>>2]|0;
                $190 = (($189) + ($186<<3)|0);
                HEAPF64[$190>>3] = $180;
                $191 = +HEAPF64[$xx>>3];
                $192 = HEAP32[$i>>2]|0;
                $193 = HEAP32[$4>>2]|0;
                $194 = HEAP32[$193>>2]|0;
                $195 = Math_imul($192, $194)|0;
                $196 = HEAP32[$j>>2]|0;
                $197 = (($195) + ($196))|0;
                $198 = HEAP32[$4>>2]|0;
                $199 = (($198) + 8|0);
                $200 = HEAP32[$199>>2]|0;
                $201 = (($200) + ($197<<3)|0);
                HEAPF64[$201>>3] = $191;
                $202 = HEAP32[$j>>2]|0;
                $203 = (($202) + 1)|0;
                HEAP32[$j>>2] = $203;
               }
               $204 = HEAP32[$i>>2]|0;
               $205 = (($204) + 1)|0;
               HEAP32[$i>>2] = $205;
              }
             } else {
              while(1) {
               $206 = HEAP32[$i>>2]|0;
               $207 = HEAP32[$m>>2]|0;
               $208 = ($206|0)<($207|0);
               if (!($208)) {
                break L30;
               }
               $209 = HEAP32[$i>>2]|0;
               HEAP32[$j>>2] = $209;
               while(1) {
                $210 = HEAP32[$j>>2]|0;
                $211 = HEAP32[$m>>2]|0;
                $212 = ($210|0)<($211|0);
                if (!($212)) {
                 break;
                }
                HEAPF64[$xx>>3] = 0.0;
                HEAP32[$ii>>2] = 0;
                while(1) {
                 $213 = HEAP32[$ii>>2]|0;
                 $214 = HEAP32[$k>>2]|0;
                 $215 = ($213|0)<($214|0);
                 if (!($215)) {
                  break;
                 }
                 $216 = HEAP32[$ii>>2]|0;
                 $217 = HEAP32[$1>>2]|0;
                 $218 = HEAP32[$217>>2]|0;
                 $219 = Math_imul($216, $218)|0;
                 $220 = HEAP32[$i>>2]|0;
                 $221 = (($219) + ($220))|0;
                 $222 = HEAP32[$1>>2]|0;
                 $223 = (($222) + 8|0);
                 $224 = HEAP32[$223>>2]|0;
                 $225 = (($224) + ($221<<3)|0);
                 $226 = +HEAPF64[$225>>3];
                 HEAPF64[$xi>>3] = $226;
                 $227 = +HEAPF64[$xi>>3];
                 $228 = (+Math_abs((+$227)));
                 $229 = $228 > 9.99999999999999945153E-21;
                 L62: do {
                  if ($229) {
                   HEAP32[$jj>>2] = 0;
                   while(1) {
                    $230 = HEAP32[$jj>>2]|0;
                    $231 = HEAP32[$k>>2]|0;
                    $232 = ($230|0)<($231|0);
                    if (!($232)) {
                     break L62;
                    }
                    $233 = HEAP32[$jj>>2]|0;
                    $234 = HEAP32[$1>>2]|0;
                    $235 = HEAP32[$234>>2]|0;
                    $236 = Math_imul($233, $235)|0;
                    $237 = HEAP32[$j>>2]|0;
                    $238 = (($236) + ($237))|0;
                    $239 = HEAP32[$1>>2]|0;
                    $240 = (($239) + 8|0);
                    $241 = HEAP32[$240>>2]|0;
                    $242 = (($241) + ($238<<3)|0);
                    $243 = +HEAPF64[$242>>3];
                    HEAPF64[$xj>>3] = $243;
                    $244 = HEAP32[$jj>>2]|0;
                    $245 = HEAP32[$3>>2]|0;
                    $246 = HEAP32[$245>>2]|0;
                    $247 = Math_imul($244, $246)|0;
                    $248 = HEAP32[$ii>>2]|0;
                    $249 = (($247) + ($248))|0;
                    $250 = HEAP32[$3>>2]|0;
                    $251 = (($250) + 8|0);
                    $252 = HEAP32[$251>>2]|0;
                    $253 = (($252) + ($249<<3)|0);
                    $254 = +HEAPF64[$253>>3];
                    HEAPF64[$xij>>3] = $254;
                    $255 = +HEAPF64[$xij>>3];
                    $256 = +HEAPF64[$xi>>3];
                    $257 = $255 * $256;
                    $258 = +HEAPF64[$xj>>3];
                    $259 = $257 * $258;
                    $260 = +HEAPF64[$xx>>3];
                    $261 = $260 + $259;
                    HEAPF64[$xx>>3] = $261;
                    $262 = HEAP32[$jj>>2]|0;
                    $263 = (($262) + 1)|0;
                    HEAP32[$jj>>2] = $263;
                   }
                  }
                 } while(0);
                 $264 = HEAP32[$ii>>2]|0;
                 $265 = (($264) + 1)|0;
                 HEAP32[$ii>>2] = $265;
                }
                $266 = HEAP32[$5>>2]|0;
                $267 = ($266|0)==(3);
                do {
                 if ($267) {
                  $268 = HEAP32[$j>>2]|0;
                  $269 = HEAP32[$4>>2]|0;
                  $270 = HEAP32[$269>>2]|0;
                  $271 = Math_imul($268, $270)|0;
                  $272 = HEAP32[$i>>2]|0;
                  $273 = (($271) + ($272))|0;
                  $274 = HEAP32[$4>>2]|0;
                  $275 = (($274) + 8|0);
                  $276 = HEAP32[$275>>2]|0;
                  $277 = (($276) + ($273<<3)|0);
                  $278 = +HEAPF64[$277>>3];
                  $279 = +HEAPF64[$xx>>3];
                  $280 = $279 + $278;
                  HEAPF64[$xx>>3] = $280;
                 } else {
                  $281 = HEAP32[$5>>2]|0;
                  $282 = ($281|0)==(4);
                  if (!($282)) {
                   break;
                  }
                  $283 = HEAP32[$j>>2]|0;
                  $284 = HEAP32[$4>>2]|0;
                  $285 = HEAP32[$284>>2]|0;
                  $286 = Math_imul($283, $285)|0;
                  $287 = HEAP32[$i>>2]|0;
                  $288 = (($286) + ($287))|0;
                  $289 = HEAP32[$4>>2]|0;
                  $290 = (($289) + 8|0);
                  $291 = HEAP32[$290>>2]|0;
                  $292 = (($291) + ($288<<3)|0);
                  $293 = +HEAPF64[$292>>3];
                  $294 = +HEAPF64[$xx>>3];
                  $295 = $293 - $294;
                  HEAPF64[$xx>>3] = $295;
                 }
                } while(0);
                $296 = +HEAPF64[$xx>>3];
                $297 = HEAP32[$j>>2]|0;
                $298 = HEAP32[$4>>2]|0;
                $299 = HEAP32[$298>>2]|0;
                $300 = Math_imul($297, $299)|0;
                $301 = HEAP32[$i>>2]|0;
                $302 = (($300) + ($301))|0;
                $303 = HEAP32[$4>>2]|0;
                $304 = (($303) + 8|0);
                $305 = HEAP32[$304>>2]|0;
                $306 = (($305) + ($302<<3)|0);
                HEAPF64[$306>>3] = $296;
                $307 = +HEAPF64[$xx>>3];
                $308 = HEAP32[$i>>2]|0;
                $309 = HEAP32[$4>>2]|0;
                $310 = HEAP32[$309>>2]|0;
                $311 = Math_imul($308, $310)|0;
                $312 = HEAP32[$j>>2]|0;
                $313 = (($311) + ($312))|0;
                $314 = HEAP32[$4>>2]|0;
                $315 = (($314) + 8|0);
                $316 = HEAP32[$315>>2]|0;
                $317 = (($316) + ($313<<3)|0);
                HEAPF64[$317>>3] = $307;
                $318 = HEAP32[$j>>2]|0;
                $319 = (($318) + 1)|0;
                HEAP32[$j>>2] = $319;
               }
               $320 = HEAP32[$i>>2]|0;
               $321 = (($320) + 1)|0;
               HEAP32[$i>>2] = $321;
              }
             }
            } while(0);
            HEAP32[$0>>2] = 0;
            $322 = HEAP32[$0>>2]|0;
            STACKTOP = sp;return ($322|0);
           }
          }
          $71 = HEAP32[_stderr>>2]|0;
          (_fputs((14576|0),($71|0))|0);
          HEAP32[$0>>2] = 36;
          $322 = HEAP32[$0>>2]|0;
          STACKTOP = sp;return ($322|0);
         }
        }
       }
      }
     }
    }
   }
  }
 }
 HEAP32[$0>>2] = 2;
 $322 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($322|0);
}
function _alt_qform($A,$amod,$X,$C,$cmod,$r) {
 $A = $A|0;
 $amod = $amod|0;
 $X = $X|0;
 $C = $C|0;
 $cmod = $cmod|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $Tmp = sp;
 HEAP32[$1>>2] = $A;
 HEAP32[$2>>2] = $amod;
 HEAP32[$3>>2] = $X;
 HEAP32[$4>>2] = $C;
 HEAP32[$5>>2] = $cmod;
 HEAP32[$6>>2] = $r;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$3>>2]|0;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_gretl_matrix_alloc($7,$10)|0);
 HEAP32[$Tmp>>2] = $11;
 $12 = HEAP32[$Tmp>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  HEAP32[$0>>2] = 12;
  $29 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($29|0);
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = ($14|0)==(1);
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[$Tmp>>2]|0;
 if ($15) {
  (_gretl_matrix_multiply_mod($16,1,$17,0,$18,0)|0);
  $19 = HEAP32[$Tmp>>2]|0;
  $20 = HEAP32[$1>>2]|0;
  $21 = HEAP32[$4>>2]|0;
  $22 = HEAP32[$5>>2]|0;
  (_gretl_matrix_multiply_mod($19,0,$20,0,$21,$22)|0);
 } else {
  (_gretl_matrix_multiply($16,$17,$18)|0);
  $23 = HEAP32[$Tmp>>2]|0;
  $24 = HEAP32[$1>>2]|0;
  $25 = HEAP32[$4>>2]|0;
  $26 = HEAP32[$5>>2]|0;
  (_gretl_matrix_multiply_mod($23,0,$24,1,$25,$26)|0);
 }
 $27 = HEAP32[$4>>2]|0;
 _gretl_matrix_xtr_symmetric($27);
 $28 = HEAP32[$Tmp>>2]|0;
 _gretl_matrix_free($28);
 HEAP32[$0>>2] = 0;
 $29 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _gretl_scalar_qform($b,$X,$err) {
 $b = $b|0;
 $X = $X|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $9 = 0, $i = 0, $j = 0, $k = 0, $p = 0, $ret = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 16|0;
 $1 = sp + 48|0;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $tmp = sp + 8|0;
 $ret = sp;
 $i = sp + 36|0;
 $j = sp + 32|0;
 $k = sp + 28|0;
 $p = sp + 24|0;
 HEAP32[$1>>2] = $b;
 HEAP32[$2>>2] = $X;
 HEAP32[$3>>2] = $err;
 HEAPF64[$ret>>3] = 0.0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = HEAP32[$1>>2]|0;
   $10 = (($9) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = HEAP32[$2>>2]|0;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     $15 = HEAP32[$2>>2]|0;
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0);
     if (!($17)) {
      $18 = HEAP32[$2>>2]|0;
      $19 = (($18) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(0);
      if (!($21)) {
       $23 = HEAP32[$1>>2]|0;
       $24 = ($23|0)==(0|0);
       if ($24) {
        $35 = 0;
       } else {
        $25 = HEAP32[$1>>2]|0;
        $26 = (($25) + 4|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = ($27|0)==(1);
        $29 = HEAP32[$1>>2]|0;
        $30 = HEAP32[$29>>2]|0;
        if ($28) {
         $35 = $30;
        } else {
         $31 = ($30|0)==(1);
         if ($31) {
          $32 = HEAP32[$1>>2]|0;
          $33 = (($32) + 4|0);
          $34 = HEAP32[$33>>2]|0;
          $35 = $34;
         } else {
          $35 = 0;
         }
        }
       }
       HEAP32[$k>>2] = $35;
       $36 = HEAP32[$k>>2]|0;
       $37 = ($36|0)==(0);
       if (!($37)) {
        $38 = HEAP32[$2>>2]|0;
        $39 = HEAP32[$38>>2]|0;
        $40 = HEAP32[$k>>2]|0;
        $41 = ($39|0)!=($40|0);
        if (!($41)) {
         $42 = HEAP32[$2>>2]|0;
         $43 = (($42) + 4|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = HEAP32[$k>>2]|0;
         $46 = ($44|0)!=($45|0);
         if (!($46)) {
          HEAP32[$p>>2] = 0;
          HEAP32[$j>>2] = 0;
          while(1) {
           $48 = HEAP32[$j>>2]|0;
           $49 = HEAP32[$k>>2]|0;
           $50 = ($48|0)<($49|0);
           if (!($50)) {
            break;
           }
           HEAPF64[$tmp>>3] = 0.0;
           HEAP32[$i>>2] = 0;
           while(1) {
            $51 = HEAP32[$i>>2]|0;
            $52 = HEAP32[$k>>2]|0;
            $53 = ($51|0)<($52|0);
            if (!($53)) {
             break;
            }
            $54 = HEAP32[$i>>2]|0;
            $55 = HEAP32[$1>>2]|0;
            $56 = (($55) + 8|0);
            $57 = HEAP32[$56>>2]|0;
            $58 = (($57) + ($54<<3)|0);
            $59 = +HEAPF64[$58>>3];
            $60 = HEAP32[$p>>2]|0;
            $61 = (($60) + 1)|0;
            HEAP32[$p>>2] = $61;
            $62 = HEAP32[$2>>2]|0;
            $63 = (($62) + 8|0);
            $64 = HEAP32[$63>>2]|0;
            $65 = (($64) + ($60<<3)|0);
            $66 = +HEAPF64[$65>>3];
            $67 = $59 * $66;
            $68 = +HEAPF64[$tmp>>3];
            $69 = $68 + $67;
            HEAPF64[$tmp>>3] = $69;
            $70 = HEAP32[$i>>2]|0;
            $71 = (($70) + 1)|0;
            HEAP32[$i>>2] = $71;
           }
           $72 = +HEAPF64[$tmp>>3];
           $73 = HEAP32[$j>>2]|0;
           $74 = HEAP32[$1>>2]|0;
           $75 = (($74) + 8|0);
           $76 = HEAP32[$75>>2]|0;
           $77 = (($76) + ($73<<3)|0);
           $78 = +HEAPF64[$77>>3];
           $79 = $72 * $78;
           $80 = +HEAPF64[$ret>>3];
           $81 = $80 + $79;
           HEAPF64[$ret>>3] = $81;
           $82 = HEAP32[$j>>2]|0;
           $83 = (($82) + 1)|0;
           HEAP32[$j>>2] = $83;
          }
          $84 = +HEAPF64[$ret>>3];
          HEAPF64[$0>>3] = $84;
          $85 = +HEAPF64[$0>>3];
          STACKTOP = sp;return (+$85);
         }
        }
       }
       $47 = HEAP32[$3>>2]|0;
       HEAP32[$47>>2] = 36;
       HEAPF64[$0>>3] = 1.79769313486231570815E+308;
       $85 = +HEAPF64[$0>>3];
       STACKTOP = sp;return (+$85);
      }
     }
    }
   }
  }
 }
 $22 = HEAP32[$3>>2]|0;
 HEAP32[$22>>2] = 2;
 HEAPF64[$0>>3] = 1.79769313486231570815E+308;
 $85 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$85);
}
function _gretl_matrix_values($x,$n,$opt,$err) {
 $x = $x|0;
 $n = $n|0;
 $opt = $opt|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $i = 0, $j = 0, $k = 0;
 var $last = 0, $m = 0, $sorted = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $v = sp + 32|0;
 $sorted = sp + 28|0;
 $last = sp;
 $i = sp + 24|0;
 $k = sp + 20|0;
 $m = sp + 16|0;
 $j = sp + 12|0;
 $add = sp + 8|0;
 HEAP32[$1>>2] = $x;
 HEAP32[$2>>2] = $n;
 HEAP32[$3>>2] = $opt;
 HEAP32[$4>>2] = $err;
 HEAP32[$v>>2] = 0;
 HEAP32[$sorted>>2] = 0;
 $5 = HEAP32[$2>>2]|0;
 $6 = $5<<3;
 $7 = (_malloc($6)|0);
 HEAP32[$sorted>>2] = $7;
 $8 = HEAP32[$sorted>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = HEAP32[$4>>2]|0;
  HEAP32[$10>>2] = 12;
  HEAP32[$0>>2] = 0;
  $115 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($115|0);
 }
 HEAP32[$k>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[$2>>2]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[$i>>2]|0;
  $15 = HEAP32[$1>>2]|0;
  $16 = (($15) + ($14<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $17 == 1.79769313486231570815E+308;
  if (!($18)) {
   $19 = HEAP32[$i>>2]|0;
   $20 = HEAP32[$1>>2]|0;
   $21 = (($20) + ($19<<3)|0);
   $22 = +HEAPF64[$21>>3];
   $23 = HEAP32[$k>>2]|0;
   $24 = (($23) + 1)|0;
   HEAP32[$k>>2] = $24;
   $25 = HEAP32[$sorted>>2]|0;
   $26 = (($25) + ($23<<3)|0);
   HEAPF64[$26>>3] = $22;
  }
  $27 = HEAP32[$i>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$i>>2] = $28;
 }
 $29 = HEAP32[$k>>2]|0;
 $30 = ($29|0)==(0);
 L12: do {
  if ($30) {
   $31 = HEAP32[$4>>2]|0;
   HEAP32[$31>>2] = 2;
  } else {
   $32 = HEAP32[$sorted>>2]|0;
   $33 = HEAP32[$k>>2]|0;
   _qsort($32,$33,8,2);
   $34 = HEAP32[$sorted>>2]|0;
   $35 = HEAP32[$k>>2]|0;
   $36 = (_count_distinct_values($34,$35)|0);
   HEAP32[$m>>2] = $36;
   $37 = HEAP32[$m>>2]|0;
   $38 = (_gretl_matrix_alloc($37,1)|0);
   HEAP32[$v>>2] = $38;
   $39 = HEAP32[$v>>2]|0;
   $40 = ($39|0)==(0|0);
   if ($40) {
    $41 = HEAP32[$4>>2]|0;
    HEAP32[$41>>2] = 12;
    break;
   }
   $42 = HEAP32[$3>>2]|0;
   $43 = $42 & 262144;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = HEAP32[$sorted>>2]|0;
    $46 = +HEAPF64[$45>>3];
    HEAPF64[$last>>3] = $46;
    $47 = HEAP32[$v>>2]|0;
    $48 = (($47) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    HEAPF64[$49>>3] = $46;
    HEAP32[$m>>2] = 1;
    HEAP32[$i>>2] = 1;
    while(1) {
     $50 = HEAP32[$i>>2]|0;
     $51 = HEAP32[$k>>2]|0;
     $52 = ($50|0)<($51|0);
     if (!($52)) {
      break L12;
     }
     $53 = HEAP32[$i>>2]|0;
     $54 = HEAP32[$sorted>>2]|0;
     $55 = (($54) + ($53<<3)|0);
     $56 = +HEAPF64[$55>>3];
     $57 = +HEAPF64[$last>>3];
     $58 = $56 != $57;
     if ($58) {
      $59 = HEAP32[$i>>2]|0;
      $60 = HEAP32[$sorted>>2]|0;
      $61 = (($60) + ($59<<3)|0);
      $62 = +HEAPF64[$61>>3];
      HEAPF64[$last>>3] = $62;
      $63 = HEAP32[$i>>2]|0;
      $64 = HEAP32[$sorted>>2]|0;
      $65 = (($64) + ($63<<3)|0);
      $66 = +HEAPF64[$65>>3];
      $67 = HEAP32[$m>>2]|0;
      $68 = (($67) + 1)|0;
      HEAP32[$m>>2] = $68;
      $69 = HEAP32[$v>>2]|0;
      $70 = (($69) + 8|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($71) + ($67<<3)|0);
      HEAPF64[$72>>3] = $66;
     }
     $73 = HEAP32[$i>>2]|0;
     $74 = (($73) + 1)|0;
     HEAP32[$i>>2] = $74;
    }
   }
   HEAP32[$m>>2] = 0;
   HEAP32[$i>>2] = 0;
   while(1) {
    $75 = HEAP32[$i>>2]|0;
    $76 = HEAP32[$2>>2]|0;
    $77 = ($75|0)<($76|0);
    if (!($77)) {
     break L12;
    }
    $78 = HEAP32[$i>>2]|0;
    $79 = HEAP32[$1>>2]|0;
    $80 = (($79) + ($78<<3)|0);
    $81 = +HEAPF64[$80>>3];
    $82 = $81 == 1.79769313486231570815E+308;
    if (!($82)) {
     HEAP32[$add>>2] = 1;
     HEAP32[$j>>2] = 0;
     while(1) {
      $83 = HEAP32[$j>>2]|0;
      $84 = HEAP32[$m>>2]|0;
      $85 = ($83|0)<($84|0);
      if (!($85)) {
       break;
      }
      $86 = HEAP32[$j>>2]|0;
      $87 = HEAP32[$v>>2]|0;
      $88 = (($87) + 8|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (($89) + ($86<<3)|0);
      $91 = +HEAPF64[$90>>3];
      $92 = HEAP32[$i>>2]|0;
      $93 = HEAP32[$1>>2]|0;
      $94 = (($93) + ($92<<3)|0);
      $95 = +HEAPF64[$94>>3];
      $96 = $91 == $95;
      if ($96) {
       label = 24;
       break;
      }
      $97 = HEAP32[$j>>2]|0;
      $98 = (($97) + 1)|0;
      HEAP32[$j>>2] = $98;
     }
     if ((label|0) == 24) {
      label = 0;
      HEAP32[$add>>2] = 0;
     }
     $99 = HEAP32[$add>>2]|0;
     $100 = ($99|0)!=(0);
     if ($100) {
      $101 = HEAP32[$i>>2]|0;
      $102 = HEAP32[$1>>2]|0;
      $103 = (($102) + ($101<<3)|0);
      $104 = +HEAPF64[$103>>3];
      $105 = HEAP32[$m>>2]|0;
      $106 = (($105) + 1)|0;
      HEAP32[$m>>2] = $106;
      $107 = HEAP32[$v>>2]|0;
      $108 = (($107) + 8|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($109) + ($105<<3)|0);
      HEAPF64[$110>>3] = $104;
     }
    }
    $111 = HEAP32[$i>>2]|0;
    $112 = (($111) + 1)|0;
    HEAP32[$i>>2] = $112;
   }
  }
 } while(0);
 $113 = HEAP32[$sorted>>2]|0;
 _free($113);
 $114 = HEAP32[$v>>2]|0;
 HEAP32[$0>>2] = $114;
 $115 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($115|0);
}
function _gretl_blas_dsyrk($a,$atr,$c,$cmod) {
 $a = $a|0;
 $atr = $atr|0;
 $c = $c|0;
 $cmod = $cmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $alpha = 0, $beta = 0, $i = 0, $j = 0, $k = 0, $lda = 0, $n = 0, $tr = 0, $uplo = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 56|0;
 $1 = sp + 52|0;
 $2 = sp + 48|0;
 $3 = sp + 44|0;
 $uplo = sp + 61|0;
 $tr = sp + 60|0;
 $n = sp + 40|0;
 $k = sp + 36|0;
 $lda = sp + 32|0;
 $x = sp + 16|0;
 $alpha = sp + 8|0;
 $beta = sp;
 $i = sp + 28|0;
 $j = sp + 24|0;
 HEAP32[$0>>2] = $a;
 HEAP32[$1>>2] = $atr;
 HEAP32[$2>>2] = $c;
 HEAP32[$3>>2] = $cmod;
 HEAP8[$uplo>>0] = 85;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = $5 ? 84 : 78;
 $7 = $6&255;
 HEAP8[$tr>>0] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$n>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10|0)!=(0);
 $12 = HEAP32[$0>>2]|0;
 if ($11) {
  $13 = HEAP32[$12>>2]|0;
  $16 = $13;
 } else {
  $14 = (($12) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15;
 }
 HEAP32[$k>>2] = $16;
 $17 = HEAP32[$0>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$lda>>2] = $18;
 HEAPF64[$alpha>>3] = 1.0;
 HEAPF64[$beta>>3] = 0.0;
 $19 = HEAP32[$3>>2]|0;
 $20 = ($19|0)==(3);
 if ($20) {
  HEAPF64[$beta>>3] = 1.0;
 } else {
  $21 = HEAP32[$3>>2]|0;
  $22 = ($21|0)==(4);
  if ($22) {
   HEAPF64[$alpha>>3] = -1.0;
   HEAPF64[$beta>>3] = 1.0;
  }
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$2>>2]|0;
 $27 = (($26) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 _dsyrk_(($uplo|0),($tr|0),($n|0),($k|0),($alpha|0),($25|0),($lda|0),($beta|0),($28|0),($n|0));
 HEAP32[$i>>2] = 0;
 while(1) {
  $29 = HEAP32[$i>>2]|0;
  $30 = HEAP32[$n>>2]|0;
  $31 = ($29|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = HEAP32[$i>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$j>>2] = $33;
  while(1) {
   $34 = HEAP32[$j>>2]|0;
   $35 = HEAP32[$n>>2]|0;
   $36 = ($34|0)<($35|0);
   if (!($36)) {
    break;
   }
   $37 = HEAP32[$j>>2]|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$38>>2]|0;
   $40 = Math_imul($37, $39)|0;
   $41 = HEAP32[$i>>2]|0;
   $42 = (($40) + ($41))|0;
   $43 = HEAP32[$2>>2]|0;
   $44 = (($43) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($42<<3)|0);
   $47 = +HEAPF64[$46>>3];
   HEAPF64[$x>>3] = $47;
   $48 = +HEAPF64[$x>>3];
   $49 = HEAP32[$i>>2]|0;
   $50 = HEAP32[$2>>2]|0;
   $51 = HEAP32[$50>>2]|0;
   $52 = Math_imul($49, $51)|0;
   $53 = HEAP32[$j>>2]|0;
   $54 = (($52) + ($53))|0;
   $55 = HEAP32[$2>>2]|0;
   $56 = (($55) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + ($54<<3)|0);
   HEAPF64[$58>>3] = $48;
   $59 = HEAP32[$j>>2]|0;
   $60 = (($59) + 1)|0;
   HEAP32[$j>>2] = $60;
  }
  $61 = HEAP32[$i>>2]|0;
  $62 = (($61) + 1)|0;
  HEAP32[$i>>2] = $62;
 }
 STACKTOP = sp;return;
}
function _sneq($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $reldiff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 8|0;
 $reldiff = sp;
 HEAPF64[$0>>3] = $x;
 HEAPF64[$1>>3] = $y;
 $2 = +HEAPF64[$0>>3];
 $3 = $2 == 0.0;
 $4 = +HEAPF64[$1>>3];
 do {
  if ($3) {
   $5 = (+Math_abs((+$4)));
   HEAPF64[$reldiff>>3] = $5;
  } else {
   $6 = $4 == 0.0;
   $7 = +HEAPF64[$0>>3];
   if ($6) {
    $8 = (+Math_abs((+$7)));
    HEAPF64[$reldiff>>3] = $8;
    break;
   }
   $9 = +HEAPF64[$1>>3];
   $10 = $7 > $9;
   if ($10) {
    $11 = +HEAPF64[$0>>3];
    $12 = +HEAPF64[$1>>3];
    $13 = $11 - $12;
    $14 = +HEAPF64[$1>>3];
    $15 = $13 / $14;
    $16 = (+Math_abs((+$15)));
    HEAPF64[$reldiff>>3] = $16;
    break;
   } else {
    $17 = +HEAPF64[$1>>3];
    $18 = +HEAPF64[$0>>3];
    $19 = $17 - $18;
    $20 = +HEAPF64[$0>>3];
    $21 = $19 / $20;
    $22 = (+Math_abs((+$21)));
    HEAPF64[$reldiff>>3] = $22;
    break;
   }
  }
 } while(0);
 $23 = +HEAPF64[$reldiff>>3];
 $24 = +HEAPF64[13752>>3];
 $25 = $23 > $24;
 $26 = $25&1;
 STACKTOP = sp;return ($26|0);
}
function _gretl_model_set_data_with_destructor($pmod,$key,$ptr,$type,$size,$destructor) {
 $pmod = $pmod|0;
 $key = $key|0;
 $ptr = $ptr|0;
 $type = $type|0;
 $size = $size|0;
 $destructor = $destructor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $i = 0, $item = 0, $items = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $items = sp + 12|0;
 $item = sp + 8|0;
 $i = sp + 4|0;
 $n = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $key;
 HEAP32[$3>>2] = $ptr;
 HEAP32[$4>>2] = $type;
 HEAP32[$5>>2] = $size;
 HEAP32[$6>>2] = $destructor;
 HEAP32[$i>>2] = 0;
 while(1) {
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + 260|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$i>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = (($13) + 264|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$item>>2] = $17;
  $18 = HEAP32[$2>>2]|0;
  $19 = HEAP32[$item>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = (_strcmp($18,$20)|0);
  $22 = ($21|0)!=(0);
  if (!($22)) {
   label = 4;
   break;
  }
  $47 = HEAP32[$i>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$i>>2] = $48;
 }
 if ((label|0) == 4) {
  $23 = HEAP32[$item>>2]|0;
  $24 = (($23) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  $27 = HEAP32[$item>>2]|0;
  if ($26) {
   $28 = (($27) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$item>>2]|0;
   $31 = (($30) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_vi[$29 & 1]($32);
  } else {
   $33 = (($27) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   _free($34);
  }
  $35 = HEAP32[$4>>2]|0;
  $36 = HEAP32[$item>>2]|0;
  $37 = (($36) + 8|0);
  HEAP32[$37>>2] = $35;
  $38 = HEAP32[$3>>2]|0;
  $39 = HEAP32[$item>>2]|0;
  $40 = (($39) + 4|0);
  HEAP32[$40>>2] = $38;
  $41 = HEAP32[$5>>2]|0;
  $42 = HEAP32[$item>>2]|0;
  $43 = (($42) + 12|0);
  HEAP32[$43>>2] = $41;
  $44 = HEAP32[$6>>2]|0;
  $45 = HEAP32[$item>>2]|0;
  $46 = (($45) + 16|0);
  HEAP32[$46>>2] = $44;
  HEAP32[$0>>2] = 0;
  $83 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($83|0);
 }
 $49 = HEAP32[$1>>2]|0;
 $50 = (($49) + 260|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$n>>2] = $52;
 $53 = HEAP32[$1>>2]|0;
 $54 = (($53) + 264|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP32[$n>>2]|0;
 $57 = $56<<2;
 $58 = (_realloc($55,$57)|0);
 HEAP32[$items>>2] = $58;
 $59 = HEAP32[$items>>2]|0;
 $60 = ($59|0)==(0|0);
 if ($60) {
  HEAP32[$0>>2] = 1;
  $83 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($83|0);
 }
 $61 = HEAP32[$items>>2]|0;
 $62 = HEAP32[$1>>2]|0;
 $63 = (($62) + 264|0);
 HEAP32[$63>>2] = $61;
 $64 = HEAP32[$2>>2]|0;
 $65 = HEAP32[$3>>2]|0;
 $66 = HEAP32[$4>>2]|0;
 $67 = HEAP32[$5>>2]|0;
 $68 = HEAP32[$6>>2]|0;
 $69 = (_create_data_item($64,$65,$66,$67,$68)|0);
 HEAP32[$item>>2] = $69;
 $70 = HEAP32[$item>>2]|0;
 $71 = ($70|0)==(0|0);
 if ($71) {
  HEAP32[$0>>2] = 1;
  $83 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($83|0);
 } else {
  $72 = HEAP32[$item>>2]|0;
  $73 = HEAP32[$n>>2]|0;
  $74 = (($73) - 1)|0;
  $75 = HEAP32[$1>>2]|0;
  $76 = (($75) + 264|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($74<<2)|0);
  HEAP32[$78>>2] = $72;
  $79 = HEAP32[$1>>2]|0;
  $80 = (($79) + 260|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + 1)|0;
  HEAP32[$80>>2] = $82;
  HEAP32[$0>>2] = 0;
  $83 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($83|0);
 }
 return 0|0;
}
function _create_data_item($key,$ptr,$type,$size,$destructor) {
 $key = $key|0;
 $ptr = $ptr|0;
 $type = $type|0;
 $size = $size|0;
 $destructor = $destructor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $item = sp;
 HEAP32[$0>>2] = $key;
 HEAP32[$1>>2] = $ptr;
 HEAP32[$2>>2] = $type;
 HEAP32[$3>>2] = $size;
 HEAP32[$4>>2] = $destructor;
 $5 = (_malloc(20)|0);
 HEAP32[$item>>2] = $5;
 $6 = HEAP32[$item>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $27 = HEAP32[$item>>2]|0;
  STACKTOP = sp;return ($27|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (_gretl_strdup($8)|0);
 $10 = HEAP32[$item>>2]|0;
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$item>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = HEAP32[$item>>2]|0;
  _free($14);
  HEAP32[$item>>2] = 0;
  $27 = HEAP32[$item>>2]|0;
  STACKTOP = sp;return ($27|0);
 } else {
  $15 = HEAP32[$1>>2]|0;
  $16 = HEAP32[$item>>2]|0;
  $17 = (($16) + 4|0);
  HEAP32[$17>>2] = $15;
  $18 = HEAP32[$2>>2]|0;
  $19 = HEAP32[$item>>2]|0;
  $20 = (($19) + 8|0);
  HEAP32[$20>>2] = $18;
  $21 = HEAP32[$3>>2]|0;
  $22 = HEAP32[$item>>2]|0;
  $23 = (($22) + 12|0);
  HEAP32[$23>>2] = $21;
  $24 = HEAP32[$4>>2]|0;
  $25 = HEAP32[$item>>2]|0;
  $26 = (($25) + 16|0);
  HEAP32[$26>>2] = $24;
  $27 = HEAP32[$item>>2]|0;
  STACKTOP = sp;return ($27|0);
 }
 return 0|0;
}
function _gretl_model_set_data($pmod,$key,$ptr,$type,$size) {
 $pmod = $pmod|0;
 $key = $key|0;
 $ptr = $ptr|0;
 $type = $type|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $key;
 HEAP32[$2>>2] = $ptr;
 HEAP32[$3>>2] = $type;
 HEAP32[$4>>2] = $size;
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP32[$3>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = (_gretl_model_set_data_with_destructor($5,$6,$7,$8,$9,0)|0);
 STACKTOP = sp;return ($10|0);
}
function _gretl_model_set_list_as_data($pmod,$key,$list) {
 $pmod = $pmod|0;
 $key = $key|0;
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $size = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $key;
 HEAP32[$2>>2] = $list;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = $5<<2;
 HEAP32[$size>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$size>>2]|0;
 $11 = (_gretl_model_set_data_with_destructor($7,$8,$9,4,$10,0)|0);
 STACKTOP = sp;return ($11|0);
}
function _gretl_model_set_string_as_data($pmod,$key,$str) {
 $pmod = $pmod|0;
 $key = $key|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $size = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $key;
 HEAP32[$2>>2] = $str;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_strlen(($3|0))|0);
 $5 = (($4) + 1)|0;
 HEAP32[$size>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$size>>2]|0;
 $10 = (_gretl_model_set_data_with_destructor($6,$7,$8,8,$9,0)|0);
 STACKTOP = sp;return ($10|0);
}
function _gretl_model_set_int($pmod,$key,$val) {
 $pmod = $pmod|0;
 $key = $key|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $valp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $valp = sp + 4|0;
 $err = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $key;
 HEAP32[$3>>2] = $val;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (_gretl_model_get_data($4,$5)|0);
 HEAP32[$valp>>2] = $6;
 $7 = HEAP32[$valp>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = HEAP32[$3>>2]|0;
  $10 = HEAP32[$valp>>2]|0;
  HEAP32[$10>>2] = $9;
  HEAP32[$0>>2] = 0;
  $24 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 $11 = (_malloc(4)|0);
 HEAP32[$valp>>2] = $11;
 $12 = HEAP32[$valp>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  HEAP32[$0>>2] = 1;
  $24 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 $14 = HEAP32[$3>>2]|0;
 $15 = HEAP32[$valp>>2]|0;
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = HEAP32[$valp>>2]|0;
 $19 = (_gretl_model_set_data($16,$17,$18,2,4)|0);
 HEAP32[$err>>2] = $19;
 $20 = HEAP32[$err>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = HEAP32[$valp>>2]|0;
  _free($22);
 }
 $23 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $23;
 $24 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($24|0);
}
function _gretl_model_get_data($pmod,$key) {
 $pmod = $pmod|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $key;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_gretl_model_get_data_full($2,$3,0,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _gretl_model_set_double($pmod,$key,$val) {
 $pmod = $pmod|0;
 $key = $key|0;
 $val = +$val;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $err = 0, $valp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp;
 $valp = sp + 12|0;
 $err = sp + 8|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $key;
 HEAPF64[$3>>3] = $val;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (_gretl_model_get_data($4,$5)|0);
 HEAP32[$valp>>2] = $6;
 $7 = HEAP32[$valp>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = +HEAPF64[$3>>3];
  $10 = HEAP32[$valp>>2]|0;
  HEAPF64[$10>>3] = $9;
  HEAP32[$0>>2] = 0;
  $24 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 $11 = (_malloc(8)|0);
 HEAP32[$valp>>2] = $11;
 $12 = HEAP32[$valp>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  HEAP32[$0>>2] = 1;
  $24 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 $14 = +HEAPF64[$3>>3];
 $15 = HEAP32[$valp>>2]|0;
 HEAPF64[$15>>3] = $14;
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = HEAP32[$valp>>2]|0;
 $19 = (_gretl_model_set_data($16,$17,$18,5,8)|0);
 HEAP32[$err>>2] = $19;
 $20 = HEAP32[$err>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = HEAP32[$valp>>2]|0;
  _free($22);
 }
 $23 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $23;
 $24 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($24|0);
}
function _gretl_model_set_full_vcv_info($pmod,$vmaj,$vmin,$order,$flags,$bw) {
 $pmod = $pmod|0;
 $vmaj = $vmaj|0;
 $vmin = $vmin|0;
 $order = $order|0;
 $flags = $flags|0;
 $bw = +$bw;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $prev = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp;
 $vi = sp + 16|0;
 $prev = sp + 12|0;
 $err = sp + 8|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $vmaj;
 HEAP32[$3>>2] = $vmin;
 HEAP32[$4>>2] = $order;
 HEAP32[$5>>2] = $flags;
 HEAPF64[$6>>3] = $bw;
 HEAP32[$prev>>2] = 0;
 HEAP32[$err>>2] = 0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (_gretl_model_get_data($7,14832)|0);
 HEAP32[$vi>>2] = $8;
 $9 = HEAP32[$vi>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = (_vcv_info_new()|0);
  HEAP32[$vi>>2] = $11;
  $12 = HEAP32[$vi>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   HEAP32[$0>>2] = 12;
   $34 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($34|0);
  }
 } else {
  HEAP32[$prev>>2] = 1;
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = HEAP32[$vi>>2]|0;
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$vi>>2]|0;
 $18 = (($17) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = HEAP32[$4>>2]|0;
 $20 = HEAP32[$vi>>2]|0;
 $21 = (($20) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = HEAP32[$5>>2]|0;
 $23 = HEAP32[$vi>>2]|0;
 $24 = (($23) + 12|0);
 HEAP32[$24>>2] = $22;
 $25 = +HEAPF64[$6>>3];
 $26 = HEAP32[$vi>>2]|0;
 $27 = (($26) + 16|0);
 HEAPF64[$27>>3] = $25;
 $28 = HEAP32[$prev>>2]|0;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $30 = HEAP32[$1>>2]|0;
  $31 = HEAP32[$vi>>2]|0;
  $32 = (_gretl_model_set_data($30,14832,$31,12,24)|0);
  HEAP32[$err>>2] = $32;
 }
 $33 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $33;
 $34 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _vcv_info_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vi = sp;
 $0 = (_malloc(24)|0);
 HEAP32[$vi>>2] = $0;
 $1 = HEAP32[$vi>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $12 = HEAP32[$vi>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $3 = HEAP32[$vi>>2]|0;
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$vi>>2]|0;
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$vi>>2]|0;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$vi>>2]|0;
 $9 = (($8) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$vi>>2]|0;
 $11 = (($10) + 16|0);
 HEAPF64[$11>>3] = 1.79769313486231570815E+308;
 $12 = HEAP32[$vi>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function _gretl_model_set_vcv_info($pmod,$vmaj,$vmin) {
 $pmod = $pmod|0;
 $vmaj = $vmaj|0;
 $vmin = $vmin|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $vmaj;
 HEAP32[$2>>2] = $vmin;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (_gretl_model_set_full_vcv_info($3,$4,$5,0,0,0.0)|0);
 STACKTOP = sp;return ($6|0);
}
function _gretl_model_get_data_full($pmod,$key,$type,$sz) {
 $pmod = $pmod|0;
 $key = $key|0;
 $type = $type|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $key;
 HEAP32[$3>>2] = $type;
 HEAP32[$4>>2] = $sz;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  HEAP32[$0>>2] = 0;
  $54 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($54|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + 260|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   label = 12;
   break;
  }
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP32[$i>>2]|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + 264|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($13<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = (_strcmp($12,$19)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   break;
  }
  $52 = HEAP32[$i>>2]|0;
  $53 = (($52) + 1)|0;
  HEAP32[$i>>2] = $53;
 }
 if ((label|0) == 12) {
  HEAP32[$0>>2] = 0;
  $54 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($54|0);
 }
 $22 = HEAP32[$3>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = HEAP32[$i>>2]|0;
  $25 = HEAP32[$1>>2]|0;
  $26 = (($25) + 264|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($24<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$3>>2]|0;
  HEAP32[$32>>2] = $31;
 }
 $33 = HEAP32[$4>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = HEAP32[$i>>2]|0;
  $36 = HEAP32[$1>>2]|0;
  $37 = (($36) + 264|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($35<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$4>>2]|0;
  HEAP32[$43>>2] = $42;
 }
 $44 = HEAP32[$i>>2]|0;
 $45 = HEAP32[$1>>2]|0;
 $46 = (($45) + 264|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + ($44<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 HEAP32[$0>>2] = $51;
 $54 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($54|0);
}
function _gretl_model_get_int($pmod,$key) {
 $pmod = $pmod|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $valp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $valp = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $key;
 HEAP32[$valp>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$0>>2] = 0;
  $41 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = (($6) + 260|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   label = 9;
   break;
  }
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + 264|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(2);
  if (!($18)) {
   $19 = HEAP32[$2>>2]|0;
   $20 = HEAP32[$i>>2]|0;
   $21 = HEAP32[$1>>2]|0;
   $22 = (($21) + 264|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($20<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$25>>2]|0;
   $27 = (_strcmp($19,$26)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    label = 7;
    break;
   }
  }
  $39 = HEAP32[$i>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$i>>2] = $40;
 }
 if ((label|0) == 7) {
  $29 = HEAP32[$i>>2]|0;
  $30 = HEAP32[$1>>2]|0;
  $31 = (($30) + 264|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$valp>>2] = $36;
  $37 = HEAP32[$valp>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$0>>2] = $38;
  $41 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 9) {
  HEAP32[$0>>2] = 0;
  $41 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 return 0|0;
}
function _gretl_model_get_double($pmod,$key) {
 $pmod = $pmod|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $valp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $valp = sp + 12|0;
 $i = sp + 8|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $key;
 HEAP32[$valp>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAPF64[$0>>3] = 1.79769313486231570815E+308;
  $41 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$41);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = (($6) + 260|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   label = 9;
   break;
  }
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + 264|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(5);
  if (!($18)) {
   $19 = HEAP32[$2>>2]|0;
   $20 = HEAP32[$i>>2]|0;
   $21 = HEAP32[$1>>2]|0;
   $22 = (($21) + 264|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($20<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$25>>2]|0;
   $27 = (_strcmp($19,$26)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    label = 7;
    break;
   }
  }
  $39 = HEAP32[$i>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$i>>2] = $40;
 }
 if ((label|0) == 7) {
  $29 = HEAP32[$i>>2]|0;
  $30 = HEAP32[$1>>2]|0;
  $31 = (($30) + 264|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$valp>>2] = $36;
  $37 = HEAP32[$valp>>2]|0;
  $38 = +HEAPF64[$37>>3];
  HEAPF64[$0>>3] = $38;
  $41 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$41);
 }
 else if ((label|0) == 9) {
  HEAPF64[$0>>3] = 1.79769313486231570815E+308;
  $41 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$41);
 }
 return +0;
}
function _gretl_model_get_coeff_separator($pmod,$ps,$ppos) {
 $pmod = $pmod|0;
 $ps = $ps|0;
 $ppos = $ppos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $cs = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $ps;
 HEAP32[$3>>2] = $ppos;
 $4 = HEAP32[$1>>2]|0;
 $5 = (_gretl_model_get_data($4,14848)|0);
 HEAP32[$cs>>2] = $5;
 $6 = HEAP32[$cs>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$0>>2] = 0;
  $14 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($14|0);
 } else {
  $8 = HEAP32[$cs>>2]|0;
  $9 = HEAP32[$2>>2]|0;
  HEAP32[$9>>2] = $8;
  $10 = HEAP32[$cs>>2]|0;
  $11 = (($10) + 64|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$3>>2]|0;
  HEAP32[$13>>2] = $12;
  HEAP32[$0>>2] = 1;
  $14 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 return 0|0;
}
function _gretl_model_get_param_name($pmod,$dset,$i,$targ) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $i = $i|0;
 $targ = $targ|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $j = sp + 8|0;
 $k = sp + 4|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $i;
 HEAP32[$3>>2] = $targ;
 $4 = HEAP32[$3>>2]|0;
 HEAP8[$4>>0] = 0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $172 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($172|0);
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 2)|0;
 HEAP32[$j>>2] = $8;
 HEAP32[$k>>2] = -1;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(6);
 L4: do {
  if ($12) {
   $13 = HEAP32[$j>>2]|0;
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 60|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($13<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$1>>2]|0;
   $20 = (($19) + 68|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($18<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$3>>2]|0;
   _make_cname($23,$24);
  } else {
   $25 = HEAP32[$0>>2]|0;
   $26 = (($25) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(91);
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 & 4194304;
    $33 = ($32|0)!=(0);
    if ($33) {
     $34 = HEAP32[$3>>2]|0;
     $35 = HEAP32[$j>>2]|0;
     $36 = HEAP32[$0>>2]|0;
     $37 = (($36) + 60|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($38) + ($35<<2)|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = HEAP32[$1>>2]|0;
     $42 = (($41) + 68|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (($43) + ($40<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     (_strcpy(($34|0),($45|0))|0);
     break;
    }
   }
   $46 = HEAP32[$0>>2]|0;
   $47 = (($46) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(83);
   if (!($49)) {
    $50 = HEAP32[$0>>2]|0;
    $51 = (($50) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(76);
    if (!($53)) {
     $54 = HEAP32[$0>>2]|0;
     $55 = (($54) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(47);
     if (!($57)) {
      $58 = HEAP32[$0>>2]|0;
      $59 = (($58) + 8|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(9);
      if (!($61)) {
       $62 = HEAP32[$0>>2]|0;
       $63 = (($62) + 8|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($64|0)==(91);
       if (!($65)) {
        $66 = HEAP32[$0>>2]|0;
        $67 = (($66) + 8|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ($68|0)==(7);
        if (!($69)) {
         $70 = HEAP32[$0>>2]|0;
         $71 = (($70) + 8|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = ($72|0)==(27);
         if (!($73)) {
          $74 = HEAP32[$0>>2]|0;
          $75 = (($74) + 8|0);
          $76 = HEAP32[$75>>2]|0;
          $77 = ($76|0)==(45);
          if (!($77)) {
           $78 = HEAP32[$0>>2]|0;
           $79 = (($78) + 8|0);
           $80 = HEAP32[$79>>2]|0;
           $81 = ($80|0)==(10);
           if (!($81)) {
            $83 = HEAP32[$0>>2]|0;
            $84 = (($83) + 8|0);
            $85 = HEAP32[$84>>2]|0;
            $86 = ($85|0)==(81);
            if ($86) {
             $87 = HEAP32[$0>>2]|0;
             $88 = (($87) + 244|0);
             $89 = HEAP32[$88>>2]|0;
             $90 = ($89|0)!=(0|0);
             if ($90) {
              $91 = HEAP32[$2>>2]|0;
              HEAP32[$k>>2] = $91;
              break;
             }
            }
            $92 = HEAP32[$0>>2]|0;
            $93 = (($92) + 8|0);
            $94 = HEAP32[$93>>2]|0;
            $95 = ($94|0)==(98);
            if ($95) {
             label = 23;
            } else {
             $96 = HEAP32[$0>>2]|0;
             $97 = (($96) + 8|0);
             $98 = HEAP32[$97>>2]|0;
             $99 = ($98|0)==(69);
             if ($99) {
              label = 23;
             } else {
              $100 = HEAP32[$0>>2]|0;
              $101 = (($100) + 8|0);
              $102 = HEAP32[$101>>2]|0;
              $103 = ($102|0)==(51);
              if ($103) {
               label = 23;
              }
             }
            }
            if ((label|0) == 23) {
             $104 = HEAP32[$0>>2]|0;
             $105 = (($104) + 244|0);
             $106 = HEAP32[$105>>2]|0;
             $107 = ($106|0)!=(0|0);
             if ($107) {
              $108 = HEAP32[$2>>2]|0;
              HEAP32[$k>>2] = $108;
              break;
             }
            }
            $109 = HEAP32[$0>>2]|0;
            $110 = (($109) + 8|0);
            $111 = HEAP32[$110>>2]|0;
            $112 = ($111|0)==(5);
            if ($112) {
             $113 = HEAP32[$2>>2]|0;
             $114 = HEAP32[$0>>2]|0;
             $115 = (($114) + 48|0);
             $116 = HEAP32[$115>>2]|0;
             $117 = ($113|0)>=($116|0);
             if ($117) {
              $118 = HEAP32[$3>>2]|0;
              $119 = HEAP32[$0>>2]|0;
              $120 = HEAP32[$2>>2]|0;
              _plain_ar_coeff_name($118,$119,$120);
              break;
             }
            }
            $121 = HEAP32[$0>>2]|0;
            $122 = (($121) + 8|0);
            $123 = HEAP32[$122>>2]|0;
            $124 = ($123|0)==(8);
            if ($124) {
             $125 = HEAP32[$2>>2]|0;
             $126 = HEAP32[$0>>2]|0;
             $127 = (($126) + 48|0);
             $128 = HEAP32[$127>>2]|0;
             $129 = ($125|0)>=($128|0);
             if ($129) {
              $130 = HEAP32[$3>>2]|0;
              $131 = HEAP32[$2>>2]|0;
              $132 = HEAP32[$0>>2]|0;
              $133 = (($132) + 48|0);
              $134 = HEAP32[$133>>2]|0;
              $135 = (($131) - ($134))|0;
              HEAP32[$vararg_buffer>>2] = $135;
              (_sprintf($130,14864,$vararg_buffer)|0);
              break;
             }
            }
            $136 = HEAP32[$0>>2]|0;
            $137 = (($136) + 60|0);
            $138 = HEAP32[$137>>2]|0;
            $139 = ($138|0)==(0|0);
            do {
             if (!($139)) {
              $140 = HEAP32[$j>>2]|0;
              $141 = HEAP32[$0>>2]|0;
              $142 = (($141) + 60|0);
              $143 = HEAP32[$142>>2]|0;
              $144 = HEAP32[$143>>2]|0;
              $145 = ($140|0)>($144|0);
              if ($145) {
               break;
              }
              $147 = HEAP32[$3>>2]|0;
              $148 = HEAP32[$j>>2]|0;
              $149 = HEAP32[$0>>2]|0;
              $150 = (($149) + 60|0);
              $151 = HEAP32[$150>>2]|0;
              $152 = (($151) + ($148<<2)|0);
              $153 = HEAP32[$152>>2]|0;
              $154 = HEAP32[$1>>2]|0;
              $155 = (($154) + 68|0);
              $156 = HEAP32[$155>>2]|0;
              $157 = (($156) + ($153<<2)|0);
              $158 = HEAP32[$157>>2]|0;
              (_strcpy(($147|0),($158|0))|0);
              break L4;
             }
            } while(0);
            $146 = HEAP32[$2>>2]|0;
            HEAP32[$k>>2] = $146;
            break;
           }
          }
         }
        }
       }
      }
     }
    }
   }
   $82 = HEAP32[$2>>2]|0;
   HEAP32[$k>>2] = $82;
  }
 } while(0);
 $159 = HEAP32[$k>>2]|0;
 $160 = ($159|0)>=(0);
 if (!($160)) {
  $172 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($172|0);
 }
 $161 = HEAP32[$0>>2]|0;
 $162 = (($161) + 244|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)!=(0|0);
 $165 = HEAP32[$3>>2]|0;
 if ($164) {
  $166 = HEAP32[$k>>2]|0;
  $167 = HEAP32[$0>>2]|0;
  $168 = (($167) + 244|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = (($169) + ($166<<2)|0);
  $171 = HEAP32[$170>>2]|0;
  (_strcpy(($165|0),($171|0))|0);
  $172 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($172|0);
 } else {
  (_strcpy(($165|0),(14880|0))|0);
  $172 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($172|0);
 }
 return 0|0;
}
function _make_cname($orig,$cname) {
 $orig = $orig|0;
 $cname = $cname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $lag = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $p = sp + 8|0;
 $c = sp + 20|0;
 $lag = sp + 4|0;
 HEAP32[$0>>2] = $orig;
 HEAP32[$1>>2] = $cname;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (_strrchr($8,95)|0);
 HEAP32[$p>>2] = $9;
 $10 = HEAP32[$p>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  (_strcpy(($12|0),($13|0))|0);
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$p>>2]|0;
 $15 = (($14) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 HEAP8[$c>>0] = $16;
 $17 = HEAP8[$c>>0]|0;
 $18 = $17&255;
 $19 = (_isdigit($18)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[$p>>2]|0;
 $22 = (($21) + 1|0);
 HEAP32[$p>>2] = $22;
 $23 = (_atoi($22)|0);
 HEAP32[$lag>>2] = $23;
 $24 = HEAP32[$1>>2]|0;
 $25 = HEAP32[$lag>>2]|0;
 HEAP32[$vararg_buffer>>2] = $25;
 (_sprintf($24,18144,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _plain_ar_coeff_name($targ,$pmod,$i) {
 $targ = $targ|0;
 $pmod = $pmod|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $k = sp + 4|0;
 HEAP32[$0>>2] = $targ;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $i;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) - ($6))|0;
 HEAP32[$k>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 224|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + 224|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = HEAP32[$k>>2]|0;
   $18 = ($17|0)>=(0);
   if ($18) {
    $19 = HEAP32[$k>>2]|0;
    $20 = HEAP32[$1>>2]|0;
    $21 = (($20) + 224|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    $24 = HEAP32[$23>>2]|0;
    $25 = ($19|0)<($24|0);
    if ($25) {
     $26 = HEAP32[$0>>2]|0;
     $27 = HEAP32[$k>>2]|0;
     $28 = (($27) + 1)|0;
     $29 = HEAP32[$1>>2]|0;
     $30 = (($29) + 224|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + ($28<<2)|0);
     $34 = HEAP32[$33>>2]|0;
     HEAP32[$vararg_buffer>>2] = $34;
     (_sprintf($26,18136,$vararg_buffer)|0);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $35 = HEAP32[$0>>2]|0;
 (_strcpy(($35|0),(14880|0))|0);
 STACKTOP = sp;return;
}
function _gretl_is_arima_model($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $D = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $d = sp + 4|0;
 $D = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_gretl_model_get_int($1,14888)|0);
 HEAP32[$d>>2] = $2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_gretl_model_get_int($3,14896)|0);
 HEAP32[$D>>2] = $4;
 $5 = HEAP32[$d>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $10 = 1;
  $9 = $10&1;
  STACKTOP = sp;return ($9|0);
 }
 $7 = HEAP32[$D>>2]|0;
 $8 = ($7|0)>(0);
 $10 = $8;
 $9 = $10&1;
 STACKTOP = sp;return ($9|0);
}
function _arma_model_nonseasonal_AR_order($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $p = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$p>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(9);
 if (!($4)) {
  $10 = HEAP32[$p>>2]|0;
  STACKTOP = sp;return ($10|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$p>>2] = $9;
 $10 = HEAP32[$p>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function _arma_model_nonseasonal_MA_order($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $q = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$q>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(9);
 do {
  if ($4) {
   $5 = HEAP32[$0>>2]|0;
   $6 = (_gretl_is_arima_model($5)|0);
   $7 = ($6|0)!=(0);
   $8 = HEAP32[$0>>2]|0;
   $9 = (($8) + 60|0);
   $10 = HEAP32[$9>>2]|0;
   if ($7) {
    $11 = (($10) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    HEAP32[$q>>2] = $12;
    break;
   } else {
    $13 = (($10) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    HEAP32[$q>>2] = $14;
    break;
   }
  }
 } while(0);
 $15 = HEAP32[$q>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _gretl_model_get_depvar($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $dv = sp;
 HEAP32[$1>>2] = $pmod;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_gretl_model_get_int($2,14920)|0);
 HEAP32[$dv>>2] = $3;
 $4 = HEAP32[$dv>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = HEAP32[$dv>>2]|0;
  HEAP32[$0>>2] = $6;
  $47 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($47|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ($7|0)!=(0|0);
 do {
  if ($8) {
   $9 = HEAP32[$1>>2]|0;
   $10 = (($9) + 60|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(0|0);
   if ($12) {
    $13 = HEAP32[$1>>2]|0;
    $14 = (($13) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(45);
    $17 = HEAP32[$1>>2]|0;
    if ($16) {
     $18 = (($17) + 60|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($19) + 16|0);
     $21 = HEAP32[$20>>2]|0;
     HEAP32[$dv>>2] = $21;
     break;
    }
    $22 = (($17) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(9);
    $25 = HEAP32[$1>>2]|0;
    if ($24) {
     $26 = (_arma_depvar_pos($25)|0);
     $27 = HEAP32[$1>>2]|0;
     $28 = (($27) + 60|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($29) + ($26<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     HEAP32[$dv>>2] = $31;
     break;
    }
    $32 = (($25) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(7);
    if (!($34)) {
     $35 = HEAP32[$1>>2]|0;
     $36 = (($35) + 8|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(27);
     if (!($38)) {
      $41 = HEAP32[$1>>2]|0;
      $42 = (($41) + 60|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (($43) + 4|0);
      $45 = HEAP32[$44>>2]|0;
      HEAP32[$dv>>2] = $45;
      break;
     }
    }
    $39 = HEAP32[$1>>2]|0;
    $40 = (_arbond_get_depvar($39)|0);
    HEAP32[$dv>>2] = $40;
   }
  }
 } while(0);
 $46 = HEAP32[$dv>>2]|0;
 HEAP32[$0>>2] = $46;
 $47 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($47|0);
}
function _arma_depvar_pos($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arima = 0, $dvpos = 0, $i = 0, $seasonal = 0, $sep1 = 0, $sep2 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 28|0;
 $sep1 = sp + 24|0;
 $sep2 = sp + 20|0;
 $seasonal = sp + 16|0;
 $arima = sp + 12|0;
 $i = sp + 8|0;
 $dvpos = sp + 4|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$sep1>>2] = 0;
 HEAP32[$sep2>>2] = 0;
 HEAP32[$seasonal>>2] = 0;
 HEAP32[$arima>>2] = 0;
 HEAP32[$i>>2] = 1;
 while(1) {
  $1 = HEAP32[$i>>2]|0;
  $2 = HEAP32[$0>>2]|0;
  $3 = (($2) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($1|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($7<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(-100);
  do {
   if ($13) {
    $14 = HEAP32[$sep1>>2]|0;
    $15 = ($14|0)==(0);
    $16 = HEAP32[$i>>2]|0;
    if ($15) {
     HEAP32[$sep1>>2] = $16;
     break;
    } else {
     HEAP32[$sep2>>2] = $16;
     break;
    }
   }
  } while(0);
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[$sep2>>2]|0;
 $20 = ($19|0)!=(0);
 do {
  if ($20) {
   $21 = HEAP32[$sep2>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$dvpos>>2] = $22;
  } else {
   $23 = HEAP32[$sep1>>2]|0;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = HEAP32[$sep1>>2]|0;
    $26 = (($25) + 1)|0;
    HEAP32[$dvpos>>2] = $26;
    break;
   }
   $27 = HEAP32[$0>>2]|0;
   $28 = (_gretl_model_get_int($27,14904)|0);
   $29 = ($28|0)!=(0);
   if ($29) {
    label = 15;
   } else {
    $30 = HEAP32[$0>>2]|0;
    $31 = (_gretl_model_get_int($30,14896)|0);
    $32 = ($31|0)!=(0);
    if ($32) {
     label = 15;
    } else {
     $33 = HEAP32[$0>>2]|0;
     $34 = (_gretl_model_get_int($33,14912)|0);
     $35 = ($34|0)!=(0);
     if ($35) {
      label = 15;
     }
    }
   }
   if ((label|0) == 15) {
    HEAP32[$seasonal>>2] = 1;
   }
   $36 = HEAP32[$0>>2]|0;
   $37 = (_gretl_model_get_int($36,14888)|0);
   $38 = ($37|0)!=(0);
   if ($38) {
    label = 18;
   } else {
    $39 = HEAP32[$0>>2]|0;
    $40 = (_gretl_model_get_int($39,14896)|0);
    $41 = ($40|0)!=(0);
    if ($41) {
     label = 18;
    }
   }
   if ((label|0) == 18) {
    HEAP32[$arima>>2] = 1;
   }
   $42 = HEAP32[$arima>>2]|0;
   $43 = ($42|0)!=(0);
   $44 = HEAP32[$seasonal>>2]|0;
   $45 = ($44|0)!=(0);
   if ($43) {
    $46 = $45 ? 9 : 5;
    HEAP32[$dvpos>>2] = $46;
    break;
   } else {
    $47 = $45 ? 7 : 4;
    HEAP32[$dvpos>>2] = $47;
    break;
   }
  }
 } while(0);
 $48 = HEAP32[$dvpos>>2]|0;
 $49 = ($48|0)==(-100);
 if (!($49)) {
  $51 = HEAP32[$dvpos>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $50 = HEAP32[_stderr>>2]|0;
 (_fprintf(($50|0),(18096|0),($vararg_buffer|0))|0);
 HEAP32[$dvpos>>2] = 0;
 $51 = HEAP32[$dvpos>>2]|0;
 STACKTOP = sp;return ($51|0);
}
function _arbond_get_depvar($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$i>>2] = 1;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($2|0)<=($6|0);
  if (!($7)) {
   label = 7;
   break;
  }
  $8 = HEAP32[$i>>2]|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + 60|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(-100);
  if ($14) {
   $15 = HEAP32[$i>>2]|0;
   $16 = HEAP32[$1>>2]|0;
   $17 = (($16) + 60|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($15|0)<($19|0);
   if ($20) {
    label = 5;
    break;
   }
  }
  $28 = HEAP32[$i>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$i>>2] = $29;
 }
 if ((label|0) == 5) {
  $21 = HEAP32[$i>>2]|0;
  $22 = (($21) + 1)|0;
  $23 = HEAP32[$1>>2]|0;
  $24 = (($23) + 60|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$0>>2] = $27;
  $30 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 7) {
  HEAP32[$0>>2] = 0;
  $30 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($30|0);
 }
 return 0|0;
}
function _gretl_model_get_depvar_name($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dv = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $dv = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 236|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = HEAP32[$1>>2]|0;
 if ($6) {
  $8 = (($7) + 236|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$0>>2] = $9;
  $58 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($58|0);
 }
 $10 = (_gretl_model_get_int($7,14920)|0);
 HEAP32[$dv>>2] = $10;
 $11 = HEAP32[$dv>>2]|0;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$1>>2]|0;
   $14 = ($13|0)!=(0|0);
   if ($14) {
    $15 = HEAP32[$1>>2]|0;
    $16 = (($15) + 60|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0|0);
    if ($18) {
     $19 = HEAP32[$1>>2]|0;
     $20 = (($19) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(45);
     $23 = HEAP32[$1>>2]|0;
     if ($22) {
      $24 = (($23) + 60|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($25) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      HEAP32[$dv>>2] = $27;
      break;
     }
     $28 = (($23) + 8|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(9);
     $31 = HEAP32[$1>>2]|0;
     if ($30) {
      $32 = (_arma_depvar_pos($31)|0);
      $33 = HEAP32[$1>>2]|0;
      $34 = (($33) + 60|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (($35) + ($32<<2)|0);
      $37 = HEAP32[$36>>2]|0;
      HEAP32[$dv>>2] = $37;
      break;
     }
     $38 = (($31) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(7);
     if (!($40)) {
      $41 = HEAP32[$1>>2]|0;
      $42 = (($41) + 8|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)==(27);
      if (!($44)) {
       $47 = HEAP32[$1>>2]|0;
       $48 = (($47) + 60|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (($49) + 4|0);
       $51 = HEAP32[$50>>2]|0;
       HEAP32[$dv>>2] = $51;
       break;
      }
     }
     $45 = HEAP32[$1>>2]|0;
     $46 = (_arbond_get_depvar($45)|0);
     HEAP32[$dv>>2] = $46;
    }
   }
  }
 } while(0);
 $52 = HEAP32[$dv>>2]|0;
 $53 = HEAP32[$2>>2]|0;
 $54 = (($53) + 68|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + ($52<<2)|0);
 $57 = HEAP32[$56>>2]|0;
 HEAP32[$0>>2] = $57;
 $58 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($58|0);
}
function _gretl_model_write_vcv($pmod,$V) {
 $pmod = $pmod|0;
 $V = $V|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $err = 0, $i = 0, $idx = 0, $j = 0;
 var $k = 0, $n = 0, $restricted = 0, $tmp = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $i = sp + 36|0;
 $j = sp + 32|0;
 $k = sp + 28|0;
 $n = sp + 24|0;
 $x = sp;
 $tmp = sp + 20|0;
 $err = sp + 16|0;
 $restricted = sp + 12|0;
 $idx = sp + 8|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $V;
 HEAP32[$err>>2] = 0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$2>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = HEAP32[$2>>2]|0;
    $13 = (($12) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14|0)!=($16|0);
    if ($17) {
     HEAP32[$0>>2] = 36;
     $95 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($95|0);
    }
    $18 = HEAP32[$2>>2]|0;
    $19 = HEAP32[$18>>2]|0;
    HEAP32[$k>>2] = $19;
    $20 = HEAP32[$k>>2]|0;
    $21 = HEAP32[$k>>2]|0;
    $22 = Math_imul($20, $21)|0;
    $23 = HEAP32[$k>>2]|0;
    $24 = (($22) + ($23))|0;
    $25 = (($24|0) / 2)&-1;
    HEAP32[$n>>2] = $25;
    $26 = HEAP32[$1>>2]|0;
    $27 = (($26) + 96|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$n>>2]|0;
    $30 = $29<<3;
    $31 = (_realloc($28,$30)|0);
    HEAP32[$tmp>>2] = $31;
    $32 = HEAP32[$tmp>>2]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     HEAP32[$err>>2] = 12;
    } else {
     $34 = HEAP32[$tmp>>2]|0;
     $35 = HEAP32[$1>>2]|0;
     $36 = (($35) + 96|0);
     HEAP32[$36>>2] = $34;
    }
    $37 = HEAP32[$err>>2]|0;
    $38 = ($37|0)!=(0);
    do {
     if (!($38)) {
      $39 = HEAP32[$1>>2]|0;
      $40 = (($39) + 80|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = HEAP32[$k>>2]|0;
      $43 = $42<<3;
      $44 = (_realloc($41,$43)|0);
      HEAP32[$tmp>>2] = $44;
      $45 = HEAP32[$tmp>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       HEAP32[$err>>2] = 12;
       break;
      } else {
       $47 = HEAP32[$tmp>>2]|0;
       $48 = HEAP32[$1>>2]|0;
       $49 = (($48) + 80|0);
       HEAP32[$49>>2] = $47;
       break;
      }
     }
    } while(0);
    $50 = HEAP32[$err>>2]|0;
    $51 = ($50|0)!=(0);
    L19: do {
     if (!($51)) {
      HEAP32[$idx>>2] = 0;
      $52 = HEAP32[$1>>2]|0;
      $53 = (_gretl_model_get_int($52,14928)|0);
      HEAP32[$restricted>>2] = $53;
      HEAP32[$i>>2] = 0;
      while(1) {
       $54 = HEAP32[$i>>2]|0;
       $55 = HEAP32[$k>>2]|0;
       $56 = ($54|0)<($55|0);
       if (!($56)) {
        break L19;
       }
       $57 = HEAP32[$i>>2]|0;
       HEAP32[$j>>2] = $57;
       while(1) {
        $58 = HEAP32[$j>>2]|0;
        $59 = HEAP32[$k>>2]|0;
        $60 = ($58|0)<($59|0);
        if (!($60)) {
         break;
        }
        $61 = HEAP32[$j>>2]|0;
        $62 = HEAP32[$2>>2]|0;
        $63 = HEAP32[$62>>2]|0;
        $64 = Math_imul($61, $63)|0;
        $65 = HEAP32[$i>>2]|0;
        $66 = (($64) + ($65))|0;
        $67 = HEAP32[$2>>2]|0;
        $68 = (($67) + 8|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = (($69) + ($66<<3)|0);
        $71 = +HEAPF64[$70>>3];
        HEAPF64[$x>>3] = $71;
        $72 = +HEAPF64[$x>>3];
        $73 = HEAP32[$idx>>2]|0;
        $74 = (($73) + 1)|0;
        HEAP32[$idx>>2] = $74;
        $75 = HEAP32[$1>>2]|0;
        $76 = (($75) + 96|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = (($77) + ($73<<3)|0);
        HEAPF64[$78>>3] = $72;
        $79 = HEAP32[$i>>2]|0;
        $80 = HEAP32[$j>>2]|0;
        $81 = ($79|0)==($80|0);
        if ($81) {
         $82 = +HEAPF64[$x>>3];
         $83 = HEAP32[$restricted>>2]|0;
         $84 = (+_vcv_get_se($82,$83));
         $85 = HEAP32[$i>>2]|0;
         $86 = HEAP32[$1>>2]|0;
         $87 = (($86) + 80|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = (($88) + ($85<<3)|0);
         HEAPF64[$89>>3] = $84;
        }
        $90 = HEAP32[$j>>2]|0;
        $91 = (($90) + 1)|0;
        HEAP32[$j>>2] = $91;
       }
       $92 = HEAP32[$i>>2]|0;
       $93 = (($92) + 1)|0;
       HEAP32[$i>>2] = $93;
      }
     }
    } while(0);
    $94 = HEAP32[$err>>2]|0;
    HEAP32[$0>>2] = $94;
    $95 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($95|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $95 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($95|0);
}
function _vcv_get_se($vii,$restricted) {
 $vii = +$vii;
 $restricted = $restricted|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0.0;
 var $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = sp + 8|0;
 HEAPF64[$0>>3] = $vii;
 HEAP32[$1>>2] = $restricted;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = +HEAPF64[$0>>3];
  $5 = (+Math_abs((+$4)));
  $6 = $5 < 1.00000000000000007154E-17;
  $7 = +HEAPF64[$0>>3];
  $8 = $6 ? 0.0 : $7;
  HEAPF64[$0>>3] = $8;
 }
 $9 = +HEAPF64[$0>>3];
 $10 = $9 == 1.79769313486231570815E+308;
 if ($10) {
  $24 = 1.79769313486231570815E+308;
  STACKTOP = sp;return (+$24);
 }
 $11 = +HEAPF64[$0>>3];
 $12 = (___DOUBLE_BITS4612($11)|0);
 $13 = tempRet0;
 $14 = $13 & 2147483647;
 $15 = ($14>>>0)<(2146435072);
 $16 = ($14|0)==(2146435072);
 $17 = ($12>>>0)<(0);
 $18 = $16 & $17;
 $19 = $15 | $18;
 if (!($19)) {
  $24 = 1.79769313486231570815E+308;
  STACKTOP = sp;return (+$24);
 }
 $20 = +HEAPF64[$0>>3];
 $21 = $20 < 0.0;
 if ($21) {
  $24 = 1.79769313486231570815E+308;
  STACKTOP = sp;return (+$24);
 }
 $22 = +HEAPF64[$0>>3];
 $23 = (+Math_sqrt((+$22)));
 $24 = $23;
 STACKTOP = sp;return (+$24);
}
function _gretl_model_get_vcv($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i = 0, $k = 0, $k2 = 0, $special = 0, $varname = 0, $vcv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $varname = sp + 32|0;
 $i = sp + 16|0;
 $k = sp + 12|0;
 $special = sp + 8|0;
 $vcv = sp + 4|0;
 $k2 = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$k>>2] = $5;
 HEAP32[$special>>2] = 0;
 $6 = (_vmatrix_new()|0);
 HEAP32[$vcv>>2] = $6;
 $7 = HEAP32[$vcv>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$0>>2] = 0;
  $102 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($102|0);
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(91);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = (($13) + 60|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) - 1)|0;
  HEAP32[$k2>>2] = $17;
  $18 = HEAP32[$k>>2]|0;
  $19 = HEAP32[$k2>>2]|0;
  $20 = ($18|0)>($19|0);
  if ($20) {
   $21 = HEAP32[$k2>>2]|0;
   HEAP32[$k>>2] = $21;
   HEAP32[$special>>2] = 1;
  }
 }
 $22 = HEAP32[$k>>2]|0;
 $23 = (_strings_array_new($22)|0);
 $24 = HEAP32[$vcv>>2]|0;
 $25 = (($24) + 20|0);
 HEAP32[$25>>2] = $23;
 $26 = HEAP32[$vcv>>2]|0;
 $27 = (($26) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $30 = HEAP32[$vcv>>2]|0;
  _free($30);
  HEAP32[$0>>2] = 0;
  $102 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($102|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $31 = HEAP32[$i>>2]|0;
  $32 = HEAP32[$k>>2]|0;
  $33 = ($31|0)<($32|0);
  $34 = HEAP32[$1>>2]|0;
  if (!($33)) {
   break;
  }
  $35 = HEAP32[$2>>2]|0;
  $36 = HEAP32[$i>>2]|0;
  (_gretl_model_get_param_name($34,$35,$36,$varname)|0);
  $37 = (_gretl_strdup($varname)|0);
  $38 = HEAP32[$i>>2]|0;
  $39 = HEAP32[$vcv>>2]|0;
  $40 = (($39) + 20|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<2)|0);
  HEAP32[$42>>2] = $37;
  $43 = HEAP32[$i>>2]|0;
  $44 = HEAP32[$vcv>>2]|0;
  $45 = (($44) + 20|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + ($43<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0|0);
  if ($49) {
   label = 11;
   break;
  }
  $51 = HEAP32[$i>>2]|0;
  $52 = (($51) + 1)|0;
  HEAP32[$i>>2] = $52;
 }
 if ((label|0) == 11) {
  $50 = HEAP32[$vcv>>2]|0;
  _free_vmatrix($50);
  HEAP32[$0>>2] = 0;
  $102 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($102|0);
 }
 $53 = (($34) + 96|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0|0);
 if ($55) {
  $56 = HEAP32[$1>>2]|0;
  $57 = HEAP32[$1>>2]|0;
  $58 = (($57) + 120|0);
  $59 = +HEAPF64[$58>>3];
  $60 = (_makevcv($56,$59)|0);
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = HEAP32[$vcv>>2]|0;
   _free_vmatrix($62);
   HEAP32[$0>>2] = 0;
   $102 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($102|0);
  }
 }
 $63 = HEAP32[$special>>2]|0;
 $64 = ($63|0)!=(0);
 $65 = HEAP32[$1>>2]|0;
 if ($64) {
  $66 = (_copy_vcv_subset($65)|0);
  $67 = HEAP32[$vcv>>2]|0;
  $68 = (($67) + 24|0);
  HEAP32[$68>>2] = $66;
 } else {
  $69 = (($65) + 96|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = HEAP32[$k>>2]|0;
  $72 = HEAP32[$k>>2]|0;
  $73 = (($72) + 1)|0;
  $74 = Math_imul($71, $73)|0;
  $75 = (($74|0) / 2)&-1;
  $76 = (_copyvec($70,$75)|0);
  $77 = HEAP32[$vcv>>2]|0;
  $78 = (($77) + 24|0);
  HEAP32[$78>>2] = $76;
 }
 $79 = HEAP32[$vcv>>2]|0;
 $80 = (($79) + 24|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)==(0|0);
 if ($82) {
  $83 = HEAP32[$vcv>>2]|0;
  _free_vmatrix($83);
  HEAP32[$0>>2] = 0;
  $102 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($102|0);
 } else {
  $84 = HEAP32[$1>>2]|0;
  $85 = (($84) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = HEAP32[$vcv>>2]|0;
  HEAP32[$87>>2] = $86;
  $88 = HEAP32[$k>>2]|0;
  $89 = HEAP32[$vcv>>2]|0;
  $90 = (($89) + 4|0);
  HEAP32[$90>>2] = $88;
  $91 = HEAP32[$1>>2]|0;
  $92 = (($91) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = HEAP32[$vcv>>2]|0;
  $95 = (($94) + 8|0);
  HEAP32[$95>>2] = $93;
  $96 = HEAP32[$1>>2]|0;
  $97 = (($96) + 20|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = HEAP32[$vcv>>2]|0;
  $100 = (($99) + 12|0);
  HEAP32[$100>>2] = $98;
  $101 = HEAP32[$vcv>>2]|0;
  HEAP32[$0>>2] = $101;
  $102 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($102|0);
 }
 return 0|0;
}
function _copy_vcv_subset($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $V = 0, $i = 0, $j = 0, $k = 0, $n = 0, $nc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $V = sp + 20|0;
 $nc = sp + 16|0;
 $k = sp + 12|0;
 $n = sp + 8|0;
 $i = sp + 4|0;
 $j = sp;
 HEAP32[$1>>2] = $pmod;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$nc>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - 1)|0;
 HEAP32[$k>>2] = $9;
 $10 = HEAP32[$k>>2]|0;
 $11 = HEAP32[$k>>2]|0;
 $12 = (($11) + 1)|0;
 $13 = Math_imul($10, $12)|0;
 $14 = (($13|0) / 2)&-1;
 HEAP32[$n>>2] = $14;
 $15 = HEAP32[$n>>2]|0;
 $16 = $15<<3;
 $17 = (_malloc($16)|0);
 HEAP32[$V>>2] = $17;
 $18 = HEAP32[$V>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  HEAP32[$0>>2] = 0;
  $45 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $20 = HEAP32[$i>>2]|0;
  $21 = HEAP32[$k>>2]|0;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  HEAP32[$j>>2] = 0;
  while(1) {
   $23 = HEAP32[$j>>2]|0;
   $24 = HEAP32[$i>>2]|0;
   $25 = ($23|0)<=($24|0);
   $26 = HEAP32[$i>>2]|0;
   if (!($25)) {
    break;
   }
   $27 = HEAP32[$j>>2]|0;
   $28 = HEAP32[$nc>>2]|0;
   $29 = (_ijton($26,$27,$28)|0);
   $30 = HEAP32[$1>>2]|0;
   $31 = (($30) + 96|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($29<<3)|0);
   $34 = +HEAPF64[$33>>3];
   $35 = HEAP32[$i>>2]|0;
   $36 = HEAP32[$j>>2]|0;
   $37 = HEAP32[$k>>2]|0;
   $38 = (_ijton($35,$36,$37)|0);
   $39 = HEAP32[$V>>2]|0;
   $40 = (($39) + ($38<<3)|0);
   HEAPF64[$40>>3] = $34;
   $41 = HEAP32[$j>>2]|0;
   $42 = (($41) + 1)|0;
   HEAP32[$j>>2] = $42;
  }
  $43 = (($26) + 1)|0;
  HEAP32[$i>>2] = $43;
 }
 $44 = HEAP32[$V>>2]|0;
 HEAP32[$0>>2] = $44;
 $45 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($45|0);
}
function _gretl_model_destroy_data_item($pmod,$key) {
 $pmod = $pmod|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $key;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_discard_model_data_item($2,$3,1)|0);
 STACKTOP = sp;return ($4|0);
}
function _discard_model_data_item($pmod,$key,$free_data) {
 $pmod = $pmod|0;
 $key = $key|0;
 $free_data = $free_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0;
 var $items = 0, $junk = 0, $n_items = 0, $targ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $junk = sp + 20|0;
 $i = sp + 16|0;
 $targ = sp + 12|0;
 $err = sp + 8|0;
 $n_items = sp + 4|0;
 $items = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $key;
 HEAP32[$2>>2] = $free_data;
 HEAP32[$junk>>2] = 0;
 HEAP32[$targ>>2] = 0;
 HEAP32[$err>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 260|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP32[$i>>2]|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 264|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($9<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (_strcmp($8,$15)|0);
  $17 = ($16|0)!=(0);
  $18 = HEAP32[$i>>2]|0;
  if (!($17)) {
   label = 4;
   break;
  }
  $25 = (($18) + 1)|0;
  HEAP32[$i>>2] = $25;
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 264|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$junk>>2] = $23;
  $24 = HEAP32[$i>>2]|0;
  HEAP32[$targ>>2] = $24;
 }
 $26 = HEAP32[$junk>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  HEAP32[$err>>2] = 1;
  $77 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($77|0);
 }
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + 260|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) - 1)|0;
 HEAP32[$n_items>>2] = $31;
 $32 = HEAP32[$n_items>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 264|0);
  $36 = HEAP32[$35>>2]|0;
  _free($36);
  $37 = HEAP32[$0>>2]|0;
  $38 = (($37) + 264|0);
  HEAP32[$38>>2] = 0;
 } else {
  $39 = HEAP32[$targ>>2]|0;
  HEAP32[$i>>2] = $39;
  while(1) {
   $40 = HEAP32[$i>>2]|0;
   $41 = HEAP32[$n_items>>2]|0;
   $42 = ($40|0)<($41|0);
   if (!($42)) {
    break;
   }
   $43 = HEAP32[$i>>2]|0;
   $44 = (($43) + 1)|0;
   $45 = HEAP32[$0>>2]|0;
   $46 = (($45) + 264|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($44<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP32[$i>>2]|0;
   $51 = HEAP32[$0>>2]|0;
   $52 = (($51) + 264|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + ($50<<2)|0);
   HEAP32[$54>>2] = $49;
   $55 = HEAP32[$i>>2]|0;
   $56 = (($55) + 1)|0;
   HEAP32[$i>>2] = $56;
  }
  $57 = HEAP32[$0>>2]|0;
  $58 = (($57) + 264|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = HEAP32[$n_items>>2]|0;
  $61 = $60<<2;
  $62 = (_realloc($59,$61)|0);
  HEAP32[$items>>2] = $62;
  $63 = HEAP32[$items>>2]|0;
  $64 = ($63|0)!=(0|0);
  if ($64) {
   $65 = HEAP32[$items>>2]|0;
   $66 = HEAP32[$0>>2]|0;
   $67 = (($66) + 264|0);
   HEAP32[$67>>2] = $65;
  }
 }
 $68 = HEAP32[$0>>2]|0;
 $69 = (($68) + 260|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) - 1)|0;
 HEAP32[$69>>2] = $71;
 $72 = HEAP32[$2>>2]|0;
 $73 = ($72|0)!=(0);
 $74 = HEAP32[$junk>>2]|0;
 if ($73) {
  _free_model_data_item($74);
  $77 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($77|0);
 } else {
  $75 = HEAP32[$74>>2]|0;
  _free($75);
  $76 = HEAP32[$junk>>2]|0;
  _free($76);
  $77 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($77|0);
 }
 return 0|0;
}
function _gretl_model_detach_data_item($pmod,$key) {
 $pmod = $pmod|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $key;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_discard_model_data_item($2,$3,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _gretl_model_add_arinfo($pmod,$nterms) {
 $pmod = $pmod|0;
 $nterms = $nterms|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $nterms;
 $3 = (_malloc(12)|0);
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 224|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 224|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  HEAP32[$0>>2] = 1;
  $106 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($106|0);
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + 224|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$14>>2] = 0;
  $15 = HEAP32[$1>>2]|0;
  $16 = (($15) + 224|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 4|0);
  HEAP32[$18>>2] = 0;
  $19 = HEAP32[$1>>2]|0;
  $20 = (($19) + 224|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 8|0);
  HEAP32[$22>>2] = 0;
  HEAP32[$0>>2] = 0;
  $106 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($106|0);
 }
 $23 = HEAP32[$2>>2]|0;
 $24 = (_gretl_list_new($23)|0);
 $25 = HEAP32[$1>>2]|0;
 $26 = (($25) + 224|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$27>>2] = $24;
 $28 = HEAP32[$1>>2]|0;
 $29 = (($28) + 224|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $33 = HEAP32[$1>>2]|0;
  $34 = (($33) + 224|0);
  $35 = HEAP32[$34>>2]|0;
  _free($35);
  $36 = HEAP32[$1>>2]|0;
  $37 = (($36) + 224|0);
  HEAP32[$37>>2] = 0;
  HEAP32[$0>>2] = 1;
  $106 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($106|0);
 }
 $38 = HEAP32[$2>>2]|0;
 $39 = $38<<3;
 $40 = (_malloc($39)|0);
 $41 = HEAP32[$1>>2]|0;
 $42 = (($41) + 224|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 4|0);
 HEAP32[$44>>2] = $40;
 $45 = HEAP32[$1>>2]|0;
 $46 = (($45) + 224|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if ($50) {
  $51 = HEAP32[$1>>2]|0;
  $52 = (($51) + 224|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  _free($54);
  $55 = HEAP32[$1>>2]|0;
  $56 = (($55) + 224|0);
  $57 = HEAP32[$56>>2]|0;
  _free($57);
  $58 = HEAP32[$1>>2]|0;
  $59 = (($58) + 224|0);
  HEAP32[$59>>2] = 0;
  HEAP32[$0>>2] = 1;
  $106 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($106|0);
 }
 $60 = HEAP32[$2>>2]|0;
 $61 = $60<<3;
 $62 = (_malloc($61)|0);
 $63 = HEAP32[$1>>2]|0;
 $64 = (($63) + 224|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + 8|0);
 HEAP32[$66>>2] = $62;
 $67 = HEAP32[$1>>2]|0;
 $68 = (($67) + 224|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==(0|0);
 if ($72) {
  $73 = HEAP32[$1>>2]|0;
  $74 = (($73) + 224|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = HEAP32[$75>>2]|0;
  _free($76);
  $77 = HEAP32[$1>>2]|0;
  $78 = (($77) + 224|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  _free($81);
  $82 = HEAP32[$1>>2]|0;
  $83 = (($82) + 224|0);
  $84 = HEAP32[$83>>2]|0;
  _free($84);
  $85 = HEAP32[$1>>2]|0;
  $86 = (($85) + 224|0);
  HEAP32[$86>>2] = 0;
  HEAP32[$0>>2] = 1;
  $106 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($106|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $87 = HEAP32[$i>>2]|0;
  $88 = HEAP32[$2>>2]|0;
  $89 = ($87|0)<($88|0);
  if (!($89)) {
   break;
  }
  $90 = HEAP32[$i>>2]|0;
  $91 = HEAP32[$1>>2]|0;
  $92 = (($91) + 224|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + ($90<<3)|0);
  HEAPF64[$96>>3] = 1.79769313486231570815E+308;
  $97 = HEAP32[$i>>2]|0;
  $98 = HEAP32[$1>>2]|0;
  $99 = (($98) + 224|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + ($97<<3)|0);
  HEAPF64[$103>>3] = 1.79769313486231570815E+308;
  $104 = HEAP32[$i>>2]|0;
  $105 = (($104) + 1)|0;
  HEAP32[$i>>2] = $105;
 }
 HEAP32[$0>>2] = 0;
 $106 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($106|0);
}
function _gretl_model_init($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 44|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 20|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 16|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 24|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$1>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = HEAP32[$1>>2]|0;
  $22 = (($21) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$0>>2]|0;
  $25 = (($24) + 36|0);
  HEAP32[$25>>2] = $23;
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$0>>2]|0;
  $30 = (($29) + 36|0);
  $31 = (($30) + 4|0);
  HEAP32[$31>>2] = $28;
 } else {
  $32 = HEAP32[$0>>2]|0;
  $33 = (($32) + 36|0);
  HEAP32[$33>>2] = 0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 36|0);
  $36 = (($35) + 4|0);
  HEAP32[$36>>2] = 0;
 }
 $37 = HEAP32[$0>>2]|0;
 $38 = (($37) + 48|0);
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$0>>2]|0;
 $40 = (($39) + 248|0);
 HEAP32[$40>>2] = 0;
 $41 = HEAP32[$0>>2]|0;
 $42 = (($41) + 240|0);
 HEAP32[$42>>2] = 0;
 $43 = HEAP32[$0>>2]|0;
 $44 = (($43) + 228|0);
 HEAP32[$44>>2] = 0;
 $45 = HEAP32[$0>>2]|0;
 $46 = (($45) + 64|0);
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$0>>2]|0;
 $48 = (($47) + 68|0);
 HEAP32[$48>>2] = 0;
 $49 = HEAP32[$0>>2]|0;
 $50 = (($49) + 72|0);
 HEAP32[$50>>2] = 0;
 $51 = HEAP32[$0>>2]|0;
 _model_stats_init($51);
 $52 = HEAP32[$0>>2]|0;
 _gretl_model_init_pointers($52);
 $53 = HEAP32[$0>>2]|0;
 $54 = (($53) + 260|0);
 HEAP32[$54>>2] = 0;
 STACKTOP = sp;return;
}
function _model_stats_init($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 112|0);
 HEAPF64[$2>>3] = 1.79769313486231570815E+308;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 104|0);
 HEAPF64[$4>>3] = 1.79769313486231570815E+308;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 120|0);
 HEAPF64[$6>>3] = 1.79769313486231570815E+308;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 136|0);
 HEAPF64[$8>>3] = 1.79769313486231570815E+308;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 128|0);
 HEAPF64[$10>>3] = 1.79769313486231570815E+308;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 152|0);
 HEAPF64[$12>>3] = 1.79769313486231570815E+308;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 144|0);
 HEAPF64[$14>>3] = 1.79769313486231570815E+308;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 160|0);
 HEAPF64[$16>>3] = 1.79769313486231570815E+308;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 176|0);
 HEAPF64[$18>>3] = 1.79769313486231570815E+308;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 168|0);
 HEAPF64[$20>>3] = 1.79769313486231570815E+308;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 216|0);
 HEAPF64[$22>>3] = 1.79769313486231570815E+308;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 208|0);
 HEAPF64[$24>>3] = 1.79769313486231570815E+308;
 HEAP32[$i>>2] = 0;
 while(1) {
  $25 = HEAP32[$i>>2]|0;
  $26 = ($25|0)<(3);
  if (!($26)) {
   break;
  }
  $27 = HEAP32[$i>>2]|0;
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + 184|0);
  $30 = (($29) + ($27<<3)|0);
  HEAPF64[$30>>3] = 1.79769313486231570815E+308;
  $31 = HEAP32[$i>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$i>>2] = $32;
 }
 STACKTOP = sp;return;
}
function _gretl_model_init_pointers($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 60|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 28|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 76|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 80|0);
 HEAP32[$10>>2] = 0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 88|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 84|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 92|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 96|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 224|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 232|0);
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 236|0);
 HEAP32[$24>>2] = 0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 244|0);
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + 252|0);
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + 256|0);
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$0>>2]|0;
 $32 = (($31) + 264|0);
 HEAP32[$32>>2] = 0;
 STACKTOP = sp;return;
}
function _gretl_model_new() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $pmod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pmod = sp;
 $0 = (_malloc(272)|0);
 HEAP32[$pmod>>2] = $0;
 $1 = HEAP32[$pmod>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$pmod>>2]|0;
  _gretl_model_init($3,0);
 }
 $4 = HEAP32[$pmod>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _gretl_model_free($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 _clear_model($3);
 $4 = HEAP32[$0>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function _gretl_model_array_destroy($models,$n) {
 $models = $models|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $models;
 HEAP32[$1>>2] = $n;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $4 = HEAP32[$i>>2]|0;
  $5 = HEAP32[$1>>2]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  _clear_model($10);
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + ($11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  _free($14);
  $15 = HEAP32[$i>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$i>>2] = $16;
 }
 $17 = HEAP32[$0>>2]|0;
 _free($17);
 STACKTOP = sp;return;
}
function _clear_model($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $100 = HEAP32[$0>>2]|0;
  _gretl_model_init($100,0);
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  _free($16);
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 76|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = HEAP32[$0>>2]|0;
  $22 = (($21) + 76|0);
  $23 = HEAP32[$22>>2]|0;
  _free($23);
 }
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + 80|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + 80|0);
  $30 = HEAP32[$29>>2]|0;
  _free($30);
 }
 $31 = HEAP32[$0>>2]|0;
 $32 = (($31) + 88|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 88|0);
  $37 = HEAP32[$36>>2]|0;
  _free($37);
 }
 $38 = HEAP32[$0>>2]|0;
 $39 = (($38) + 84|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = HEAP32[$0>>2]|0;
  $43 = (($42) + 84|0);
  $44 = HEAP32[$43>>2]|0;
  _free($44);
 }
 $45 = HEAP32[$0>>2]|0;
 $46 = (($45) + 92|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = HEAP32[$0>>2]|0;
  $50 = (($49) + 92|0);
  $51 = HEAP32[$50>>2]|0;
  _free($51);
 }
 $52 = HEAP32[$0>>2]|0;
 $53 = (($52) + 96|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)!=(0|0);
 if ($55) {
  $56 = HEAP32[$0>>2]|0;
  $57 = (($56) + 96|0);
  $58 = HEAP32[$57>>2]|0;
  _free($58);
 }
 $59 = HEAP32[$0>>2]|0;
 $60 = (($59) + 232|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)!=(0|0);
 if ($62) {
  $63 = HEAP32[$0>>2]|0;
  $64 = (($63) + 232|0);
  $65 = HEAP32[$64>>2]|0;
  _free($65);
 }
 $66 = HEAP32[$0>>2]|0;
 $67 = (($66) + 236|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = HEAP32[$0>>2]|0;
  $71 = (($70) + 236|0);
  $72 = HEAP32[$71>>2]|0;
  _free($72);
 }
 $73 = HEAP32[$0>>2]|0;
 $74 = (($73) + 28|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)!=(0|0);
 if ($76) {
  $77 = HEAP32[$0>>2]|0;
  $78 = (($77) + 28|0);
  $79 = HEAP32[$78>>2]|0;
  _free_subsample_mask($79);
 }
 $80 = HEAP32[$0>>2]|0;
 $81 = (($80) + 224|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)!=(0|0);
 if ($83) {
  $84 = HEAP32[$0>>2]|0;
  _clear_ar_info($84);
 }
 $85 = HEAP32[$0>>2]|0;
 $86 = (($85) + 244|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)!=(0|0);
 if ($88) {
  $89 = HEAP32[$0>>2]|0;
  $90 = (($89) + 244|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = HEAP32[$0>>2]|0;
  $93 = (($92) + 240|0);
  $94 = HEAP32[$93>>2]|0;
  _strings_array_free($91,$94);
 }
 $95 = HEAP32[$0>>2]|0;
 $96 = (($95) + 256|0);
 $97 = HEAP32[$96>>2]|0;
 _destroy_dataset($97);
 $98 = HEAP32[$0>>2]|0;
 _gretl_model_destroy_tests($98);
 $99 = HEAP32[$0>>2]|0;
 _destroy_all_data_items($99);
 $100 = HEAP32[$0>>2]|0;
 _gretl_model_init($100,0);
 STACKTOP = sp;return;
}
function _gretl_model_destroy_tests($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 248|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 248|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$i>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 252|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12<<6)|0);
  $17 = (($16) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = HEAP32[$i>>2]|0;
   $21 = HEAP32[$0>>2]|0;
   $22 = (($21) + 252|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($20<<6)|0);
   $25 = (($24) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   _free($26);
  }
  $27 = HEAP32[$i>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$i>>2] = $28;
 }
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + 252|0);
 $31 = HEAP32[$30>>2]|0;
 _free($31);
 $32 = HEAP32[$0>>2]|0;
 $33 = (($32) + 252|0);
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$0>>2]|0;
 $35 = (($34) + 248|0);
 HEAP32[$35>>2] = 0;
 STACKTOP = sp;return;
}
function _clear_ar_info($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 224|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 224|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  _free($9);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 224|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 224|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  _free($20);
 }
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 224|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $32 = HEAP32[$0>>2]|0;
  $33 = (($32) + 224|0);
  $34 = HEAP32[$33>>2]|0;
  _free($34);
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 224|0);
  HEAP32[$36>>2] = 0;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + 224|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 _free($31);
 $32 = HEAP32[$0>>2]|0;
 $33 = (($32) + 224|0);
 $34 = HEAP32[$33>>2]|0;
 _free($34);
 $35 = HEAP32[$0>>2]|0;
 $36 = (($35) + 224|0);
 HEAP32[$36>>2] = 0;
 STACKTOP = sp;return;
}
function _destroy_all_data_items($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 260|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 260|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 264|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  _free_model_data_item($15);
  $16 = HEAP32[$i>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$i>>2] = $17;
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 264|0);
 $20 = HEAP32[$19>>2]|0;
 _free($20);
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 264|0);
 HEAP32[$22>>2] = 0;
 STACKTOP = sp;return;
}
function _gretl_model_test_print($pmod,$i,$prn) {
 $pmod = $pmod|0;
 $i = $i|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $i;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)>=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 248|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)<($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = (_csv_format($10)|0);
 $12 = ($11|0)!=(0);
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 252|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($13<<6)|0);
 $18 = HEAP32[$2>>2]|0;
 if ($12) {
  _csv_print_test($17,$18);
  STACKTOP = sp;return;
 } else {
  _gretl_model_test_print_direct($17,1,$18);
  STACKTOP = sp;return;
 }
}
function _gretl_model_test_print_direct($test,$heading,$prn) {
 $test = $test|0;
 $heading = $heading|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $buf = 0, $pvstr = 0, $tstr = 0, $vararg_buffer39 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr28 = 0, $vararg_ptr35 = 0, $vararg_ptr42 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0;
 $vararg_buffer39 = sp + 8|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $tstr = sp + 24|0;
 $buf = sp + 40|0;
 $pvstr = sp + 20|0;
 $a = sp;
 HEAP32[$0>>2] = $test;
 HEAP32[$1>>2] = $heading;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$2>>2]|0;
 _set_alt_gettext_mode($3);
 $4 = HEAP32[$2>>2]|0;
 $5 = (_rtf_format($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  (_pputs($7,14960)|0);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $11 = HEAP32[$2>>2]|0;
  (_gretl_test_print_heading($10,$11)|0);
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 _gretl_test_print_h_0($12,$13,$14);
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 12|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)==(8);
 if ($19) {
  $25 = 1;
 } else {
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 12|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)==(10);
  $25 = $24;
 }
 $26 = $25 ? 14976 : 15008;
 HEAP32[$tstr>>2] = $26;
 $27 = HEAP32[$0>>2]|0;
 $28 = HEAP32[$2>>2]|0;
 _get_test_stat_string($27,$buf,$28);
 $29 = HEAP32[$2>>2]|0;
 $30 = (_plain_format($29)|0);
 $31 = ($30|0)!=(0);
 $32 = HEAP32[$2>>2]|0;
 do {
  if ($31) {
   $33 = HEAP32[$tstr>>2]|0;
   HEAP32[$vararg_buffer39>>2] = $33;
   $vararg_ptr1 = (($vararg_buffer39) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $buf;
   (_pprintf($32,15024,$vararg_buffer39)|0);
  } else {
   $34 = (_tex_format($32)|0);
   $35 = ($34|0)!=(0);
   $36 = HEAP32[$2>>2]|0;
   if ($35) {
    $37 = HEAP32[$tstr>>2]|0;
    HEAP32[$vararg_buffer39>>2] = $37;
    $vararg_ptr5 = (($vararg_buffer39) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $buf;
    (_pprintf($36,15040,$vararg_buffer39)|0);
    break;
   }
   $38 = (_rtf_format($36)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    $40 = HEAP32[$2>>2]|0;
    $41 = HEAP32[$tstr>>2]|0;
    HEAP32[$vararg_buffer39>>2] = $41;
    $vararg_ptr9 = (($vararg_buffer39) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $buf;
    (_pprintf($40,15064,$vararg_buffer39)|0);
   }
  }
 } while(0);
 $42 = HEAP32[$0>>2]|0;
 $43 = HEAP32[$2>>2]|0;
 _get_test_pval_string($42,$buf,$43);
 $44 = HEAP8[$buf>>0]|0;
 $45 = $44 << 24 >> 24;
 $46 = ($45|0)!=(0);
 $47 = HEAP32[$0>>2]|0;
 if ($46) {
  $48 = (($47) + 12|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = ($50|0)==(9);
  $52 = $51 ? 15088 : 15112;
  HEAP32[$pvstr>>2] = $52;
  $53 = HEAP32[$2>>2]|0;
  $54 = (_plain_format($53)|0);
  $55 = ($54|0)!=(0);
  $56 = HEAP32[$2>>2]|0;
  if ($55) {
   $57 = HEAP32[$pvstr>>2]|0;
   HEAP32[$vararg_buffer39>>2] = $57;
   $vararg_ptr13 = (($vararg_buffer39) + 4|0);
   HEAP32[$vararg_ptr13>>2] = $buf;
   (_pprintf($56,15128,$vararg_buffer39)|0);
   STACKTOP = sp;return;
  }
  $58 = (_tex_format($56)|0);
  $59 = ($58|0)!=(0);
  $60 = HEAP32[$2>>2]|0;
  if ($59) {
   $61 = HEAP32[$pvstr>>2]|0;
   HEAP32[$vararg_buffer39>>2] = $61;
   $vararg_ptr17 = (($vararg_buffer39) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $buf;
   (_pprintf($60,15144,$vararg_buffer39)|0);
   STACKTOP = sp;return;
  }
  $62 = (_rtf_format($60)|0);
  $63 = ($62|0)!=(0);
  if (!($63)) {
   STACKTOP = sp;return;
  }
  $64 = HEAP32[$2>>2]|0;
  $65 = HEAP32[$pvstr>>2]|0;
  HEAP32[$vararg_buffer39>>2] = $65;
  $vararg_ptr21 = (($vararg_buffer39) + 4|0);
  HEAP32[$vararg_ptr21>>2] = $buf;
  (_pprintf($64,15168,$vararg_buffer39)|0);
  STACKTOP = sp;return;
 }
 $66 = (($47) + 40|0);
 $67 = +HEAPF64[$66>>3];
 $68 = $67 == 1.79769313486231570815E+308;
 if (!($68)) {
  $69 = HEAP32[$0>>2]|0;
  $70 = (($69) + 48|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $71 == 1.79769313486231570815E+308;
  if (!($72)) {
   $73 = HEAP32[$0>>2]|0;
   $74 = (($73) + 48|0);
   $75 = +HEAPF64[$74>>3];
   $76 = $75 * 100.0;
   HEAPF64[$a>>3] = $76;
   $77 = HEAP32[$2>>2]|0;
   $78 = (_plain_format($77)|0);
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = +HEAPF64[$a>>3];
    HEAPF64[tempDoublePtr>>3]=$80;HEAP32[$vararg_buffer39>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer39+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($buf,15184,$vararg_buffer39)|0);
    $81 = HEAP32[$2>>2]|0;
    $82 = HEAP32[$0>>2]|0;
    $83 = (($82) + 40|0);
    $84 = +HEAPF64[$83>>3];
    HEAP32[$vararg_buffer39>>2] = $buf;
    $vararg_ptr28 = (($vararg_buffer39) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$84;HEAP32[$vararg_ptr28>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr28+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($81,15216,$vararg_buffer39)|0);
    STACKTOP = sp;return;
   }
   $85 = HEAP32[$2>>2]|0;
   $86 = (_tex_format($85)|0);
   $87 = ($86|0)!=(0);
   if ($87) {
    $88 = +HEAPF64[$a>>3];
    HEAPF64[tempDoublePtr>>3]=$88;HEAP32[$vararg_buffer39>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer39+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($buf,15184,$vararg_buffer39)|0);
    $89 = HEAP32[$2>>2]|0;
    $90 = HEAP32[$0>>2]|0;
    $91 = (($90) + 40|0);
    $92 = +HEAPF64[$91>>3];
    HEAP32[$vararg_buffer39>>2] = $buf;
    $vararg_ptr35 = (($vararg_buffer39) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$92;HEAP32[$vararg_ptr35>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr35+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($89,15232,$vararg_buffer39)|0);
    STACKTOP = sp;return;
   }
   $93 = HEAP32[$2>>2]|0;
   $94 = (_rtf_format($93)|0);
   $95 = ($94|0)!=(0);
   if (!($95)) {
    STACKTOP = sp;return;
   }
   $96 = +HEAPF64[$a>>3];
   HEAPF64[tempDoublePtr>>3]=$96;HEAP32[$vararg_buffer39>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer39+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($buf,15184,$vararg_buffer39)|0);
   $97 = HEAP32[$2>>2]|0;
   $98 = HEAP32[$0>>2]|0;
   $99 = (($98) + 40|0);
   $100 = +HEAPF64[$99>>3];
   HEAP32[$vararg_buffer39>>2] = $buf;
   $vararg_ptr42 = (($vararg_buffer39) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$100;HEAP32[$vararg_ptr42>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr42+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($97,15256,$vararg_buffer39)|0);
   STACKTOP = sp;return;
  }
 }
 $101 = HEAP32[$2>>2]|0;
 (_pputc($101,10)|0);
 STACKTOP = sp;return;
}
function _gretl_test_print_heading($test,$prn) {
 $test = $test|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $descrip = 0, $ordstr = 0, $param = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer4 = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $descrip = sp + 8|0;
 $param = sp + 4|0;
 $ordstr = sp + 24|0;
 HEAP32[$1>>2] = $test;
 HEAP32[$2>>2] = $prn;
 HEAP32[$param>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_test_get_descrip($3)|0);
 HEAP32[$descrip>>2] = $4;
 $5 = HEAP32[$descrip>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  HEAP32[$0>>2] = 1;
  $43 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($43|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(0);
 do {
  if ($10) {
   $11 = HEAP32[$1>>2]|0;
   $12 = (($11) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $13;
   (_sprintf($ordstr,15288,$vararg_buffer4)|0);
   HEAP32[$param>>2] = $ordstr;
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(3);
   if (!($16)) {
    $17 = HEAP32[$1>>2]|0;
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(21);
    if (!($19)) {
     break;
    }
   }
   $20 = HEAP32[$1>>2]|0;
   $21 = (($20) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$param>>2] = $22;
  }
 } while(0);
 $23 = HEAP32[$param>>2]|0;
 $24 = ($23|0)!=(0|0);
 $25 = HEAP32[$2>>2]|0;
 $26 = (_plain_format($25)|0);
 $27 = ($26|0)!=(0);
 $28 = HEAP32[$2>>2]|0;
 do {
  if ($24) {
   if ($27) {
    $29 = HEAP32[$descrip>>2]|0;
    $30 = HEAP32[$param>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $30;
    (_pprintf($28,$29,$vararg_buffer4)|0);
    break;
   } else {
    (_tex_format($28)|0);
    $31 = HEAP32[$2>>2]|0;
    $32 = HEAP32[$descrip>>2]|0;
    $33 = HEAP32[$param>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $33;
    (_pprintf($31,$32,$vararg_buffer4)|0);
    break;
   }
  } else {
   if ($27) {
    $34 = HEAP32[$descrip>>2]|0;
    (_pputs($28,$34)|0);
    break;
   } else {
    (_tex_format($28)|0);
    $35 = HEAP32[$2>>2]|0;
    $36 = HEAP32[$descrip>>2]|0;
    (_pputs($35,$36)|0);
    break;
   }
  }
 } while(0);
 $37 = HEAP32[$1>>2]|0;
 $38 = (($37) + 56|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = HEAP32[$1>>2]|0;
  $42 = HEAP32[$2>>2]|0;
  _print_test_opt($41,$42);
 }
 HEAP32[$0>>2] = 0;
 $43 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($43|0);
}
function _gretl_test_print_h_0($test,$heading,$prn) {
 $test = $test|0;
 $heading = $heading|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $H0 = 0, $i = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $H0 = sp + 8|0;
 $i = sp + 4|0;
 HEAP32[$0>>2] = $test;
 HEAP32[$1>>2] = $heading;
 HEAP32[$2>>2] = $prn;
 HEAP32[$H0>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $3 = HEAP32[$i>>2]|0;
  $4 = (15560 + (($3*12)|0)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5>>>0)<(26);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$0>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$i>>2]|0;
  $10 = (15560 + (($9*12)|0)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)==($11|0);
  if ($12) {
   $13 = HEAP32[$i>>2]|0;
   $14 = (15560 + (($13*12)|0)|0);
   $15 = (($14) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$H0>>2] = $16;
  }
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[$H0>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = HEAP32[$0>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(25);
  if ($23) {
   STACKTOP = sp;return;
  }
 }
 $24 = HEAP32[$1>>2]|0;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = HEAP32[$2>>2]|0;
  (_pputs($26,17952)|0);
  $27 = HEAP32[$2>>2]|0;
  $28 = (_tex_format($27)|0);
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = HEAP32[$2>>2]|0;
   (_pputc($30,45)|0);
  }
 }
 $31 = HEAP32[$H0>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$2>>2]|0;
 $34 = (_plain_format($33)|0);
 $35 = ($34|0)!=(0);
 $36 = HEAP32[$2>>2]|0;
 do {
  if ($35) {
   HEAP32[$vararg_buffer4>>2] = 17968;
   (_pprintf($36,17960,$vararg_buffer4)|0);
   $37 = HEAP32[$2>>2]|0;
   $38 = HEAP32[$H0>>2]|0;
   (_pputs($37,$38)|0);
  } else {
   $39 = (_tex_format($36)|0);
   $40 = ($39|0)!=(0);
   $41 = HEAP32[$2>>2]|0;
   if (!($40)) {
    $47 = (_rtf_format($41)|0);
    $48 = ($47|0)!=(0);
    if (!($48)) {
     break;
    }
    $49 = HEAP32[$2>>2]|0;
    HEAP32[$vararg_buffer4>>2] = 17968;
    (_pprintf($49,18016,$vararg_buffer4)|0);
    $50 = HEAP32[$2>>2]|0;
    $51 = HEAP32[$H0>>2]|0;
    (_pputs($50,$51)|0);
    break;
   }
   HEAP32[$vararg_buffer4>>2] = 17968;
   (_pprintf($41,17984,$vararg_buffer4)|0);
   $42 = HEAP32[$H0>>2]|0;
   $43 = (_strcmp($42,17312)|0);
   $44 = ($43|0)!=(0);
   $45 = HEAP32[$2>>2]|0;
   if ($44) {
    $46 = HEAP32[$H0>>2]|0;
    (_pputs($45,$46)|0);
    break;
   } else {
    (_pputs($45,18000)|0);
    break;
   }
  }
 } while(0);
 $52 = HEAP32[$0>>2]|0;
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0);
 if (!($54)) {
  $55 = HEAP32[$0>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(9);
  if (!($57)) {
   STACKTOP = sp;return;
  }
 }
 $58 = HEAP32[$0>>2]|0;
 $59 = (($58) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = HEAP32[$2>>2]|0;
 (_print_add_omit_varnames($60,$61)|0);
 STACKTOP = sp;return;
}
function _get_test_stat_string($test,$str,$prn) {
 $test = $test|0;
 $str = $str|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $8 = 0, $9 = 0, $tex = 0;
 var $vararg_buffer60 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr38 = 0, $vararg_ptr4 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr5 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer60 = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $tex = sp + 16|0;
 HEAP32[$0>>2] = $test;
 HEAP32[$1>>2] = $str;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_tex_format($3)|0);
 HEAP32[$tex>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 switch ($8|0) {
 case 6: case 3:  {
  $13 = HEAP32[$tex>>2]|0;
  $14 = ($13|0)!=(0);
  $15 = HEAP32[$1>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 24|0);
  $24 = +HEAPF64[$23>>3];
  if ($14) {
   HEAP32[$vararg_buffer60>>2] = $18;
   $vararg_ptr4 = (($vararg_buffer60) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $21;
   $vararg_ptr5 = (($vararg_buffer60) + 8|0);
   HEAPF64[tempDoublePtr>>3]=$24;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($15,17600,$vararg_buffer60)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer60>>2] = $18;
   $vararg_ptr9 = (($vararg_buffer60) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $21;
   $vararg_ptr10 = (($vararg_buffer60) + 8|0);
   HEAPF64[tempDoublePtr>>3]=$24;HEAP32[$vararg_ptr10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr10+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($15,17624,$vararg_buffer60)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  $50 = HEAP32[$tex>>2]|0;
  $51 = ($50|0)!=(0);
  $52 = HEAP32[$1>>2]|0;
  $53 = HEAP32[$0>>2]|0;
  $54 = (($53) + 24|0);
  $55 = +HEAPF64[$54>>3];
  if ($51) {
   HEAPF64[tempDoublePtr>>3]=$55;HEAP32[$vararg_buffer60>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer60+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($52,17792,$vararg_buffer60)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer60>>2] = 17432;
   $vararg_ptr38 = (($vararg_buffer60) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$55;HEAP32[$vararg_ptr38>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr38+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($52,17816,$vararg_buffer60)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 10:  {
  $72 = HEAP32[$tex>>2]|0;
  $73 = ($72|0)!=(0);
  $74 = HEAP32[$1>>2]|0;
  $75 = HEAP32[$0>>2]|0;
  $76 = (($75) + 24|0);
  $77 = +HEAPF64[$76>>3];
  if ($73) {
   HEAPF64[tempDoublePtr>>3]=$77;HEAP32[$vararg_buffer60>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer60+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($74,17928,$vararg_buffer60)|0);
   STACKTOP = sp;return;
  } else {
   HEAPF64[tempDoublePtr>>3]=$77;HEAP32[$vararg_buffer60>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer60+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($74,17944,$vararg_buffer60)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 2:  {
  $9 = HEAP32[$1>>2]|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 24|0);
  $12 = +HEAPF64[$11>>3];
  HEAPF64[tempDoublePtr>>3]=$12;HEAP32[$vararg_buffer60>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer60+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($9,17592,$vararg_buffer60)|0);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $41 = HEAP32[$tex>>2]|0;
  $42 = ($41|0)!=(0);
  $43 = HEAP32[$1>>2]|0;
  $44 = HEAP32[$0>>2]|0;
  $45 = (($44) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$0>>2]|0;
  $48 = (($47) + 24|0);
  $49 = +HEAPF64[$48>>3];
  if ($42) {
   HEAP32[$vararg_buffer60>>2] = $46;
   $vararg_ptr27 = (($vararg_buffer60) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$49;HEAP32[$vararg_ptr27>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr27+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($43,17728,$vararg_buffer60)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer60>>2] = $46;
   $vararg_ptr31 = (($vararg_buffer60) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$49;HEAP32[$vararg_ptr31>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr31+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($43,17760,$vararg_buffer60)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 9:  {
  $25 = HEAP32[$tex>>2]|0;
  $26 = ($25|0)!=(0);
  $27 = HEAP32[$1>>2]|0;
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + 24|0);
  $33 = +HEAPF64[$32>>3];
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  if ($26) {
   HEAP32[$vararg_buffer60>>2] = $30;
   $vararg_ptr14 = (($vararg_buffer60) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$33;HEAP32[$vararg_ptr14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr14+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr15 = (($vararg_buffer60) + 12|0);
   HEAP32[$vararg_ptr15>>2] = $36;
   (_sprintf($27,17640,$vararg_buffer60)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer60>>2] = $30;
   $vararg_ptr19 = (($vararg_buffer60) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$33;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr20 = (($vararg_buffer60) + 12|0);
   HEAP32[$vararg_ptr20>>2] = $36;
   (_sprintf($27,17672,$vararg_buffer60)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 11: case 8: case 7:  {
  $56 = HEAP32[$tex>>2]|0;
  $57 = ($56|0)!=(0);
  $58 = HEAP32[$0>>2]|0;
  $59 = (($58) + 24|0);
  $60 = +HEAPF64[$59>>3];
  $61 = $60 == 1.79769313486231570815E+308;
  $62 = HEAP32[$1>>2]|0;
  $63 = HEAP32[$0>>2]|0;
  $64 = (($63) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  if ($57) {
   if ($61) {
    HEAP32[$vararg_buffer60>>2] = $65;
    $vararg_ptr42 = (($vararg_buffer60) + 4|0);
    HEAP32[$vararg_ptr42>>2] = 17856;
    (_sprintf($62,17832,$vararg_buffer60)|0);
    STACKTOP = sp;return;
   } else {
    $66 = HEAP32[$0>>2]|0;
    $67 = (($66) + 24|0);
    $68 = +HEAPF64[$67>>3];
    HEAP32[$vararg_buffer60>>2] = $65;
    $vararg_ptr46 = (($vararg_buffer60) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$68;HEAP32[$vararg_ptr46>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr46+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($62,17864,$vararg_buffer60)|0);
    STACKTOP = sp;return;
   }
  } else {
   if ($61) {
    HEAP32[$vararg_buffer60>>2] = 17432;
    $vararg_ptr50 = (($vararg_buffer60) + 4|0);
    HEAP32[$vararg_ptr50>>2] = $65;
    $vararg_ptr51 = (($vararg_buffer60) + 8|0);
    HEAP32[$vararg_ptr51>>2] = 17856;
    (_sprintf($62,17888,$vararg_buffer60)|0);
    STACKTOP = sp;return;
   } else {
    $69 = HEAP32[$0>>2]|0;
    $70 = (($69) + 24|0);
    $71 = +HEAPF64[$70>>3];
    HEAP32[$vararg_buffer60>>2] = 17432;
    $vararg_ptr55 = (($vararg_buffer60) + 4|0);
    HEAP32[$vararg_ptr55>>2] = $65;
    $vararg_ptr56 = (($vararg_buffer60) + 8|0);
    HEAPF64[tempDoublePtr>>3]=$71;HEAP32[$vararg_ptr56>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr56+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($62,17912,$vararg_buffer60)|0);
    STACKTOP = sp;return;
   }
  }
  break;
 }
 case 4:  {
  $37 = HEAP32[$1>>2]|0;
  $38 = HEAP32[$0>>2]|0;
  $39 = (($38) + 24|0);
  $40 = +HEAPF64[$39>>3];
  HEAPF64[tempDoublePtr>>3]=$40;HEAP32[$vararg_buffer60>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer60+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($37,17712,$vararg_buffer60)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $78 = HEAP32[$1>>2]|0;
  HEAP8[$78>>0] = 0;
  STACKTOP = sp;return;
 }
 }
}
function _get_test_pval_string($test,$str,$prn) {
 $test = $test|0;
 $str = $str|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $8 = 0, $9 = 0, $tex = 0, $vararg_buffer43 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer43 = sp;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $tex = sp + 24|0;
 HEAP32[$0>>2] = $test;
 HEAP32[$1>>2] = $str;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_tex_format($3)|0);
 HEAP32[$tex>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 switch ($8|0) {
 case 6: case 3:  {
  $21 = HEAP32[$tex>>2]|0;
  $22 = ($21|0)!=(0);
  $23 = HEAP32[$1>>2]|0;
  $24 = HEAP32[$0>>2]|0;
  $25 = (($24) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$0>>2]|0;
  $28 = (($27) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$0>>2]|0;
  $31 = (($30) + 24|0);
  $32 = +HEAPF64[$31>>3];
  $33 = HEAP32[$0>>2]|0;
  $34 = (($33) + 32|0);
  $35 = +HEAPF64[$34>>3];
  if ($22) {
   HEAP32[$vararg_buffer43>>2] = $26;
   $vararg_ptr12 = (($vararg_buffer43) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $29;
   $vararg_ptr13 = (($vararg_buffer43) + 8|0);
   HEAPF64[tempDoublePtr>>3]=$32;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr14 = (($vararg_buffer43) + 16|0);
   HEAPF64[tempDoublePtr>>3]=$35;HEAP32[$vararg_ptr14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr14+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($23,17448,$vararg_buffer43)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer43>>2] = $26;
   $vararg_ptr18 = (($vararg_buffer43) + 4|0);
   HEAP32[$vararg_ptr18>>2] = $29;
   $vararg_ptr19 = (($vararg_buffer43) + 8|0);
   HEAPF64[tempDoublePtr>>3]=$32;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr20 = (($vararg_buffer43) + 16|0);
   HEAPF64[tempDoublePtr>>3]=$35;HEAP32[$vararg_ptr20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr20+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($23,17480,$vararg_buffer43)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 2:  {
  $9 = HEAP32[$tex>>2]|0;
  $10 = ($9|0)!=(0);
  $11 = HEAP32[$1>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$0>>2]|0;
  $16 = (($15) + 24|0);
  $17 = +HEAPF64[$16>>3];
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + 32|0);
  $20 = +HEAPF64[$19>>3];
  if ($10) {
   HEAP32[$vararg_buffer43>>2] = $14;
   $vararg_ptr1 = (($vararg_buffer43) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr2 = (($vararg_buffer43) + 12|0);
   HEAPF64[tempDoublePtr>>3]=$20;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($11,17376,$vararg_buffer43)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer43>>2] = 17432;
   $vararg_ptr6 = (($vararg_buffer43) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $14;
   $vararg_ptr7 = (($vararg_buffer43) + 8|0);
   HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_ptr7>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr7+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr8 = (($vararg_buffer43) + 16|0);
   HEAPF64[tempDoublePtr>>3]=$20;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($11,17408,$vararg_buffer43)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 5:  {
  $51 = HEAP32[$tex>>2]|0;
  $52 = ($51|0)!=(0);
  $53 = HEAP32[$1>>2]|0;
  $54 = HEAP32[$0>>2]|0;
  $55 = (($54) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$0>>2]|0;
  $58 = (($57) + 24|0);
  $59 = +HEAPF64[$58>>3];
  $60 = HEAP32[$0>>2]|0;
  $61 = (($60) + 32|0);
  $62 = +HEAPF64[$61>>3];
  if ($52) {
   HEAP32[$vararg_buffer43>>2] = $56;
   $vararg_ptr36 = (($vararg_buffer43) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$59;HEAP32[$vararg_ptr36>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr36+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr37 = (($vararg_buffer43) + 12|0);
   HEAPF64[tempDoublePtr>>3]=$62;HEAP32[$vararg_ptr37>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr37+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($53,17528,$vararg_buffer43)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer43>>2] = $56;
   $vararg_ptr41 = (($vararg_buffer43) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$59;HEAP32[$vararg_ptr41>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr41+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr42 = (($vararg_buffer43) + 12|0);
   HEAPF64[tempDoublePtr>>3]=$62;HEAP32[$vararg_ptr42>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr42+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($53,17552,$vararg_buffer43)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $36 = HEAP32[$tex>>2]|0;
  $37 = ($36|0)!=(0);
  $38 = HEAP32[$1>>2]|0;
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$0>>2]|0;
  $43 = (($42) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$0>>2]|0;
  $46 = (($45) + 24|0);
  $47 = +HEAPF64[$46>>3];
  $48 = HEAP32[$0>>2]|0;
  $49 = (($48) + 32|0);
  $50 = +HEAPF64[$49>>3];
  if ($37) {
   HEAP32[$vararg_buffer43>>2] = $41;
   $vararg_ptr24 = (($vararg_buffer43) + 4|0);
   HEAP32[$vararg_ptr24>>2] = $44;
   $vararg_ptr25 = (($vararg_buffer43) + 8|0);
   HEAPF64[tempDoublePtr>>3]=$47;HEAP32[$vararg_ptr25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr25+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr26 = (($vararg_buffer43) + 16|0);
   HEAPF64[tempDoublePtr>>3]=$50;HEAP32[$vararg_ptr26>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr26+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($38,17448,$vararg_buffer43)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer43>>2] = $41;
   $vararg_ptr30 = (($vararg_buffer43) + 4|0);
   HEAP32[$vararg_ptr30>>2] = $44;
   $vararg_ptr31 = (($vararg_buffer43) + 8|0);
   HEAPF64[tempDoublePtr>>3]=$47;HEAP32[$vararg_ptr31>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr31+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr32 = (($vararg_buffer43) + 16|0);
   HEAPF64[tempDoublePtr>>3]=$50;HEAP32[$vararg_ptr32>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr32+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($38,17504,$vararg_buffer43)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 10: case 9: case 8: case 7: case 1:  {
  $63 = HEAP32[$0>>2]|0;
  $64 = (($63) + 24|0);
  $65 = +HEAPF64[$64>>3];
  $66 = $65 == 1.79769313486231570815E+308;
  if ($66) {
   $67 = HEAP32[$1>>2]|0;
   HEAP8[$67>>0] = 0;
   STACKTOP = sp;return;
  }
  $68 = HEAP32[$0>>2]|0;
  $69 = (($68) + 32|0);
  $70 = +HEAPF64[$69>>3];
  $71 = $70 == 1.79769313486231570815E+308;
  $72 = HEAP32[$1>>2]|0;
  if ($71) {
   (_strcpy(($72|0),(17576|0))|0);
   STACKTOP = sp;return;
  } else {
   $73 = HEAP32[$0>>2]|0;
   $74 = (($73) + 32|0);
   $75 = +HEAPF64[$74>>3];
   HEAPF64[tempDoublePtr>>3]=$75;HEAP32[$vararg_buffer43>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer43+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($72,17584,$vararg_buffer43)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  $76 = HEAP32[$1>>2]|0;
  HEAP8[$76>>0] = 0;
  STACKTOP = sp;return;
 }
 }
}
function _csv_print_test($src,$prn) {
 $src = $src|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $buf = 0, $c = 0, $descrip = 0, $optstr = 0, $vararg_buffer43 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0;
 var $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer43 = sp + 8|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $descrip = sp + 32|0;
 $c = sp + 44|0;
 $optstr = sp + 28|0;
 $a = sp;
 $buf = sp + 24|0;
 HEAP32[$0>>2] = $src;
 HEAP32[$1>>2] = $prn;
 HEAP32[$descrip>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_prn_delim($2)|0);
 HEAP8[$c>>0] = $3;
 $4 = HEAP32[$1>>2]|0;
 _set_alt_gettext_mode($4);
 $5 = HEAP32[$0>>2]|0;
 $6 = (_test_get_descrip($5)|0);
 HEAP32[$descrip>>2] = $6;
 $7 = HEAP32[$descrip>>2]|0;
 $8 = ($7|0)!=(0|0);
 do {
  if ($8) {
   $9 = HEAP32[$0>>2]|0;
   $10 = (_test_get_opt_string($9)|0);
   HEAP32[$optstr>>2] = $10;
   $11 = HEAP32[$optstr>>2]|0;
   $12 = ($11|0)!=(0|0);
   $13 = HEAP32[$1>>2]|0;
   $14 = HEAP32[$descrip>>2]|0;
   if ($12) {
    $15 = HEAP32[$optstr>>2]|0;
    HEAP32[$vararg_buffer43>>2] = $14;
    $vararg_ptr1 = (($vararg_buffer43) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $15;
    (_pprintf($13,15296,$vararg_buffer43)|0);
    break;
   } else {
    HEAP32[$vararg_buffer43>>2] = $14;
    (_pprintf($13,15312,$vararg_buffer43)|0);
    break;
   }
  }
 } while(0);
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = HEAP32[$1>>2]|0;
   $27 = HEAP8[$c>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = HEAP32[$0>>2]|0;
   $30 = (($29) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vararg_buffer43>>2] = 15336;
   $vararg_ptr8 = (($vararg_buffer43) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $28;
   $vararg_ptr9 = (($vararg_buffer43) + 8|0);
   HEAP32[$vararg_ptr9>>2] = $31;
   (_pprintf($26,15320,$vararg_buffer43)|0);
  }
 }
 $32 = HEAP32[$0>>2]|0;
 $33 = (($32) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)>(0);
 if ($35) {
  $36 = HEAP32[$0>>2]|0;
  $37 = (($36) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)>(0);
  if ($39) {
   $40 = HEAP32[$1>>2]|0;
   $41 = HEAP8[$c>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   HEAP32[$vararg_buffer43>>2] = 14944;
   $vararg_ptr13 = (($vararg_buffer43) + 4|0);
   HEAP32[$vararg_ptr13>>2] = $42;
   $vararg_ptr14 = (($vararg_buffer43) + 8|0);
   HEAP32[$vararg_ptr14>>2] = $45;
   (_pprintf($40,15352,$vararg_buffer43)|0);
   $46 = HEAP32[$1>>2]|0;
   $47 = HEAP8[$c>>0]|0;
   $48 = $47 << 24 >> 24;
   $49 = HEAP32[$0>>2]|0;
   $50 = (($49) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   HEAP32[$vararg_buffer43>>2] = 14952;
   $vararg_ptr18 = (($vararg_buffer43) + 4|0);
   HEAP32[$vararg_ptr18>>2] = $48;
   $vararg_ptr19 = (($vararg_buffer43) + 8|0);
   HEAP32[$vararg_ptr19>>2] = $51;
   (_pprintf($46,15352,$vararg_buffer43)|0);
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $52 = HEAP32[$0>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)>(0);
  if ($55) {
   $56 = HEAP32[$1>>2]|0;
   $57 = HEAP8[$c>>0]|0;
   $58 = $57 << 24 >> 24;
   $59 = HEAP32[$0>>2]|0;
   $60 = (($59) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   HEAP32[$vararg_buffer43>>2] = 15368;
   $vararg_ptr23 = (($vararg_buffer43) + 4|0);
   HEAP32[$vararg_ptr23>>2] = $58;
   $vararg_ptr24 = (($vararg_buffer43) + 8|0);
   HEAP32[$vararg_ptr24>>2] = $61;
   (_pprintf($56,15352,$vararg_buffer43)|0);
  }
 }
 $62 = HEAP32[$0>>2]|0;
 $63 = (($62) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0);
 if ($65) {
  $66 = HEAP32[$1>>2]|0;
  $67 = HEAP8[$c>>0]|0;
  $68 = $67 << 24 >> 24;
  $69 = HEAP32[$0>>2]|0;
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  HEAP32[$vararg_buffer43>>2] = 15376;
  $vararg_ptr28 = (($vararg_buffer43) + 4|0);
  HEAP32[$vararg_ptr28>>2] = $68;
  $vararg_ptr29 = (($vararg_buffer43) + 8|0);
  HEAP32[$vararg_ptr29>>2] = $71;
  (_pprintf($66,15352,$vararg_buffer43)|0);
 }
 $72 = HEAP32[$1>>2]|0;
 $73 = HEAP8[$c>>0]|0;
 $74 = $73 << 24 >> 24;
 $75 = HEAP32[$0>>2]|0;
 $76 = (($75) + 24|0);
 $77 = +HEAPF64[$76>>3];
 HEAP32[$vararg_buffer43>>2] = 15408;
 $vararg_ptr33 = (($vararg_buffer43) + 4|0);
 HEAP32[$vararg_ptr33>>2] = $74;
 $vararg_ptr34 = (($vararg_buffer43) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$77;HEAP32[$vararg_ptr34>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr34+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($72,15392,$vararg_buffer43)|0);
 $78 = HEAP32[$0>>2]|0;
 $79 = (($78) + 32|0);
 $80 = +HEAPF64[$79>>3];
 $81 = $80 == 1.79769313486231570815E+308;
 if (!($81)) {
  $82 = HEAP32[$1>>2]|0;
  $83 = HEAP8[$c>>0]|0;
  $84 = $83 << 24 >> 24;
  $85 = HEAP32[$0>>2]|0;
  $86 = (($85) + 32|0);
  $87 = +HEAPF64[$86>>3];
  HEAP32[$vararg_buffer43>>2] = 15424;
  $vararg_ptr38 = (($vararg_buffer43) + 4|0);
  HEAP32[$vararg_ptr38>>2] = $84;
  $vararg_ptr39 = (($vararg_buffer43) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$87;HEAP32[$vararg_ptr39>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr39+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($82,15392,$vararg_buffer43)|0);
 }
 $88 = HEAP32[$0>>2]|0;
 $89 = (($88) + 40|0);
 $90 = +HEAPF64[$89>>3];
 $91 = $90 == 1.79769313486231570815E+308;
 if ($91) {
  $106 = HEAP32[$1>>2]|0;
  (_pputc($106,10)|0);
  STACKTOP = sp;return;
 }
 $92 = HEAP32[$0>>2]|0;
 $93 = (($92) + 48|0);
 $94 = +HEAPF64[$93>>3];
 $95 = 100.0 * $94;
 HEAPF64[$a>>3] = $95;
 $96 = +HEAPF64[$a>>3];
 HEAPF64[tempDoublePtr>>3]=$96;HEAP32[$vararg_buffer43>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer43+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $97 = (_g_strdup_printf((15184|0),($vararg_buffer43|0))|0);
 HEAP32[$buf>>2] = $97;
 $98 = HEAP32[$1>>2]|0;
 $99 = HEAP32[$buf>>2]|0;
 $100 = HEAP8[$c>>0]|0;
 $101 = $100 << 24 >> 24;
 $102 = HEAP32[$0>>2]|0;
 $103 = (($102) + 40|0);
 $104 = +HEAPF64[$103>>3];
 HEAP32[$vararg_buffer43>>2] = $99;
 $vararg_ptr46 = (($vararg_buffer43) + 4|0);
 HEAP32[$vararg_ptr46>>2] = $101;
 $vararg_ptr47 = (($vararg_buffer43) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$104;HEAP32[$vararg_ptr47>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr47+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($98,15432,$vararg_buffer43)|0);
 $105 = HEAP32[$buf>>2]|0;
 _g_free(($105|0));
 $106 = HEAP32[$1>>2]|0;
 (_pputc($106,10)|0);
 STACKTOP = sp;return;
}
function _set_model_id($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 228|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[15280>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[15280>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 HEAP32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function _mle_criteria($pmod,$addk) {
 $pmod = $pmod|0;
 $addk = $addk|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $err = 0, $k = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $err = sp + 8|0;
 $k = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $addk;
 HEAP32[$err>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 160|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $4 == 1.79769313486231570815E+308;
 $6 = HEAP32[$0>>2]|0;
 if ($5) {
  $7 = (($6) + 184|0);
  HEAPF64[$7>>3] = 1.79769313486231570815E+308;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 184|0);
  $10 = (($9) + 8|0);
  HEAPF64[$10>>3] = 1.79769313486231570815E+308;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 184|0);
  $13 = (($12) + 16|0);
  HEAPF64[$13>>3] = 1.79769313486231570815E+308;
  HEAP32[$err>>2] = 1;
  $61 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($61|0);
 } else {
  $14 = (($6) + 48|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($15) + ($16))|0;
  HEAP32[$k>>2] = $17;
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$n>>2] = $20;
  $21 = HEAP32[$0>>2]|0;
  $22 = (($21) + 160|0);
  $23 = +HEAPF64[$22>>3];
  $24 = -2.0 * $23;
  $25 = HEAP32[$k>>2]|0;
  $26 = (+($25|0));
  $27 = 2.0 * $26;
  $28 = $24 + $27;
  $29 = HEAP32[$0>>2]|0;
  $30 = (($29) + 184|0);
  HEAPF64[$30>>3] = $28;
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + 160|0);
  $33 = +HEAPF64[$32>>3];
  $34 = -2.0 * $33;
  $35 = HEAP32[$k>>2]|0;
  $36 = (+($35|0));
  $37 = HEAP32[$n>>2]|0;
  $38 = (+($37|0));
  $39 = (+Math_log((+$38)));
  $40 = $36 * $39;
  $41 = $34 + $40;
  $42 = HEAP32[$0>>2]|0;
  $43 = (($42) + 184|0);
  $44 = (($43) + 8|0);
  HEAPF64[$44>>3] = $41;
  $45 = HEAP32[$0>>2]|0;
  $46 = (($45) + 160|0);
  $47 = +HEAPF64[$46>>3];
  $48 = -2.0 * $47;
  $49 = HEAP32[$k>>2]|0;
  $50 = $49<<1;
  $51 = (+($50|0));
  $52 = HEAP32[$n>>2]|0;
  $53 = (+($52|0));
  $54 = (+Math_log((+$53)));
  $55 = (+Math_log((+$54)));
  $56 = $51 * $55;
  $57 = $48 + $56;
  $58 = HEAP32[$0>>2]|0;
  $59 = (($58) + 184|0);
  $60 = (($59) + 16|0);
  HEAPF64[$60>>3] = $57;
  $61 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($61|0);
 }
 return 0|0;
}
function _coeff_pval($ci,$x,$df) {
 $ci = $ci|0;
 $x = +$x;
 $df = $df|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0;
 var $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 8|0;
 $2 = sp + 16|0;
 $p = sp;
 HEAP32[$0>>2] = $ci;
 HEAPF64[$1>>3] = $x;
 HEAP32[$2>>2] = $df;
 HEAPF64[$p>>3] = 1.79769313486231570815E+308;
 $3 = +HEAPF64[$1>>3];
 $4 = $3 == 1.79769313486231570815E+308;
 if ($4) {
  $54 = +HEAPF64[$p>>3];
  STACKTOP = sp;return (+$54);
 }
 $5 = +HEAPF64[$1>>3];
 $6 = (___DOUBLE_BITS4612($5)|0);
 $7 = tempRet0;
 $8 = $7 & 2147483647;
 $9 = ($8>>>0)<(2146435072);
 $10 = ($8|0)==(2146435072);
 $11 = ($6>>>0)<(0);
 $12 = $10 & $11;
 $13 = $9 | $12;
 if (!($13)) {
  $54 = +HEAPF64[$p>>3];
  STACKTOP = sp;return (+$54);
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = ($14|0)==(78);
 $16 = HEAP32[$0>>2]|0;
 $17 = ($16|0)==(7);
 $or$cond = $15 | $17;
 $18 = HEAP32[$0>>2]|0;
 $19 = ($18|0)==(9);
 $or$cond3 = $or$cond | $19;
 $20 = HEAP32[$0>>2]|0;
 $21 = ($20|0)==(27);
 $or$cond5 = $or$cond3 | $21;
 $22 = HEAP32[$0>>2]|0;
 $23 = ($22|0)==(29);
 $or$cond7 = $or$cond5 | $23;
 $24 = HEAP32[$0>>2]|0;
 $25 = ($24|0)==(45);
 $or$cond9 = $or$cond7 | $25;
 $26 = HEAP32[$0>>2]|0;
 $27 = ($26|0)==(47);
 $or$cond11 = $or$cond9 | $27;
 $28 = HEAP32[$0>>2]|0;
 $29 = ($28|0)==(51);
 $or$cond13 = $or$cond11 | $29;
 $30 = HEAP32[$0>>2]|0;
 $31 = ($30|0)==(58);
 $or$cond15 = $or$cond13 | $31;
 $32 = HEAP32[$0>>2]|0;
 $33 = ($32|0)==(127);
 $or$cond17 = $or$cond15 | $33;
 $34 = HEAP32[$0>>2]|0;
 $35 = ($34|0)==(69);
 $or$cond19 = $or$cond17 | $35;
 $36 = HEAP32[$0>>2]|0;
 $37 = ($36|0)==(76);
 $or$cond21 = $or$cond19 | $37;
 $38 = HEAP32[$0>>2]|0;
 $39 = ($38|0)==(82);
 $or$cond23 = $or$cond21 | $39;
 $40 = HEAP32[$0>>2]|0;
 $41 = ($40|0)==(95);
 $or$cond25 = $or$cond23 | $41;
 $42 = HEAP32[$0>>2]|0;
 $43 = ($42|0)==(98);
 $or$cond27 = $or$cond25 | $43;
 $44 = HEAP32[$0>>2]|0;
 $45 = ($44|0)==(126);
 $or$cond29 = $or$cond27 | $45;
 $46 = HEAP32[$0>>2]|0;
 $47 = ($46|0)==(10);
 $or$cond31 = $or$cond29 | $47;
 if ($or$cond31) {
  $48 = +HEAPF64[$1>>3];
  $49 = (+_normal_pvalue_2($48));
  HEAPF64[$p>>3] = $49;
  $54 = +HEAPF64[$p>>3];
  STACKTOP = sp;return (+$54);
 } else {
  $50 = HEAP32[$2>>2]|0;
  $51 = (+($50|0));
  $52 = +HEAPF64[$1>>3];
  $53 = (+_student_pvalue_2($51,$52));
  HEAPF64[$p>>3] = $53;
  $54 = +HEAPF64[$p>>3];
  STACKTOP = sp;return (+$54);
 }
 return +0;
}
function ___FLOAT_BITS4611($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $__u = sp;
 HEAPF32[$0>>2] = $__f;
 $1 = +HEAPF32[$0>>2];
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS4612($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $__u = sp;
 HEAPF64[$0>>3] = $__f;
 $1 = +HEAPF64[$0>>3];
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _test_get_descrip($test) {
 $test = $test|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $test;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(6);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(8);
  if ($9) {
   $10 = HEAP32[15496>>2]|0;
   HEAP32[$0>>2] = $10;
   $26 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($26|0);
  }
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $11 = HEAP32[$i>>2]|0;
  $12 = (15560 + (($11*12)|0)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13>>>0)<(26);
  if (!($14)) {
   label = 9;
   break;
  }
  $15 = HEAP32[$1>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$i>>2]|0;
  $18 = (15560 + (($17*12)|0)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)==($19|0);
  $21 = HEAP32[$i>>2]|0;
  if ($20) {
   label = 7;
   break;
  }
  $25 = (($21) + 1)|0;
  HEAP32[$i>>2] = $25;
 }
 if ((label|0) == 7) {
  $22 = (15560 + (($21*12)|0)|0);
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$0>>2] = $24;
  $26 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 9) {
  HEAP32[$0>>2] = 0;
  $26 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($26|0);
 }
 return 0|0;
}
function _test_get_opt_string($test) {
 $test = $test|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $test;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(10);
 $5 = HEAP32[$1>>2]|0;
 do {
  if ($4) {
   $6 = (($5) + 56|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 & 131072;
   $9 = ($8|0)!=(0);
   if ($9) {
    HEAP32[$0>>2] = 15448;
    break;
   }
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 56|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & 4;
   $14 = ($13|0)!=(0);
   if ($14) {
    HEAP32[$0>>2] = 15464;
   } else {
    label = 12;
   }
  } else {
   $15 = HEAP32[$5>>2]|0;
   $16 = ($15|0)==(12);
   $17 = HEAP32[$1>>2]|0;
   if ($16) {
    $18 = (($17) + 56|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 & 8388608;
    $21 = ($20|0)!=(0);
    if (!($21)) {
     label = 12;
     break;
    }
    HEAP32[$0>>2] = 15448;
    break;
   }
   $22 = HEAP32[$17>>2]|0;
   $23 = ($22|0)==(20);
   if ($23) {
    $24 = HEAP32[$1>>2]|0;
    $25 = (($24) + 56|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26 & 131072;
    $28 = ($27|0)!=(0);
    if ($28) {
     HEAP32[$0>>2] = 15480;
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  HEAP32[$0>>2] = 0;
 }
 $29 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _print_add_omit_varnames($s,$prn) {
 $s = $s|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ending = 0, $endings = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $endings = sp + 4|0;
 $ending = sp;
 HEAP32[$1>>2] = $s;
 HEAP32[$2>>2] = $prn;
 ;HEAP32[$endings+0>>2]=HEAP32[18072+0>>2]|0;HEAP32[$endings+4>>2]=HEAP32[18072+4>>2]|0;HEAP32[$endings+8>>2]=HEAP32[18072+8>>2]|0;
 HEAP32[$ending>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = HEAP32[$2>>2]|0;
   $10 = (_plain_format($9)|0);
   $11 = ($10|0)!=(0);
   do {
    if ($11) {
     $12 = HEAP32[$endings>>2]|0;
     HEAP32[$ending>>2] = $12;
    } else {
     $13 = HEAP32[$2>>2]|0;
     $14 = (_tex_format($13)|0);
     $15 = ($14|0)!=(0);
     if ($15) {
      $16 = (($endings) + 4|0);
      $17 = HEAP32[$16>>2]|0;
      HEAP32[$ending>>2] = $17;
      break;
     }
     $18 = HEAP32[$2>>2]|0;
     $19 = (_rtf_format($18)|0);
     $20 = ($19|0)!=(0);
     if ($20) {
      $21 = (($endings) + 8|0);
      $22 = HEAP32[$21>>2]|0;
      HEAP32[$ending>>2] = $22;
      break;
     }
     HEAP32[$0>>2] = 1;
     $39 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($39|0);
    }
   } while(0);
   $23 = HEAP32[$2>>2]|0;
   $24 = HEAP32[$ending>>2]|0;
   (_pputs($23,$24)|0);
   while(1) {
    $25 = HEAP32[$1>>2]|0;
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)!=(0);
    if (!($27)) {
     break;
    }
    $28 = HEAP32[$1>>2]|0;
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($30|0)==(32);
    $32 = HEAP32[$2>>2]|0;
    if ($31) {
     $33 = HEAP32[$ending>>2]|0;
     (_pputs($32,$33)|0);
    } else {
     $34 = HEAP32[$1>>2]|0;
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     (_pputc($32,$36)|0);
    }
    $37 = HEAP32[$1>>2]|0;
    $38 = (($37) + 1|0);
    HEAP32[$1>>2] = $38;
   }
   HEAP32[$0>>2] = 0;
   $39 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($39|0);
  }
 }
 HEAP32[$0>>2] = 1;
 $39 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($39|0);
}
function _print_test_opt($test,$prn) {
 $test = $test|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $optstr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $optstr = sp + 4|0;
 HEAP32[$0>>2] = $test;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_test_get_opt_string($2)|0);
 HEAP32[$optstr>>2] = $3;
 $4 = HEAP32[$optstr>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$optstr>>2]|0;
 HEAP32[$vararg_buffer>>2] = $7;
 (_pprintf($6,18088,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _free_model_data_item($item) {
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $item;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = HEAP32[$0>>2]|0;
 if ($4) {
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1]($10);
 } else {
  $11 = (($5) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 _free($14);
 $15 = HEAP32[$0>>2]|0;
 _free($15);
 STACKTOP = sp;return;
}
function _plausible_panel_time_var($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $i = 0, $incr0 = 0, $ok = 0, $ret = 0, $t = 0, $val0 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $i = sp + 24|0;
 $t = sp + 20|0;
 $ret = sp + 16|0;
 $x = sp + 12|0;
 $val0 = sp + 8|0;
 $incr0 = sp + 4|0;
 $ok = sp;
 HEAP32[$0>>2] = $dset;
 HEAP32[$ret>>2] = 0;
 HEAP32[$i>>2] = 1;
 while(1) {
  $1 = HEAP32[$i>>2]|0;
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($1|0)<($3|0);
  if (!($4)) {
   label = 22;
   break;
  }
  $5 = HEAP32[$ret>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   label = 22;
   break;
  }
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 68|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($7<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_may_be_time_name($12)|0);
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = HEAP32[$i>>2]|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = (($16) + 64|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($15<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   HEAP32[$x>>2] = $20;
   $21 = HEAP32[$x>>2]|0;
   $22 = +HEAPF64[$21>>3];
   $23 = (~~(($22)));
   HEAP32[$val0>>2] = $23;
   $24 = HEAP32[$x>>2]|0;
   $25 = (($24) + 8|0);
   $26 = +HEAPF64[$25>>3];
   $27 = HEAP32[$x>>2]|0;
   $28 = +HEAPF64[$27>>3];
   $29 = $26 - $28;
   $30 = (~~(($29)));
   HEAP32[$incr0>>2] = $30;
   HEAP32[$ok>>2] = 1;
   HEAP32[$t>>2] = 0;
   while(1) {
    $31 = HEAP32[$t>>2]|0;
    $32 = HEAP32[$0>>2]|0;
    $33 = (($32) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($31|0)<($34|0);
    if (!($35)) {
     break;
    }
    $36 = HEAP32[$ok>>2]|0;
    $37 = ($36|0)!=(0);
    if (!($37)) {
     break;
    }
    $38 = HEAP32[$t>>2]|0;
    $39 = HEAP32[$x>>2]|0;
    $40 = (($39) + ($38<<3)|0);
    $41 = +HEAPF64[$40>>3];
    $42 = $41 == 1.79769313486231570815E+308;
    do {
     if ($42) {
      label = 10;
     } else {
      $43 = HEAP32[$t>>2]|0;
      $44 = HEAP32[$x>>2]|0;
      $45 = (($44) + ($43<<3)|0);
      $46 = +HEAPF64[$45>>3];
      $47 = $46 < 0.0;
      if ($47) {
       label = 10;
      } else {
       $48 = HEAP32[$t>>2]|0;
       $49 = ($48|0)>(0);
       if ($49) {
        $50 = HEAP32[$t>>2]|0;
        $51 = HEAP32[$0>>2]|0;
        $52 = (($51) + 8|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = (($50|0) % ($53|0))&-1;
        $55 = ($54|0)==(0);
        if ($55) {
         $56 = HEAP32[$t>>2]|0;
         $57 = HEAP32[$x>>2]|0;
         $58 = (($57) + ($56<<3)|0);
         $59 = +HEAPF64[$58>>3];
         $60 = HEAP32[$val0>>2]|0;
         $61 = (+($60|0));
         $62 = $59 != $61;
         if (!($62)) {
          break;
         }
         HEAP32[$ok>>2] = 0;
         break;
        }
       }
       $63 = HEAP32[$t>>2]|0;
       $64 = ($63|0)>(1);
       if ($64) {
        $65 = HEAP32[$t>>2]|0;
        $66 = HEAP32[$x>>2]|0;
        $67 = (($66) + ($65<<3)|0);
        $68 = +HEAPF64[$67>>3];
        $69 = HEAP32[$t>>2]|0;
        $70 = (($69) - 1)|0;
        $71 = HEAP32[$x>>2]|0;
        $72 = (($71) + ($70<<3)|0);
        $73 = +HEAPF64[$72>>3];
        $74 = $68 - $73;
        $75 = HEAP32[$incr0>>2]|0;
        $76 = (+($75|0));
        $77 = $74 != $76;
        if ($77) {
         HEAP32[$ok>>2] = 0;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 10) {
     label = 0;
     HEAP32[$ok>>2] = 0;
    }
    $78 = HEAP32[$t>>2]|0;
    $79 = (($78) + 1)|0;
    HEAP32[$t>>2] = $79;
   }
   $80 = HEAP32[$ok>>2]|0;
   $81 = ($80|0)!=(0);
   if ($81) {
    $82 = HEAP32[$i>>2]|0;
    HEAP32[$ret>>2] = $82;
   }
  }
  $83 = HEAP32[$i>>2]|0;
  $84 = (($83) + 1)|0;
  HEAP32[$i>>2] = $84;
 }
 if ((label|0) == 22) {
  $85 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($85|0);
 }
 return 0|0;
}
function _may_be_time_name($vname) {
 $vname = $vname|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $test = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp;
 $test = sp + 8|0;
 HEAP32[$0>>2] = $vname;
 $1 = HEAP32[$0>>2]|0;
 (_strcpy(($test|0),($1|0))|0);
 (_gretl_lower($test)|0);
 $2 = (_strcmp($test,18160)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = 1;
  $6 = $7&1;
  STACKTOP = sp;return ($6|0);
 }
 $4 = (_strcmp($test,18168)|0);
 $5 = ($4|0)==(0);
 $7 = $5;
 $6 = $7&1;
 STACKTOP = sp;return ($6|0);
}
function _string_is_utf8($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $ret = 0, $sevenbit = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $p = sp + 8|0;
 $sevenbit = sp + 4|0;
 $ret = sp;
 HEAP32[$0>>2] = $s;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$p>>2] = $1;
 HEAP32[$sevenbit>>2] = 1;
 HEAP32[$ret>>2] = 0;
 while(1) {
  $2 = HEAP32[$p>>2]|0;
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$p>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ($7|0)>(127);
  if ($8) {
   label = 4;
   break;
  }
  $9 = HEAP32[$p>>2]|0;
  $10 = (($9) + 1|0);
  HEAP32[$p>>2] = $10;
 }
 if ((label|0) == 4) {
  HEAP32[$sevenbit>>2] = 0;
 }
 $11 = HEAP32[$sevenbit>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $16 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($16|0);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = (_g_utf8_validate($13,-1,0)|0);
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $16 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($16|0);
 }
 HEAP32[$ret>>2] = 1;
 $16 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _gretl_fopen($fname,$mode) {
 $fname = $fname|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $err = 0, $fconv = 0, $fp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $fconv = sp + 8|0;
 $fp = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $fname;
 HEAP32[$1>>2] = $mode;
 HEAP32[$fconv>>2] = 0;
 HEAP32[$fp>>2] = 0;
 _gretl_error_clear();
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[29608>>2]|0;
 $4 = (_maybe_recode_path($2,$3,$fconv)|0);
 HEAP32[$err>>2] = $4;
 $5 = HEAP32[$err>>2]|0;
 $6 = ($5|0)!=(0);
 do {
  if (!($6)) {
   $7 = HEAP32[$fconv>>2]|0;
   $8 = ($7|0)!=(0|0);
   if ($8) {
    $9 = HEAP32[$fconv>>2]|0;
    $10 = HEAP32[$1>>2]|0;
    $11 = (_fopen(($9|0),($10|0))|0);
    HEAP32[$fp>>2] = $11;
    $12 = HEAP32[$fconv>>2]|0;
    _g_free(($12|0));
    break;
   } else {
    $13 = HEAP32[$0>>2]|0;
    $14 = HEAP32[$1>>2]|0;
    $15 = (_fopen(($13|0),($14|0))|0);
    HEAP32[$fp>>2] = $15;
    break;
   }
  }
 } while(0);
 $16 = (___errno_location()|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $20 = HEAP32[$fp>>2]|0;
  STACKTOP = sp;return ($20|0);
 }
 $19 = HEAP32[$0>>2]|0;
 _gretl_errmsg_set_from_errno($19);
 $20 = HEAP32[$fp>>2]|0;
 STACKTOP = sp;return ($20|0);
}
function _maybe_recode_path($path,$want_utf8,$pconv) {
 $path = $path|0;
 $want_utf8 = $want_utf8|0;
 $pconv = $pconv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $gerr = 0, $gerr1 = 0, $sz = 0, $sz2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $err = sp + 16|0;
 $gerr = sp + 12|0;
 $sz = sp + 8|0;
 $gerr1 = sp + 4|0;
 $sz2 = sp;
 HEAP32[$0>>2] = $path;
 HEAP32[$1>>2] = $want_utf8;
 HEAP32[$2>>2] = $pconv;
 HEAP32[$err>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0);
 $5 = HEAP32[$0>>2]|0;
 if ($4) {
  $6 = (_g_utf8_validate($5,-1,0)|0);
  $7 = ($6|0)!=(0);
  if (!($7)) {
   HEAP32[$gerr>>2] = 0;
   $8 = HEAP32[$0>>2]|0;
   $9 = (_g_locale_to_utf8(($8|0),-1,(0|0),($sz|0),($gerr|0))|0);
   $10 = HEAP32[$2>>2]|0;
   HEAP32[$10>>2] = $9;
   $11 = HEAP32[$2>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $14 = HEAP32[$gerr>>2]|0;
    $15 = ($14|0)!=(0|0);
    if ($15) {
     $16 = HEAP32[$gerr>>2]|0;
     $17 = (($16) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     _gretl_errmsg_set($18);
     $19 = HEAP32[$gerr>>2]|0;
     _g_error_free(($19|0));
    }
    HEAP32[$err>>2] = 1;
   }
  }
 } else {
  $20 = (_string_is_utf8($5)|0);
  $21 = ($20|0)!=(0);
  if ($21) {
   HEAP32[$gerr1>>2] = 0;
   $22 = HEAP32[$0>>2]|0;
   $23 = (_g_locale_from_utf8(($22|0),-1,(0|0),($sz2|0),($gerr1|0))|0);
   $24 = HEAP32[$2>>2]|0;
   HEAP32[$24>>2] = $23;
   $25 = HEAP32[$2>>2]|0;
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    $28 = HEAP32[$gerr1>>2]|0;
    $29 = ($28|0)!=(0|0);
    if ($29) {
     $30 = HEAP32[$gerr1>>2]|0;
     $31 = (($30) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     _gretl_errmsg_set($32);
     $33 = HEAP32[$gerr1>>2]|0;
     _g_error_free(($33|0));
    }
    HEAP32[$err>>2] = 1;
   }
  }
 }
 $34 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _gretl_mktemp($pattern,$mode) {
 $pattern = $pattern|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fd = 0, $fp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $fp = sp + 4|0;
 $fd = sp;
 HEAP32[$0>>2] = $pattern;
 HEAP32[$1>>2] = $mode;
 HEAP32[$fp>>2] = 0;
 HEAP32[$fd>>2] = -1;
 _gretl_error_clear();
 $2 = HEAP32[$0>>2]|0;
 $3 = (_mkstemp(($2|0))|0);
 HEAP32[$fd>>2] = $3;
 $4 = (___errno_location()|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  _gretl_errmsg_set_from_errno(0);
  $12 = HEAP32[$fp>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $7 = HEAP32[$fd>>2]|0;
 $8 = ($7|0)!=(-1);
 if (!($8)) {
  $12 = HEAP32[$fp>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$fd>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (_fdopen(($9|0),($10|0))|0);
 HEAP32[$fp>>2] = $11;
 $12 = HEAP32[$fp>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function _gretl_remove($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $pconv = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $pconv = sp + 8|0;
 $ret = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $path;
 HEAP32[$pconv>>2] = 0;
 HEAP32[$ret>>2] = -1;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[29608>>2]|0;
 $3 = (_maybe_recode_path($1,$2,$pconv)|0);
 HEAP32[$err>>2] = $3;
 $4 = HEAP32[$err>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $13 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($13|0);
 }
 $6 = HEAP32[$pconv>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$pconv>>2]|0;
  $9 = (_remove(($8|0))|0);
  HEAP32[$ret>>2] = $9;
  $10 = HEAP32[$pconv>>2]|0;
  _g_free(($10|0));
  $13 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($13|0);
 } else {
  $11 = HEAP32[$0>>2]|0;
  $12 = (_remove(($11|0))|0);
  HEAP32[$ret>>2] = $12;
  $13 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($13|0);
 }
 return 0|0;
}
function _gretl_dotdir() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (((18176 + 512|0))|0);
}
function _gretl_lib_path() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $epath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $epath = sp;
 $0 = HEAP32[29624>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  STACKTOP = sp;return (((18176 + 2560|0))|0);
 }
 $2 = (_getenv((29632|0))|0);
 HEAP32[$epath>>2] = $2;
 $3 = HEAP32[$epath>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  HEAP8[((18176 + 2560|0))>>0] = 0;
  $5 = HEAP32[$epath>>2]|0;
  (_strncat(((18176 + 2560|0)),$5,511)|0);
 }
 $6 = HEAP8[((18176 + 2560|0))>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)==(0);
 if ($8) {
  (_strcat((((18176 + 2560|0))|0),(29656|0))|0);
  (_slash_terminate(((18176 + 2560|0)))|0);
  (_strcat((((18176 + 2560|0))|0),(29672|0))|0);
  (_slash_terminate(((18176 + 2560|0)))|0);
 }
 HEAP32[29624>>2] = 1;
 STACKTOP = sp;return (((18176 + 2560|0))|0);
}
function _slash_terminate($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $path;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = HEAP32[$1>>2]|0;
   $9 = (_strlen(($8|0))|0);
   $10 = (($9) - 1)|0;
   $11 = HEAP32[$1>>2]|0;
   $12 = (($11) + ($10)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = ($14|0)!=(47);
   if ($15) {
    $16 = HEAP32[$1>>2]|0;
    (_strcat(($16|0),(29616|0))|0);
    HEAP32[$0>>2] = 1;
    $17 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($17|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $17 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _gretl_plotfile() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (((18176 + 2048|0))|0);
}
function _gretl_x12_is_x13() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strstr(((18176 + 5120|0)),29688)|0);
 $1 = ($0|0)!=(0|0);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _gretl_print_destroy($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $fpdup = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $fpdup = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 $9 = $8&1;
 HEAP32[$fpdup>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 do {
  if ($12) {
   $13 = HEAP32[$0>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[_stdout>>2]|0;
   $16 = ($14|0)==($15|0);
   if ($16) {
    $17 = HEAP32[_stdout>>2]|0;
    (_fflush(($17|0))|0);
    break;
   }
   $18 = HEAP32[$0>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[_stderr>>2]|0;
   $21 = ($19|0)!=($20|0);
   if ($21) {
    $22 = HEAP32[$0>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    (_fclose(($23|0))|0);
   }
  }
 } while(0);
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + 36|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  (_gretl_remove($30)|0);
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  _free($33);
 }
 $34 = HEAP32[$fpdup>>2]|0;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  $36 = HEAP32[$0>>2]|0;
  $37 = (($36) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0|0);
  if ($39) {
   $40 = HEAP32[$0>>2]|0;
   $41 = (($40) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = HEAP32[_stdout>>2]|0;
   $44 = ($42|0)!=($43|0);
   if ($44) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = HEAP32[_stderr>>2]|0;
    $49 = ($47|0)!=($48|0);
    if ($49) {
     $50 = HEAP32[$0>>2]|0;
     $51 = (($50) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     (_fclose(($52|0))|0);
    }
   }
  }
 }
 $53 = HEAP32[$0>>2]|0;
 $54 = (($53) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $57 = HEAP32[$0>>2]|0;
  $58 = (($57) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  _free($59);
 }
 $60 = HEAP32[$0>>2]|0;
 _free($60);
 STACKTOP = sp;return;
}
function _gretl_print_new($ptype,$err) {
 $ptype = $ptype|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 HEAP32[$1>>2] = $ptype;
 HEAP32[$2>>2] = $err;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = HEAP32[_stderr>>2]|0;
  (_fprintf(($5|0),(29696|0),($vararg_buffer|0))|0);
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$2>>2]|0;
  $8 = (_real_gretl_print_new($6,0,0,0,$7)|0);
  HEAP32[$0>>2] = $8;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _real_gretl_print_new($ptype,$fname,$buf,$fp,$perr) {
 $ptype = $ptype|0;
 $fname = $fname|0;
 $buf = $buf|0;
 $fp = $fp|0;
 $perr = $perr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $err = 0, $p = 0, $prn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $prn = sp + 12|0;
 $err = sp + 8|0;
 $p = sp + 4|0;
 HEAP32[$1>>2] = $ptype;
 HEAP32[$2>>2] = $fname;
 HEAP32[$3>>2] = $buf;
 HEAP32[$4>>2] = $fp;
 HEAP32[$5>>2] = $perr;
 $6 = (_malloc(40)|0);
 HEAP32[$prn>>2] = $6;
 HEAP32[$err>>2] = 0;
 $7 = HEAP32[$prn>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = HEAP32[$5>>2]|0;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = HEAP32[$5>>2]|0;
   HEAP32[$11>>2] = 12;
  }
  HEAP32[$0>>2] = 0;
  $79 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($79|0);
 }
 $12 = HEAP32[$prn>>2]|0;
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$prn>>2]|0;
 $14 = (($13) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$prn>>2]|0;
 $16 = (($15) + 8|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$prn>>2]|0;
 $18 = (($17) + 12|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$prn>>2]|0;
 $20 = (($19) + 16|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$prn>>2]|0;
 $22 = (($21) + 20|0);
 HEAP32[$22>>2] = -1;
 $23 = HEAP32[$prn>>2]|0;
 $24 = (($23) + 24|0);
 HEAP32[$24>>2] = 1;
 $25 = HEAP32[$prn>>2]|0;
 $26 = (($25) + 28|0);
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$prn>>2]|0;
 $28 = (($27) + 32|0);
 HEAP8[$28>>0] = 44;
 $29 = HEAP32[$prn>>2]|0;
 $30 = (($29) + 36|0);
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$1>>2]|0;
 $32 = ($31|0)==(5);
 do {
  if ($32) {
   $33 = HEAP32[$4>>2]|0;
   $34 = HEAP32[$prn>>2]|0;
   HEAP32[$34>>2] = $33;
  } else {
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(2);
   if ($36) {
    $37 = HEAP32[$2>>2]|0;
    $38 = (_gretl_fopen($37,29760)|0);
    $39 = HEAP32[$prn>>2]|0;
    HEAP32[$39>>2] = $38;
    $40 = HEAP32[$prn>>2]|0;
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     break;
    }
    HEAP32[$err>>2] = 11;
    $43 = HEAP32[$prn>>2]|0;
    _free($43);
    HEAP32[$prn>>2] = 0;
    break;
   }
   $44 = HEAP32[$1>>2]|0;
   $45 = ($44|0)==(4);
   if ($45) {
    $46 = HEAP32[$prn>>2]|0;
    $47 = (_prn_add_tempfile($46)|0);
    HEAP32[$err>>2] = $47;
    $48 = HEAP32[$err>>2]|0;
    $49 = ($48|0)!=(0);
    $50 = HEAP32[$prn>>2]|0;
    if ($49) {
     _free($50);
     HEAP32[$prn>>2] = 0;
     break;
    } else {
     $51 = (($50) + 20|0);
     HEAP32[$51>>2] = 0;
     break;
    }
   }
   $52 = HEAP32[$1>>2]|0;
   $53 = ($52|0)==(0);
   if ($53) {
    $54 = HEAP32[_stdout>>2]|0;
    $55 = HEAP32[$prn>>2]|0;
    HEAP32[$55>>2] = $54;
    break;
   }
   $56 = HEAP32[$1>>2]|0;
   $57 = ($56|0)==(1);
   if ($57) {
    $58 = HEAP32[_stderr>>2]|0;
    $59 = HEAP32[$prn>>2]|0;
    HEAP32[$59>>2] = $58;
    break;
   }
   $60 = HEAP32[$1>>2]|0;
   $61 = ($60|0)==(3);
   if ($61) {
    $62 = HEAP32[$3>>2]|0;
    $63 = ($62|0)!=(0|0);
    if ($63) {
     $64 = HEAP32[$3>>2]|0;
     $65 = HEAP32[$prn>>2]|0;
     $66 = (($65) + 8|0);
     HEAP32[$66>>2] = $64;
     $67 = HEAP32[$prn>>2]|0;
     $68 = (($67) + 28|0);
     HEAP32[$68>>2] = 1;
     break;
    }
    $69 = HEAP32[$prn>>2]|0;
    $70 = (_pprintf($69,29736,$vararg_buffer)|0);
    HEAP32[$p>>2] = $70;
    $71 = HEAP32[$p>>2]|0;
    $72 = ($71|0)<(0);
    if ($72) {
     HEAP32[$err>>2] = 12;
     $73 = HEAP32[$prn>>2]|0;
     _free($73);
     HEAP32[$prn>>2] = 0;
    }
   }
  }
 } while(0);
 $74 = HEAP32[$5>>2]|0;
 $75 = ($74|0)!=(0|0);
 if ($75) {
  $76 = HEAP32[$err>>2]|0;
  $77 = HEAP32[$5>>2]|0;
  HEAP32[$77>>2] = $76;
 }
 $78 = HEAP32[$prn>>2]|0;
 HEAP32[$0>>2] = $78;
 $79 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($79|0);
}
function _gretl_print_set_delim($prn,$delim) {
 $prn = $prn|0;
 $delim = $delim|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = sp + 4|0;
 HEAP32[$0>>2] = $prn;
 HEAP8[$1>>0] = $delim;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP8[$1>>0]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 32|0);
 HEAP8[$6>>0] = $4;
 STACKTOP = sp;return;
}
function _gretl_print_has_minus($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 2048;
  $8 = ($7|0)!=(0);
  $9 = $8 ? 1 : 0;
  HEAP32[$0>>2] = $9;
  $10 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($10|0);
 } else {
  HEAP32[$0>>2] = 0;
  $10 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($10|0);
 }
 return 0|0;
}
function _pprintf($prn,$format,$varargs) {
 $prn = $prn|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $args = 0, $newsize = 0, $plen = 0, $rem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $args = sp + 16|0;
 $rem = sp + 8|0;
 $plen = sp + 4|0;
 $newsize = sp;
 HEAP32[$1>>2] = $prn;
 HEAP32[$2>>2] = $format;
 HEAP32[$plen>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   $9 = HEAP32[$1>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0|0);
   if ($11) {
    HEAP32[$args>>2] = $varargs;
    $12 = HEAP32[$1>>2]|0;
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP32[$2>>2]|0;
    $15 = (_vfprintf(($13|0),($14|0),($args|0))|0);
    HEAP32[$plen>>2] = $15;
    $16 = HEAP32[$plen>>2]|0;
    HEAP32[$0>>2] = $16;
    $93 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($93|0);
   }
   $17 = HEAP32[$2>>2]|0;
   $18 = (_strncmp($17,29736,5)|0);
   $19 = ($18|0)==(0);
   $20 = HEAP32[$1>>2]|0;
   if ($19) {
    $21 = (_pprintf_init($20)|0);
    HEAP32[$0>>2] = $21;
    $93 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($93|0);
   }
   $22 = (($20) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    HEAP32[$0>>2] = 0;
    $93 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($93|0);
   }
   $25 = HEAP32[$1>>2]|0;
   $26 = (($25) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$1>>2]|0;
   $29 = (($28) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($27) - ($30))|0;
   $32 = ($31>>>0)<(1024);
   if ($32) {
    $33 = HEAP32[$1>>2]|0;
    $34 = (_realloc_prn_buffer($33,0)|0);
    $35 = ($34|0)!=(0);
    if ($35) {
     HEAP32[$0>>2] = -1;
     $93 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($93|0);
    }
   }
   $36 = HEAP32[$1>>2]|0;
   $37 = (($36) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($38) - ($41))|0;
   $43 = (($42) - 1)|0;
   HEAP32[$rem>>2] = $43;
   HEAP32[$args>>2] = $varargs;
   $44 = HEAP32[$1>>2]|0;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = HEAP32[$1>>2]|0;
   $48 = (($47) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($46) + ($49)|0);
   $51 = HEAP32[$rem>>2]|0;
   $52 = HEAP32[$2>>2]|0;
   $53 = (_vsnprintf($50,$51,$52,$args)|0);
   HEAP32[$plen>>2] = $53;
   $54 = HEAP32[$plen>>2]|0;
   $55 = HEAP32[$rem>>2]|0;
   $56 = ($54|0)>=($55|0);
   do {
    if ($56) {
     $57 = HEAP32[$1>>2]|0;
     $58 = (($57) + 12|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP32[$plen>>2]|0;
     $61 = (($59) + ($60))|0;
     $62 = (($61) + 1024)|0;
     HEAP32[$newsize>>2] = $62;
     $63 = HEAP32[$1>>2]|0;
     $64 = HEAP32[$newsize>>2]|0;
     $65 = (_realloc_prn_buffer($63,$64)|0);
     $66 = ($65|0)!=(0);
     if (!($66)) {
      $67 = HEAP32[$1>>2]|0;
      $68 = (($67) + 12|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = (($70) + 16|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($69) - ($72))|0;
      $74 = (($73) - 1)|0;
      HEAP32[$rem>>2] = $74;
      HEAP32[$args>>2] = $varargs;
      $75 = HEAP32[$1>>2]|0;
      $76 = (($75) + 8|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = HEAP32[$1>>2]|0;
      $79 = (($78) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($77) + ($80)|0);
      $82 = HEAP32[$rem>>2]|0;
      $83 = HEAP32[$2>>2]|0;
      $84 = (_vsnprintf($81,$82,$83,$args)|0);
      HEAP32[$plen>>2] = $84;
      break;
     }
     HEAP32[$0>>2] = -1;
     $93 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($93|0);
    }
   } while(0);
   $85 = HEAP32[$plen>>2]|0;
   $86 = ($85|0)>(0);
   if ($86) {
    $87 = HEAP32[$plen>>2]|0;
    $88 = HEAP32[$1>>2]|0;
    $89 = (($88) + 16|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + ($87))|0;
    HEAP32[$89>>2] = $91;
   }
   $92 = HEAP32[$plen>>2]|0;
   HEAP32[$0>>2] = $92;
   $93 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($93|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $93 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($93|0);
}
function _pprintf_init($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $ret = sp;
 HEAP32[$0>>2] = $prn;
 HEAP32[$ret>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 HEAP32[$2>>2] = 2048;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_malloc($5)|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$ret>>2] = -1;
  $18 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($18|0);
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  ;HEAP8[$15+0>>0]=0|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 16|0);
  HEAP32[$17>>2] = 0;
  $18 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($18|0);
 }
 return 0|0;
}
function _realloc_prn_buffer($prn,$newlen) {
 $prn = $prn|0;
 $newlen = $newlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $tmp = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $prn;
 HEAP32[$1>>2] = $newlen;
 HEAP32[$err>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)<=(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6<<1;
  HEAP32[$1>>2] = $7;
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = (_realloc($10,$11)|0);
 HEAP32[$tmp>>2] = $12;
 $13 = HEAP32[$tmp>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  HEAP32[$err>>2] = 1;
 } else {
  $15 = HEAP32[$1>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 12|0);
  HEAP32[$17>>2] = $15;
  $18 = HEAP32[$tmp>>2]|0;
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 8|0);
  HEAP32[$20>>2] = $18;
 }
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26)|0);
 ;HEAP8[$27+0>>0]=0|0;
 $28 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($28|0);
}
function _pputs($prn,$s) {
 $prn = $prn|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $bytesleft = 0, $slen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $slen = sp + 4|0;
 $bytesleft = sp;
 HEAP32[$1>>2] = $prn;
 HEAP32[$2>>2] = $s;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   $9 = HEAP32[$2>>2]|0;
   $10 = (_strlen(($9|0))|0);
   HEAP32[$slen>>2] = $10;
   $11 = HEAP32[$1>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)!=(0|0);
   if ($13) {
    $14 = HEAP32[$2>>2]|0;
    $15 = HEAP32[$1>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    (_fputs(($14|0),($16|0))|0);
    $17 = HEAP32[$slen>>2]|0;
    HEAP32[$0>>2] = $17;
    $63 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($63|0);
   }
   $18 = HEAP32[$1>>2]|0;
   $19 = (($18) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    HEAP32[$0>>2] = 0;
    $63 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($63|0);
   }
   $22 = HEAP32[$1>>2]|0;
   $23 = (($22) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$1>>2]|0;
   $26 = (($25) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($24) - ($27))|0;
   HEAP32[$bytesleft>>2] = $28;
   while(1) {
    $29 = HEAP32[$1>>2]|0;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + 16|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($31) - ($34))|0;
    $36 = ($35>>>0)<(1024);
    if ($36) {
     $64 = 1;
    } else {
     $37 = HEAP32[$bytesleft>>2]|0;
     $38 = HEAP32[$slen>>2]|0;
     $39 = ($37|0)<=($38|0);
     $64 = $39;
    }
    $40 = HEAP32[$1>>2]|0;
    if (!($64)) {
     label = 15;
     break;
    }
    $41 = (_realloc_prn_buffer($40,0)|0);
    $42 = ($41|0)!=(0);
    if ($42) {
     label = 13;
     break;
    }
    $43 = HEAP32[$1>>2]|0;
    $44 = (($43) + 12|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$1>>2]|0;
    $47 = (($46) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($45) - ($48))|0;
    HEAP32[$bytesleft>>2] = $49;
   }
   if ((label|0) == 13) {
    HEAP32[$0>>2] = -1;
    $63 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($63|0);
   }
   else if ((label|0) == 15) {
    $50 = (($40) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = HEAP32[$1>>2]|0;
    $53 = (($52) + 16|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($51) + ($54)|0);
    $56 = HEAP32[$2>>2]|0;
    (_strcpy(($55|0),($56|0))|0);
    $57 = HEAP32[$slen>>2]|0;
    $58 = HEAP32[$1>>2]|0;
    $59 = (($58) + 16|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + ($57))|0;
    HEAP32[$59>>2] = $61;
    $62 = HEAP32[$slen>>2]|0;
    HEAP32[$0>>2] = $62;
    $63 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($63|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $63 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($63|0);
}
function _pputc($prn,$c) {
 $prn = $prn|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $prn;
 HEAP32[$2>>2] = $c;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   $9 = HEAP32[$1>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0|0);
   if ($11) {
    $12 = HEAP32[$2>>2]|0;
    $13 = HEAP32[$1>>2]|0;
    $14 = HEAP32[$13>>2]|0;
    (_fputc(($12|0),($14|0))|0);
    HEAP32[$0>>2] = 1;
    $51 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($51|0);
   }
   $15 = HEAP32[$1>>2]|0;
   $16 = (($15) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    HEAP32[$0>>2] = 0;
    $51 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($51|0);
   }
   $19 = HEAP32[$1>>2]|0;
   $20 = (($19) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$1>>2]|0;
   $23 = (($22) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($21) - ($24))|0;
   $26 = ($25>>>0)<(1024);
   if ($26) {
    $27 = HEAP32[$1>>2]|0;
    $28 = (_realloc_prn_buffer($27,0)|0);
    $29 = ($28|0)!=(0);
    if ($29) {
     HEAP32[$0>>2] = -1;
     $51 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($51|0);
    }
   }
   $30 = HEAP32[$2>>2]|0;
   $31 = $30&255;
   $32 = HEAP32[$1>>2]|0;
   $33 = (($32) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[$1>>2]|0;
   $36 = (($35) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + ($34)|0);
   HEAP8[$38>>0] = $31;
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 1)|0;
   $43 = HEAP32[$1>>2]|0;
   $44 = (($43) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($42)|0);
   HEAP8[$46>>0] = 0;
   $47 = HEAP32[$1>>2]|0;
   $48 = (($47) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + 1)|0;
   HEAP32[$48>>2] = $50;
   HEAP32[$0>>2] = 1;
   $51 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($51|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $51 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($51|0);
}
function _gretl_prn_newline($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_tex_format($1)|0);
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$0>>2]|0;
 if ($3) {
  (_pputs($4,29744)|0);
  STACKTOP = sp;return;
 }
 $5 = (_rtf_format($4)|0);
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$0>>2]|0;
 if ($6) {
  (_pputs($7,29752)|0);
  STACKTOP = sp;return;
 } else {
  (_pputc($7,10)|0);
  STACKTOP = sp;return;
 }
}
function _tex_format($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $9 = 0;
  $8 = $9&1;
  STACKTOP = sp;return ($8|0);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 2;
 $7 = ($6|0)!=(0);
 $9 = $7;
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _rtf_format($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $9 = 0;
  $8 = $9&1;
  STACKTOP = sp;return ($8|0);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 8;
 $7 = ($6|0)!=(0);
 $9 = $7;
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _plain_format($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $9 = 0;
  $8 = $9&1;
  STACKTOP = sp;return ($8|0);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 $9 = $7;
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _rtf_doc_format($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 8;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = HEAP32[$0>>2]|0;
   $9 = (($8) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & 4;
   $12 = ($11|0)!=(0);
   $14 = $12;
  } else {
   $14 = 0;
  }
 } else {
  $14 = 0;
 }
 $13 = $14&1;
 STACKTOP = sp;return ($13|0);
}
function _tex_doc_format($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 2;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = HEAP32[$0>>2]|0;
   $9 = (($8) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & 4;
   $12 = ($11|0)!=(0);
   $14 = $12;
  } else {
   $14 = 0;
  }
 } else {
  $14 = 0;
 }
 $13 = $14&1;
 STACKTOP = sp;return ($13|0);
}
function _csv_format($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $9 = 0;
  $8 = $9&1;
  STACKTOP = sp;return ($8|0);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 128;
 $7 = ($6|0)!=(0);
 $9 = $7;
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _prn_delim($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $8 = $6;
 } else {
  $8 = 44;
 }
 $7 = $8&255;
 STACKTOP = sp;return ($7|0);
}
function _prn_add_tempfile($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dotdir = 0, $err = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $dotdir = sp + 12|0;
 $n = sp + 8|0;
 $err = sp + 4|0;
 HEAP32[$1>>2] = $prn;
 $2 = (_gretl_dotdir()|0);
 HEAP32[$dotdir>>2] = $2;
 $3 = HEAP32[$dotdir>>2]|0;
 $4 = (_strlen(($3|0))|0);
 $5 = (($4) + 16)|0;
 HEAP32[$n>>2] = $5;
 HEAP32[$err>>2] = 0;
 $6 = HEAP32[$n>>2]|0;
 $7 = (_malloc($6)|0);
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 36|0);
 HEAP32[$9>>2] = $7;
 $10 = HEAP32[$1>>2]|0;
 $11 = (($10) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  HEAP32[$0>>2] = 12;
  $32 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$dotdir>>2]|0;
 HEAP32[$vararg_buffer>>2] = $17;
 (_sprintf($16,29768,$vararg_buffer)|0);
 $18 = HEAP32[$1>>2]|0;
 $19 = (($18) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_gretl_mktemp($20,29784)|0);
 $22 = HEAP32[$1>>2]|0;
 HEAP32[$22>>2] = $21;
 $23 = HEAP32[$1>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + 36|0);
  $28 = HEAP32[$27>>2]|0;
  _free($28);
  $29 = HEAP32[$1>>2]|0;
  $30 = (($29) + 36|0);
  HEAP32[$30>>2] = 0;
  HEAP32[$err>>2] = 11;
 }
 $31 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $31;
 $32 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _series_table_get_string($st,$val) {
 $st = $st|0;
 $val = +$val;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $k = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $ret = sp + 12|0;
 $k = sp + 8|0;
 HEAP32[$0>>2] = $st;
 HEAPF64[$1>>3] = $val;
 HEAP32[$ret>>2] = 0;
 $2 = +HEAPF64[$1>>3];
 $3 = $2 == 1.79769313486231570815E+308;
 if (!($3)) {
  $4 = +HEAPF64[$1>>3];
  $5 = (~~(($4)));
  HEAP32[$k>>2] = $5;
  $6 = HEAP32[$k>>2]|0;
  $7 = ($6|0)>(0);
  if ($7) {
   $8 = HEAP32[$k>>2]|0;
   $9 = HEAP32[$0>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)<=($10|0);
   if ($11) {
    $12 = HEAP32[$k>>2]|0;
    $13 = (($12) - 1)|0;
    $14 = HEAP32[$0>>2]|0;
    $15 = (($14) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + ($13<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    HEAP32[$ret>>2] = $18;
   }
  }
 }
 $19 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _series_table_destroy($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $st;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 _strings_array_free($5,$7);
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  _g_hash_table_destroy($14);
 }
 $15 = HEAP32[$0>>2]|0;
 _free($15);
 STACKTOP = sp;return;
}
function _builtin_strings_cleanup() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = sp + 4|0;
 $n = sp;
 HEAP32[$n>>2] = 13;
 HEAP32[$i>>2] = 0;
 while(1) {
  $0 = HEAP32[$i>>2]|0;
  $1 = HEAP32[$n>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$i>>2]|0;
  $4 = (29792 + (($3*36)|0)|0);
  $5 = (($4) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = HEAP32[$i>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$i>>2] = $8;
 }
 STACKTOP = sp;return;
}
function _date_as_double($t,$pd,$sd0) {
 $t = $t|0;
 $pd = $pd|0;
 $sd0 = +$sd0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, $p10 = 0, $pp = 0, $yp = 0, $ysd = 0, $yy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 8|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp;
 $ysd = sp + 32|0;
 $yy = sp + 28|0;
 $pp = sp + 24|0;
 $yp = sp + 20|0;
 $p10 = sp + 16|0;
 HEAP32[$1>>2] = $t;
 HEAP32[$2>>2] = $pd;
 HEAPF64[$3>>3] = $sd0;
 $4 = +HEAPF64[$3>>3];
 $5 = (~~(($4)));
 HEAP32[$ysd>>2] = $5;
 HEAP32[$p10>>2] = 10;
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = HEAP32[$ysd>>2]|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = (($8) + ($9))|0;
  $11 = (+($10|0));
  HEAPF64[$0>>3] = $11;
  $62 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$62);
 }
 $12 = HEAP32[$2>>2]|0;
 HEAP32[$pp>>2] = $12;
 while(1) {
  $13 = HEAP32[$pp>>2]|0;
  $14 = (($13|0) / 10)&-1;
  HEAP32[$pp>>2] = $14;
  $15 = ($14|0)!=(0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$p10>>2]|0;
  $17 = ($16*10)|0;
  HEAP32[$p10>>2] = $17;
 }
 $18 = HEAP32[$1>>2]|0;
 $19 = HEAP32[$2>>2]|0;
 $20 = (($18|0) % ($19|0))&-1;
 $21 = (+($20|0));
 $22 = HEAP32[$p10>>2]|0;
 $23 = (+($22|0));
 $24 = +HEAPF64[$3>>3];
 $25 = HEAP32[$ysd>>2]|0;
 $26 = (+($25|0));
 $27 = $24 - $26;
 $28 = $23 * $27;
 $29 = $21 + $28;
 $30 = $29 + 0.5;
 $31 = (~~(($30)));
 HEAP32[$pp>>2] = $31;
 $32 = HEAP32[$pp>>2]|0;
 $33 = HEAP32[$2>>2]|0;
 $34 = ($32|0)!=($33|0);
 $35 = HEAP32[$ysd>>2]|0;
 $36 = HEAP32[$1>>2]|0;
 $37 = HEAP32[$2>>2]|0;
 $38 = (($36|0) / ($37|0))&-1;
 $39 = (($35) + ($38))|0;
 if ($34) {
  $40 = HEAP32[$pp>>2]|0;
  $41 = HEAP32[$2>>2]|0;
  $42 = (($40|0) / ($41|0))&-1;
  $43 = (($39) + ($42))|0;
  $44 = (+($43|0));
  $45 = $44 + 0.5;
  $46 = (~~(($45)));
  HEAP32[$yy>>2] = $46;
  $47 = HEAP32[$pp>>2]|0;
  $48 = HEAP32[$2>>2]|0;
  $49 = (($47|0) % ($48|0))&-1;
  HEAP32[$yp>>2] = $49;
 } else {
  $50 = (+($39|0));
  $51 = $50 + 0.5;
  $52 = (~~(($51)));
  HEAP32[$yy>>2] = $52;
  $53 = HEAP32[$pp>>2]|0;
  HEAP32[$yp>>2] = $53;
 }
 $54 = HEAP32[$yy>>2]|0;
 $55 = (+($54|0));
 $56 = HEAP32[$yp>>2]|0;
 $57 = (+($56|0));
 $58 = HEAP32[$p10>>2]|0;
 $59 = (+($58|0));
 $60 = $57 / $59;
 $61 = $55 + $60;
 HEAPF64[$0>>3] = $61;
 $62 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$62);
}
function _ijton($i,$j,$nrows) {
 $i = $i|0;
 $j = $j|0;
 $nrows = $nrows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $tmp = sp;
 HEAP32[$0>>2] = $i;
 HEAP32[$1>>2] = $j;
 HEAP32[$2>>2] = $nrows;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)>($4|0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  HEAP32[$tmp>>2] = $6;
  $7 = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$tmp>>2]|0;
  HEAP32[$1>>2] = $8;
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = Math_imul($9, $10)|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($11) + ($12))|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($13) - ($14))|0;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) - 1)|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = Math_imul($17, $18)|0;
 $20 = (($19|0) / 2)&-1;
 $21 = (($15) - ($20))|0;
 STACKTOP = sp;return ($21|0);
}
function _gretl_isdummy($t1,$t2,$x) {
 $t1 = $t1|0;
 $t2 = $t2|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $goodobs = 0;
 var $m = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $t = sp + 8|0;
 $m = sp + 4|0;
 $goodobs = sp;
 HEAP32[$1>>2] = $t1;
 HEAP32[$2>>2] = $t2;
 HEAP32[$3>>2] = $x;
 HEAP32[$m>>2] = 0;
 HEAP32[$goodobs>>2] = 0;
 $4 = HEAP32[$1>>2]|0;
 HEAP32[$t>>2] = $4;
 while(1) {
  $5 = HEAP32[$t>>2]|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = ($5|0)<=($6|0);
  if (!($7)) {
   break;
  }
  $8 = HEAP32[$t>>2]|0;
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($8<<3)|0);
  $11 = +HEAPF64[$10>>3];
  $12 = $11 == 1.79769313486231570815E+308;
  if (!($12)) {
   $13 = HEAP32[$t>>2]|0;
   $14 = HEAP32[$3>>2]|0;
   $15 = (($14) + ($13<<3)|0);
   $16 = +HEAPF64[$15>>3];
   $17 = $16 != 0.0;
   if ($17) {
    $18 = HEAP32[$t>>2]|0;
    $19 = HEAP32[$3>>2]|0;
    $20 = (($19) + ($18<<3)|0);
    $21 = +HEAPF64[$20>>3];
    $22 = $21 != 1.0;
    if ($22) {
     label = 6;
     break;
    }
   }
   $23 = HEAP32[$t>>2]|0;
   $24 = HEAP32[$3>>2]|0;
   $25 = (($24) + ($23<<3)|0);
   $26 = +HEAPF64[$25>>3];
   $27 = $26 == 1.0;
   if ($27) {
    $28 = HEAP32[$m>>2]|0;
    $29 = (($28) + 1)|0;
    HEAP32[$m>>2] = $29;
   }
   $30 = HEAP32[$goodobs>>2]|0;
   $31 = (($30) + 1)|0;
   HEAP32[$goodobs>>2] = $31;
  }
  $32 = HEAP32[$t>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$t>>2] = $33;
 }
 if ((label|0) == 6) {
  HEAP32[$0>>2] = 0;
  $38 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($38|0);
 }
 $34 = HEAP32[$m>>2]|0;
 $35 = HEAP32[$goodobs>>2]|0;
 $36 = ($34|0)<($35|0);
 if ($36) {
  $37 = HEAP32[$m>>2]|0;
  HEAP32[$0>>2] = $37;
  $38 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($38|0);
 } else {
  HEAP32[$0>>2] = 0;
  $38 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($38|0);
 }
 return 0|0;
}
function _gretl_isconst($t1,$t2,$x) {
 $t1 = $t1|0;
 $t2 = $t2|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0, $9 = 0, $ret = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $t = sp + 4|0;
 $ret = sp;
 HEAP32[$1>>2] = $t1;
 HEAP32[$2>>2] = $t2;
 HEAP32[$3>>2] = $x;
 HEAP32[$ret>>2] = 1;
 while(1) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$3>>2]|0;
  $6 = (($5) + ($4<<3)|0);
  $7 = +HEAPF64[$6>>3];
  $8 = $7 == 1.79769313486231570815E+308;
  if ($8) {
   $9 = HEAP32[$1>>2]|0;
   $10 = HEAP32[$2>>2]|0;
   $11 = ($9|0)<=($10|0);
   $41 = $11;
  } else {
   $41 = 0;
  }
  $12 = HEAP32[$1>>2]|0;
  if (!($41)) {
   break;
  }
  $13 = (($12) + 1)|0;
  HEAP32[$1>>2] = $13;
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = ($12|0)>=($14|0);
 if ($15) {
  HEAP32[$0>>2] = 0;
  $40 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($40|0);
 }
 $16 = HEAP32[$1>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$t>>2] = $17;
 while(1) {
  $18 = HEAP32[$t>>2]|0;
  $19 = HEAP32[$2>>2]|0;
  $20 = ($18|0)<=($19|0);
  if (!($20)) {
   break;
  }
  $21 = HEAP32[$t>>2]|0;
  $22 = HEAP32[$3>>2]|0;
  $23 = (($22) + ($21<<3)|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $24 == 1.79769313486231570815E+308;
  if (!($25)) {
   $26 = HEAP32[$t>>2]|0;
   $27 = HEAP32[$3>>2]|0;
   $28 = (($27) + ($26<<3)|0);
   $29 = +HEAPF64[$28>>3];
   $30 = HEAP32[$1>>2]|0;
   $31 = HEAP32[$3>>2]|0;
   $32 = (($31) + ($30<<3)|0);
   $33 = +HEAPF64[$32>>3];
   $34 = $29 - $33;
   $35 = (+Math_abs((+$34)));
   $36 = $35 > 2.22044604925031308085E-16;
   if ($36) {
    label = 12;
    break;
   }
  }
  $37 = HEAP32[$t>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$t>>2] = $38;
 }
 if ((label|0) == 12) {
  HEAP32[$ret>>2] = 0;
 }
 $39 = HEAP32[$ret>>2]|0;
 HEAP32[$0>>2] = $39;
 $40 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function _gretl_isunits($t1,$t2,$x) {
 $t1 = $t1|0;
 $t2 = $t2|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ret = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $t = sp + 4|0;
 $ret = sp;
 HEAP32[$0>>2] = $t1;
 HEAP32[$1>>2] = $t2;
 HEAP32[$2>>2] = $x;
 HEAP32[$ret>>2] = 1;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$t>>2] = $3;
 while(1) {
  $4 = HEAP32[$t>>2]|0;
  $5 = HEAP32[$1>>2]|0;
  $6 = ($4|0)<=($5|0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = HEAP32[$t>>2]|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + ($7<<3)|0);
  $10 = +HEAPF64[$9>>3];
  $11 = $10 == 1.79769313486231570815E+308;
  if (!($11)) {
   $12 = HEAP32[$t>>2]|0;
   $13 = HEAP32[$2>>2]|0;
   $14 = (($13) + ($12<<3)|0);
   $15 = +HEAPF64[$14>>3];
   $16 = $15 != 1.0;
   if ($16) {
    break;
   }
  }
  $17 = HEAP32[$t>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$t>>2] = $18;
 }
 if ((label|0) == 7) {
  $19 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($19|0);
 }
 HEAP32[$ret>>2] = 0;
 $19 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _true_const($v,$dset) {
 $v = $v|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $v;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)>=($7|0);
  if (!($8)) {
   $9 = HEAP32[$2>>2]|0;
   $10 = (($9) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$2>>2]|0;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$1>>2]|0;
   $16 = HEAP32[$2>>2]|0;
   $17 = (($16) + 64|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($15<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_gretl_isunits($11,$14,$20)|0);
   HEAP32[$0>>2] = $21;
   $22 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($22|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $22 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($22|0);
}
function _gretl_compare_doubles($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $da = 0, $db = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $da = sp + 4|0;
 $db = sp;
 HEAP32[$0>>2] = $a;
 HEAP32[$1>>2] = $b;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$da>>2] = $2;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$db>>2] = $3;
 $4 = HEAP32[$da>>2]|0;
 $5 = +HEAPF64[$4>>3];
 $6 = HEAP32[$db>>2]|0;
 $7 = +HEAPF64[$6>>3];
 $8 = $5 > $7;
 $9 = $8&1;
 $10 = HEAP32[$da>>2]|0;
 $11 = +HEAPF64[$10>>3];
 $12 = HEAP32[$db>>2]|0;
 $13 = +HEAPF64[$12>>3];
 $14 = $11 < $13;
 $15 = $14&1;
 $16 = (($9) - ($15))|0;
 STACKTOP = sp;return ($16|0);
}
function _count_distinct_values($x,$n) {
 $x = $x|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0;
 var $c = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $i = sp + 4|0;
 $c = sp;
 HEAP32[$0>>2] = $x;
 HEAP32[$1>>2] = $n;
 HEAP32[$c>>2] = 1;
 HEAP32[$i>>2] = 1;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + ($5<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = HEAP32[$i>>2]|0;
  $10 = (($9) - 1)|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + ($10<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $8 != $13;
  if ($14) {
   $15 = HEAP32[$c>>2]|0;
   $16 = (($15) + 1)|0;
   HEAP32[$c>>2] = $16;
  }
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[$c>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _gretl_calculate_criteria($ess,$n,$k,$ll,$aic,$bic,$hqc) {
 $ess = +$ess;
 $n = $n|0;
 $k = $k|0;
 $ll = $ll|0;
 $aic = $aic|0;
 $bic = $bic|0;
 $hqc = $hqc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $9 = 0.0, $c = 0, $err = 0, $ln2pi1 = 0, $lnl = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 40|0;
 $1 = sp + 72|0;
 $2 = sp + 68|0;
 $3 = sp + 64|0;
 $4 = sp + 60|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $lnl = sp + 32|0;
 $c = sp + 8|0;
 $err = sp + 48|0;
 $ln2pi1 = sp;
 HEAPF64[$0>>3] = $ess;
 HEAP32[$1>>2] = $n;
 HEAP32[$2>>2] = $k;
 HEAP32[$3>>2] = $ll;
 HEAP32[$4>>2] = $aic;
 HEAP32[$5>>2] = $bic;
 HEAP32[$6>>2] = $hqc;
 HEAP32[$err>>2] = 0;
 $7 = +HEAPF64[$0>>3];
 $8 = $7 == 1.79769313486231570815E+308;
 $9 = +HEAPF64[$0>>3];
 $10 = $9 <= 0.0;
 $or$cond = $8 | $10;
 do {
  if ($or$cond) {
   label = 4;
  } else {
   $11 = HEAP32[$2>>2]|0;
   $12 = ($11|0)<(1);
   if ($12) {
    label = 4;
   } else {
    $13 = HEAP32[$1>>2]|0;
    $14 = HEAP32[$2>>2]|0;
    $15 = ($13|0)<=($14|0);
    if ($15) {
     label = 4;
    } else {
     HEAPF64[$ln2pi1>>3] = 2.83787706640934489499;
     $16 = (___errno_location()|0);
     HEAP32[$16>>2] = 0;
     $17 = HEAP32[$1>>2]|0;
     $18 = (+($17|0));
     $19 = -0.5 * $18;
     $20 = +HEAPF64[$0>>3];
     $21 = (+Math_log((+$20)));
     $22 = $19 * $21;
     HEAPF64[$lnl>>3] = $22;
     $23 = (___errno_location()|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(33);
     if (!($25)) {
      $26 = (___errno_location()|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)==(34);
      if (!($28)) {
       $29 = HEAP32[$1>>2]|0;
       $30 = (+($29|0));
       $31 = -0.5 * $30;
       $32 = HEAP32[$1>>2]|0;
       $33 = (+($32|0));
       $34 = (+Math_log((+$33)));
       $35 = 2.83787706640934489499 - $34;
       $36 = $31 * $35;
       $37 = +HEAPF64[$lnl>>3];
       $38 = $37 + $36;
       HEAPF64[$lnl>>3] = $38;
       $39 = +HEAPF64[$lnl>>3];
       $40 = -2.0 * $39;
       $41 = HEAP32[$2>>2]|0;
       $42 = $41<<1;
       $43 = (+($42|0));
       $44 = $40 + $43;
       HEAPF64[$c>>3] = $44;
       $45 = +HEAPF64[$lnl>>3];
       $46 = -2.0 * $45;
       $47 = HEAP32[$2>>2]|0;
       $48 = (+($47|0));
       $49 = HEAP32[$1>>2]|0;
       $50 = (+($49|0));
       $51 = (+Math_log((+$50)));
       $52 = $48 * $51;
       $53 = $46 + $52;
       $54 = (($c) + 8|0);
       HEAPF64[$54>>3] = $53;
       $55 = +HEAPF64[$lnl>>3];
       $56 = -2.0 * $55;
       $57 = HEAP32[$2>>2]|0;
       $58 = $57<<1;
       $59 = (+($58|0));
       $60 = HEAP32[$1>>2]|0;
       $61 = (+($60|0));
       $62 = (+Math_log((+$61)));
       $63 = (+Math_log((+$62)));
       $64 = $59 * $63;
       $65 = $56 + $64;
       $66 = (($c) + 16|0);
       HEAPF64[$66>>3] = $65;
       break;
      }
     }
     HEAP32[$err>>2] = 1;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  HEAP32[$err>>2] = 1;
 }
 $67 = HEAP32[$err>>2]|0;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = HEAP32[$3>>2]|0;
  HEAPF64[$69>>3] = 1.79769313486231570815E+308;
  $70 = HEAP32[$4>>2]|0;
  HEAPF64[$70>>3] = 1.79769313486231570815E+308;
  $71 = HEAP32[$5>>2]|0;
  HEAPF64[$71>>3] = 1.79769313486231570815E+308;
  $72 = HEAP32[$6>>2]|0;
  HEAPF64[$72>>3] = 1.79769313486231570815E+308;
  $83 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($83|0);
 } else {
  $73 = +HEAPF64[$lnl>>3];
  $74 = HEAP32[$3>>2]|0;
  HEAPF64[$74>>3] = $73;
  $75 = +HEAPF64[$c>>3];
  $76 = HEAP32[$4>>2]|0;
  HEAPF64[$76>>3] = $75;
  $77 = (($c) + 8|0);
  $78 = +HEAPF64[$77>>3];
  $79 = HEAP32[$5>>2]|0;
  HEAPF64[$79>>3] = $78;
  $80 = (($c) + 16|0);
  $81 = +HEAPF64[$80>>3];
  $82 = HEAP32[$6>>2]|0;
  HEAPF64[$82>>3] = $81;
  $83 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($83|0);
 }
 return 0|0;
}
function _ls_criteria($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0.0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aic = 0, $bic = 0, $err = 0, $hqc = 0, $ll = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $ll = sp + 24|0;
 $aic = sp + 16|0;
 $bic = sp + 8|0;
 $hqc = sp;
 $err = sp + 32|0;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 104|0);
 $3 = +HEAPF64[$2>>3];
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_gretl_calculate_criteria($3,$6,$9,$ll,$aic,$bic,$hqc)|0);
 HEAP32[$err>>2] = $10;
 $11 = +HEAPF64[$ll>>3];
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 160|0);
 HEAPF64[$13>>3] = $11;
 $14 = +HEAPF64[$aic>>3];
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 184|0);
 HEAPF64[$16>>3] = $14;
 $17 = +HEAPF64[$bic>>3];
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 184|0);
 $20 = (($19) + 8|0);
 HEAPF64[$20>>3] = $17;
 $21 = +HEAPF64[$hqc>>3];
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 184|0);
 $24 = (($23) + 16|0);
 HEAPF64[$24>>3] = $21;
 $25 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($25|0);
}
function _copyvec($src,$n) {
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sz = 0, $targ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $targ = sp + 4|0;
 $sz = sp;
 HEAP32[$0>>2] = $src;
 HEAP32[$1>>2] = $n;
 HEAP32[$targ>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2<<3;
 HEAP32[$sz>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = HEAP32[$sz>>2]|0;
   $9 = (_malloc($8)|0);
   HEAP32[$targ>>2] = $9;
  }
 }
 $10 = HEAP32[$targ>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $15 = HEAP32[$targ>>2]|0;
  STACKTOP = sp;return ($15|0);
 }
 $12 = HEAP32[$targ>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$sz>>2]|0;
 _memcpy(($12|0),($13|0),($14|0))|0;
 $15 = HEAP32[$targ>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _doubles_array_free($X,$m) {
 $X = $X|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $X;
 HEAP32[$1>>2] = $m;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $4 = HEAP32[$i>>2]|0;
  $5 = HEAP32[$1>>2]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $11 = HEAP32[$i>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$i>>2] = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 _free($13);
 STACKTOP = sp;return;
}
function _doubles_array_new($m,$n) {
 $m = $m|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $X = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $X = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $m;
 HEAP32[$2>>2] = $n;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[$0>>2] = 0;
  $40 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($40|0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = $5<<2;
 $7 = (_malloc($6)|0);
 HEAP32[$X>>2] = $7;
 $8 = HEAP32[$X>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = HEAP32[$X>>2]|0;
  HEAP32[$0>>2] = $10;
  $40 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($40|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[$i>>2]|0;
  $15 = HEAP32[$X>>2]|0;
  $16 = (($15) + ($14<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = ($19|0)>(0);
 L13: do {
  if ($20) {
   HEAP32[$i>>2] = 0;
   while(1) {
    $21 = HEAP32[$i>>2]|0;
    $22 = HEAP32[$1>>2]|0;
    $23 = ($21|0)<($22|0);
    if (!($23)) {
     break L13;
    }
    $24 = HEAP32[$2>>2]|0;
    $25 = $24<<3;
    $26 = (_malloc($25)|0);
    $27 = HEAP32[$i>>2]|0;
    $28 = HEAP32[$X>>2]|0;
    $29 = (($28) + ($27<<2)|0);
    HEAP32[$29>>2] = $26;
    $30 = HEAP32[$i>>2]|0;
    $31 = HEAP32[$X>>2]|0;
    $32 = (($31) + ($30<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    if ($34) {
     break;
    }
    $37 = HEAP32[$i>>2]|0;
    $38 = (($37) + 1)|0;
    HEAP32[$i>>2] = $38;
   }
   $35 = HEAP32[$X>>2]|0;
   $36 = HEAP32[$1>>2]|0;
   _doubles_array_free($35,$36);
   HEAP32[$X>>2] = 0;
  }
 } while(0);
 $39 = HEAP32[$X>>2]|0;
 HEAP32[$0>>2] = $39;
 $40 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function _libgretl_init() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_libset_init()|0);
 _gretl_rand_init();
 _gretl_xml_init();
 _gretl_stopwatch_init();
 $0 = (_get_mp_bits()|0);
 ___gmpf_set_default_prec($0);
 STACKTOP = sp;return;
}
function _gretl_stopwatch_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _gretl_unix_stopwatch_init();
 STACKTOP = sp;return;
}
function _libgretl_session_cleanup($mode) {
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $mode;
 _gretl_saved_objects_cleanup();
 _gretl_transforms_cleanup();
 _gretl_lists_cleanup();
 _gretl_tests_cleanup();
 (_gretl_plotx(0,0)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(1);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 _destroy_user_vars();
 STACKTOP = sp;return;
}
function _gretl_tests_cleanup() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_record_or_get_test_matrix(0,0,4,0)|0);
 STACKTOP = sp;return;
}
function _libgretl_cleanup() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _libgretl_session_cleanup(0);
 _gretl_rand_free();
 _gretl_functions_cleanup();
 _libset_cleanup();
 _gretl_command_hash_cleanup();
 _gretl_function_hash_cleanup();
 _lapack_mem_free();
 _forecast_matrix_cleanup();
 _option_flags_cleanup();
 _kalman_cleanup();
 _gnuplot_cleanup();
 _bufgets_cleanup();
 _builtin_strings_cleanup();
 _gretl_xml_cleanup();
 STACKTOP = sp;return;
}
function _record_test_result($teststat,$pval,$blurb) {
 $teststat = +$teststat;
 $pval = +$pval;
 $blurb = $blurb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = sp + 16|0;
 HEAPF64[$0>>3] = $teststat;
 HEAPF64[$1>>3] = $pval;
 HEAP32[$2>>2] = $blurb;
 $3 = +HEAPF64[$0>>3];
 $4 = +HEAPF64[$1>>3];
 $5 = HEAP32[$2>>2]|0;
 (+_record_or_get_test_result($3,$4,1.79769313486231570815E+308,$5,0));
 STACKTOP = sp;return;
}
function _record_or_get_test_result($teststat,$pval,$lnl,$instr,$code) {
 $teststat = +$teststat;
 $pval = +$pval;
 $lnl = +$lnl;
 $instr = $instr|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $ret = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer9 = sp + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $ret = sp;
 HEAPF64[$0>>3] = $teststat;
 HEAPF64[$1>>3] = $pval;
 HEAPF64[$2>>3] = $lnl;
 HEAP32[$3>>2] = $instr;
 HEAP32[$4>>2] = $code;
 HEAPF64[$ret>>3] = 1.79769313486231570815E+308;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[30264>>2] = 5;
  $7 = +HEAPF64[$0>>3];
  HEAPF64[30416>>3] = $7;
  $8 = +HEAPF64[$1>>3];
  HEAPF64[30424>>3] = $8;
  $9 = +HEAPF64[$2>>3];
  HEAPF64[30432>>3] = $9;
  HEAP8[30288>>0] = 0;
  $10 = HEAP32[$3>>2]|0;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   $41 = +HEAPF64[$ret>>3];
   STACKTOP = sp;return (+$41);
  }
  $12 = HEAP32[$3>>2]|0;
  (_strncat(30288,$12,127)|0);
  $41 = +HEAPF64[$ret>>3];
  STACKTOP = sp;return (+$41);
 }
 $13 = HEAP32[$4>>2]|0;
 $14 = ($13|0)==(1);
 $15 = HEAP32[$4>>2]|0;
 $16 = ($15|0)==(2);
 $or$cond = $14 | $16;
 $17 = HEAP32[$4>>2]|0;
 $18 = ($17|0)==(3);
 $or$cond3 = $or$cond | $18;
 $19 = HEAP32[30264>>2]|0;
 $20 = ($19|0)==(5);
 $or$cond5 = $or$cond3 & $20;
 if (!($or$cond5)) {
  $41 = +HEAPF64[$ret>>3];
  STACKTOP = sp;return (+$41);
 }
 $21 = HEAP32[$3>>2]|0;
 $22 = ($21|0)!=(0|0);
 do {
  if ($22) {
   $23 = HEAP32[$4>>2]|0;
   $24 = ($23|0)==(1);
   if ($24) {
    $25 = HEAP32[$3>>2]|0;
    HEAP32[$vararg_buffer9>>2] = 30288;
    (_sprintf($25,30440,$vararg_buffer9)|0);
    break;
   }
   $26 = HEAP32[$4>>2]|0;
   $27 = ($26|0)==(2);
   if ($27) {
    $28 = HEAP32[$3>>2]|0;
    HEAP32[$vararg_buffer9>>2] = 30288;
    (_sprintf($28,30448,$vararg_buffer9)|0);
    break;
   }
   $29 = HEAP32[$4>>2]|0;
   $30 = ($29|0)==(3);
   if ($30) {
    $31 = HEAP32[$3>>2]|0;
    HEAP32[$vararg_buffer9>>2] = 30288;
    (_sprintf($31,30472,$vararg_buffer9)|0);
   }
  }
 } while(0);
 $32 = HEAP32[$4>>2]|0;
 $33 = ($32|0)==(1);
 if ($33) {
  $34 = +HEAPF64[30416>>3];
  HEAPF64[$ret>>3] = $34;
  $41 = +HEAPF64[$ret>>3];
  STACKTOP = sp;return (+$41);
 }
 $35 = HEAP32[$4>>2]|0;
 $36 = ($35|0)==(2);
 if ($36) {
  $37 = +HEAPF64[30424>>3];
  HEAPF64[$ret>>3] = $37;
  $41 = +HEAPF64[$ret>>3];
  STACKTOP = sp;return (+$41);
 }
 $38 = HEAP32[$4>>2]|0;
 $39 = ($38|0)==(3);
 if (!($39)) {
  $41 = +HEAPF64[$ret>>3];
  STACKTOP = sp;return (+$41);
 }
 $40 = +HEAPF64[30432>>3];
 HEAPF64[$ret>>3] = $40;
 $41 = +HEAPF64[$ret>>3];
 STACKTOP = sp;return (+$41);
}
function _record_or_get_test_matrix($tests,$pvals,$code,$err) {
 $tests = $tests|0;
 $pvals = $pvals|0;
 $code = $code|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $ret = 0, $src = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $ret = sp + 4|0;
 $src = sp;
 HEAP32[$1>>2] = $tests;
 HEAP32[$2>>2] = $pvals;
 HEAP32[$3>>2] = $code;
 HEAP32[$4>>2] = $err;
 HEAP32[$ret>>2] = 0;
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(4);
 if ($6) {
  $7 = HEAP32[30272>>2]|0;
  _gretl_matrix_free($7);
  $8 = HEAP32[30280>>2]|0;
  _gretl_matrix_free($8);
  HEAP32[30280>>2] = 0;
  HEAP32[30272>>2] = 0;
  HEAP32[30264>>2] = 0;
  HEAP32[$0>>2] = 0;
  $35 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($35|0);
 }
 $9 = HEAP32[$3>>2]|0;
 $10 = ($9|0)==(0);
 do {
  if ($10) {
   HEAP32[30264>>2] = 11;
   $11 = HEAP32[30272>>2]|0;
   _gretl_matrix_free($11);
   $12 = HEAP32[$1>>2]|0;
   HEAP32[30272>>2] = $12;
   $13 = HEAP32[30280>>2]|0;
   _gretl_matrix_free($13);
   $14 = HEAP32[$2>>2]|0;
   HEAP32[30280>>2] = $14;
  } else {
   $15 = HEAP32[$3>>2]|0;
   $16 = ($15|0)==(1);
   $17 = HEAP32[$3>>2]|0;
   $18 = ($17|0)==(2);
   $or$cond = $16 | $18;
   $19 = HEAP32[$3>>2]|0;
   $20 = ($19|0)==(3);
   $or$cond3 = $or$cond | $20;
   if ($or$cond3) {
    $21 = HEAP32[$3>>2]|0;
    $22 = ($21|0)==(1);
    $23 = HEAP32[30272>>2]|0;
    $24 = HEAP32[30280>>2]|0;
    $25 = $22 ? $23 : $24;
    HEAP32[$src>>2] = $25;
    $26 = HEAP32[$src>>2]|0;
    $27 = ($26|0)!=(0|0);
    if (!($27)) {
     $33 = HEAP32[$4>>2]|0;
     HEAP32[$33>>2] = 30;
     break;
    }
    $28 = HEAP32[$src>>2]|0;
    $29 = (_gretl_matrix_copy($28)|0);
    HEAP32[$ret>>2] = $29;
    $30 = HEAP32[$ret>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     $32 = HEAP32[$4>>2]|0;
     HEAP32[$32>>2] = 12;
    }
   }
  }
 } while(0);
 $34 = HEAP32[$ret>>2]|0;
 HEAP32[$0>>2] = $34;
 $35 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($35|0);
}
function _gretl_unix_stopwatch_init() {
 var $0 = 0, $1 = 0, $timebuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $timebuf = sp;
 $0 = (_sysconf(2)|0);
 HEAP32[30504>>2] = $0;
 $1 = (_times(($timebuf|0))|0);
 HEAP32[30512>>2] = $1;
 STACKTOP = sp;return;
}
function _gretl_xml_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_xmlInitParser()|0);
 STACKTOP = sp;return;
}
function _gretl_xml_cleanup() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_xmlCleanupParser()|0);
 STACKTOP = sp;return;
}
function _igamc($a,$x) {
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
 var $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0;
 var $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0;
 var $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $ans = 0, $ax = 0, $c = 0, $pk = 0, $pkm1 = 0, $pkm2 = 0, $qk = 0, $qkm1 = 0, $qkm2 = 0, $r = 0, $t = 0, $y = 0;
 var $yc = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $0 = sp + 128|0;
 $1 = sp + 120|0;
 $2 = sp + 112|0;
 $ans = sp + 104|0;
 $ax = sp + 96|0;
 $c = sp + 88|0;
 $yc = sp + 80|0;
 $r = sp + 72|0;
 $t = sp + 64|0;
 $y = sp + 56|0;
 $z = sp + 48|0;
 $pk = sp + 40|0;
 $pkm1 = sp + 32|0;
 $pkm2 = sp + 24|0;
 $qk = sp + 16|0;
 $qkm1 = sp + 8|0;
 $qkm2 = sp;
 HEAPF64[$1>>3] = $a;
 HEAPF64[$2>>3] = $x;
 $3 = +HEAPF64[$2>>3];
 $4 = $3 <= 0.0;
 if (!($4)) {
  $5 = +HEAPF64[$1>>3];
  $6 = $5 <= 0.0;
  if (!($6)) {
   $7 = +HEAPF64[$2>>3];
   $8 = $7 < 1.0;
   if (!($8)) {
    $9 = +HEAPF64[$2>>3];
    $10 = +HEAPF64[$1>>3];
    $11 = $9 < $10;
    if (!($11)) {
     $16 = +HEAPF64[$1>>3];
     $17 = +HEAPF64[$2>>3];
     $18 = (+Math_log((+$17)));
     $19 = $16 * $18;
     $20 = +HEAPF64[$2>>3];
     $21 = $19 - $20;
     $22 = +HEAPF64[$1>>3];
     $23 = (+_lgam($22));
     $24 = $21 - $23;
     HEAPF64[$ax>>3] = $24;
     $25 = +HEAPF64[$ax>>3];
     $26 = +HEAPF64[2000>>3];
     $27 = -$26;
     $28 = $25 < $27;
     if ($28) {
      HEAPF64[$0>>3] = 0.0;
      $107 = +HEAPF64[$0>>3];
      STACKTOP = sp;return (+$107);
     }
     $29 = +HEAPF64[$ax>>3];
     $30 = (+Math_exp((+$29)));
     HEAPF64[$ax>>3] = $30;
     $31 = +HEAPF64[$1>>3];
     $32 = 1.0 - $31;
     HEAPF64[$y>>3] = $32;
     $33 = +HEAPF64[$2>>3];
     $34 = +HEAPF64[$y>>3];
     $35 = $33 + $34;
     $36 = $35 + 1.0;
     HEAPF64[$z>>3] = $36;
     HEAPF64[$c>>3] = 0.0;
     HEAPF64[$pkm2>>3] = 1.0;
     $37 = +HEAPF64[$2>>3];
     HEAPF64[$qkm2>>3] = $37;
     $38 = +HEAPF64[$2>>3];
     $39 = $38 + 1.0;
     HEAPF64[$pkm1>>3] = $39;
     $40 = +HEAPF64[$z>>3];
     $41 = +HEAPF64[$2>>3];
     $42 = $40 * $41;
     HEAPF64[$qkm1>>3] = $42;
     $43 = +HEAPF64[$pkm1>>3];
     $44 = +HEAPF64[$qkm1>>3];
     $45 = $43 / $44;
     HEAPF64[$ans>>3] = $45;
     while(1) {
      $46 = +HEAPF64[$c>>3];
      $47 = $46 + 1.0;
      HEAPF64[$c>>3] = $47;
      $48 = +HEAPF64[$y>>3];
      $49 = $48 + 1.0;
      HEAPF64[$y>>3] = $49;
      $50 = +HEAPF64[$z>>3];
      $51 = $50 + 2.0;
      HEAPF64[$z>>3] = $51;
      $52 = +HEAPF64[$y>>3];
      $53 = +HEAPF64[$c>>3];
      $54 = $52 * $53;
      HEAPF64[$yc>>3] = $54;
      $55 = +HEAPF64[$pkm1>>3];
      $56 = +HEAPF64[$z>>3];
      $57 = $55 * $56;
      $58 = +HEAPF64[$pkm2>>3];
      $59 = +HEAPF64[$yc>>3];
      $60 = $58 * $59;
      $61 = $57 - $60;
      HEAPF64[$pk>>3] = $61;
      $62 = +HEAPF64[$qkm1>>3];
      $63 = +HEAPF64[$z>>3];
      $64 = $62 * $63;
      $65 = +HEAPF64[$qkm2>>3];
      $66 = +HEAPF64[$yc>>3];
      $67 = $65 * $66;
      $68 = $64 - $67;
      HEAPF64[$qk>>3] = $68;
      $69 = +HEAPF64[$qk>>3];
      $70 = $69 != 0.0;
      if ($70) {
       $71 = +HEAPF64[$pk>>3];
       $72 = +HEAPF64[$qk>>3];
       $73 = $71 / $72;
       HEAPF64[$r>>3] = $73;
       $74 = +HEAPF64[$ans>>3];
       $75 = +HEAPF64[$r>>3];
       $76 = $74 - $75;
       $77 = +HEAPF64[$r>>3];
       $78 = $76 / $77;
       $79 = (+Math_abs((+$78)));
       HEAPF64[$t>>3] = $79;
       $80 = +HEAPF64[$r>>3];
       HEAPF64[$ans>>3] = $80;
      } else {
       HEAPF64[$t>>3] = 1.0;
      }
      $81 = +HEAPF64[$pkm1>>3];
      HEAPF64[$pkm2>>3] = $81;
      $82 = +HEAPF64[$pk>>3];
      HEAPF64[$pkm1>>3] = $82;
      $83 = +HEAPF64[$qkm1>>3];
      HEAPF64[$qkm2>>3] = $83;
      $84 = +HEAPF64[$qk>>3];
      HEAPF64[$qkm1>>3] = $84;
      $85 = +HEAPF64[$pk>>3];
      $86 = (+Math_abs((+$85)));
      $87 = +HEAPF64[30520>>3];
      $88 = $86 > $87;
      if ($88) {
       $89 = +HEAPF64[30528>>3];
       $90 = +HEAPF64[$pkm2>>3];
       $91 = $90 * $89;
       HEAPF64[$pkm2>>3] = $91;
       $92 = +HEAPF64[30528>>3];
       $93 = +HEAPF64[$pkm1>>3];
       $94 = $93 * $92;
       HEAPF64[$pkm1>>3] = $94;
       $95 = +HEAPF64[30528>>3];
       $96 = +HEAPF64[$qkm2>>3];
       $97 = $96 * $95;
       HEAPF64[$qkm2>>3] = $97;
       $98 = +HEAPF64[30528>>3];
       $99 = +HEAPF64[$qkm1>>3];
       $100 = $99 * $98;
       HEAPF64[$qkm1>>3] = $100;
      }
      $101 = +HEAPF64[$t>>3];
      $102 = +HEAPF64[1984>>3];
      $103 = $101 > $102;
      if (!($103)) {
       break;
      }
     }
     $104 = +HEAPF64[$ans>>3];
     $105 = +HEAPF64[$ax>>3];
     $106 = $104 * $105;
     HEAPF64[$0>>3] = $106;
     $107 = +HEAPF64[$0>>3];
     STACKTOP = sp;return (+$107);
    }
   }
   $12 = +HEAPF64[$1>>3];
   $13 = +HEAPF64[$2>>3];
   $14 = (+_igam($12,$13));
   $15 = 1.0 - $14;
   HEAPF64[$0>>3] = $15;
   $107 = +HEAPF64[$0>>3];
   STACKTOP = sp;return (+$107);
  }
 }
 HEAPF64[$0>>3] = 1.0;
 $107 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$107);
}
function _igam($a,$x) {
 $a = +$a;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $ans = 0, $ax = 0, $c = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $ans = sp + 24|0;
 $ax = sp + 16|0;
 $c = sp + 8|0;
 $r = sp;
 HEAPF64[$1>>3] = $a;
 HEAPF64[$2>>3] = $x;
 $3 = +HEAPF64[$2>>3];
 $4 = $3 <= 0.0;
 if (!($4)) {
  $5 = +HEAPF64[$1>>3];
  $6 = $5 <= 0.0;
  if (!($6)) {
   $7 = +HEAPF64[$2>>3];
   $8 = $7 > 1.0;
   if ($8) {
    $9 = +HEAPF64[$2>>3];
    $10 = +HEAPF64[$1>>3];
    $11 = $9 > $10;
    if ($11) {
     $12 = +HEAPF64[$1>>3];
     $13 = +HEAPF64[$2>>3];
     $14 = (+_igamc($12,$13));
     $15 = 1.0 - $14;
     HEAPF64[$0>>3] = $15;
     $52 = +HEAPF64[$0>>3];
     STACKTOP = sp;return (+$52);
    }
   }
   $16 = +HEAPF64[$1>>3];
   $17 = +HEAPF64[$2>>3];
   $18 = (+Math_log((+$17)));
   $19 = $16 * $18;
   $20 = +HEAPF64[$2>>3];
   $21 = $19 - $20;
   $22 = +HEAPF64[$1>>3];
   $23 = (+_lgam($22));
   $24 = $21 - $23;
   HEAPF64[$ax>>3] = $24;
   $25 = +HEAPF64[$ax>>3];
   $26 = +HEAPF64[2000>>3];
   $27 = -$26;
   $28 = $25 < $27;
   if ($28) {
    (_mtherr(30536,4)|0);
    HEAPF64[$0>>3] = 0.0;
    $52 = +HEAPF64[$0>>3];
    STACKTOP = sp;return (+$52);
   }
   $29 = +HEAPF64[$ax>>3];
   $30 = (+Math_exp((+$29)));
   HEAPF64[$ax>>3] = $30;
   $31 = +HEAPF64[$1>>3];
   HEAPF64[$r>>3] = $31;
   HEAPF64[$c>>3] = 1.0;
   HEAPF64[$ans>>3] = 1.0;
   while(1) {
    $32 = +HEAPF64[$r>>3];
    $33 = $32 + 1.0;
    HEAPF64[$r>>3] = $33;
    $34 = +HEAPF64[$2>>3];
    $35 = +HEAPF64[$r>>3];
    $36 = $34 / $35;
    $37 = +HEAPF64[$c>>3];
    $38 = $37 * $36;
    HEAPF64[$c>>3] = $38;
    $39 = +HEAPF64[$c>>3];
    $40 = +HEAPF64[$ans>>3];
    $41 = $40 + $39;
    HEAPF64[$ans>>3] = $41;
    $42 = +HEAPF64[$c>>3];
    $43 = +HEAPF64[$ans>>3];
    $44 = $42 / $43;
    $45 = +HEAPF64[1984>>3];
    $46 = $44 > $45;
    if (!($46)) {
     break;
    }
   }
   $47 = +HEAPF64[$ans>>3];
   $48 = +HEAPF64[$ax>>3];
   $49 = $47 * $48;
   $50 = +HEAPF64[$1>>3];
   $51 = $49 / $50;
   HEAPF64[$0>>3] = $51;
   $52 = +HEAPF64[$0>>3];
   STACKTOP = sp;return (+$52);
  }
 }
 HEAPF64[$0>>3] = 0.0;
 $52 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$52);
}
function _incbet($aa,$bb,$xx) {
 $aa = +$aa;
 $bb = +$bb;
 $xx = +$xx;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $a = 0, $b = 0, $flag = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $t = 0, $w = 0, $x = 0, $xc = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = sp + 80|0;
 $1 = sp + 72|0;
 $2 = sp + 64|0;
 $3 = sp + 56|0;
 $a = sp + 48|0;
 $b = sp + 40|0;
 $t = sp + 32|0;
 $x = sp + 24|0;
 $xc = sp + 16|0;
 $w = sp + 8|0;
 $y = sp;
 $flag = sp + 88|0;
 HEAPF64[$1>>3] = $aa;
 HEAPF64[$2>>3] = $bb;
 HEAPF64[$3>>3] = $xx;
 $4 = +HEAPF64[$1>>3];
 $5 = $4 <= 0.0;
 do {
  if (!($5)) {
   $6 = +HEAPF64[$2>>3];
   $7 = $6 <= 0.0;
   if (!($7)) {
    $8 = +HEAPF64[$3>>3];
    $9 = $8 <= 0.0;
    $10 = +HEAPF64[$3>>3];
    $11 = $10 >= 1.0;
    $or$cond = $9 | $11;
    if ($or$cond) {
     $12 = +HEAPF64[$3>>3];
     $13 = $12 == 0.0;
     if ($13) {
      HEAPF64[$0>>3] = 0.0;
      $154 = +HEAPF64[$0>>3];
      STACKTOP = sp;return (+$154);
     }
     $14 = +HEAPF64[$3>>3];
     $15 = $14 == 1.0;
     if (!($15)) {
      break;
     }
     HEAPF64[$0>>3] = 1.0;
     $154 = +HEAPF64[$0>>3];
     STACKTOP = sp;return (+$154);
    }
    HEAP32[$flag>>2] = 0;
    $16 = +HEAPF64[$2>>3];
    $17 = +HEAPF64[$3>>3];
    $18 = $16 * $17;
    $19 = $18 <= 1.0;
    $20 = +HEAPF64[$3>>3];
    $21 = $20 <= 0.949999999999999955591;
    $or$cond3 = $19 & $21;
    do {
     if ($or$cond3) {
      $22 = +HEAPF64[$1>>3];
      $23 = +HEAPF64[$2>>3];
      $24 = +HEAPF64[$3>>3];
      $25 = (+_pseries($22,$23,$24));
      HEAPF64[$t>>3] = $25;
     } else {
      $26 = +HEAPF64[$3>>3];
      $27 = 1.0 - $26;
      HEAPF64[$w>>3] = $27;
      $28 = +HEAPF64[$3>>3];
      $29 = +HEAPF64[$1>>3];
      $30 = +HEAPF64[$1>>3];
      $31 = +HEAPF64[$2>>3];
      $32 = $30 + $31;
      $33 = $29 / $32;
      $34 = $28 > $33;
      if ($34) {
       HEAP32[$flag>>2] = 1;
       $35 = +HEAPF64[$2>>3];
       HEAPF64[$a>>3] = $35;
       $36 = +HEAPF64[$1>>3];
       HEAPF64[$b>>3] = $36;
       $37 = +HEAPF64[$3>>3];
       HEAPF64[$xc>>3] = $37;
       $38 = +HEAPF64[$w>>3];
       HEAPF64[$x>>3] = $38;
      } else {
       $39 = +HEAPF64[$1>>3];
       HEAPF64[$a>>3] = $39;
       $40 = +HEAPF64[$2>>3];
       HEAPF64[$b>>3] = $40;
       $41 = +HEAPF64[$w>>3];
       HEAPF64[$xc>>3] = $41;
       $42 = +HEAPF64[$3>>3];
       HEAPF64[$x>>3] = $42;
      }
      $43 = HEAP32[$flag>>2]|0;
      $44 = ($43|0)==(1);
      if ($44) {
       $45 = +HEAPF64[$b>>3];
       $46 = +HEAPF64[$x>>3];
       $47 = $45 * $46;
       $48 = $47 <= 1.0;
       $49 = +HEAPF64[$x>>3];
       $50 = $49 <= 0.949999999999999955591;
       $or$cond5 = $48 & $50;
       if ($or$cond5) {
        $51 = +HEAPF64[$a>>3];
        $52 = +HEAPF64[$b>>3];
        $53 = +HEAPF64[$x>>3];
        $54 = (+_pseries($51,$52,$53));
        HEAPF64[$t>>3] = $54;
        break;
       }
      }
      $55 = +HEAPF64[$x>>3];
      $56 = +HEAPF64[$a>>3];
      $57 = +HEAPF64[$b>>3];
      $58 = $56 + $57;
      $59 = $58 - 2.0;
      $60 = $55 * $59;
      $61 = +HEAPF64[$a>>3];
      $62 = $61 - 1.0;
      $63 = $60 - $62;
      HEAPF64[$y>>3] = $63;
      $64 = +HEAPF64[$y>>3];
      $65 = $64 < 0.0;
      $66 = +HEAPF64[$a>>3];
      $67 = +HEAPF64[$b>>3];
      $68 = +HEAPF64[$x>>3];
      if ($65) {
       $69 = (+_incbcf($66,$67,$68));
       HEAPF64[$w>>3] = $69;
      } else {
       $70 = (+_incbd($66,$67,$68));
       $71 = +HEAPF64[$xc>>3];
       $72 = $70 / $71;
       HEAPF64[$w>>3] = $72;
      }
      $73 = +HEAPF64[$a>>3];
      $74 = +HEAPF64[$x>>3];
      $75 = (+Math_log((+$74)));
      $76 = $73 * $75;
      HEAPF64[$y>>3] = $76;
      $77 = +HEAPF64[$b>>3];
      $78 = +HEAPF64[$xc>>3];
      $79 = (+Math_log((+$78)));
      $80 = $77 * $79;
      HEAPF64[$t>>3] = $80;
      $81 = +HEAPF64[$a>>3];
      $82 = +HEAPF64[$b>>3];
      $83 = $81 + $82;
      $84 = $83 < 171.624376956302711505;
      if ($84) {
       $85 = +HEAPF64[$y>>3];
       $86 = (+Math_abs((+$85)));
       $87 = +HEAPF64[2000>>3];
       $88 = $86 < $87;
       if ($88) {
        $89 = +HEAPF64[$t>>3];
        $90 = (+Math_abs((+$89)));
        $91 = +HEAPF64[2000>>3];
        $92 = $90 < $91;
        if ($92) {
         $93 = +HEAPF64[$xc>>3];
         $94 = +HEAPF64[$b>>3];
         $95 = (+Math_pow((+$93),(+$94)));
         HEAPF64[$t>>3] = $95;
         $96 = +HEAPF64[$x>>3];
         $97 = +HEAPF64[$a>>3];
         $98 = (+Math_pow((+$96),(+$97)));
         $99 = +HEAPF64[$t>>3];
         $100 = $99 * $98;
         HEAPF64[$t>>3] = $100;
         $101 = +HEAPF64[$a>>3];
         $102 = +HEAPF64[$t>>3];
         $103 = $102 / $101;
         HEAPF64[$t>>3] = $103;
         $104 = +HEAPF64[$w>>3];
         $105 = +HEAPF64[$t>>3];
         $106 = $105 * $104;
         HEAPF64[$t>>3] = $106;
         $107 = +HEAPF64[$a>>3];
         $108 = +HEAPF64[$b>>3];
         $109 = $107 + $108;
         $110 = (+_cephes_gamma($109));
         $111 = +HEAPF64[$a>>3];
         $112 = (+_cephes_gamma($111));
         $113 = +HEAPF64[$b>>3];
         $114 = (+_cephes_gamma($113));
         $115 = $112 * $114;
         $116 = $110 / $115;
         $117 = +HEAPF64[$t>>3];
         $118 = $117 * $116;
         HEAPF64[$t>>3] = $118;
         break;
        }
       }
      }
      $119 = +HEAPF64[$t>>3];
      $120 = +HEAPF64[$a>>3];
      $121 = +HEAPF64[$b>>3];
      $122 = $120 + $121;
      $123 = (+_lgam($122));
      $124 = $119 + $123;
      $125 = +HEAPF64[$a>>3];
      $126 = (+_lgam($125));
      $127 = $124 - $126;
      $128 = +HEAPF64[$b>>3];
      $129 = (+_lgam($128));
      $130 = $127 - $129;
      $131 = +HEAPF64[$y>>3];
      $132 = $131 + $130;
      HEAPF64[$y>>3] = $132;
      $133 = +HEAPF64[$w>>3];
      $134 = +HEAPF64[$a>>3];
      $135 = $133 / $134;
      $136 = (+Math_log((+$135)));
      $137 = +HEAPF64[$y>>3];
      $138 = $137 + $136;
      HEAPF64[$y>>3] = $138;
      $139 = +HEAPF64[$y>>3];
      $140 = +HEAPF64[2008>>3];
      $141 = $139 < $140;
      if ($141) {
       HEAPF64[$t>>3] = 0.0;
       break;
      } else {
       $142 = +HEAPF64[$y>>3];
       $143 = (+Math_exp((+$142)));
       HEAPF64[$t>>3] = $143;
       break;
      }
     }
    } while(0);
    $144 = HEAP32[$flag>>2]|0;
    $145 = ($144|0)==(1);
    do {
     if ($145) {
      $146 = +HEAPF64[$t>>3];
      $147 = +HEAPF64[1984>>3];
      $148 = $146 <= $147;
      if ($148) {
       $149 = +HEAPF64[1984>>3];
       $150 = 1.0 - $149;
       HEAPF64[$t>>3] = $150;
       break;
      } else {
       $151 = +HEAPF64[$t>>3];
       $152 = 1.0 - $151;
       HEAPF64[$t>>3] = $152;
       break;
      }
     }
    } while(0);
    $153 = +HEAPF64[$t>>3];
    HEAPF64[$0>>3] = $153;
    $154 = +HEAPF64[$0>>3];
    STACKTOP = sp;return (+$154);
   }
  }
 } while(0);
 (_mtherr(30544,1)|0);
 HEAPF64[$0>>3] = 0.0;
 $154 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$154);
}
function _pseries($a,$b,$x) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $ai = 0, $n = 0;
 var $s = 0, $t = 0, $t1 = 0, $u = 0, $v = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = sp + 80|0;
 $1 = sp + 72|0;
 $2 = sp + 64|0;
 $s = sp + 56|0;
 $t = sp + 48|0;
 $u = sp + 40|0;
 $v = sp + 32|0;
 $n = sp + 24|0;
 $t1 = sp + 16|0;
 $z = sp + 8|0;
 $ai = sp;
 HEAPF64[$0>>3] = $a;
 HEAPF64[$1>>3] = $b;
 HEAPF64[$2>>3] = $x;
 $3 = +HEAPF64[$0>>3];
 $4 = 1.0 / $3;
 HEAPF64[$ai>>3] = $4;
 $5 = +HEAPF64[$1>>3];
 $6 = 1.0 - $5;
 $7 = +HEAPF64[$2>>3];
 $8 = $6 * $7;
 HEAPF64[$u>>3] = $8;
 $9 = +HEAPF64[$u>>3];
 $10 = +HEAPF64[$0>>3];
 $11 = $10 + 1.0;
 $12 = $9 / $11;
 HEAPF64[$v>>3] = $12;
 $13 = +HEAPF64[$v>>3];
 HEAPF64[$t1>>3] = $13;
 $14 = +HEAPF64[$u>>3];
 HEAPF64[$t>>3] = $14;
 HEAPF64[$n>>3] = 2.0;
 HEAPF64[$s>>3] = 0.0;
 $15 = +HEAPF64[1984>>3];
 $16 = +HEAPF64[$ai>>3];
 $17 = $15 * $16;
 HEAPF64[$z>>3] = $17;
 while(1) {
  $18 = +HEAPF64[$v>>3];
  $19 = (+Math_abs((+$18)));
  $20 = +HEAPF64[$z>>3];
  $21 = $19 > $20;
  if (!($21)) {
   break;
  }
  $22 = +HEAPF64[$n>>3];
  $23 = +HEAPF64[$1>>3];
  $24 = $22 - $23;
  $25 = +HEAPF64[$2>>3];
  $26 = $24 * $25;
  $27 = +HEAPF64[$n>>3];
  $28 = $26 / $27;
  HEAPF64[$u>>3] = $28;
  $29 = +HEAPF64[$u>>3];
  $30 = +HEAPF64[$t>>3];
  $31 = $30 * $29;
  HEAPF64[$t>>3] = $31;
  $32 = +HEAPF64[$t>>3];
  $33 = +HEAPF64[$0>>3];
  $34 = +HEAPF64[$n>>3];
  $35 = $33 + $34;
  $36 = $32 / $35;
  HEAPF64[$v>>3] = $36;
  $37 = +HEAPF64[$v>>3];
  $38 = +HEAPF64[$s>>3];
  $39 = $38 + $37;
  HEAPF64[$s>>3] = $39;
  $40 = +HEAPF64[$n>>3];
  $41 = $40 + 1.0;
  HEAPF64[$n>>3] = $41;
 }
 $42 = +HEAPF64[$t1>>3];
 $43 = +HEAPF64[$s>>3];
 $44 = $43 + $42;
 HEAPF64[$s>>3] = $44;
 $45 = +HEAPF64[$ai>>3];
 $46 = +HEAPF64[$s>>3];
 $47 = $46 + $45;
 HEAPF64[$s>>3] = $47;
 $48 = +HEAPF64[$0>>3];
 $49 = +HEAPF64[$2>>3];
 $50 = (+Math_log((+$49)));
 $51 = $48 * $50;
 HEAPF64[$u>>3] = $51;
 $52 = +HEAPF64[$0>>3];
 $53 = +HEAPF64[$1>>3];
 $54 = $52 + $53;
 $55 = $54 < 171.624376956302711505;
 if ($55) {
  $56 = +HEAPF64[$u>>3];
  $57 = (+Math_abs((+$56)));
  $58 = +HEAPF64[2000>>3];
  $59 = $57 < $58;
  if ($59) {
   $60 = +HEAPF64[$0>>3];
   $61 = +HEAPF64[$1>>3];
   $62 = $60 + $61;
   $63 = (+_cephes_gamma($62));
   $64 = +HEAPF64[$0>>3];
   $65 = (+_cephes_gamma($64));
   $66 = +HEAPF64[$1>>3];
   $67 = (+_cephes_gamma($66));
   $68 = $65 * $67;
   $69 = $63 / $68;
   HEAPF64[$t>>3] = $69;
   $70 = +HEAPF64[$s>>3];
   $71 = +HEAPF64[$t>>3];
   $72 = $70 * $71;
   $73 = +HEAPF64[$2>>3];
   $74 = +HEAPF64[$0>>3];
   $75 = (+Math_pow((+$73),(+$74)));
   $76 = $72 * $75;
   HEAPF64[$s>>3] = $76;
   $97 = +HEAPF64[$s>>3];
   STACKTOP = sp;return (+$97);
  }
 }
 $77 = +HEAPF64[$0>>3];
 $78 = +HEAPF64[$1>>3];
 $79 = $77 + $78;
 $80 = (+_lgam($79));
 $81 = +HEAPF64[$0>>3];
 $82 = (+_lgam($81));
 $83 = $80 - $82;
 $84 = +HEAPF64[$1>>3];
 $85 = (+_lgam($84));
 $86 = $83 - $85;
 $87 = +HEAPF64[$u>>3];
 $88 = $86 + $87;
 $89 = +HEAPF64[$s>>3];
 $90 = (+Math_log((+$89)));
 $91 = $88 + $90;
 HEAPF64[$t>>3] = $91;
 $92 = +HEAPF64[$t>>3];
 $93 = +HEAPF64[2008>>3];
 $94 = $92 < $93;
 if ($94) {
  HEAPF64[$s>>3] = 0.0;
  $97 = +HEAPF64[$s>>3];
  STACKTOP = sp;return (+$97);
 } else {
  $95 = +HEAPF64[$t>>3];
  $96 = (+Math_exp((+$95)));
  HEAPF64[$s>>3] = $96;
  $97 = +HEAPF64[$s>>3];
  STACKTOP = sp;return (+$97);
 }
 return +0;
}
function _incbcf($a,$b,$x) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var $ans = 0, $k1 = 0, $k2 = 0, $k3 = 0, $k4 = 0, $k5 = 0, $k6 = 0, $k7 = 0, $k8 = 0, $n = 0, $pk = 0, $pkm1 = 0, $pkm2 = 0, $qk = 0, $qkm1 = 0, $qkm2 = 0, $r = 0, $t = 0, $thresh = 0, $xk = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $0 = sp + 168|0;
 $1 = sp + 160|0;
 $2 = sp + 152|0;
 $xk = sp + 144|0;
 $pk = sp + 136|0;
 $pkm1 = sp + 128|0;
 $pkm2 = sp + 120|0;
 $qk = sp + 112|0;
 $qkm1 = sp + 104|0;
 $qkm2 = sp + 96|0;
 $k1 = sp + 88|0;
 $k2 = sp + 80|0;
 $k3 = sp + 72|0;
 $k4 = sp + 64|0;
 $k5 = sp + 56|0;
 $k6 = sp + 48|0;
 $k7 = sp + 40|0;
 $k8 = sp + 32|0;
 $r = sp + 24|0;
 $t = sp + 16|0;
 $ans = sp + 8|0;
 $thresh = sp;
 $n = sp + 176|0;
 HEAPF64[$0>>3] = $a;
 HEAPF64[$1>>3] = $b;
 HEAPF64[$2>>3] = $x;
 $3 = +HEAPF64[$0>>3];
 HEAPF64[$k1>>3] = $3;
 $4 = +HEAPF64[$0>>3];
 $5 = +HEAPF64[$1>>3];
 $6 = $4 + $5;
 HEAPF64[$k2>>3] = $6;
 $7 = +HEAPF64[$0>>3];
 HEAPF64[$k3>>3] = $7;
 $8 = +HEAPF64[$0>>3];
 $9 = $8 + 1.0;
 HEAPF64[$k4>>3] = $9;
 HEAPF64[$k5>>3] = 1.0;
 $10 = +HEAPF64[$1>>3];
 $11 = $10 - 1.0;
 HEAPF64[$k6>>3] = $11;
 $12 = +HEAPF64[$k4>>3];
 HEAPF64[$k7>>3] = $12;
 $13 = +HEAPF64[$0>>3];
 $14 = $13 + 2.0;
 HEAPF64[$k8>>3] = $14;
 HEAPF64[$pkm2>>3] = 0.0;
 HEAPF64[$qkm2>>3] = 1.0;
 HEAPF64[$pkm1>>3] = 1.0;
 HEAPF64[$qkm1>>3] = 1.0;
 HEAPF64[$ans>>3] = 1.0;
 HEAPF64[$r>>3] = 1.0;
 HEAP32[$n>>2] = 0;
 $15 = +HEAPF64[1984>>3];
 $16 = 3.0 * $15;
 HEAPF64[$thresh>>3] = $16;
 while(1) {
  $17 = +HEAPF64[$2>>3];
  $18 = +HEAPF64[$k1>>3];
  $19 = $17 * $18;
  $20 = +HEAPF64[$k2>>3];
  $21 = $19 * $20;
  $22 = -$21;
  $23 = +HEAPF64[$k3>>3];
  $24 = +HEAPF64[$k4>>3];
  $25 = $23 * $24;
  $26 = $22 / $25;
  HEAPF64[$xk>>3] = $26;
  $27 = +HEAPF64[$pkm1>>3];
  $28 = +HEAPF64[$pkm2>>3];
  $29 = +HEAPF64[$xk>>3];
  $30 = $28 * $29;
  $31 = $27 + $30;
  HEAPF64[$pk>>3] = $31;
  $32 = +HEAPF64[$qkm1>>3];
  $33 = +HEAPF64[$qkm2>>3];
  $34 = +HEAPF64[$xk>>3];
  $35 = $33 * $34;
  $36 = $32 + $35;
  HEAPF64[$qk>>3] = $36;
  $37 = +HEAPF64[$pkm1>>3];
  HEAPF64[$pkm2>>3] = $37;
  $38 = +HEAPF64[$pk>>3];
  HEAPF64[$pkm1>>3] = $38;
  $39 = +HEAPF64[$qkm1>>3];
  HEAPF64[$qkm2>>3] = $39;
  $40 = +HEAPF64[$qk>>3];
  HEAPF64[$qkm1>>3] = $40;
  $41 = +HEAPF64[$2>>3];
  $42 = +HEAPF64[$k5>>3];
  $43 = $41 * $42;
  $44 = +HEAPF64[$k6>>3];
  $45 = $43 * $44;
  $46 = +HEAPF64[$k7>>3];
  $47 = +HEAPF64[$k8>>3];
  $48 = $46 * $47;
  $49 = $45 / $48;
  HEAPF64[$xk>>3] = $49;
  $50 = +HEAPF64[$pkm1>>3];
  $51 = +HEAPF64[$pkm2>>3];
  $52 = +HEAPF64[$xk>>3];
  $53 = $51 * $52;
  $54 = $50 + $53;
  HEAPF64[$pk>>3] = $54;
  $55 = +HEAPF64[$qkm1>>3];
  $56 = +HEAPF64[$qkm2>>3];
  $57 = +HEAPF64[$xk>>3];
  $58 = $56 * $57;
  $59 = $55 + $58;
  HEAPF64[$qk>>3] = $59;
  $60 = +HEAPF64[$pkm1>>3];
  HEAPF64[$pkm2>>3] = $60;
  $61 = +HEAPF64[$pk>>3];
  HEAPF64[$pkm1>>3] = $61;
  $62 = +HEAPF64[$qkm1>>3];
  HEAPF64[$qkm2>>3] = $62;
  $63 = +HEAPF64[$qk>>3];
  HEAPF64[$qkm1>>3] = $63;
  $64 = +HEAPF64[$qk>>3];
  $65 = $64 != 0.0;
  if ($65) {
   $66 = +HEAPF64[$pk>>3];
   $67 = +HEAPF64[$qk>>3];
   $68 = $66 / $67;
   HEAPF64[$r>>3] = $68;
  }
  $69 = +HEAPF64[$r>>3];
  $70 = $69 != 0.0;
  if ($70) {
   $71 = +HEAPF64[$ans>>3];
   $72 = +HEAPF64[$r>>3];
   $73 = $71 - $72;
   $74 = +HEAPF64[$r>>3];
   $75 = $73 / $74;
   $76 = (+Math_abs((+$75)));
   HEAPF64[$t>>3] = $76;
   $77 = +HEAPF64[$r>>3];
   HEAPF64[$ans>>3] = $77;
  } else {
   HEAPF64[$t>>3] = 1.0;
  }
  $78 = +HEAPF64[$t>>3];
  $79 = +HEAPF64[$thresh>>3];
  $80 = $78 < $79;
  if ($80) {
   label = 14;
   break;
  }
  $81 = +HEAPF64[$k1>>3];
  $82 = $81 + 1.0;
  HEAPF64[$k1>>3] = $82;
  $83 = +HEAPF64[$k2>>3];
  $84 = $83 + 1.0;
  HEAPF64[$k2>>3] = $84;
  $85 = +HEAPF64[$k3>>3];
  $86 = $85 + 2.0;
  HEAPF64[$k3>>3] = $86;
  $87 = +HEAPF64[$k4>>3];
  $88 = $87 + 2.0;
  HEAPF64[$k4>>3] = $88;
  $89 = +HEAPF64[$k5>>3];
  $90 = $89 + 1.0;
  HEAPF64[$k5>>3] = $90;
  $91 = +HEAPF64[$k6>>3];
  $92 = $91 - 1.0;
  HEAPF64[$k6>>3] = $92;
  $93 = +HEAPF64[$k7>>3];
  $94 = $93 + 2.0;
  HEAPF64[$k7>>3] = $94;
  $95 = +HEAPF64[$k8>>3];
  $96 = $95 + 2.0;
  HEAPF64[$k8>>3] = $96;
  $97 = +HEAPF64[$qk>>3];
  $98 = (+Math_abs((+$97)));
  $99 = +HEAPF64[$pk>>3];
  $100 = (+Math_abs((+$99)));
  $101 = $98 + $100;
  $102 = +HEAPF64[30552>>3];
  $103 = $101 > $102;
  if ($103) {
   $104 = +HEAPF64[30560>>3];
   $105 = +HEAPF64[$pkm2>>3];
   $106 = $105 * $104;
   HEAPF64[$pkm2>>3] = $106;
   $107 = +HEAPF64[30560>>3];
   $108 = +HEAPF64[$pkm1>>3];
   $109 = $108 * $107;
   HEAPF64[$pkm1>>3] = $109;
   $110 = +HEAPF64[30560>>3];
   $111 = +HEAPF64[$qkm2>>3];
   $112 = $111 * $110;
   HEAPF64[$qkm2>>3] = $112;
   $113 = +HEAPF64[30560>>3];
   $114 = +HEAPF64[$qkm1>>3];
   $115 = $114 * $113;
   HEAPF64[$qkm1>>3] = $115;
  }
  $116 = +HEAPF64[$qk>>3];
  $117 = (+Math_abs((+$116)));
  $118 = +HEAPF64[30560>>3];
  $119 = $117 < $118;
  if ($119) {
   label = 12;
  } else {
   $120 = +HEAPF64[$pk>>3];
   $121 = (+Math_abs((+$120)));
   $122 = +HEAPF64[30560>>3];
   $123 = $121 < $122;
   if ($123) {
    label = 12;
   }
  }
  if ((label|0) == 12) {
   label = 0;
   $124 = +HEAPF64[30552>>3];
   $125 = +HEAPF64[$pkm2>>3];
   $126 = $125 * $124;
   HEAPF64[$pkm2>>3] = $126;
   $127 = +HEAPF64[30552>>3];
   $128 = +HEAPF64[$pkm1>>3];
   $129 = $128 * $127;
   HEAPF64[$pkm1>>3] = $129;
   $130 = +HEAPF64[30552>>3];
   $131 = +HEAPF64[$qkm2>>3];
   $132 = $131 * $130;
   HEAPF64[$qkm2>>3] = $132;
   $133 = +HEAPF64[30552>>3];
   $134 = +HEAPF64[$qkm1>>3];
   $135 = $134 * $133;
   HEAPF64[$qkm1>>3] = $135;
  }
  $136 = HEAP32[$n>>2]|0;
  $137 = (($136) + 1)|0;
  HEAP32[$n>>2] = $137;
  $138 = ($137|0)<(300);
  if (!($138)) {
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  $139 = +HEAPF64[$ans>>3];
  STACKTOP = sp;return (+$139);
 }
 return +0;
}
function _incbd($a,$b,$x) {
 $a = +$a;
 $b = +$b;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0;
 var $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0;
 var $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $ans = 0, $k1 = 0, $k2 = 0, $k3 = 0, $k4 = 0, $k5 = 0, $k6 = 0, $k7 = 0, $k8 = 0, $n = 0, $pk = 0, $pkm1 = 0, $pkm2 = 0, $qk = 0, $qkm1 = 0;
 var $qkm2 = 0, $r = 0, $t = 0, $thresh = 0, $xk = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $0 = sp + 176|0;
 $1 = sp + 168|0;
 $2 = sp + 160|0;
 $xk = sp + 152|0;
 $pk = sp + 144|0;
 $pkm1 = sp + 136|0;
 $pkm2 = sp + 128|0;
 $qk = sp + 120|0;
 $qkm1 = sp + 112|0;
 $qkm2 = sp + 104|0;
 $k1 = sp + 96|0;
 $k2 = sp + 88|0;
 $k3 = sp + 80|0;
 $k4 = sp + 72|0;
 $k5 = sp + 64|0;
 $k6 = sp + 56|0;
 $k7 = sp + 48|0;
 $k8 = sp + 40|0;
 $r = sp + 32|0;
 $t = sp + 24|0;
 $ans = sp + 16|0;
 $z = sp + 8|0;
 $thresh = sp;
 $n = sp + 184|0;
 HEAPF64[$0>>3] = $a;
 HEAPF64[$1>>3] = $b;
 HEAPF64[$2>>3] = $x;
 $3 = +HEAPF64[$0>>3];
 HEAPF64[$k1>>3] = $3;
 $4 = +HEAPF64[$1>>3];
 $5 = $4 - 1.0;
 HEAPF64[$k2>>3] = $5;
 $6 = +HEAPF64[$0>>3];
 HEAPF64[$k3>>3] = $6;
 $7 = +HEAPF64[$0>>3];
 $8 = $7 + 1.0;
 HEAPF64[$k4>>3] = $8;
 HEAPF64[$k5>>3] = 1.0;
 $9 = +HEAPF64[$0>>3];
 $10 = +HEAPF64[$1>>3];
 $11 = $9 + $10;
 HEAPF64[$k6>>3] = $11;
 $12 = +HEAPF64[$0>>3];
 $13 = $12 + 1.0;
 HEAPF64[$k7>>3] = $13;
 $14 = +HEAPF64[$0>>3];
 $15 = $14 + 2.0;
 HEAPF64[$k8>>3] = $15;
 HEAPF64[$pkm2>>3] = 0.0;
 HEAPF64[$qkm2>>3] = 1.0;
 HEAPF64[$pkm1>>3] = 1.0;
 HEAPF64[$qkm1>>3] = 1.0;
 $16 = +HEAPF64[$2>>3];
 $17 = +HEAPF64[$2>>3];
 $18 = 1.0 - $17;
 $19 = $16 / $18;
 HEAPF64[$z>>3] = $19;
 HEAPF64[$ans>>3] = 1.0;
 HEAPF64[$r>>3] = 1.0;
 HEAP32[$n>>2] = 0;
 $20 = +HEAPF64[1984>>3];
 $21 = 3.0 * $20;
 HEAPF64[$thresh>>3] = $21;
 while(1) {
  $22 = +HEAPF64[$z>>3];
  $23 = +HEAPF64[$k1>>3];
  $24 = $22 * $23;
  $25 = +HEAPF64[$k2>>3];
  $26 = $24 * $25;
  $27 = -$26;
  $28 = +HEAPF64[$k3>>3];
  $29 = +HEAPF64[$k4>>3];
  $30 = $28 * $29;
  $31 = $27 / $30;
  HEAPF64[$xk>>3] = $31;
  $32 = +HEAPF64[$pkm1>>3];
  $33 = +HEAPF64[$pkm2>>3];
  $34 = +HEAPF64[$xk>>3];
  $35 = $33 * $34;
  $36 = $32 + $35;
  HEAPF64[$pk>>3] = $36;
  $37 = +HEAPF64[$qkm1>>3];
  $38 = +HEAPF64[$qkm2>>3];
  $39 = +HEAPF64[$xk>>3];
  $40 = $38 * $39;
  $41 = $37 + $40;
  HEAPF64[$qk>>3] = $41;
  $42 = +HEAPF64[$pkm1>>3];
  HEAPF64[$pkm2>>3] = $42;
  $43 = +HEAPF64[$pk>>3];
  HEAPF64[$pkm1>>3] = $43;
  $44 = +HEAPF64[$qkm1>>3];
  HEAPF64[$qkm2>>3] = $44;
  $45 = +HEAPF64[$qk>>3];
  HEAPF64[$qkm1>>3] = $45;
  $46 = +HEAPF64[$z>>3];
  $47 = +HEAPF64[$k5>>3];
  $48 = $46 * $47;
  $49 = +HEAPF64[$k6>>3];
  $50 = $48 * $49;
  $51 = +HEAPF64[$k7>>3];
  $52 = +HEAPF64[$k8>>3];
  $53 = $51 * $52;
  $54 = $50 / $53;
  HEAPF64[$xk>>3] = $54;
  $55 = +HEAPF64[$pkm1>>3];
  $56 = +HEAPF64[$pkm2>>3];
  $57 = +HEAPF64[$xk>>3];
  $58 = $56 * $57;
  $59 = $55 + $58;
  HEAPF64[$pk>>3] = $59;
  $60 = +HEAPF64[$qkm1>>3];
  $61 = +HEAPF64[$qkm2>>3];
  $62 = +HEAPF64[$xk>>3];
  $63 = $61 * $62;
  $64 = $60 + $63;
  HEAPF64[$qk>>3] = $64;
  $65 = +HEAPF64[$pkm1>>3];
  HEAPF64[$pkm2>>3] = $65;
  $66 = +HEAPF64[$pk>>3];
  HEAPF64[$pkm1>>3] = $66;
  $67 = +HEAPF64[$qkm1>>3];
  HEAPF64[$qkm2>>3] = $67;
  $68 = +HEAPF64[$qk>>3];
  HEAPF64[$qkm1>>3] = $68;
  $69 = +HEAPF64[$qk>>3];
  $70 = $69 != 0.0;
  if ($70) {
   $71 = +HEAPF64[$pk>>3];
   $72 = +HEAPF64[$qk>>3];
   $73 = $71 / $72;
   HEAPF64[$r>>3] = $73;
  }
  $74 = +HEAPF64[$r>>3];
  $75 = $74 != 0.0;
  if ($75) {
   $76 = +HEAPF64[$ans>>3];
   $77 = +HEAPF64[$r>>3];
   $78 = $76 - $77;
   $79 = +HEAPF64[$r>>3];
   $80 = $78 / $79;
   $81 = (+Math_abs((+$80)));
   HEAPF64[$t>>3] = $81;
   $82 = +HEAPF64[$r>>3];
   HEAPF64[$ans>>3] = $82;
  } else {
   HEAPF64[$t>>3] = 1.0;
  }
  $83 = +HEAPF64[$t>>3];
  $84 = +HEAPF64[$thresh>>3];
  $85 = $83 < $84;
  if ($85) {
   label = 14;
   break;
  }
  $86 = +HEAPF64[$k1>>3];
  $87 = $86 + 1.0;
  HEAPF64[$k1>>3] = $87;
  $88 = +HEAPF64[$k2>>3];
  $89 = $88 - 1.0;
  HEAPF64[$k2>>3] = $89;
  $90 = +HEAPF64[$k3>>3];
  $91 = $90 + 2.0;
  HEAPF64[$k3>>3] = $91;
  $92 = +HEAPF64[$k4>>3];
  $93 = $92 + 2.0;
  HEAPF64[$k4>>3] = $93;
  $94 = +HEAPF64[$k5>>3];
  $95 = $94 + 1.0;
  HEAPF64[$k5>>3] = $95;
  $96 = +HEAPF64[$k6>>3];
  $97 = $96 + 1.0;
  HEAPF64[$k6>>3] = $97;
  $98 = +HEAPF64[$k7>>3];
  $99 = $98 + 2.0;
  HEAPF64[$k7>>3] = $99;
  $100 = +HEAPF64[$k8>>3];
  $101 = $100 + 2.0;
  HEAPF64[$k8>>3] = $101;
  $102 = +HEAPF64[$qk>>3];
  $103 = (+Math_abs((+$102)));
  $104 = +HEAPF64[$pk>>3];
  $105 = (+Math_abs((+$104)));
  $106 = $103 + $105;
  $107 = +HEAPF64[30552>>3];
  $108 = $106 > $107;
  if ($108) {
   $109 = +HEAPF64[30560>>3];
   $110 = +HEAPF64[$pkm2>>3];
   $111 = $110 * $109;
   HEAPF64[$pkm2>>3] = $111;
   $112 = +HEAPF64[30560>>3];
   $113 = +HEAPF64[$pkm1>>3];
   $114 = $113 * $112;
   HEAPF64[$pkm1>>3] = $114;
   $115 = +HEAPF64[30560>>3];
   $116 = +HEAPF64[$qkm2>>3];
   $117 = $116 * $115;
   HEAPF64[$qkm2>>3] = $117;
   $118 = +HEAPF64[30560>>3];
   $119 = +HEAPF64[$qkm1>>3];
   $120 = $119 * $118;
   HEAPF64[$qkm1>>3] = $120;
  }
  $121 = +HEAPF64[$qk>>3];
  $122 = (+Math_abs((+$121)));
  $123 = +HEAPF64[30560>>3];
  $124 = $122 < $123;
  if ($124) {
   label = 12;
  } else {
   $125 = +HEAPF64[$pk>>3];
   $126 = (+Math_abs((+$125)));
   $127 = +HEAPF64[30560>>3];
   $128 = $126 < $127;
   if ($128) {
    label = 12;
   }
  }
  if ((label|0) == 12) {
   label = 0;
   $129 = +HEAPF64[30552>>3];
   $130 = +HEAPF64[$pkm2>>3];
   $131 = $130 * $129;
   HEAPF64[$pkm2>>3] = $131;
   $132 = +HEAPF64[30552>>3];
   $133 = +HEAPF64[$pkm1>>3];
   $134 = $133 * $132;
   HEAPF64[$pkm1>>3] = $134;
   $135 = +HEAPF64[30552>>3];
   $136 = +HEAPF64[$qkm2>>3];
   $137 = $136 * $135;
   HEAPF64[$qkm2>>3] = $137;
   $138 = +HEAPF64[30552>>3];
   $139 = +HEAPF64[$qkm1>>3];
   $140 = $139 * $138;
   HEAPF64[$qkm1>>3] = $140;
  }
  $141 = HEAP32[$n>>2]|0;
  $142 = (($141) + 1)|0;
  HEAP32[$n>>2] = $142;
  $143 = ($142|0)<(300);
  if (!($143)) {
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  $144 = +HEAPF64[$ans>>3];
  STACKTOP = sp;return (+$144);
 }
 return +0;
}
function _free_stepinfo($K) {
 $K = $K|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $K;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 172|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 _gretl_matrix_free($8);
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 172|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 _gretl_matrix_free($13);
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 172|0);
 $16 = HEAP32[$15>>2]|0;
 _free($16);
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 172|0);
 HEAP32[$18>>2] = 0;
 STACKTOP = sp;return;
}
function _free_crossinfo($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $c;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 _gretl_matrix_free($2);
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _gretl_matrix_free($5);
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _gretl_matrix_free($8);
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 _gretl_matrix_free($11);
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 _gretl_matrix_free($14);
 $15 = HEAP32[$0>>2]|0;
 _free($15);
 STACKTOP = sp;return;
}
function _kalman_free($K) {
 $K = $K|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $mptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $mptr = sp + 8|0;
 $i = sp;
 HEAP32[$0>>2] = $K;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 _gretl_matrix_free($5);
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 84|0);
 $8 = HEAP32[$7>>2]|0;
 _gretl_matrix_free($8);
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 80|0);
 $11 = HEAP32[$10>>2]|0;
 _gretl_matrix_free($11);
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 88|0);
 $14 = HEAP32[$13>>2]|0;
 _gretl_matrix_free($14);
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 92|0);
 $17 = HEAP32[$16>>2]|0;
 _gretl_matrix_free($17);
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 144|0);
 $20 = HEAP32[$19>>2]|0;
 _gretl_matrix_free($20);
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 168|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = HEAP32[$0>>2]|0;
  $26 = (($25) + 168|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0|0);
  if ($30) {
   $31 = HEAP32[$0>>2]|0;
   $32 = (($31) + 108|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$0>>2]|0;
   $35 = (($34) + 168|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($33|0)==($38|0);
   if ($39) {
    $40 = HEAP32[$0>>2]|0;
    $41 = (($40) + 108|0);
    HEAP32[$41>>2] = 0;
   }
  }
 }
 $42 = HEAP32[$0>>2]|0;
 $43 = (($42) + 168|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = HEAP32[$0>>2]|0;
  $47 = (($46) + 168|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0|0);
  if ($51) {
   $52 = HEAP32[$0>>2]|0;
   $53 = (($52) + 112|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$0>>2]|0;
   $56 = (($55) + 168|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($54|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$0>>2]|0;
    $62 = (($61) + 112|0);
    HEAP32[$62>>2] = 0;
   }
  }
 }
 $63 = HEAP32[$0>>2]|0;
 $64 = (($63) + 176|0);
 $65 = HEAP32[$64>>2]|0;
 _gretl_matrix_block_destroy($65);
 $66 = HEAP32[$0>>2]|0;
 $67 = (($66) + 136|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = HEAP32[$0>>2]|0;
  $71 = (($70) + 96|0);
  HEAP32[$mptr>>2] = $71;
  $72 = (($mptr) + 4|0);
  $73 = HEAP32[$0>>2]|0;
  $74 = (($73) + 100|0);
  HEAP32[$72>>2] = $74;
  $75 = (($72) + 4|0);
  $76 = HEAP32[$0>>2]|0;
  $77 = (($76) + 104|0);
  HEAP32[$75>>2] = $77;
  $78 = (($75) + 4|0);
  $79 = HEAP32[$0>>2]|0;
  $80 = (($79) + 108|0);
  HEAP32[$78>>2] = $80;
  $81 = (($78) + 4|0);
  $82 = HEAP32[$0>>2]|0;
  $83 = (($82) + 112|0);
  HEAP32[$81>>2] = $83;
  $84 = (($81) + 4|0);
  $85 = HEAP32[$0>>2]|0;
  $86 = (($85) + 116|0);
  HEAP32[$84>>2] = $86;
  $87 = (($84) + 4|0);
  $88 = HEAP32[$0>>2]|0;
  $89 = (($88) + 120|0);
  HEAP32[$87>>2] = $89;
  $90 = (($87) + 4|0);
  $91 = HEAP32[$0>>2]|0;
  $92 = (($91) + 124|0);
  HEAP32[$90>>2] = $92;
  $93 = (($90) + 4|0);
  $94 = HEAP32[$0>>2]|0;
  $95 = (($94) + 128|0);
  HEAP32[$93>>2] = $95;
  $96 = (($93) + 4|0);
  $97 = HEAP32[$0>>2]|0;
  $98 = (($97) + 132|0);
  HEAP32[$96>>2] = $98;
  HEAP32[$i>>2] = 0;
  while(1) {
   $99 = HEAP32[$i>>2]|0;
   $100 = ($99|0)<(10);
   $101 = HEAP32[$0>>2]|0;
   $102 = (($101) + 136|0);
   $103 = HEAP32[$102>>2]|0;
   if (!($100)) {
    break;
   }
   $104 = ($103|0)!=(0|0);
   if ($104) {
    $105 = HEAP32[$i>>2]|0;
    $106 = HEAP32[$0>>2]|0;
    $107 = (($106) + 136|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($108) + ($105<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $113 = ($112|0)==(36);
    if ($113) {
     $114 = HEAP32[$i>>2]|0;
     $115 = (($mptr) + ($114<<2)|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = HEAP32[$116>>2]|0;
     _gretl_matrix_free($117);
    }
   }
   $118 = HEAP32[$i>>2]|0;
   $119 = (($118) + 1)|0;
   HEAP32[$i>>2] = $119;
  }
  _strings_array_free($103,10);
 }
 $120 = HEAP32[$0>>2]|0;
 $121 = (($120) + 140|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = HEAP32[$0>>2]|0;
  $125 = (($124) + 140|0);
  $126 = HEAP32[$125>>2]|0;
  _strings_array_free($126,6);
 }
 $127 = HEAP32[$0>>2]|0;
 $128 = (($127) + 168|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)!=(0|0);
 if ($130) {
  $131 = HEAP32[$0>>2]|0;
  $132 = (($131) + 168|0);
  $133 = HEAP32[$132>>2]|0;
  _free_crossinfo($133);
 }
 $134 = HEAP32[$0>>2]|0;
 $135 = (($134) + 172|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)!=(0|0);
 if ($137) {
  $138 = HEAP32[$0>>2]|0;
  _free_stepinfo($138);
 }
 $139 = HEAP32[$0>>2]|0;
 _free($139);
 STACKTOP = sp;return;
}
function _kalman_cleanup() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = sp;
 HEAP32[$i>>2] = 0;
 while(1) {
  $0 = HEAP32[$i>>2]|0;
  $1 = HEAP32[30568>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[30576>>2]|0;
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = HEAP32[$i>>2]|0;
   $9 = HEAP32[30576>>2]|0;
   $10 = (($9) + ($8<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   _kalman_free($12);
   $13 = HEAP32[$i>>2]|0;
   $14 = HEAP32[30576>>2]|0;
   $15 = (($14) + ($13<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   _free($16);
  }
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[30576>>2]|0;
 _free($19);
 HEAP32[30568>>2] = 0;
 STACKTOP = sp;return;
}
function _check_for_state() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[30592>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_libset_init()|0);
  HEAP32[$0>>2] = $3;
 } else {
  HEAP32[$0>>2] = 0;
 }
 $4 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _flag_to_bool($sv,$flag) {
 $sv = $sv|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $sv;
 HEAP32[$2>>2] = $flag;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$2>>2]|0;
  $8 = $6 & $7;
  $9 = ($8|0)!=(0);
  $10 = $9 ? 1 : 0;
  HEAP32[$0>>2] = $10;
  $11 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($11|0);
 } else {
  HEAP32[$0>>2] = 0;
  $11 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function _get_mp_bits() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $or$cond = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $s = sp + 4|0;
 $b = sp;
 $1 = HEAP32[30608>>2]|0;
 $2 = ($1|0)>(256);
 do {
  if ($2) {
   $3 = HEAP32[30608>>2]|0;
   HEAP32[$0>>2] = $3;
  } else {
   $4 = (_getenv((30616|0))|0);
   HEAP32[$s>>2] = $4;
   $5 = HEAP32[$s>>2]|0;
   $6 = ($5|0)!=(0|0);
   if ($6) {
    $7 = HEAP32[$s>>2]|0;
    $8 = (_atoi($7)|0);
    HEAP32[$b>>2] = $8;
    $9 = HEAP32[$b>>2]|0;
    $10 = ($9|0)>=(256);
    $11 = HEAP32[$b>>2]|0;
    $12 = ($11|0)<=(8192);
    $or$cond = $10 & $12;
    if ($or$cond) {
     $13 = HEAP32[$b>>2]|0;
     HEAP32[$0>>2] = $13;
     break;
    }
   }
   HEAP32[$0>>2] = 256;
  }
 } while(0);
 $14 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _get_hac_lag($T) {
 $T = $T|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $h = sp;
 HEAP32[$0>>2] = $T;
 HEAP32[$h>>2] = 0;
 (_check_for_state()|0);
 $1 = HEAP32[30592>>2]|0;
 $2 = (($1) + 120|0);
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>=(0);
 if ($5) {
  $6 = HEAP32[30592>>2]|0;
  $7 = (($6) + 120|0);
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) - 2)|0;
  $12 = ($9|0)<($11|0);
  if ($12) {
   $13 = HEAP32[30592>>2]|0;
   $14 = (($13) + 120|0);
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$h>>2] = $16;
   $30 = HEAP32[$h>>2]|0;
   STACKTOP = sp;return ($30|0);
  }
 }
 $17 = HEAP32[30592>>2]|0;
 $18 = (($17) + 120|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(1);
 $21 = HEAP32[$0>>2]|0;
 $22 = (+($21|0));
 if ($20) {
  $23 = $22 / 100.0;
  $24 = (+Math_pow((+$23),0.222222222222222209886));
  $25 = 4.0 * $24;
  $26 = (~~(($25)));
  HEAP32[$h>>2] = $26;
  $30 = HEAP32[$h>>2]|0;
  STACKTOP = sp;return ($30|0);
 } else {
  $27 = (+Math_pow((+$22),0.33333333333333331483));
  $28 = 0.75 * $27;
  $29 = (~~(($28)));
  HEAP32[$h>>2] = $29;
  $30 = HEAP32[$h>>2]|0;
  STACKTOP = sp;return ($30|0);
 }
 return 0|0;
}
function _data_based_hac_bandwidth() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[30592>>2]|0;
 $2 = (($1) + 120|0);
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(-9);
 do {
  if ($5) {
   $6 = HEAP32[30592>>2]|0;
   $7 = (($6) + 120|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(2);
   if (!($9)) {
    $10 = HEAP32[30592>>2]|0;
    $11 = HEAP32[$10>>2]|0;
    $12 = $11 & 64;
    $13 = ($12|0)!=(0);
    if (!($13)) {
     break;
    }
   }
   HEAP32[$0>>2] = 1;
   $14 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($14|0);
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $14 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _libset_get_double($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp + 8|0;
 $0 = sp;
 $1 = sp + 12|0;
 HEAP32[$1>>2] = $key;
 $2 = (_check_for_state()|0);
 $3 = ($2|0)!=(0);
 do {
  if ($3) {
   HEAPF64[$0>>3] = 1.79769313486231570815E+308;
  } else {
   $4 = HEAP32[$1>>2]|0;
   $5 = (_strcmp($4,30992)|0);
   $6 = ($5|0)!=(0);
   if (!($6)) {
    $7 = HEAP32[30592>>2]|0;
    $8 = (($7) + 120|0);
    $9 = (($8) + 16|0);
    $10 = +HEAPF64[$9>>3];
    $11 = $10 == 1.79769313486231570815E+308;
    if (!($11)) {
     $12 = HEAP32[30592>>2]|0;
     $13 = (($12) + 120|0);
     $14 = (($13) + 16|0);
     $15 = +HEAPF64[$14>>3];
     $16 = $15 > 0.0;
     if ($16) {
      $17 = HEAP32[30592>>2]|0;
      $18 = (($17) + 120|0);
      $19 = (($18) + 16|0);
      $20 = +HEAPF64[$19>>3];
      HEAPF64[$0>>3] = $20;
      break;
     }
    }
    HEAPF64[$0>>3] = 2.0;
    break;
   }
   $21 = HEAP32[$1>>2]|0;
   $22 = (_strcmp($21,30976)|0);
   $23 = ($22|0)!=(0);
   if (!($23)) {
    $24 = HEAP32[30592>>2]|0;
    $25 = (($24) + 24|0);
    $26 = +HEAPF64[$25>>3];
    $27 = $26 == 1.79769313486231570815E+308;
    if ($27) {
     $28 = (+_get_default_nls_toler());
     HEAPF64[$0>>3] = $28;
     break;
    } else {
     $29 = HEAP32[30592>>2]|0;
     $30 = (($29) + 24|0);
     $31 = +HEAPF64[$30>>3];
     HEAPF64[$0>>3] = $31;
     break;
    }
   }
   $32 = HEAP32[$1>>2]|0;
   $33 = (_strcmp($32,30960)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    $35 = HEAP32[30592>>2]|0;
    $36 = (($35) + 80|0);
    $37 = +HEAPF64[$36>>3];
    $38 = $37 == 1.79769313486231570815E+308;
    if ($38) {
     HEAPF64[$0>>3] = 9.99999999999999954748E-7;
     break;
    } else {
     $39 = HEAP32[30592>>2]|0;
     $40 = (($39) + 80|0);
     $41 = +HEAPF64[$40>>3];
     HEAPF64[$0>>3] = $41;
     break;
    }
   }
   $42 = HEAP32[$1>>2]|0;
   $43 = (_strcmp($42,30928)|0);
   $44 = ($43|0)!=(0);
   if (!($44)) {
    $45 = HEAP32[30592>>2]|0;
    $46 = (($45) + 48|0);
    $47 = +HEAPF64[$46>>3];
    $48 = $47 == 1.79769313486231570815E+308;
    if ($48) {
     $49 = (+_get_default_nls_toler());
     HEAPF64[$0>>3] = $49;
     break;
    } else {
     $50 = HEAP32[30592>>2]|0;
     $51 = (($50) + 48|0);
     $52 = +HEAPF64[$51>>3];
     HEAPF64[$0>>3] = $52;
     break;
    }
   }
   $53 = HEAP32[$1>>2]|0;
   $54 = (_strcmp($53,30944)|0);
   $55 = ($54|0)!=(0);
   if (!($55)) {
    $56 = HEAP32[30592>>2]|0;
    $57 = (($56) + 56|0);
    $58 = +HEAPF64[$57>>3];
    HEAPF64[$0>>3] = $58;
    break;
   }
   $59 = HEAP32[$1>>2]|0;
   $60 = (_strcmp($59,31008)|0);
   $61 = ($60|0)!=(0);
   if (!($61)) {
    $62 = HEAP32[30592>>2]|0;
    $63 = (($62) + 672|0);
    $64 = +HEAPF64[$63>>3];
    $65 = $64 == 1.79769313486231570815E+308;
    if ($65) {
     HEAPF64[$0>>3] = 4.0;
     break;
    } else {
     $66 = HEAP32[30592>>2]|0;
     $67 = (($66) + 672|0);
     $68 = +HEAPF64[$67>>3];
     HEAPF64[$0>>3] = $68;
     break;
    }
   }
   $69 = HEAP32[$1>>2]|0;
   $70 = (_strcmp($69,30920)|0);
   $71 = ($70|0)!=(0);
   if ($71) {
    $79 = HEAP32[_stderr>>2]|0;
    $80 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer>>2] = $80;
    (_fprintf(($79|0),(31392|0),($vararg_buffer|0))|0);
    HEAPF64[$0>>3] = 0.0;
    break;
   }
   $72 = HEAP32[30592>>2]|0;
   $73 = (($72) + 8|0);
   $74 = +HEAPF64[$73>>3];
   $75 = $74 == 1.79769313486231570815E+308;
   if ($75) {
    HEAPF64[$0>>3] = 1.0000000000000000159E+100;
    break;
   } else {
    $76 = HEAP32[30592>>2]|0;
    $77 = (($76) + 8|0);
    $78 = +HEAPF64[$77>>3];
    HEAPF64[$0>>3] = $78;
    break;
   }
  }
 } while(0);
 $81 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$81);
}
function _libset_get_int($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 HEAP32[$1>>2] = $key;
 $2 = (_check_for_state()|0);
 $3 = ($2|0)!=(0);
 L1: do {
  if ($3) {
   HEAP32[$0>>2] = 0;
  } else {
   $4 = HEAP32[$1>>2]|0;
   $5 = (_strcmp($4,31152)|0);
   $6 = ($5|0)!=(0);
   if (!($6)) {
    $7 = HEAP32[30592>>2]|0;
    $8 = (($7) + 44|0);
    $9 = HEAP32[$8>>2]|0;
    HEAP32[$0>>2] = $9;
    break;
   }
   $10 = HEAP32[$1>>2]|0;
   $11 = (_strcmp($10,31136)|0);
   $12 = ($11|0)!=(0);
   if (!($12)) {
    $13 = HEAP32[30592>>2]|0;
    $14 = (($13) + 68|0);
    $15 = HEAP32[$14>>2]|0;
    HEAP32[$0>>2] = $15;
    break;
   }
   $16 = HEAP32[$1>>2]|0;
   $17 = (_strcmp($16,31184)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    $19 = HEAP32[30592>>2]|0;
    $20 = (($19) + 72|0);
    $21 = HEAP32[$20>>2]|0;
    HEAP32[$0>>2] = $21;
    break;
   }
   $22 = HEAP32[$1>>2]|0;
   $23 = (_strcmp($22,31256)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    $25 = HEAP32[30592>>2]|0;
    $26 = (($25) + 104|0);
    $27 = HEAP32[$26>>2]|0;
    HEAP32[$0>>2] = $27;
    break;
   }
   $28 = HEAP32[$1>>2]|0;
   $29 = (_strcmp($28,31200)|0);
   $30 = ($29|0)!=(0);
   if (!($30)) {
    $31 = HEAP32[30592>>2]|0;
    $32 = (($31) + 108|0);
    $33 = HEAP32[$32>>2]|0;
    HEAP32[$0>>2] = $33;
    break;
   }
   $34 = HEAP32[$1>>2]|0;
   $35 = (_strcmp($34,31216)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    $37 = HEAP32[30592>>2]|0;
    $38 = (($37) + 88|0);
    $39 = HEAP32[$38>>2]|0;
    HEAP32[$0>>2] = $39;
    break;
   }
   $40 = HEAP32[$1>>2]|0;
   $41 = (_strcmp($40,31232)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    $43 = HEAP32[30592>>2]|0;
    $44 = (($43) + 20|0);
    $45 = HEAP32[$44>>2]|0;
    HEAP32[$0>>2] = $45;
    break;
   }
   $46 = HEAP32[$1>>2]|0;
   $47 = (_strcmp($46,31040)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    $49 = HEAP32[30592>>2]|0;
    $50 = (($49) + 92|0);
    $51 = HEAP32[$50>>2]|0;
    HEAP32[$0>>2] = $51;
    break;
   }
   $52 = HEAP32[$1>>2]|0;
   $53 = (_strcmp($52,31440)|0);
   $54 = ($53|0)!=(0);
   if (!($54)) {
    $55 = HEAP32[30592>>2]|0;
    $56 = (($55) + 96|0);
    $57 = HEAP32[$56>>2]|0;
    HEAP32[$0>>2] = $57;
    break;
   }
   $58 = HEAP32[$1>>2]|0;
   $59 = (_strcmp($58,31056)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    $61 = HEAP32[30592>>2]|0;
    $62 = (($61) + 100|0);
    $63 = HEAP32[$62>>2]|0;
    HEAP32[$0>>2] = $63;
    break;
   }
   $64 = HEAP32[$1>>2]|0;
   $65 = (_strcmp($64,31072)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    $67 = HEAP32[30592>>2]|0;
    $68 = (($67) + 120|0);
    $69 = (($68) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    HEAP32[$0>>2] = $70;
    break;
   }
   $71 = HEAP32[$1>>2]|0;
   $72 = (_strcmp($71,31088)|0);
   $73 = ($72|0)!=(0);
   if (!($73)) {
    $74 = HEAP32[30592>>2]|0;
    $75 = (($74) + 120|0);
    $76 = (($75) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    HEAP32[$0>>2] = $77;
    break;
   }
   $78 = HEAP32[$1>>2]|0;
   $79 = (_strcmp($78,31032)|0);
   $80 = ($79|0)!=(0);
   if (!($80)) {
    $81 = HEAP32[30592>>2]|0;
    $82 = (($81) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    HEAP32[$0>>2] = $83;
    break;
   }
   $84 = HEAP32[$1>>2]|0;
   $85 = (_strcmp($84,31240)|0);
   $86 = ($85|0)!=(0);
   if (!($86)) {
    $87 = HEAP32[30592>>2]|0;
    $88 = (($87) + 32|0);
    $89 = HEAP32[$88>>2]|0;
    HEAP32[$0>>2] = $89;
    break;
   }
   $90 = HEAP32[$1>>2]|0;
   $91 = (_strcmp($90,31104)|0);
   $92 = ($91|0)!=(0);
   if (!($92)) {
    $93 = HEAP32[30592>>2]|0;
    $94 = (($93) + 36|0);
    $95 = HEAP32[$94>>2]|0;
    HEAP32[$0>>2] = $95;
    break;
   }
   $96 = HEAP32[$1>>2]|0;
   $97 = (_strcmp($96,31120)|0);
   $98 = ($97|0)!=(0);
   if (!($98)) {
    $99 = HEAP32[30592>>2]|0;
    $100 = (($99) + 40|0);
    $101 = HEAP32[$100>>2]|0;
    HEAP32[$0>>2] = $101;
    break;
   }
   $102 = HEAP32[$1>>2]|0;
   $103 = (_strcmp($102,31272)|0);
   $104 = ($103|0)!=(0);
   if (!($104)) {
    $105 = HEAP32[30600>>2]|0;
    HEAP32[$0>>2] = $105;
    break;
   }
   $106 = HEAP32[$1>>2]|0;
   $107 = (_strcmp($106,31280)|0);
   $108 = ($107|0)!=(0);
   if (!($108)) {
    $109 = (_get_blas_mnk_min()|0);
    HEAP32[$0>>2] = $109;
    break;
   }
   $110 = HEAP32[$1>>2]|0;
   $111 = (_strcmp($110,31296)|0);
   $112 = ($111|0)!=(0);
   do {
    if ($112) {
     $113 = HEAP32[$1>>2]|0;
     $114 = (_strcmp($113,31312)|0);
     $115 = ($114|0)!=(0);
     if (!($115)) {
      break;
     }
     $117 = HEAP32[$1>>2]|0;
     $118 = (_strcmp($117,31328)|0);
     $119 = ($118|0)!=(0);
     if (!($119)) {
      $120 = HEAP32[30584>>2]|0;
      HEAP32[$0>>2] = $120;
      break L1;
     }
     $121 = HEAP32[$1>>2]|0;
     $122 = (_strcmp($121,31344)|0);
     $123 = ($122|0)!=(0);
     if (!($123)) {
      $124 = (_get_simd_k_max()|0);
      HEAP32[$0>>2] = $124;
      break L1;
     }
     $125 = HEAP32[$1>>2]|0;
     $126 = (_strcmp($125,31360)|0);
     $127 = ($126|0)!=(0);
     if (!($127)) {
      $128 = (_get_simd_mn_min()|0);
      HEAP32[$0>>2] = $128;
      break L1;
     }
     $129 = HEAP32[$1>>2]|0;
     $130 = (_strcmp($129,31168)|0);
     $131 = ($130|0)!=(0);
     if (!($131)) {
      $132 = HEAP32[30592>>2]|0;
      $133 = (($132) + 64|0);
      $134 = HEAP32[$133>>2]|0;
      HEAP32[$0>>2] = $134;
      break L1;
     }
     $135 = HEAP32[$1>>2]|0;
     $136 = (_strcmp($135,30656)|0);
     $137 = ($136|0)!=(0);
     if (!($137)) {
      $138 = HEAP32[31472>>2]|0;
      HEAP32[$0>>2] = $138;
      break L1;
     }
     $139 = HEAP32[$1>>2]|0;
     $140 = (_strcmp($139,31376)|0);
     $141 = ($140|0)!=(0);
     if ($141) {
      $145 = HEAP32[_stderr>>2]|0;
      $146 = HEAP32[$1>>2]|0;
      HEAP32[$vararg_buffer>>2] = $146;
      (_fprintf(($145|0),(31480|0),($vararg_buffer|0))|0);
      HEAP32[$0>>2] = 0;
      break L1;
     } else {
      $142 = HEAP32[30592>>2]|0;
      $143 = (($142) + 680|0);
      $144 = HEAP32[$143>>2]|0;
      HEAP32[$0>>2] = $144;
      break L1;
     }
    }
   } while(0);
   $116 = HEAP32[31464>>2]|0;
   HEAP32[$0>>2] = $116;
  }
 } while(0);
 $147 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($147|0);
}
function _libset_get_bool($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flag = 0, $or$cond = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $flag = sp + 8|0;
 $ret = sp + 4|0;
 HEAP32[$1>>2] = $key;
 HEAP32[$ret>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strcmp($2,30840)|0);
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $6 = HEAP32[$1>>2]|0;
   $7 = (_strcmp($6,30856)|0);
   $8 = ($7|0)!=(0);
   if (!($8)) {
    $9 = HEAP32[31536>>2]|0;
    HEAP32[$0>>2] = $9;
    break;
   }
   $10 = HEAP32[$1>>2]|0;
   $11 = (_strcmp($10,30896)|0);
   $12 = ($11|0)!=(0);
   if (!($12)) {
    $13 = (_gretl_rand_get_dcmt()|0);
    HEAP32[$0>>2] = $13;
    break;
   }
   $14 = HEAP32[$1>>2]|0;
   $15 = (_strcmp($14,30736)|0);
   $16 = ($15|0)==(0);
   $17 = HEAP32[30600>>2]|0;
   $18 = ($17|0)>(1);
   $or$cond = $16 & $18;
   if ($or$cond) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $19 = (_check_for_state()|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    HEAP32[$0>>2] = 0;
    break;
   }
   $21 = HEAP32[$1>>2]|0;
   _maybe_check_env($21);
   $22 = HEAP32[$1>>2]|0;
   $23 = (_boolvar_get_flag($22)|0);
   HEAP32[$flag>>2] = $23;
   $24 = HEAP32[$flag>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = HEAP32[_stderr>>2]|0;
    $27 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer>>2] = $27;
    (_fprintf(($26|0),(31544|0),($vararg_buffer|0))|0);
    HEAP32[$ret>>2] = 0;
   } else {
    $28 = HEAP32[30592>>2]|0;
    $29 = HEAP32[$flag>>2]|0;
    $30 = (_flag_to_bool($28,$29)|0);
    HEAP32[$ret>>2] = $30;
   }
   $31 = HEAP32[$ret>>2]|0;
   HEAP32[$0>>2] = $31;
  } else {
   $5 = HEAP32[31528>>2]|0;
   HEAP32[$0>>2] = $5;
  }
 } while(0);
 $32 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _maybe_check_env($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $s;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strcmp($1,30784)|0);
 $3 = ($2|0)!=(0);
 if (!($3)) {
  _set_flag_from_env(32,31624,0);
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_strcmp($4,30752)|0);
 $6 = ($5|0)!=(0);
 if (!($6)) {
  _set_flag_from_env(512,31640,0);
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (_strcmp($7,30720)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 _set_flag_from_env(256,31656,1);
 STACKTOP = sp;return;
}
function _boolvar_get_flag($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 HEAP32[$1>>2] = $s;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strcmp($2,30648)|0);
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $5 = HEAP32[$1>>2]|0;
   $6 = (_strcmp($5,30672)|0);
   $7 = ($6|0)!=(0);
   if (!($7)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $8 = HEAP32[$1>>2]|0;
   $9 = (_strcmp($8,30688)|0);
   $10 = ($9|0)!=(0);
   if (!($10)) {
    HEAP32[$0>>2] = 8192;
    break;
   }
   $11 = HEAP32[$1>>2]|0;
   $12 = (_strcmp($11,30784)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    HEAP32[$0>>2] = 32;
    break;
   }
   $14 = HEAP32[$1>>2]|0;
   $15 = (_strcmp($14,30752)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    HEAP32[$0>>2] = 512;
    break;
   }
   $17 = HEAP32[$1>>2]|0;
   $18 = (_strcmp($17,30704)|0);
   $19 = ($18|0)!=(0);
   if (!($19)) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $20 = HEAP32[$1>>2]|0;
   $21 = (_strcmp($20,30808)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $23 = HEAP32[$1>>2]|0;
   $24 = (_strcmp($23,30816)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    HEAP32[$0>>2] = 4096;
    break;
   }
   $26 = HEAP32[$1>>2]|0;
   $27 = (_strcmp($26,30720)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    HEAP32[$0>>2] = 256;
    break;
   }
   $29 = HEAP32[$1>>2]|0;
   $30 = (_strcmp($29,30736)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    HEAP32[$0>>2] = 2048;
    break;
   }
   $32 = HEAP32[$1>>2]|0;
   $33 = (_strcmp($32,30792)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    HEAP32[$0>>2] = 1024;
    break;
   }
   $35 = HEAP32[$1>>2]|0;
   $36 = (_strcmp($35,30632)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    HEAP32[$0>>2] = 128;
    break;
   }
   $38 = HEAP32[$1>>2]|0;
   $39 = (_strcmp($38,30768)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    HEAP32[$0>>2] = 64;
    break;
   }
   $41 = HEAP32[$1>>2]|0;
   $42 = (_strcmp($41,30760)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    HEAP32[$0>>2] = 16;
    break;
   }
   $44 = HEAP32[$1>>2]|0;
   $45 = (_strcmp($44,30824)|0);
   $46 = ($45|0)!=(0);
   if (!($46)) {
    HEAP32[$0>>2] = 16384;
    break;
   }
   $47 = HEAP32[$1>>2]|0;
   $48 = (_strcmp($47,30864)|0);
   $49 = ($48|0)!=(0);
   if (!($49)) {
    HEAP32[$0>>2] = 262144;
    break;
   }
   $50 = HEAP32[$1>>2]|0;
   $51 = (_strcmp($50,30880)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    HEAP32[$0>>2] = 524288;
    break;
   }
   $53 = HEAP32[$1>>2]|0;
   $54 = (_strcmp($53,30912)|0);
   $55 = ($54|0)!=(0);
   if ($55) {
    $56 = HEAP32[_stderr>>2]|0;
    $57 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer>>2] = $57;
    (_fprintf(($56|0),(31544|0),($vararg_buffer|0))|0);
    HEAP32[$0>>2] = 0;
    break;
   } else {
    HEAP32[$0>>2] = 1048576;
    break;
   }
  } else {
   HEAP32[$0>>2] = 2;
  }
 } while(0);
 $58 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($58|0);
}
function _push_program_state() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $newstate = 0, $ns = 0, $sstack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sstack = sp + 12|0;
 $newstate = sp + 8|0;
 $ns = sp + 4|0;
 $err = sp;
 $0 = HEAP32[31592>>2]|0;
 HEAP32[$ns>>2] = $0;
 HEAP32[$err>>2] = 0;
 $1 = (_malloc(688)|0);
 HEAP32[$newstate>>2] = $1;
 $2 = HEAP32[$newstate>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$err>>2] = 12;
 } else {
  $4 = HEAP32[31600>>2]|0;
  $5 = HEAP32[$ns>>2]|0;
  $6 = (($5) + 1)|0;
  $7 = $6<<2;
  $8 = (_realloc($4,$7)|0);
  HEAP32[$sstack>>2] = $8;
  $9 = HEAP32[$sstack>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $11 = HEAP32[$newstate>>2]|0;
   _free($11);
   HEAP32[$err>>2] = 12;
  }
 }
 $12 = HEAP32[$err>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $24 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 $14 = HEAP32[$ns>>2]|0;
 $15 = ($14|0)==(0);
 $16 = HEAP32[$newstate>>2]|0;
 if ($15) {
  _state_vars_init($16);
 } else {
  _state_vars_copy($16);
 }
 $17 = HEAP32[$sstack>>2]|0;
 HEAP32[31600>>2] = $17;
 $18 = HEAP32[$newstate>>2]|0;
 $19 = HEAP32[$ns>>2]|0;
 $20 = HEAP32[31600>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 HEAP32[$21>>2] = $18;
 HEAP32[30592>>2] = $18;
 $22 = HEAP32[31592>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[31592>>2] = $23;
 $24 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($24|0);
}
function _state_vars_init($sv) {
 $sv = $sv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $sv;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = 24838;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 8|0);
 HEAPF64[$5>>3] = 1.0000000000000000159E+100;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 16|0);
 HEAP32[$7>>2] = -9;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 20|0);
 HEAP32[$9>>2] = 1000;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 24|0);
 HEAPF64[$11>>3] = 1.79769313486231570815E+308;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 32|0);
 HEAP32[$13>>2] = 100000;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 104|0);
 HEAP32[$15>>2] = 1000;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 108|0);
 HEAP32[$17>>2] = 250;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 36|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 40|0);
 HEAP32[$21>>2] = 0;
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 112|0);
 HEAP32[$23>>2] = 0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + 116|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + 44|0);
 HEAP32[$27>>2] = -9;
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + 48|0);
 HEAPF64[$29>>3] = 1.79769313486231570815E+308;
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + 56|0);
 HEAPF64[$31>>3] = 5.0;
 $32 = HEAP32[$0>>2]|0;
 $33 = (($32) + 64|0);
 HEAP32[$33>>2] = 1;
 $34 = HEAP32[$0>>2]|0;
 $35 = (($34) + 68|0);
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$0>>2]|0;
 $37 = (($36) + 72|0);
 HEAP32[$37>>2] = 500;
 $38 = HEAP32[$0>>2]|0;
 $39 = (($38) + 80|0);
 HEAPF64[$39>>3] = 1.79769313486231570815E+308;
 $40 = HEAP32[$0>>2]|0;
 $41 = (($40) + 88|0);
 HEAP32[$41>>2] = 8;
 $42 = HEAP32[$0>>2]|0;
 $43 = (($42) + 92|0);
 HEAP32[$43>>2] = 0;
 $44 = HEAP32[$0>>2]|0;
 $45 = (($44) + 100|0);
 HEAP32[$45>>2] = 1;
 $46 = HEAP32[$0>>2]|0;
 $47 = (($46) + 96|0);
 HEAP32[$47>>2] = 0;
 $48 = HEAP32[$0>>2]|0;
 $49 = (($48) + 672|0);
 HEAPF64[$49>>3] = 4.0;
 $50 = HEAP32[$0>>2]|0;
 $51 = (($50) + 680|0);
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$0>>2]|0;
 $53 = (($52) + 144|0);
 HEAP8[$53>>0] = 0;
 $54 = HEAP32[$0>>2]|0;
 $55 = (($54) + 656|0);
 (_strcpy(($55|0),(31616|0))|0);
 $56 = HEAP32[$0>>2]|0;
 $57 = (($56) + 664|0);
 (_strcpy(($57|0),(31024|0))|0);
 $58 = HEAP32[$0>>2]|0;
 $59 = (($58) + 120|0);
 _robust_opts_init($59);
 STACKTOP = sp;return;
}
function _state_vars_copy($sv) {
 $sv = $sv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $sv;
 $1 = HEAP32[30592>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -32769;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[30592>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = HEAP32[30592>>2]|0;
 $13 = (($12) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 8|0);
 HEAPF64[$16>>3] = $14;
 $17 = HEAP32[30592>>2]|0;
 $18 = (($17) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 16|0);
 HEAP32[$21>>2] = $19;
 $22 = HEAP32[30592>>2]|0;
 $23 = (($22) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 20|0);
 HEAP32[$26>>2] = $24;
 $27 = HEAP32[30592>>2]|0;
 $28 = (($27) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + 32|0);
 HEAP32[$31>>2] = $29;
 $32 = HEAP32[30592>>2]|0;
 $33 = (($32) + 104|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$0>>2]|0;
 $36 = (($35) + 104|0);
 HEAP32[$36>>2] = $34;
 $37 = HEAP32[30592>>2]|0;
 $38 = (($37) + 108|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$0>>2]|0;
 $41 = (($40) + 108|0);
 HEAP32[$41>>2] = $39;
 $42 = HEAP32[30592>>2]|0;
 $43 = (($42) + 24|0);
 $44 = +HEAPF64[$43>>3];
 $45 = HEAP32[$0>>2]|0;
 $46 = (($45) + 24|0);
 HEAPF64[$46>>3] = $44;
 $47 = HEAP32[30592>>2]|0;
 $48 = (($47) + 36|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$0>>2]|0;
 $51 = (($50) + 36|0);
 HEAP32[$51>>2] = $49;
 $52 = HEAP32[30592>>2]|0;
 $53 = (($52) + 40|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$0>>2]|0;
 $56 = (($55) + 40|0);
 HEAP32[$56>>2] = $54;
 $57 = HEAP32[30592>>2]|0;
 $58 = (($57) + 44|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = HEAP32[$0>>2]|0;
 $61 = (($60) + 44|0);
 HEAP32[$61>>2] = $59;
 $62 = HEAP32[30592>>2]|0;
 $63 = (($62) + 48|0);
 $64 = +HEAPF64[$63>>3];
 $65 = HEAP32[$0>>2]|0;
 $66 = (($65) + 48|0);
 HEAPF64[$66>>3] = $64;
 $67 = HEAP32[30592>>2]|0;
 $68 = (($67) + 56|0);
 $69 = +HEAPF64[$68>>3];
 $70 = HEAP32[$0>>2]|0;
 $71 = (($70) + 56|0);
 HEAPF64[$71>>3] = $69;
 $72 = HEAP32[30592>>2]|0;
 $73 = (($72) + 64|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$0>>2]|0;
 $76 = (($75) + 64|0);
 HEAP32[$76>>2] = $74;
 $77 = HEAP32[30592>>2]|0;
 $78 = (($77) + 68|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = HEAP32[$0>>2]|0;
 $81 = (($80) + 68|0);
 HEAP32[$81>>2] = $79;
 $82 = HEAP32[30592>>2]|0;
 $83 = (($82) + 72|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$0>>2]|0;
 $86 = (($85) + 72|0);
 HEAP32[$86>>2] = $84;
 $87 = HEAP32[30592>>2]|0;
 $88 = (($87) + 80|0);
 $89 = +HEAPF64[$88>>3];
 $90 = HEAP32[$0>>2]|0;
 $91 = (($90) + 80|0);
 HEAPF64[$91>>3] = $89;
 $92 = HEAP32[30592>>2]|0;
 $93 = (($92) + 88|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[$0>>2]|0;
 $96 = (($95) + 88|0);
 HEAP32[$96>>2] = $94;
 $97 = HEAP32[30592>>2]|0;
 $98 = (($97) + 92|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$0>>2]|0;
 $101 = (($100) + 92|0);
 HEAP32[$101>>2] = $99;
 $102 = HEAP32[30592>>2]|0;
 $103 = (($102) + 100|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = HEAP32[$0>>2]|0;
 $106 = (($105) + 100|0);
 HEAP32[$106>>2] = $104;
 $107 = HEAP32[30592>>2]|0;
 $108 = (($107) + 96|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = HEAP32[$0>>2]|0;
 $111 = (($110) + 96|0);
 HEAP32[$111>>2] = $109;
 $112 = HEAP32[30592>>2]|0;
 $113 = (($112) + 672|0);
 $114 = +HEAPF64[$113>>3];
 $115 = HEAP32[$0>>2]|0;
 $116 = (($115) + 672|0);
 HEAPF64[$116>>3] = $114;
 $117 = HEAP32[30592>>2]|0;
 $118 = (($117) + 680|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = HEAP32[$0>>2]|0;
 $121 = (($120) + 680|0);
 HEAP32[$121>>2] = $119;
 $122 = HEAP32[30592>>2]|0;
 $123 = (($122) + 112|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (_gretl_matrix_copy($124)|0);
 $126 = HEAP32[$0>>2]|0;
 $127 = (($126) + 112|0);
 HEAP32[$127>>2] = $125;
 $128 = HEAP32[30592>>2]|0;
 $129 = (($128) + 116|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (_gretl_matrix_copy($130)|0);
 $132 = HEAP32[$0>>2]|0;
 $133 = (($132) + 116|0);
 HEAP32[$133>>2] = $131;
 $134 = HEAP32[$0>>2]|0;
 $135 = (($134) + 144|0);
 $136 = HEAP32[30592>>2]|0;
 $137 = (($136) + 144|0);
 (_strcpy(($135|0),($137|0))|0);
 $138 = HEAP32[$0>>2]|0;
 $139 = (($138) + 656|0);
 $140 = HEAP32[30592>>2]|0;
 $141 = (($140) + 656|0);
 (_strcpy(($139|0),($141|0))|0);
 $142 = HEAP32[$0>>2]|0;
 $143 = (($142) + 664|0);
 $144 = HEAP32[30592>>2]|0;
 $145 = (($144) + 664|0);
 (_strcpy(($143|0),($145|0))|0);
 $146 = HEAP32[$0>>2]|0;
 $147 = (($146) + 120|0);
 _robust_opts_copy($147);
 STACKTOP = sp;return;
}
function _free_state($sv) {
 $sv = $sv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $sv;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 _gretl_matrix_free($3);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 116|0);
 $6 = HEAP32[$5>>2]|0;
 _gretl_matrix_free($6);
 $7 = HEAP32[$0>>2]|0;
 _free($7);
 STACKTOP = sp;return;
}
function _libset_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $err = sp;
 HEAP32[$err>>2] = 0;
 $0 = HEAP32[31608>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  $2 = (_push_program_state()|0);
  HEAP32[$err>>2] = $2;
  HEAP32[31608>>2] = 1;
 }
 $3 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _libset_cleanup() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = sp;
 HEAP32[$i>>2] = 0;
 while(1) {
  $0 = HEAP32[$i>>2]|0;
  $1 = HEAP32[31592>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[31600>>2]|0;
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  _free_state($6);
  $7 = HEAP32[$i>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$i>>2] = $8;
 }
 $9 = HEAP32[31600>>2]|0;
 _free($9);
 HEAP32[31600>>2] = 0;
 HEAP32[31592>>2] = 0;
 STACKTOP = sp;return;
}
function _robust_opts_copy($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $r;
 $1 = HEAP32[30592>>2]|0;
 $2 = (($1) + 120|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[30592>>2]|0;
 $6 = (($5) + 120|0);
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[30592>>2]|0;
 $12 = (($11) + 120|0);
 $13 = (($12) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 8|0);
 HEAP32[$16>>2] = $14;
 $17 = HEAP32[30592>>2]|0;
 $18 = (($17) + 120|0);
 $19 = (($18) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 12|0);
 HEAP32[$22>>2] = $20;
 $23 = HEAP32[30592>>2]|0;
 $24 = (($23) + 120|0);
 $25 = (($24) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + 16|0);
 HEAPF64[$28>>3] = $26;
 STACKTOP = sp;return;
}
function _robust_opts_init($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $r;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = -9;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 16|0);
 HEAPF64[$9>>3] = 1.79769313486231570815E+308;
 STACKTOP = sp;return;
}
function _set_flag_from_env($flag,$s,$neg) {
 $flag = $flag|0;
 $s = $s|0;
 $neg = $neg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action = 0, $e = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $e = sp + 4|0;
 $action = sp;
 HEAP32[$0>>2] = $flag;
 HEAP32[$1>>2] = $s;
 HEAP32[$2>>2] = $neg;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_getenv(($3|0))|0);
 HEAP32[$e>>2] = $4;
 HEAP32[$action>>2] = 0;
 $5 = HEAP32[$e>>2]|0;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = HEAP32[$e>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = HEAP32[$e>>2]|0;
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($13|0)!=(48);
    if ($14) {
     $15 = HEAP32[$2>>2]|0;
     $16 = ($15|0)!=(0);
     $17 = $16 ? -1 : 1;
     HEAP32[$action>>2] = $17;
     break;
    }
   }
   $18 = HEAP32[$2>>2]|0;
   $19 = ($18|0)!=(0);
   $20 = $19 ? 1 : -1;
   HEAP32[$action>>2] = $20;
  }
 } while(0);
 $21 = HEAP32[$action>>2]|0;
 $22 = ($21|0)>(0);
 if ($22) {
  $23 = HEAP32[$0>>2]|0;
  $24 = HEAP32[30592>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | $23;
  HEAP32[$24>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$action>>2]|0;
 $28 = ($27|0)<(0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = HEAP32[$0>>2]|0;
 $30 = $29 ^ -1;
 $31 = HEAP32[30592>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & $30;
 HEAP32[$31>>2] = $33;
 STACKTOP = sp;return;
}
function _gretl_vector_from_array($x,$n,$mod) {
 $x = $x|0;
 $n = $n|0;
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $v = 0, $xi = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $v = sp + 16|0;
 $xi = sp;
 $i = sp + 12|0;
 $j = sp + 8|0;
 HEAP32[$0>>2] = $x;
 HEAP32[$1>>2] = $n;
 HEAP32[$2>>2] = $mod;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_gretl_matrix_alloc($3,1)|0);
 HEAP32[$v>>2] = $4;
 $5 = HEAP32[$v>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $34 = HEAP32[$v>>2]|0;
  STACKTOP = sp;return ($34|0);
 }
 HEAP32[$i>>2] = 0;
 HEAP32[$j>>2] = 0;
 while(1) {
  $7 = HEAP32[$j>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[$i>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$i>>2] = $11;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + ($10<<3)|0);
  $14 = +HEAPF64[$13>>3];
  HEAPF64[$xi>>3] = $14;
  $15 = +HEAPF64[$xi>>3];
  $16 = $15 == 1.79769313486231570815E+308;
  if ($16) {
   continue;
  }
  $17 = HEAP32[$2>>2]|0;
  $18 = ($17|0)==(2);
  $19 = +HEAPF64[$xi>>3];
  if ($18) {
   $20 = +HEAPF64[$xi>>3];
   $21 = $19 * $20;
   $22 = HEAP32[$j>>2]|0;
   $23 = HEAP32[$v>>2]|0;
   $24 = (($23) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($22<<3)|0);
   HEAPF64[$26>>3] = $21;
  } else {
   $27 = HEAP32[$j>>2]|0;
   $28 = HEAP32[$v>>2]|0;
   $29 = (($28) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27<<3)|0);
   HEAPF64[$31>>3] = $19;
  }
  $32 = HEAP32[$j>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$j>>2] = $33;
 }
 $34 = HEAP32[$v>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _gretl_vcv_matrix_from_model($pmod,$select,$err) {
 $pmod = $pmod|0;
 $select = $select|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i = 0, $idx = 0, $ii = 0, $j = 0, $jj = 0, $k = 0, $nc = 0, $vcv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $vcv = sp + 28|0;
 $i = sp + 24|0;
 $j = sp + 20|0;
 $idx = sp + 16|0;
 $nc = sp + 12|0;
 $ii = sp + 8|0;
 $jj = sp + 4|0;
 $k = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $select;
 HEAP32[$3>>2] = $err;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$k>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 120|0);
 $10 = +HEAPF64[$9>>3];
 $11 = (_makevcv($7,$10)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$3>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  HEAP32[$0>>2] = 0;
  $101 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($101|0);
 }
 $16 = HEAP32[$2>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = HEAP32[$k>>2]|0;
  HEAP32[$nc>>2] = $18;
 } else {
  $19 = HEAP32[$2>>2]|0;
  $20 = HEAP32[$k>>2]|0;
  $21 = (_count_selection($19,$20)|0);
  HEAP32[$nc>>2] = $21;
 }
 $22 = HEAP32[$nc>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = HEAP32[$3>>2]|0;
  HEAP32[$24>>2] = 2;
  HEAP32[$0>>2] = 0;
  $101 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($101|0);
 }
 $25 = HEAP32[$nc>>2]|0;
 $26 = HEAP32[$nc>>2]|0;
 $27 = (_gretl_matrix_alloc($25,$26)|0);
 HEAP32[$vcv>>2] = $27;
 $28 = HEAP32[$vcv>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $30 = HEAP32[$3>>2]|0;
  HEAP32[$30>>2] = 12;
  HEAP32[$0>>2] = 0;
  $101 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($101|0);
 }
 HEAP32[$ii>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $31 = HEAP32[$i>>2]|0;
  $32 = HEAP32[$k>>2]|0;
  $33 = ($31|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = HEAP32[$2>>2]|0;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = HEAP32[$i>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = (($37) + ($36)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = ($39<<24>>24)!=(0);
   if ($40) {
    label = 14;
   }
  } else {
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   HEAP32[$jj>>2] = 0;
   HEAP32[$j>>2] = 0;
   while(1) {
    $41 = HEAP32[$j>>2]|0;
    $42 = HEAP32[$i>>2]|0;
    $43 = ($41|0)<=($42|0);
    if (!($43)) {
     break;
    }
    $44 = HEAP32[$2>>2]|0;
    $45 = ($44|0)!=(0|0);
    if ($45) {
     $46 = HEAP32[$j>>2]|0;
     $47 = HEAP32[$2>>2]|0;
     $48 = (($47) + ($46)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ($49<<24>>24)!=(0);
     if ($50) {
      label = 18;
     }
    } else {
     label = 18;
    }
    if ((label|0) == 18) {
     label = 0;
     $51 = HEAP32[$i>>2]|0;
     $52 = HEAP32[$j>>2]|0;
     $53 = HEAP32[$1>>2]|0;
     $54 = (($53) + 48|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (_ijton($51,$52,$55)|0);
     HEAP32[$idx>>2] = $56;
     $57 = HEAP32[$idx>>2]|0;
     $58 = HEAP32[$1>>2]|0;
     $59 = (($58) + 96|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (($60) + ($57<<3)|0);
     $62 = +HEAPF64[$61>>3];
     $63 = HEAP32[$jj>>2]|0;
     $64 = HEAP32[$vcv>>2]|0;
     $65 = HEAP32[$64>>2]|0;
     $66 = Math_imul($63, $65)|0;
     $67 = HEAP32[$ii>>2]|0;
     $68 = (($66) + ($67))|0;
     $69 = HEAP32[$vcv>>2]|0;
     $70 = (($69) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($71) + ($68<<3)|0);
     HEAPF64[$72>>3] = $62;
     $73 = HEAP32[$jj>>2]|0;
     $74 = HEAP32[$ii>>2]|0;
     $75 = ($73|0)!=($74|0);
     if ($75) {
      $76 = HEAP32[$idx>>2]|0;
      $77 = HEAP32[$1>>2]|0;
      $78 = (($77) + 96|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($79) + ($76<<3)|0);
      $81 = +HEAPF64[$80>>3];
      $82 = HEAP32[$ii>>2]|0;
      $83 = HEAP32[$vcv>>2]|0;
      $84 = HEAP32[$83>>2]|0;
      $85 = Math_imul($82, $84)|0;
      $86 = HEAP32[$jj>>2]|0;
      $87 = (($85) + ($86))|0;
      $88 = HEAP32[$vcv>>2]|0;
      $89 = (($88) + 8|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (($90) + ($87<<3)|0);
      HEAPF64[$91>>3] = $81;
     }
     $92 = HEAP32[$jj>>2]|0;
     $93 = (($92) + 1)|0;
     HEAP32[$jj>>2] = $93;
    }
    $94 = HEAP32[$j>>2]|0;
    $95 = (($94) + 1)|0;
    HEAP32[$j>>2] = $95;
   }
   $96 = HEAP32[$ii>>2]|0;
   $97 = (($96) + 1)|0;
   HEAP32[$ii>>2] = $97;
  }
  $98 = HEAP32[$i>>2]|0;
  $99 = (($98) + 1)|0;
  HEAP32[$i>>2] = $99;
 }
 $100 = HEAP32[$vcv>>2]|0;
 HEAP32[$0>>2] = $100;
 $101 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($101|0);
}
function _count_selection($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $i = sp + 4|0;
 $c = sp;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $n;
 HEAP32[$c>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + ($5)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = HEAP32[$c>>2]|0;
   $12 = (($11) + 1)|0;
   HEAP32[$c>>2] = $12;
  }
  $13 = HEAP32[$i>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$i>>2] = $14;
 }
 $15 = HEAP32[$c>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _gretl_coeff_vector_from_model($pmod,$select,$err) {
 $pmod = $pmod|0;
 $select = $select|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i = 0, $j = 0, $k = 0, $nc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $b = sp + 16|0;
 $i = sp + 12|0;
 $j = sp + 8|0;
 $nc = sp + 4|0;
 $k = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $select;
 HEAP32[$3>>2] = $err;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$k>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = HEAP32[$k>>2]|0;
  HEAP32[$nc>>2] = $9;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = HEAP32[$k>>2]|0;
  $12 = (_count_selection($10,$11)|0);
  HEAP32[$nc>>2] = $12;
 }
 $13 = HEAP32[$nc>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = HEAP32[$3>>2]|0;
  HEAP32[$15>>2] = 2;
  HEAP32[$0>>2] = 0;
  $46 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($46|0);
 }
 $16 = HEAP32[$nc>>2]|0;
 $17 = (_gretl_matrix_alloc($16,1)|0);
 HEAP32[$b>>2] = $17;
 $18 = HEAP32[$b>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = HEAP32[$3>>2]|0;
  HEAP32[$20>>2] = 12;
  HEAP32[$0>>2] = 0;
  $46 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($46|0);
 }
 HEAP32[$j>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $21 = HEAP32[$i>>2]|0;
  $22 = HEAP32[$k>>2]|0;
  $23 = ($21|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = HEAP32[$2>>2]|0;
  $25 = ($24|0)!=(0|0);
  if ($25) {
   $26 = HEAP32[$i>>2]|0;
   $27 = HEAP32[$2>>2]|0;
   $28 = (($27) + ($26)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29<<24>>24)!=(0);
   if ($30) {
    label = 12;
   }
  } else {
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $31 = HEAP32[$i>>2]|0;
   $32 = HEAP32[$1>>2]|0;
   $33 = (($32) + 76|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($31<<3)|0);
   $36 = +HEAPF64[$35>>3];
   $37 = HEAP32[$j>>2]|0;
   $38 = (($37) + 1)|0;
   HEAP32[$j>>2] = $38;
   $39 = HEAP32[$b>>2]|0;
   $40 = (($39) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($37<<3)|0);
   HEAPF64[$42>>3] = $36;
  }
  $43 = HEAP32[$i>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$i>>2] = $44;
 }
 $45 = HEAP32[$b>>2]|0;
 HEAP32[$0>>2] = $45;
 $46 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($46|0);
}
function _undo_daily_repack($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $err = 0, $g = 0, $i = 0, $j = 0, $m = 0, $mobs = 0, $or$cond = 0, $t = 0, $tmpgood = 0, $tmpmiss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $i = sp + 32|0;
 $j = sp + 28|0;
 $t = sp + 24|0;
 $m = sp + 20|0;
 $g = sp + 16|0;
 $tmpmiss = sp + 12|0;
 $tmpgood = sp + 8|0;
 $mobs = sp + 4|0;
 $err = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$tmpmiss>>2] = 0;
 HEAP32[$tmpgood>>2] = 0;
 HEAP32[$err>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_gretl_model_get_int($3,31680)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  HEAP32[$0>>2] = 2;
  $160 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = (_gretl_model_get_data($6,31696)|0);
 HEAP32[$mobs>>2] = $7;
 $8 = HEAP32[$mobs>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  HEAP32[$0>>2] = 2;
  $160 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 $10 = HEAP32[$1>>2]|0;
 (_gretl_model_detach_data_item($10,31696)|0);
 $11 = HEAP32[$mobs>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12) + ($15))|0;
 $17 = $16<<3;
 $18 = (_malloc($17)|0);
 HEAP32[$tmpmiss>>2] = $18;
 $19 = HEAP32[$tmpmiss>>2]|0;
 $20 = ($19|0)==(0|0);
 L9: do {
  if ($20) {
   HEAP32[$err>>2] = 12;
  } else {
   $21 = HEAP32[$tmpmiss>>2]|0;
   $22 = HEAP32[$mobs>>2]|0;
   $23 = HEAP32[$22>>2]|0;
   $24 = (($21) + ($23<<3)|0);
   HEAP32[$tmpgood>>2] = $24;
   HEAP32[$j>>2] = 1;
   while(1) {
    $25 = HEAP32[$j>>2]|0;
    $26 = HEAP32[$1>>2]|0;
    $27 = (($26) + 60|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($25|0)<=($29|0);
    if (!($30)) {
     break L9;
    }
    $31 = HEAP32[$j>>2]|0;
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + 60|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + ($31<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    HEAP32[$i>>2] = $36;
    $37 = HEAP32[$i>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$i>>2]|0;
    $40 = ($39|0)==(-100);
    $or$cond = $38 | $40;
    L15: do {
     if (!($or$cond)) {
      HEAP32[$g>>2] = 0;
      HEAP32[$m>>2] = 0;
      $41 = HEAP32[$1>>2]|0;
      $42 = (($41) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      HEAP32[$t>>2] = $43;
      while(1) {
       $44 = HEAP32[$t>>2]|0;
       $45 = HEAP32[$1>>2]|0;
       $46 = (($45) + 20|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($44|0)<=($47|0);
       if (!($48)) {
        break;
       }
       $49 = HEAP32[$t>>2]|0;
       $50 = HEAP32[$i>>2]|0;
       $51 = HEAP32[$2>>2]|0;
       $52 = (($51) + 64|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (($53) + ($50<<2)|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = (($55) + ($49<<3)|0);
       $57 = +HEAPF64[$56>>3];
       $58 = HEAP32[$g>>2]|0;
       $59 = (($58) + 1)|0;
       HEAP32[$g>>2] = $59;
       $60 = HEAP32[$tmpgood>>2]|0;
       $61 = (($60) + ($58<<3)|0);
       HEAPF64[$61>>3] = $57;
       $62 = HEAP32[$t>>2]|0;
       $63 = (($62) + 1)|0;
       HEAP32[$t>>2] = $63;
      }
      $64 = HEAP32[$1>>2]|0;
      $65 = (($64) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = (($66) + 1)|0;
      HEAP32[$t>>2] = $67;
      while(1) {
       $68 = HEAP32[$t>>2]|0;
       $69 = HEAP32[$1>>2]|0;
       $70 = (($69) + 20|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = HEAP32[$mobs>>2]|0;
       $73 = HEAP32[$72>>2]|0;
       $74 = (($71) + ($73))|0;
       $75 = ($68|0)<=($74|0);
       if (!($75)) {
        break;
       }
       $76 = HEAP32[$t>>2]|0;
       $77 = HEAP32[$i>>2]|0;
       $78 = HEAP32[$2>>2]|0;
       $79 = (($78) + 64|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (($80) + ($77<<2)|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (($82) + ($76<<3)|0);
       $84 = +HEAPF64[$83>>3];
       $85 = HEAP32[$m>>2]|0;
       $86 = (($85) + 1)|0;
       HEAP32[$m>>2] = $86;
       $87 = HEAP32[$tmpmiss>>2]|0;
       $88 = (($87) + ($85<<3)|0);
       HEAPF64[$88>>3] = $84;
       $89 = HEAP32[$t>>2]|0;
       $90 = (($89) + 1)|0;
       HEAP32[$t>>2] = $90;
      }
      HEAP32[$g>>2] = 0;
      HEAP32[$m>>2] = 0;
      $91 = HEAP32[$1>>2]|0;
      $92 = (($91) + 16|0);
      $93 = HEAP32[$92>>2]|0;
      HEAP32[$t>>2] = $93;
      while(1) {
       $94 = HEAP32[$t>>2]|0;
       $95 = HEAP32[$1>>2]|0;
       $96 = (($95) + 20|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = HEAP32[$mobs>>2]|0;
       $99 = HEAP32[$98>>2]|0;
       $100 = (($97) + ($99))|0;
       $101 = ($94|0)<=($100|0);
       if (!($101)) {
        break L15;
       }
       $102 = HEAP32[$t>>2]|0;
       $103 = HEAP32[$mobs>>2]|0;
       $104 = (($103) + 4|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($105) + ($102)|0);
       $107 = HEAP8[$106>>0]|0;
       $108 = $107 << 24 >> 24;
       $109 = ($108|0)==(49);
       if ($109) {
        $110 = HEAP32[$m>>2]|0;
        $111 = (($110) + 1)|0;
        HEAP32[$m>>2] = $111;
        $112 = HEAP32[$tmpmiss>>2]|0;
        $113 = (($112) + ($110<<3)|0);
        $114 = +HEAPF64[$113>>3];
        $115 = HEAP32[$t>>2]|0;
        $116 = HEAP32[$i>>2]|0;
        $117 = HEAP32[$2>>2]|0;
        $118 = (($117) + 64|0);
        $119 = HEAP32[$118>>2]|0;
        $120 = (($119) + ($116<<2)|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (($121) + ($115<<3)|0);
        HEAPF64[$122>>3] = $114;
       } else {
        $123 = HEAP32[$g>>2]|0;
        $124 = (($123) + 1)|0;
        HEAP32[$g>>2] = $124;
        $125 = HEAP32[$tmpgood>>2]|0;
        $126 = (($125) + ($123<<3)|0);
        $127 = +HEAPF64[$126>>3];
        $128 = HEAP32[$t>>2]|0;
        $129 = HEAP32[$i>>2]|0;
        $130 = HEAP32[$2>>2]|0;
        $131 = (($130) + 64|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = (($132) + ($129<<2)|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = (($134) + ($128<<3)|0);
        HEAPF64[$135>>3] = $127;
       }
       $136 = HEAP32[$t>>2]|0;
       $137 = (($136) + 1)|0;
       HEAP32[$t>>2] = $137;
      }
     }
    } while(0);
    $138 = HEAP32[$j>>2]|0;
    $139 = (($138) + 1)|0;
    HEAP32[$j>>2] = $139;
   }
  }
 } while(0);
 $140 = HEAP32[$tmpmiss>>2]|0;
 _free($140);
 $141 = HEAP32[$err>>2]|0;
 $142 = ($141|0)!=(0);
 if (!($142)) {
  $143 = HEAP32[$1>>2]|0;
  $144 = HEAP32[$mobs>>2]|0;
  $145 = (_reorganize_uhat_yhat($143,$144)|0);
  HEAP32[$err>>2] = $145;
 }
 $146 = HEAP32[$mobs>>2]|0;
 $147 = HEAP32[$146>>2]|0;
 $148 = HEAP32[$1>>2]|0;
 $149 = (($148) + 20|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = (($150) + ($147))|0;
 HEAP32[$149>>2] = $151;
 $152 = HEAP32[$mobs>>2]|0;
 $153 = (($152) + 4|0);
 $154 = HEAP32[$153>>2]|0;
 _free($154);
 $155 = HEAP32[$mobs>>2]|0;
 _free($155);
 $156 = HEAP32[$err>>2]|0;
 $157 = HEAP32[$1>>2]|0;
 $158 = (($157) + 228|0);
 HEAP32[$158>>2] = $156;
 $159 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $159;
 $160 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($160|0);
}
function _reorganize_uhat_yhat($pmod,$mobs) {
 $pmod = $pmod|0;
 $mobs = $mobs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $g = 0, $t = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $tmp = sp + 8|0;
 $t = sp + 4|0;
 $g = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $mobs;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5<<3;
 $7 = (_malloc($6)|0);
 HEAP32[$tmp>>2] = $7;
 $8 = HEAP32[$tmp>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  HEAP32[$0>>2] = 12;
  $123 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($123|0);
 }
 HEAP32[$t>>2] = 0;
 while(1) {
  $10 = HEAP32[$t>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$t>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($15) + ($18))|0;
  $20 = HEAP32[$1>>2]|0;
  $21 = (($20) + 84|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19<<3)|0);
  $24 = +HEAPF64[$23>>3];
  $25 = HEAP32[$t>>2]|0;
  $26 = HEAP32[$tmp>>2]|0;
  $27 = (($26) + ($25<<3)|0);
  HEAPF64[$27>>3] = $24;
  $28 = HEAP32[$t>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$t>>2] = $29;
 }
 HEAP32[$g>>2] = 0;
 $30 = HEAP32[$1>>2]|0;
 $31 = (($30) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$t>>2] = $32;
 while(1) {
  $33 = HEAP32[$t>>2]|0;
  $34 = HEAP32[$1>>2]|0;
  $35 = (($34) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) + ($38))|0;
  $40 = ($33|0)<=($39|0);
  if (!($40)) {
   break;
  }
  $41 = HEAP32[$t>>2]|0;
  $42 = HEAP32[$2>>2]|0;
  $43 = (($42) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($41)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = ($47|0)==(49);
  if ($48) {
   $49 = HEAP32[$t>>2]|0;
   $50 = HEAP32[$1>>2]|0;
   $51 = (($50) + 84|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($49<<3)|0);
   HEAPF64[$53>>3] = 1.79769313486231570815E+308;
  } else {
   $54 = HEAP32[$g>>2]|0;
   $55 = (($54) + 1)|0;
   HEAP32[$g>>2] = $55;
   $56 = HEAP32[$tmp>>2]|0;
   $57 = (($56) + ($54<<3)|0);
   $58 = +HEAPF64[$57>>3];
   $59 = HEAP32[$t>>2]|0;
   $60 = HEAP32[$1>>2]|0;
   $61 = (($60) + 84|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + ($59<<3)|0);
   HEAPF64[$63>>3] = $58;
  }
  $64 = HEAP32[$t>>2]|0;
  $65 = (($64) + 1)|0;
  HEAP32[$t>>2] = $65;
 }
 HEAP32[$t>>2] = 0;
 while(1) {
  $66 = HEAP32[$t>>2]|0;
  $67 = HEAP32[$1>>2]|0;
  $68 = (($67) + 24|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($66|0)<($69|0);
  if (!($70)) {
   break;
  }
  $71 = HEAP32[$t>>2]|0;
  $72 = HEAP32[$1>>2]|0;
  $73 = (($72) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($71) + ($74))|0;
  $76 = HEAP32[$1>>2]|0;
  $77 = (($76) + 88|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + ($75<<3)|0);
  $80 = +HEAPF64[$79>>3];
  $81 = HEAP32[$t>>2]|0;
  $82 = HEAP32[$tmp>>2]|0;
  $83 = (($82) + ($81<<3)|0);
  HEAPF64[$83>>3] = $80;
  $84 = HEAP32[$t>>2]|0;
  $85 = (($84) + 1)|0;
  HEAP32[$t>>2] = $85;
 }
 HEAP32[$g>>2] = 0;
 $86 = HEAP32[$1>>2]|0;
 $87 = (($86) + 16|0);
 $88 = HEAP32[$87>>2]|0;
 HEAP32[$t>>2] = $88;
 while(1) {
  $89 = HEAP32[$t>>2]|0;
  $90 = HEAP32[$1>>2]|0;
  $91 = (($90) + 20|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = HEAP32[$2>>2]|0;
  $94 = HEAP32[$93>>2]|0;
  $95 = (($92) + ($94))|0;
  $96 = ($89|0)<=($95|0);
  if (!($96)) {
   break;
  }
  $97 = HEAP32[$t>>2]|0;
  $98 = HEAP32[$2>>2]|0;
  $99 = (($98) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + ($97)|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102 << 24 >> 24;
  $104 = ($103|0)==(49);
  if ($104) {
   $105 = HEAP32[$t>>2]|0;
   $106 = HEAP32[$1>>2]|0;
   $107 = (($106) + 88|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + ($105<<3)|0);
   HEAPF64[$109>>3] = 1.79769313486231570815E+308;
  } else {
   $110 = HEAP32[$g>>2]|0;
   $111 = (($110) + 1)|0;
   HEAP32[$g>>2] = $111;
   $112 = HEAP32[$tmp>>2]|0;
   $113 = (($112) + ($110<<3)|0);
   $114 = +HEAPF64[$113>>3];
   $115 = HEAP32[$t>>2]|0;
   $116 = HEAP32[$1>>2]|0;
   $117 = (($116) + 88|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (($118) + ($115<<3)|0);
   HEAPF64[$119>>3] = $114;
  }
  $120 = HEAP32[$t>>2]|0;
  $121 = (($120) + 1)|0;
  HEAP32[$t>>2] = $121;
 }
 $122 = HEAP32[$tmp>>2]|0;
 _free($122);
 HEAP32[$0>>2] = 0;
 $123 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($123|0);
}
function _repack_missing_daily_obs($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $misscount = 0, $missvec = 0, $mobs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $missvec = sp + 12|0;
 $misscount = sp + 8|0;
 $mobs = sp + 4|0;
 $err = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$err>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$2>>2]|0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($15) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_model_missmask($5,$8,$11,$14,$17,0,$misscount)|0);
 HEAP32[$missvec>>2] = $18;
 $19 = HEAP32[$missvec>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = HEAP32[$1>>2]|0;
  $22 = (($21) + 228|0);
  HEAP32[$22>>2] = 12;
  HEAP32[$0>>2] = 1;
  $55 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($55|0);
 }
 $23 = (_malloc(8)|0);
 HEAP32[$mobs>>2] = $23;
 $24 = HEAP32[$mobs>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $26 = HEAP32[$missvec>>2]|0;
  _free($26);
  $27 = HEAP32[$1>>2]|0;
  $28 = (($27) + 228|0);
  HEAP32[$28>>2] = 12;
  HEAP32[$0>>2] = 1;
  $55 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($55|0);
 }
 $29 = HEAP32[$1>>2]|0;
 $30 = HEAP32[$2>>2]|0;
 $31 = HEAP32[$missvec>>2]|0;
 $32 = HEAP32[$misscount>>2]|0;
 $33 = (_repack_missing($29,$30,$31,$32)|0);
 HEAP32[$err>>2] = $33;
 $34 = HEAP32[$err>>2]|0;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = HEAP32[$err>>2]|0;
  $37 = HEAP32[$1>>2]|0;
  $38 = (($37) + 228|0);
  HEAP32[$38>>2] = $36;
  $39 = HEAP32[$missvec>>2]|0;
  _free($39);
 } else {
  $40 = HEAP32[$1>>2]|0;
  (_gretl_model_set_int($40,31680,1)|0);
  $41 = HEAP32[$misscount>>2]|0;
  $42 = HEAP32[$1>>2]|0;
  $43 = (($42) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) - ($41))|0;
  HEAP32[$43>>2] = $45;
  $46 = HEAP32[$missvec>>2]|0;
  $47 = HEAP32[$mobs>>2]|0;
  $48 = (($47) + 4|0);
  HEAP32[$48>>2] = $46;
  $49 = HEAP32[$misscount>>2]|0;
  $50 = HEAP32[$mobs>>2]|0;
  HEAP32[$50>>2] = $49;
  $51 = HEAP32[$1>>2]|0;
  $52 = HEAP32[$mobs>>2]|0;
  $53 = (_gretl_model_set_data($51,31696,$52,12,8)|0);
  HEAP32[$err>>2] = $53;
 }
 $54 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $54;
 $55 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($55|0);
}
function _model_missmask($list,$t1,$t2,$n,$Z,$dwt,$misscount) {
 $list = $list|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 $n = $n|0;
 $Z = $Z|0;
 $dwt = $dwt|0;
 $misscount = $misscount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mask = 0, $or$cond = 0;
 var $t = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $mask = sp + 12|0;
 $i = sp + 8|0;
 $vi = sp + 4|0;
 $t = sp;
 HEAP32[$1>>2] = $list;
 HEAP32[$2>>2] = $t1;
 HEAP32[$3>>2] = $t2;
 HEAP32[$4>>2] = $n;
 HEAP32[$5>>2] = $Z;
 HEAP32[$6>>2] = $dwt;
 HEAP32[$7>>2] = $misscount;
 $8 = HEAP32[$4>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = (_malloc($9)|0);
 HEAP32[$mask>>2] = $10;
 $11 = HEAP32[$mask>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$0>>2] = 0;
  $56 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $13 = HEAP32[$mask>>2]|0;
 $14 = HEAP32[$4>>2]|0;
 _memset(($13|0),48,($14|0))|0;
 $15 = HEAP32[$4>>2]|0;
 $16 = HEAP32[$mask>>2]|0;
 $17 = (($16) + ($15)|0);
 HEAP8[$17>>0] = 0;
 $18 = HEAP32[$7>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = HEAP32[$7>>2]|0;
  HEAP32[$20>>2] = 0;
 }
 $21 = HEAP32[$2>>2]|0;
 HEAP32[$t>>2] = $21;
 while(1) {
  $22 = HEAP32[$t>>2]|0;
  $23 = HEAP32[$3>>2]|0;
  $24 = ($22|0)<=($23|0);
  if (!($24)) {
   break;
  }
  HEAP32[$i>>2] = 1;
  while(1) {
   $25 = HEAP32[$i>>2]|0;
   $26 = HEAP32[$1>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($25|0)<=($27|0);
   if (!($28)) {
    break;
   }
   $29 = HEAP32[$i>>2]|0;
   $30 = HEAP32[$1>>2]|0;
   $31 = (($30) + ($29<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   HEAP32[$vi>>2] = $32;
   $33 = HEAP32[$vi>>2]|0;
   $34 = ($33|0)>(0);
   $35 = HEAP32[$vi>>2]|0;
   $36 = ($35|0)!=(-100);
   $or$cond = $34 & $36;
   if ($or$cond) {
    $37 = HEAP32[$vi>>2]|0;
    $38 = HEAP32[$t>>2]|0;
    $39 = HEAP32[$5>>2]|0;
    $40 = HEAP32[$6>>2]|0;
    $41 = (_really_missing($37,$38,$39,$40)|0);
    $42 = ($41|0)!=(0);
    if ($42) {
     label = 11;
     break;
    }
   }
   $51 = HEAP32[$i>>2]|0;
   $52 = (($51) + 1)|0;
   HEAP32[$i>>2] = $52;
  }
  if ((label|0) == 11) {
   label = 0;
   $43 = HEAP32[$t>>2]|0;
   $44 = HEAP32[$mask>>2]|0;
   $45 = (($44) + ($43)|0);
   HEAP8[$45>>0] = 49;
   $46 = HEAP32[$7>>2]|0;
   $47 = ($46|0)!=(0|0);
   if ($47) {
    $48 = HEAP32[$7>>2]|0;
    $49 = HEAP32[$48>>2]|0;
    $50 = (($49) + 1)|0;
    HEAP32[$48>>2] = $50;
   }
  }
  $53 = HEAP32[$t>>2]|0;
  $54 = (($53) + 1)|0;
  HEAP32[$t>>2] = $54;
 }
 $55 = HEAP32[$mask>>2]|0;
 HEAP32[$0>>2] = $55;
 $56 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($56|0);
}
function _repack_missing($pmod,$dset,$missvec,$misscount) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $missvec = $missvec|0;
 $misscount = $misscount|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $g = 0, $i = 0, $m = 0, $modn = 0, $or$cond = 0, $t = 0, $tmpgood = 0, $tmpmiss = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $i = sp + 28|0;
 $v = sp + 24|0;
 $t = sp + 20|0;
 $m = sp + 16|0;
 $g = sp + 12|0;
 $tmpmiss = sp + 8|0;
 $tmpgood = sp + 4|0;
 $modn = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $missvec;
 HEAP32[$4>>2] = $misscount;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) - ($10))|0;
 $12 = (($11) + 1)|0;
 HEAP32[$modn>>2] = $12;
 $13 = HEAP32[$modn>>2]|0;
 $14 = $13<<3;
 $15 = (_malloc($14)|0);
 HEAP32[$tmpmiss>>2] = $15;
 $16 = HEAP32[$tmpmiss>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  HEAP32[$0>>2] = 12;
  $124 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($124|0);
 }
 $18 = HEAP32[$tmpmiss>>2]|0;
 $19 = HEAP32[$4>>2]|0;
 $20 = (($18) + ($19<<3)|0);
 HEAP32[$tmpgood>>2] = $20;
 HEAP32[$i>>2] = 1;
 while(1) {
  $21 = HEAP32[$i>>2]|0;
  $22 = HEAP32[$1>>2]|0;
  $23 = (($22) + 60|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($21|0)<=($25|0);
  if (!($26)) {
   break;
  }
  $27 = HEAP32[$i>>2]|0;
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + 60|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($27<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$v>>2] = $32;
  $33 = HEAP32[$v>>2]|0;
  $34 = ($33|0)==(0);
  $35 = HEAP32[$v>>2]|0;
  $36 = ($35|0)==(-100);
  $or$cond = $34 | $36;
  L8: do {
   if (!($or$cond)) {
    HEAP32[$g>>2] = 0;
    HEAP32[$m>>2] = 0;
    $37 = HEAP32[$1>>2]|0;
    $38 = (($37) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    HEAP32[$t>>2] = $39;
    while(1) {
     $40 = HEAP32[$t>>2]|0;
     $41 = HEAP32[$1>>2]|0;
     $42 = (($41) + 20|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($40|0)<=($43|0);
     if (!($44)) {
      break;
     }
     $45 = HEAP32[$t>>2]|0;
     $46 = HEAP32[$3>>2]|0;
     $47 = (($46) + ($45)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48 << 24 >> 24;
     $50 = ($49|0)==(49);
     $51 = HEAP32[$t>>2]|0;
     $52 = HEAP32[$v>>2]|0;
     $53 = HEAP32[$2>>2]|0;
     $54 = (($53) + 64|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) + ($52<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($57) + ($51<<3)|0);
     $59 = +HEAPF64[$58>>3];
     if ($50) {
      $60 = HEAP32[$m>>2]|0;
      $61 = (($60) + 1)|0;
      HEAP32[$m>>2] = $61;
      $62 = HEAP32[$tmpmiss>>2]|0;
      $63 = (($62) + ($60<<3)|0);
      HEAPF64[$63>>3] = $59;
     } else {
      $64 = HEAP32[$g>>2]|0;
      $65 = (($64) + 1)|0;
      HEAP32[$g>>2] = $65;
      $66 = HEAP32[$tmpgood>>2]|0;
      $67 = (($66) + ($64<<3)|0);
      HEAPF64[$67>>3] = $59;
     }
     $68 = HEAP32[$t>>2]|0;
     $69 = (($68) + 1)|0;
     HEAP32[$t>>2] = $69;
    }
    HEAP32[$g>>2] = 0;
    HEAP32[$m>>2] = 0;
    $70 = HEAP32[$1>>2]|0;
    $71 = (($70) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    HEAP32[$t>>2] = $72;
    while(1) {
     $73 = HEAP32[$t>>2]|0;
     $74 = HEAP32[$1>>2]|0;
     $75 = (($74) + 20|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = HEAP32[$4>>2]|0;
     $78 = (($76) - ($77))|0;
     $79 = ($73|0)<=($78|0);
     if (!($79)) {
      break;
     }
     $80 = HEAP32[$g>>2]|0;
     $81 = (($80) + 1)|0;
     HEAP32[$g>>2] = $81;
     $82 = HEAP32[$tmpgood>>2]|0;
     $83 = (($82) + ($80<<3)|0);
     $84 = +HEAPF64[$83>>3];
     $85 = HEAP32[$t>>2]|0;
     $86 = HEAP32[$v>>2]|0;
     $87 = HEAP32[$2>>2]|0;
     $88 = (($87) + 64|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = (($89) + ($86<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (($91) + ($85<<3)|0);
     HEAPF64[$92>>3] = $84;
     $93 = HEAP32[$t>>2]|0;
     $94 = (($93) + 1)|0;
     HEAP32[$t>>2] = $94;
    }
    $95 = HEAP32[$1>>2]|0;
    $96 = (($95) + 20|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + 1)|0;
    $99 = HEAP32[$4>>2]|0;
    $100 = (($98) - ($99))|0;
    HEAP32[$t>>2] = $100;
    while(1) {
     $101 = HEAP32[$t>>2]|0;
     $102 = HEAP32[$1>>2]|0;
     $103 = (($102) + 20|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($101|0)<=($104|0);
     if (!($105)) {
      break L8;
     }
     $106 = HEAP32[$m>>2]|0;
     $107 = (($106) + 1)|0;
     HEAP32[$m>>2] = $107;
     $108 = HEAP32[$tmpmiss>>2]|0;
     $109 = (($108) + ($106<<3)|0);
     $110 = +HEAPF64[$109>>3];
     $111 = HEAP32[$t>>2]|0;
     $112 = HEAP32[$v>>2]|0;
     $113 = HEAP32[$2>>2]|0;
     $114 = (($113) + 64|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + ($112<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = (($117) + ($111<<3)|0);
     HEAPF64[$118>>3] = $110;
     $119 = HEAP32[$t>>2]|0;
     $120 = (($119) + 1)|0;
     HEAP32[$t>>2] = $120;
    }
   }
  } while(0);
  $121 = HEAP32[$i>>2]|0;
  $122 = (($121) + 1)|0;
  HEAP32[$i>>2] = $122;
 }
 $123 = HEAP32[$tmpmiss>>2]|0;
 _free($123);
 HEAP32[$0>>2] = 0;
 $124 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($124|0);
}
function _model_has_missing_obs($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sample = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $sample = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) - ($6))|0;
 $8 = (($7) + 1)|0;
 HEAP32[$sample>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$sample>>2]|0;
 $13 = ($11|0)<($12|0);
 $14 = $13&1;
 STACKTOP = sp;return ($14|0);
}
function _model_adjust_sample($pmod,$n,$Z,$misst) {
 $pmod = $pmod|0;
 $n = $n|0;
 $Z = $Z|0;
 $misst = $misst|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dwt = 0, $i = 0, $missobs = 0, $move_ends = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $ret = 0, $t = 0, $t1min = 0, $t2max = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $i = sp + 32|0;
 $t = sp + 28|0;
 $dwt = sp + 24|0;
 $t1min = sp + 20|0;
 $t2max = sp + 16|0;
 $vi = sp + 12|0;
 $missobs = sp + 8|0;
 $ret = sp + 4|0;
 $move_ends = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $n;
 HEAP32[$2>>2] = $Z;
 HEAP32[$3>>2] = $misst;
 HEAP32[$dwt>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$t1min>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$t2max>>2] = $9;
 HEAP32[$ret>>2] = 0;
 HEAP32[$move_ends>>2] = 1;
 $10 = HEAP32[$0>>2]|0;
 $11 = (_gretl_model_get_int($10,31704)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 68|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$dwt>>2] = $15;
 }
 $16 = HEAP32[$t1min>>2]|0;
 HEAP32[$t>>2] = $16;
 while(1) {
  $17 = HEAP32[$t>>2]|0;
  $18 = HEAP32[$t2max>>2]|0;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  HEAP32[$missobs>>2] = 0;
  HEAP32[$i>>2] = 1;
  while(1) {
   $20 = HEAP32[$i>>2]|0;
   $21 = HEAP32[$0>>2]|0;
   $22 = (($21) + 60|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($20|0)<=($24|0);
   if (!($25)) {
    break;
   }
   $26 = HEAP32[$i>>2]|0;
   $27 = HEAP32[$0>>2]|0;
   $28 = (($27) + 60|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vi>>2] = $31;
   $32 = HEAP32[$vi>>2]|0;
   $33 = ($32|0)>(0);
   $34 = HEAP32[$vi>>2]|0;
   $35 = ($34|0)!=(-100);
   $or$cond = $33 & $35;
   if ($or$cond) {
    $36 = HEAP32[$vi>>2]|0;
    $37 = HEAP32[$t>>2]|0;
    $38 = HEAP32[$2>>2]|0;
    $39 = HEAP32[$dwt>>2]|0;
    $40 = (_really_missing($36,$37,$38,$39)|0);
    $41 = ($40|0)!=(0);
    if ($41) {
     label = 9;
     break;
    }
   }
   $42 = HEAP32[$i>>2]|0;
   $43 = (($42) + 1)|0;
   HEAP32[$i>>2] = $43;
  }
  if ((label|0) == 9) {
   label = 0;
   HEAP32[$missobs>>2] = 1;
  }
  $44 = HEAP32[$missobs>>2]|0;
  $45 = ($44|0)!=(0);
  if (!($45)) {
   break;
  }
  $46 = HEAP32[$t1min>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$t1min>>2] = $47;
  $48 = HEAP32[$t>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[$t>>2] = $49;
 }
 $50 = HEAP32[$t2max>>2]|0;
 HEAP32[$t>>2] = $50;
 while(1) {
  $51 = HEAP32[$t>>2]|0;
  $52 = HEAP32[$t1min>>2]|0;
  $53 = ($51|0)>($52|0);
  if (!($53)) {
   break;
  }
  HEAP32[$missobs>>2] = 0;
  HEAP32[$i>>2] = 1;
  while(1) {
   $54 = HEAP32[$i>>2]|0;
   $55 = HEAP32[$0>>2]|0;
   $56 = (($55) + 60|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP32[$57>>2]|0;
   $59 = ($54|0)<=($58|0);
   if (!($59)) {
    break;
   }
   $60 = HEAP32[$i>>2]|0;
   $61 = HEAP32[$0>>2]|0;
   $62 = (($61) + 60|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   HEAP32[$vi>>2] = $65;
   $66 = HEAP32[$vi>>2]|0;
   $67 = ($66|0)>(0);
   $68 = HEAP32[$vi>>2]|0;
   $69 = ($68|0)!=(-100);
   $or$cond3 = $67 & $69;
   if ($or$cond3) {
    $70 = HEAP32[$vi>>2]|0;
    $71 = HEAP32[$t>>2]|0;
    $72 = HEAP32[$2>>2]|0;
    $73 = HEAP32[$dwt>>2]|0;
    $74 = (_really_missing($70,$71,$72,$73)|0);
    $75 = ($74|0)!=(0);
    if ($75) {
     label = 19;
     break;
    }
   }
   $76 = HEAP32[$i>>2]|0;
   $77 = (($76) + 1)|0;
   HEAP32[$i>>2] = $77;
  }
  if ((label|0) == 19) {
   label = 0;
   HEAP32[$missobs>>2] = 1;
  }
  $78 = HEAP32[$missobs>>2]|0;
  $79 = ($78|0)!=(0);
  if (!($79)) {
   break;
  }
  $80 = HEAP32[$t2max>>2]|0;
  $81 = (($80) + -1)|0;
  HEAP32[$t2max>>2] = $81;
  $82 = HEAP32[$t>>2]|0;
  $83 = (($82) + -1)|0;
  HEAP32[$t>>2] = $83;
 }
 $84 = HEAP32[$3>>2]|0;
 $85 = ($84|0)!=(0|0);
 L32: do {
  if ($85) {
   $86 = HEAP32[$t1min>>2]|0;
   HEAP32[$t>>2] = $86;
   while(1) {
    $87 = HEAP32[$t>>2]|0;
    $88 = HEAP32[$t2max>>2]|0;
    $89 = ($87|0)<=($88|0);
    if (!($89)) {
     break L32;
    }
    $90 = HEAP32[$ret>>2]|0;
    $91 = ($90|0)!=(0);
    $92 = $91 ^ 1;
    if (!($92)) {
     break L32;
    }
    HEAP32[$i>>2] = 1;
    while(1) {
     $93 = HEAP32[$i>>2]|0;
     $94 = HEAP32[$0>>2]|0;
     $95 = (($94) + 60|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = HEAP32[$96>>2]|0;
     $98 = ($93|0)<=($97|0);
     if (!($98)) {
      break;
     }
     $99 = HEAP32[$i>>2]|0;
     $100 = HEAP32[$0>>2]|0;
     $101 = (($100) + 60|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($102) + ($99<<2)|0);
     $104 = HEAP32[$103>>2]|0;
     HEAP32[$vi>>2] = $104;
     $105 = HEAP32[$vi>>2]|0;
     $106 = ($105|0)>(0);
     $107 = HEAP32[$vi>>2]|0;
     $108 = ($107|0)!=(-100);
     $or$cond5 = $106 & $108;
     if ($or$cond5) {
      $109 = HEAP32[$vi>>2]|0;
      $110 = HEAP32[$t>>2]|0;
      $111 = HEAP32[$2>>2]|0;
      $112 = HEAP32[$dwt>>2]|0;
      $113 = (_really_missing($109,$110,$111,$112)|0);
      $114 = ($113|0)!=(0);
      if ($114) {
       label = 31;
       break;
      }
     }
     $119 = HEAP32[$i>>2]|0;
     $120 = (($119) + 1)|0;
     HEAP32[$i>>2] = $120;
    }
    if ((label|0) == 31) {
     label = 0;
     $115 = HEAP32[$t>>2]|0;
     $116 = (($115) + 1)|0;
     $117 = HEAP32[$3>>2]|0;
     HEAP32[$117>>2] = $116;
     $118 = HEAP32[$vi>>2]|0;
     HEAP32[$ret>>2] = $118;
    }
    $121 = HEAP32[$t>>2]|0;
    $122 = (($121) + 1)|0;
    HEAP32[$t>>2] = $122;
   }
  } else {
   HEAP32[$missobs>>2] = 0;
   $123 = HEAP32[$t1min>>2]|0;
   HEAP32[$t>>2] = $123;
   while(1) {
    $124 = HEAP32[$t>>2]|0;
    $125 = HEAP32[$t2max>>2]|0;
    $126 = ($124|0)<=($125|0);
    if (!($126)) {
     break;
    }
    HEAP32[$i>>2] = 1;
    while(1) {
     $127 = HEAP32[$i>>2]|0;
     $128 = HEAP32[$0>>2]|0;
     $129 = (($128) + 60|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = HEAP32[$130>>2]|0;
     $132 = ($127|0)<=($131|0);
     if (!($132)) {
      break;
     }
     $133 = HEAP32[$i>>2]|0;
     $134 = HEAP32[$0>>2]|0;
     $135 = (($134) + 60|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($136) + ($133<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     HEAP32[$vi>>2] = $138;
     $139 = HEAP32[$vi>>2]|0;
     $140 = ($139|0)>(0);
     $141 = HEAP32[$vi>>2]|0;
     $142 = ($141|0)!=(-100);
     $or$cond7 = $140 | $142;
     if ($or$cond7) {
      $143 = HEAP32[$vi>>2]|0;
      $144 = HEAP32[$t>>2]|0;
      $145 = HEAP32[$2>>2]|0;
      $146 = HEAP32[$dwt>>2]|0;
      $147 = (_really_missing($143,$144,$145,$146)|0);
      $148 = ($147|0)!=(0);
      if ($148) {
       label = 40;
       break;
      }
     }
     $151 = HEAP32[$i>>2]|0;
     $152 = (($151) + 1)|0;
     HEAP32[$i>>2] = $152;
    }
    if ((label|0) == 40) {
     label = 0;
     $149 = HEAP32[$missobs>>2]|0;
     $150 = (($149) + 1)|0;
     HEAP32[$missobs>>2] = $150;
    }
    $153 = HEAP32[$t>>2]|0;
    $154 = (($153) + 1)|0;
    HEAP32[$t>>2] = $154;
   }
   $155 = HEAP32[$missobs>>2]|0;
   $156 = HEAP32[$t2max>>2]|0;
   $157 = HEAP32[$t1min>>2]|0;
   $158 = (($156) - ($157))|0;
   $159 = (($158) + 1)|0;
   $160 = ($155|0)==($159|0);
   if ($160) {
    $161 = HEAP32[$0>>2]|0;
    $162 = (($161) + 228|0);
    HEAP32[$162>>2] = 34;
    HEAP32[$ret>>2] = 1;
    break;
   }
   $163 = HEAP32[$missobs>>2]|0;
   $164 = ($163|0)>(0);
   if ($164) {
    $165 = HEAP32[$0>>2]|0;
    $166 = (($165) + 60|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = HEAP32[$0>>2]|0;
    $169 = (($168) + 16|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = HEAP32[$0>>2]|0;
    $172 = (($171) + 20|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = HEAP32[$1>>2]|0;
    $175 = HEAP32[$2>>2]|0;
    $176 = HEAP32[$dwt>>2]|0;
    $177 = (_model_missmask($167,$170,$173,$174,$175,$176,0)|0);
    $178 = HEAP32[$0>>2]|0;
    $179 = (($178) + 32|0);
    HEAP32[$179>>2] = $177;
    HEAP32[$move_ends>>2] = 0;
    $180 = HEAP32[$0>>2]|0;
    $181 = (($180) + 32|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = ($182|0)==(0|0);
    if ($183) {
     $184 = HEAP32[$0>>2]|0;
     $185 = (($184) + 228|0);
     HEAP32[$185>>2] = 12;
     HEAP32[$ret>>2] = 1;
    }
   }
  }
 } while(0);
 $186 = HEAP32[$move_ends>>2]|0;
 $187 = ($186|0)!=(0);
 if (!($187)) {
  $194 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($194|0);
 }
 $188 = HEAP32[$t1min>>2]|0;
 $189 = HEAP32[$0>>2]|0;
 $190 = (($189) + 16|0);
 HEAP32[$190>>2] = $188;
 $191 = HEAP32[$t2max>>2]|0;
 $192 = HEAP32[$0>>2]|0;
 $193 = (($192) + 20|0);
 HEAP32[$193>>2] = $191;
 $194 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($194|0);
}
function _really_missing($v,$t,$Z,$d) {
 $v = $v|0;
 $t = $t|0;
 $Z = $Z|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$1>>2] = $v;
 HEAP32[$2>>2] = $t;
 HEAP32[$3>>2] = $Z;
 HEAP32[$4>>2] = $d;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  $8 = HEAP32[$4>>2]|0;
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($7<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $13 == 0.0;
  if ($14) {
   HEAP32[$0>>2] = 0;
   $24 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($24|0);
  }
 }
 $15 = HEAP32[$2>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$3>>2]|0;
 $18 = (($17) + ($16<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($15<<3)|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $21 == 1.79769313486231570815E+308;
 $23 = $22&1;
 HEAP32[$0>>2] = $23;
 $24 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($24|0);
}
function _series_adjust_sample($x,$t1,$t2) {
 $x = $x|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $t = 0, $t1min = 0, $t2max = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $t = sp + 12|0;
 $t1min = sp + 8|0;
 $t2max = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $x;
 HEAP32[$1>>2] = $t1;
 HEAP32[$2>>2] = $t2;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$t1min>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$t2max>>2] = $6;
 HEAP32[$err>>2] = 0;
 $7 = HEAP32[$t1min>>2]|0;
 HEAP32[$t>>2] = $7;
 while(1) {
  $8 = HEAP32[$t>>2]|0;
  $9 = HEAP32[$t2max>>2]|0;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$t>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + ($11<<3)|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $14 == 1.79769313486231570815E+308;
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$t1min>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$t1min>>2] = $17;
  $18 = HEAP32[$t>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$t>>2] = $19;
 }
 $20 = HEAP32[$t2max>>2]|0;
 HEAP32[$t>>2] = $20;
 while(1) {
  $21 = HEAP32[$t>>2]|0;
  $22 = HEAP32[$t1min>>2]|0;
  $23 = ($21|0)>($22|0);
  if (!($23)) {
   break;
  }
  $24 = HEAP32[$t>>2]|0;
  $25 = HEAP32[$0>>2]|0;
  $26 = (($25) + ($24<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $27 == 1.79769313486231570815E+308;
  if (!($28)) {
   break;
  }
  $29 = HEAP32[$t2max>>2]|0;
  $30 = (($29) + -1)|0;
  HEAP32[$t2max>>2] = $30;
  $31 = HEAP32[$t>>2]|0;
  $32 = (($31) + -1)|0;
  HEAP32[$t>>2] = $32;
 }
 $33 = HEAP32[$t1min>>2]|0;
 HEAP32[$t>>2] = $33;
 while(1) {
  $34 = HEAP32[$t>>2]|0;
  $35 = HEAP32[$t2max>>2]|0;
  $36 = ($34|0)<=($35|0);
  if (!($36)) {
   label = 14;
   break;
  }
  $37 = HEAP32[$t>>2]|0;
  $38 = HEAP32[$0>>2]|0;
  $39 = (($38) + ($37<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $40 == 1.79769313486231570815E+308;
  if ($41) {
   break;
  }
  $42 = HEAP32[$t>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[$t>>2] = $43;
 }
 if ((label|0) == 14) {
  $44 = HEAP32[$t1min>>2]|0;
  $45 = HEAP32[$1>>2]|0;
  HEAP32[$45>>2] = $44;
  $46 = HEAP32[$t2max>>2]|0;
  $47 = HEAP32[$2>>2]|0;
  HEAP32[$47>>2] = $46;
  $48 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($48|0);
 }
 HEAP32[$err>>2] = 34;
 $44 = HEAP32[$t1min>>2]|0;
 $45 = HEAP32[$1>>2]|0;
 HEAP32[$45>>2] = $44;
 $46 = HEAP32[$t2max>>2]|0;
 $47 = HEAP32[$2>>2]|0;
 HEAP32[$47>>2] = $46;
 $48 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($48|0);
}
function _list_adjust_sample($list,$t1,$t2,$dset,$nmiss) {
 $list = $list|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 $dset = $dset|0;
 $nmiss = $nmiss|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $err = 0, $i = 0, $missing = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $t = 0, $t1min = 0, $t2max = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $i = sp + 24|0;
 $t = sp + 20|0;
 $t1min = sp + 16|0;
 $t2max = sp + 12|0;
 $vi = sp + 8|0;
 $missing = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $list;
 HEAP32[$1>>2] = $t1;
 HEAP32[$2>>2] = $t2;
 HEAP32[$3>>2] = $dset;
 HEAP32[$4>>2] = $nmiss;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$t1min>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$t2max>>2] = $8;
 HEAP32[$err>>2] = 0;
 $9 = HEAP32[$t1min>>2]|0;
 HEAP32[$t>>2] = $9;
 while(1) {
  $10 = HEAP32[$t>>2]|0;
  $11 = HEAP32[$t2max>>2]|0;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  HEAP32[$missing>>2] = 0;
  HEAP32[$i>>2] = 1;
  while(1) {
   $13 = HEAP32[$i>>2]|0;
   $14 = HEAP32[$0>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13|0)<=($15|0);
   if (!($16)) {
    break;
   }
   $17 = HEAP32[$i>>2]|0;
   $18 = HEAP32[$0>>2]|0;
   $19 = (($18) + ($17<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   HEAP32[$vi>>2] = $20;
   $21 = HEAP32[$vi>>2]|0;
   $22 = ($21|0)>(0);
   $23 = HEAP32[$vi>>2]|0;
   $24 = ($23|0)!=(-100);
   $or$cond = $22 & $24;
   if ($or$cond) {
    $25 = HEAP32[$t>>2]|0;
    $26 = HEAP32[$vi>>2]|0;
    $27 = HEAP32[$3>>2]|0;
    $28 = (($27) + 64|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + ($26<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + ($25<<3)|0);
    $33 = +HEAPF64[$32>>3];
    $34 = $33 == 1.79769313486231570815E+308;
    if ($34) {
     label = 7;
     break;
    }
   }
   $35 = HEAP32[$i>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[$i>>2] = $36;
  }
  if ((label|0) == 7) {
   label = 0;
   HEAP32[$missing>>2] = 1;
  }
  $37 = HEAP32[$missing>>2]|0;
  $38 = ($37|0)!=(0);
  if (!($38)) {
   break;
  }
  $39 = HEAP32[$t1min>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$t1min>>2] = $40;
  $41 = HEAP32[$t>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$t>>2] = $42;
 }
 $43 = HEAP32[$t2max>>2]|0;
 HEAP32[$t>>2] = $43;
 while(1) {
  $44 = HEAP32[$t>>2]|0;
  $45 = HEAP32[$t1min>>2]|0;
  $46 = ($44|0)>($45|0);
  if (!($46)) {
   break;
  }
  HEAP32[$missing>>2] = 0;
  HEAP32[$i>>2] = 1;
  while(1) {
   $47 = HEAP32[$i>>2]|0;
   $48 = HEAP32[$0>>2]|0;
   $49 = HEAP32[$48>>2]|0;
   $50 = ($47|0)<=($49|0);
   if (!($50)) {
    break;
   }
   $51 = HEAP32[$i>>2]|0;
   $52 = HEAP32[$0>>2]|0;
   $53 = (($52) + ($51<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   HEAP32[$vi>>2] = $54;
   $55 = HEAP32[$vi>>2]|0;
   $56 = ($55|0)>(0);
   $57 = HEAP32[$vi>>2]|0;
   $58 = ($57|0)!=(-100);
   $or$cond3 = $56 & $58;
   if ($or$cond3) {
    $59 = HEAP32[$t>>2]|0;
    $60 = HEAP32[$vi>>2]|0;
    $61 = HEAP32[$3>>2]|0;
    $62 = (($61) + 64|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + ($60<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + ($59<<3)|0);
    $67 = +HEAPF64[$66>>3];
    $68 = $67 == 1.79769313486231570815E+308;
    if ($68) {
     label = 17;
     break;
    }
   }
   $69 = HEAP32[$i>>2]|0;
   $70 = (($69) + 1)|0;
   HEAP32[$i>>2] = $70;
  }
  if ((label|0) == 17) {
   label = 0;
   HEAP32[$missing>>2] = 1;
  }
  $71 = HEAP32[$missing>>2]|0;
  $72 = ($71|0)!=(0);
  if (!($72)) {
   break;
  }
  $73 = HEAP32[$t2max>>2]|0;
  $74 = (($73) + -1)|0;
  HEAP32[$t2max>>2] = $74;
  $75 = HEAP32[$t>>2]|0;
  $76 = (($75) + -1)|0;
  HEAP32[$t>>2] = $76;
 }
 $77 = HEAP32[$4>>2]|0;
 $78 = ($77|0)!=(0|0);
 if ($78) {
  $79 = HEAP32[$4>>2]|0;
  HEAP32[$79>>2] = 0;
 }
 $80 = HEAP32[$t1min>>2]|0;
 HEAP32[$t>>2] = $80;
 while(1) {
  $81 = HEAP32[$t>>2]|0;
  $82 = HEAP32[$t2max>>2]|0;
  $83 = ($81|0)<=($82|0);
  if (!($83)) {
   label = 35;
   break;
  }
  $84 = HEAP32[$err>>2]|0;
  $85 = ($84|0)!=(0);
  $86 = $85 ^ 1;
  if (!($86)) {
   label = 35;
   break;
  }
  HEAP32[$missing>>2] = 0;
  HEAP32[$i>>2] = 1;
  while(1) {
   $87 = HEAP32[$i>>2]|0;
   $88 = HEAP32[$0>>2]|0;
   $89 = HEAP32[$88>>2]|0;
   $90 = ($87|0)<=($89|0);
   if (!($90)) {
    break;
   }
   $91 = HEAP32[$i>>2]|0;
   $92 = HEAP32[$0>>2]|0;
   $93 = (($92) + ($91<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   HEAP32[$vi>>2] = $94;
   $95 = HEAP32[$vi>>2]|0;
   $96 = ($95|0)>(0);
   $97 = HEAP32[$vi>>2]|0;
   $98 = ($97|0)!=(-100);
   $or$cond5 = $96 & $98;
   if ($or$cond5) {
    $99 = HEAP32[$t>>2]|0;
    $100 = HEAP32[$vi>>2]|0;
    $101 = HEAP32[$3>>2]|0;
    $102 = (($101) + 64|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (($103) + ($100<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($99<<3)|0);
    $107 = +HEAPF64[$106>>3];
    $108 = $107 == 1.79769313486231570815E+308;
    if ($108) {
     label = 30;
     break;
    }
   }
   $114 = HEAP32[$i>>2]|0;
   $115 = (($114) + 1)|0;
   HEAP32[$i>>2] = $115;
  }
  do {
   if ((label|0) == 30) {
    label = 0;
    $109 = HEAP32[$4>>2]|0;
    $110 = ($109|0)==(0|0);
    if ($110) {
     HEAP32[$err>>2] = 34;
     break;
    } else {
     $111 = HEAP32[$4>>2]|0;
     $112 = HEAP32[$111>>2]|0;
     $113 = (($112) + 1)|0;
     HEAP32[$111>>2] = $113;
     break;
    }
   }
  } while(0);
  $116 = HEAP32[$t>>2]|0;
  $117 = (($116) + 1)|0;
  HEAP32[$t>>2] = $117;
 }
 if ((label|0) == 35) {
  $118 = HEAP32[$t1min>>2]|0;
  $119 = HEAP32[$1>>2]|0;
  HEAP32[$119>>2] = $118;
  $120 = HEAP32[$t2max>>2]|0;
  $121 = HEAP32[$2>>2]|0;
  HEAP32[$121>>2] = $120;
  $122 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($122|0);
 }
 return 0|0;
}
function _apply_reference_missmask($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[31720>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return 0;
 }
 $3 = HEAP32[31720>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 32|0);
 HEAP32[$5>>2] = $3;
 HEAP32[31720>>2] = 0;
 STACKTOP = sp;return 0;
}
function _reference_missmask_present() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[31720>>2]|0;
 $1 = ($0|0)!=(0|0);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _model_coeff_init($mc) {
 $mc = $mc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $mc;
 $1 = HEAP32[$0>>2]|0;
 HEAPF64[$1>>3] = 1.79769313486231570815E+308;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 8|0);
 HEAPF64[$3>>3] = 1.79769313486231570815E+308;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 HEAPF64[$5>>3] = 1.79769313486231570815E+308;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 24|0);
 HEAPF64[$7>>3] = 1.79769313486231570815E+308;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 32|0);
 HEAPF64[$9>>3] = 1.79769313486231570815E+308;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 48|0);
 HEAPF64[$11>>3] = 1.79769313486231570815E+308;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 40|0);
 HEAPF64[$13>>3] = 1.79769313486231570815E+308;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 56|0);
 HEAP32[$15>>2] = 1;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 60|0);
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 64|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 68|0);
 HEAP8[$21>>0] = 0;
 STACKTOP = sp;return;
}
function _estimator_string($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(6);
 $7 = HEAP32[$1>>2]|0;
 L1: do {
  if ($6) {
   $8 = (($7) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 128;
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = HEAP32[$2>>2]|0;
    $13 = (_tex_format($12)|0);
    $14 = ($13|0)!=(0);
    if ($14) {
     HEAP32[$0>>2] = 31728;
     break;
    } else {
     HEAP32[$0>>2] = 31744;
     break;
    }
   }
   $15 = HEAP32[$1>>2]|0;
   $16 = (($15) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 & 32768;
   $19 = ($18|0)!=(0);
   $20 = HEAP32[$2>>2]|0;
   $21 = (_tex_format($20)|0);
   $22 = ($21|0)!=(0);
   if ($19) {
    if ($22) {
     HEAP32[$0>>2] = 31760;
     break;
    } else {
     HEAP32[$0>>2] = 31776;
     break;
    }
   } else {
    if ($22) {
     HEAP32[$0>>2] = 31792;
     break;
    } else {
     HEAP32[$0>>2] = 31816;
     break;
    }
   }
  } else {
   $23 = (($7) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(9);
   $26 = HEAP32[$1>>2]|0;
   if ($25) {
    $27 = (_gretl_model_get_int($26,31832)|0);
    $28 = ($27|0)!=(0);
    if ($28) {
     HEAP32[$0>>2] = 31840;
     break;
    }
    $29 = HEAP32[$1>>2]|0;
    $30 = (_gretl_model_get_int($29,31848)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     $32 = HEAP32[$1>>2]|0;
     $33 = (_gretl_model_get_int($32,31856)|0);
     $34 = ($33|0)!=(0);
     if (!($34)) {
      HEAP32[$0>>2] = 31872;
      break;
     }
    }
    HEAP32[$0>>2] = 31864;
    break;
   }
   $35 = (($26) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(86);
   if ($37) {
    label = 22;
   } else {
    $38 = HEAP32[$1>>2]|0;
    $39 = (($38) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(91);
    if ($41) {
     label = 22;
    }
   }
   if ((label|0) == 22) {
    $42 = HEAP32[$1>>2]|0;
    $43 = (_gretl_model_get_int($42,31880)|0);
    $44 = ($43|0)!=(0);
    if ($44) {
     HEAP32[$0>>2] = 31888;
     break;
    }
   }
   $45 = HEAP32[$1>>2]|0;
   $46 = (($45) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(91);
   $49 = HEAP32[$1>>2]|0;
   if ($48) {
    $50 = (($49) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $51 & 32;
    $53 = ($52|0)!=(0);
    if ($53) {
     HEAP32[$0>>2] = 31904;
     break;
    }
    $54 = HEAP32[$1>>2]|0;
    $55 = (($54) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $56 & 1048576;
    $58 = ($57|0)!=(0);
    if ($58) {
     HEAP32[$0>>2] = 31920;
     break;
    }
    $59 = HEAP32[$1>>2]|0;
    $60 = (($59) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $61 & 4194304;
    $63 = ($62|0)!=(0);
    if (!($63)) {
     HEAP32[$0>>2] = 31984;
     break;
    }
    $64 = HEAP32[$1>>2]|0;
    $65 = (_gretl_model_get_int($64,31944)|0);
    $66 = ($65|0)!=(0);
    if ($66) {
     HEAP32[$0>>2] = 31952;
     break;
    } else {
     HEAP32[$0>>2] = 31976;
     break;
    }
   }
   $67 = (($49) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(7);
   $70 = HEAP32[$1>>2]|0;
   if ($69) {
    $71 = (_gretl_model_get_int($70,32000)|0);
    $72 = ($71|0)==(2);
    if ($72) {
     HEAP32[$0>>2] = 32008;
     break;
    } else {
     HEAP32[$0>>2] = 32032;
     break;
    }
   }
   $73 = (($70) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)==(27);
   $76 = HEAP32[$1>>2]|0;
   if ($75) {
    $77 = (_gretl_model_get_int($76,32000)|0);
    $78 = ($77|0)==(2);
    if ($78) {
     HEAP32[$0>>2] = 32056;
     break;
    } else {
     HEAP32[$0>>2] = 32080;
     break;
    }
   }
   $79 = (($76) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($80|0)==(47);
   do {
    if (!($81)) {
     $82 = HEAP32[$1>>2]|0;
     $83 = (($82) + 8|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==(127);
     if ($85) {
      $86 = HEAP32[$1>>2]|0;
      $87 = (($86) + 12|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = $88 & 64;
      $90 = ($89|0)!=(0);
      if ($90) {
       break;
      }
     }
     $107 = HEAP32[$1>>2]|0;
     $108 = (($107) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==(69);
     $111 = HEAP32[$1>>2]|0;
     if ($110) {
      $112 = (_gretl_model_get_int($111,32152)|0);
      $113 = ($112|0)!=(0);
      if ($113) {
       HEAP32[$0>>2] = 32160;
       break L1;
      }
      $114 = HEAP32[$1>>2]|0;
      $115 = (_gretl_model_get_int($114,32176)|0);
      $116 = ($115|0)!=(0);
      if ($116) {
       HEAP32[$0>>2] = 32192;
       break L1;
      } else {
       HEAP32[$0>>2] = 32216;
       break L1;
      }
     }
     $117 = (($111) + 8|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($118|0)==(98);
     $120 = HEAP32[$1>>2]|0;
     if ($119) {
      $121 = (($120) + 12|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = $122 & 16;
      $124 = ($123|0)!=(0);
      if ($124) {
       HEAP32[$0>>2] = 32224;
       break L1;
      }
      $125 = HEAP32[$1>>2]|0;
      $126 = (_gretl_model_get_int($125,32152)|0);
      $127 = ($126|0)!=(0);
      if ($127) {
       HEAP32[$0>>2] = 32248;
       break L1;
      } else {
       HEAP32[$0>>2] = 32264;
       break L1;
      }
     }
     $128 = (($120) + 8|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)==(51);
     $131 = HEAP32[$1>>2]|0;
     if ($130) {
      $132 = (($131) + 12|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = $133 & 524288;
      $135 = ($134|0)!=(0);
      if ($135) {
       HEAP32[$0>>2] = 32272;
       break L1;
      } else {
       HEAP32[$0>>2] = 32288;
       break L1;
      }
     }
     $136 = (($131) + 8|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==(63);
     $139 = HEAP32[$1>>2]|0;
     if ($138) {
      $140 = (_gretl_model_get_int($139,32304)|0);
      $141 = ($140|0)!=(0);
      if ($141) {
       HEAP32[$0>>2] = 32312;
       break L1;
      } else {
       HEAP32[$0>>2] = 32336;
       break L1;
      }
     }
     $142 = (($139) + 8|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==(127);
     $145 = HEAP32[$1>>2]|0;
     if ($144) {
      $146 = (($145) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = $147 & 2048;
      $149 = ($148|0)!=(0);
      if ($149) {
       HEAP32[$0>>2] = 32344;
       break L1;
      } else {
       HEAP32[$0>>2] = 32352;
       break L1;
      }
     }
     $150 = (($145) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==(82);
     $153 = HEAP32[$1>>2]|0;
     if ($152) {
      $154 = (($153) + 12|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = $155 & 4096;
      $157 = ($156|0)!=(0);
      if ($157) {
       HEAP32[$0>>2] = 32360;
       break L1;
      } else {
       HEAP32[$0>>2] = 32384;
       break L1;
      }
     }
     $158 = (($153) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(29);
     $161 = HEAP32[$1>>2]|0;
     if (!($160)) {
      $176 = (($161) + 8|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==(86);
      do {
       if ($178) {
        $179 = HEAP32[$1>>2]|0;
        $180 = (_gretl_model_get_int($179,32504)|0);
        $181 = ($180|0)!=(0);
        if (!($181)) {
         break;
        }
        HEAP32[$0>>2] = 32520;
        break L1;
       }
      } while(0);
      $182 = HEAP32[$1>>2]|0;
      $183 = (($182) + 8|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = HEAP32[$2>>2]|0;
      $186 = (_simple_estimator_string($184,$185)|0);
      HEAP32[$0>>2] = $186;
      break L1;
     }
     $162 = (($161) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $163 & 16;
     $165 = ($164|0)!=(0);
     if ($165) {
      HEAP32[$0>>2] = 32408;
      break L1;
     }
     $166 = HEAP32[$1>>2]|0;
     $167 = (($166) + 12|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = $168 & 2048;
     $170 = ($169|0)!=(0);
     if ($170) {
      HEAP32[$0>>2] = 32432;
      break L1;
     }
     $171 = HEAP32[$1>>2]|0;
     $172 = (($171) + 12|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $173 & 16777216;
     $175 = ($174|0)!=(0);
     if ($175) {
      HEAP32[$0>>2] = 32456;
      break L1;
     } else {
      HEAP32[$0>>2] = 32480;
      break L1;
     }
    }
   } while(0);
   $91 = HEAP32[$1>>2]|0;
   $92 = (($91) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $93 & 524288;
   $95 = ($94|0)!=(0);
   if ($95) {
    HEAP32[$0>>2] = 32104;
    break;
   }
   $96 = HEAP32[$1>>2]|0;
   $97 = (($96) + 12|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $98 & 256;
   $100 = ($99|0)!=(0);
   if ($100) {
    HEAP32[$0>>2] = 32120;
    break;
   }
   $101 = HEAP32[$1>>2]|0;
   $102 = (_gretl_model_get_int($101,32000)|0);
   $103 = ($102|0)==(2);
   if ($103) {
    HEAP32[$0>>2] = 32104;
    break;
   }
   $104 = HEAP32[$1>>2]|0;
   $105 = (_gretl_model_get_int($104,32000)|0);
   $106 = ($105|0)>(2);
   if ($106) {
    HEAP32[$0>>2] = 32120;
    break;
   } else {
    HEAP32[$0>>2] = 32136;
    break;
   }
  }
 } while(0);
 $187 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($187|0);
}
function _simple_estimator_string($ci,$prn) {
 $ci = $ci|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $ci;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(86);
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(128);
 $or$cond = $4 | $6;
 do {
  if ($or$cond) {
   HEAP32[$0>>2] = 47352;
  } else {
   $7 = HEAP32[$1>>2]|0;
   $8 = ($7|0)==(133);
   if ($8) {
    HEAP32[$0>>2] = 31976;
    break;
   }
   $9 = HEAP32[$1>>2]|0;
   $10 = ($9|0)==(8);
   if ($10) {
    HEAP32[$0>>2] = 47360;
    break;
   }
   $11 = HEAP32[$1>>2]|0;
   $12 = ($11|0)==(53);
   if ($12) {
    HEAP32[$0>>2] = 47376;
    break;
   }
   $13 = HEAP32[$1>>2]|0;
   $14 = ($13|0)==(5);
   if ($14) {
    HEAP32[$0>>2] = 34480;
    break;
   }
   $15 = HEAP32[$1>>2]|0;
   $16 = ($15|0)==(63);
   if ($16) {
    HEAP32[$0>>2] = 32336;
    break;
   }
   $17 = HEAP32[$1>>2]|0;
   $18 = ($17|0)==(81);
   if ($18) {
    HEAP32[$0>>2] = 47408;
    break;
   }
   $19 = HEAP32[$1>>2]|0;
   $20 = ($19|0)==(98);
   if ($20) {
    HEAP32[$0>>2] = 32264;
    break;
   }
   $21 = HEAP32[$1>>2]|0;
   $22 = ($21|0)==(69);
   if ($22) {
    HEAP32[$0>>2] = 32216;
    break;
   }
   $23 = HEAP32[$1>>2]|0;
   $24 = ($23|0)==(126);
   if ($24) {
    HEAP32[$0>>2] = 47432;
    break;
   }
   $25 = HEAP32[$1>>2]|0;
   $26 = ($25|0)==(51);
   if ($26) {
    HEAP32[$0>>2] = 47440;
    break;
   }
   $27 = HEAP32[$1>>2]|0;
   $28 = ($27|0)==(95);
   if ($28) {
    HEAP32[$0>>2] = 47448;
    break;
   }
   $29 = HEAP32[$1>>2]|0;
   $30 = ($29|0)==(82);
   if ($30) {
    HEAP32[$0>>2] = 32384;
    break;
   }
   $31 = HEAP32[$1>>2]|0;
   $32 = ($31|0)==(29);
   if ($32) {
    HEAP32[$0>>2] = 47456;
    break;
   }
   $33 = HEAP32[$1>>2]|0;
   $34 = ($33|0)==(83);
   if ($34) {
    HEAP32[$0>>2] = 47472;
    break;
   }
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(76);
   if ($36) {
    HEAP32[$0>>2] = 47480;
    break;
   }
   $37 = HEAP32[$1>>2]|0;
   $38 = ($37|0)==(47);
   if ($38) {
    HEAP32[$0>>2] = 47488;
    break;
   }
   $39 = HEAP32[$1>>2]|0;
   $40 = ($39|0)==(68);
   if ($40) {
    HEAP32[$0>>2] = 47496;
    break;
   }
   $41 = HEAP32[$1>>2]|0;
   $42 = ($41|0)==(45);
   if ($42) {
    HEAP32[$0>>2] = 47512;
    break;
   }
   $43 = HEAP32[$1>>2]|0;
   $44 = ($43|0)==(58);
   if ($44) {
    HEAP32[$0>>2] = 47520;
    break;
   }
   $45 = HEAP32[$1>>2]|0;
   $46 = ($45|0)==(27);
   if ($46) {
    HEAP32[$0>>2] = 47544;
    break;
   }
   $47 = HEAP32[$1>>2]|0;
   $48 = ($47|0)==(10);
   if ($48) {
    HEAP32[$0>>2] = 47560;
    break;
   }
   $49 = HEAP32[$1>>2]|0;
   $50 = ($49|0)==(7);
   if (!($50)) {
    HEAP32[$0>>2] = 38752;
    break;
   }
   $51 = HEAP32[$2>>2]|0;
   $52 = (_tex_format($51)|0);
   $53 = ($52|0)!=(0);
   if ($53) {
    HEAP32[$0>>2] = 47584;
    break;
   } else {
    HEAP32[$0>>2] = 47600;
    break;
   }
  }
 } while(0);
 $54 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($54|0);
}
function _print_model_vcv_info($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $vi = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $prn;
 HEAP32[$vi>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(63);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (_gretl_model_get_int($7,32304)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = HEAP32[$0>>2]|0;
   $11 = HEAP32[$2>>2]|0;
   _rq_vcv_line($10,$11);
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $12 = HEAP32[$0>>2]|0;
   $13 = (_gretl_model_get_int($12,32536)|0);
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = HEAP32[$2>>2]|0;
    _beck_katz_failed_line($15);
    break;
   }
   $16 = HEAP32[$0>>2]|0;
   $17 = (($16) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(7);
   if ($19) {
    label = 8;
   } else {
    $20 = HEAP32[$0>>2]|0;
    $21 = (($20) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(27);
    if ($23) {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $24 = HEAP32[$0>>2]|0;
    $25 = (_gretl_model_get_int($24,32552)|0);
    $26 = ($25|0)!=(0);
    if ($26) {
     $27 = HEAP32[$2>>2]|0;
     _dpd_asy_vcv_line($27);
     break;
    }
   }
   $28 = HEAP32[$0>>2]|0;
   $29 = (_gretl_model_get_data($28,32560)|0);
   HEAP32[$vi>>2] = $29;
  }
 } while(0);
 $30 = HEAP32[$vi>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[$vi>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 switch ($33|0) {
 case 4:  {
  $40 = HEAP32[$vi>>2]|0;
  $41 = HEAP32[$2>>2]|0;
  _panel_vcv_line($40,$41);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $38 = HEAP32[$vi>>2]|0;
  $39 = HEAP32[$2>>2]|0;
  _ml_vcv_line($38,$39);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $42 = HEAP32[$0>>2]|0;
  $43 = HEAP32[$vi>>2]|0;
  $44 = HEAP32[$1>>2]|0;
  $45 = HEAP32[$2>>2]|0;
  _cluster_vcv_line($42,$43,$44,$45);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $34 = HEAP32[$vi>>2]|0;
  $35 = HEAP32[$2>>2]|0;
  _hc_vcv_line($34,$35);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $36 = HEAP32[$vi>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  _hac_vcv_line($36,$37);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _rq_vcv_line($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $free_s = 0, $robust = 0, $s = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp + 8|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $robust = sp + 24|0;
 $a = sp;
 $free_s = sp + 20|0;
 $s = sp + 16|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_int($2,47144)|0);
 HEAP32[$robust>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (+_gretl_model_get_double($4,47152));
 HEAPF64[$a>>3] = $5;
 HEAP32[$free_s>>2] = 0;
 $6 = +HEAPF64[$a>>3];
 $7 = $6 == 1.79769313486231570815E+308;
 $8 = HEAP32[$robust>>2]|0;
 $9 = ($8|0)!=(0);
 do {
  if ($7) {
   if ($9) {
    HEAP32[$s>>2] = 47256;
    break;
   } else {
    HEAP32[$s>>2] = 47296;
    break;
   }
  } else {
   $10 = +HEAPF64[$a>>3];
   $11 = 1.0 - $10;
   $12 = 100.0 * $11;
   if ($9) {
    HEAPF64[tempDoublePtr>>3]=$12;HEAP32[$vararg_buffer7>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer7+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $13 = (_g_strdup_printf((47168|0),($vararg_buffer7|0))|0);
    HEAP32[$s>>2] = $13;
   } else {
    HEAPF64[tempDoublePtr>>3]=$12;HEAP32[$vararg_buffer7>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer7+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $14 = (_g_strdup_printf((47216|0),($vararg_buffer7|0))|0);
    HEAP32[$s>>2] = $14;
   }
   HEAP32[$free_s>>2] = 1;
  }
 } while(0);
 $15 = HEAP32[$1>>2]|0;
 $16 = (_csv_format($15)|0);
 $17 = ($16|0)!=(0);
 $18 = HEAP32[$1>>2]|0;
 $19 = HEAP32[$s>>2]|0;
 if ($17) {
  HEAP32[$vararg_buffer7>>2] = $19;
  (_pprintf($18,35568,$vararg_buffer7)|0);
 } else {
  HEAP32[$vararg_buffer7>>2] = $19;
  (_pprintf($18,47344,$vararg_buffer7)|0);
 }
 $20 = HEAP32[$1>>2]|0;
 _gretl_prn_newline($20);
 $21 = HEAP32[$free_s>>2]|0;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[$s>>2]|0;
 _g_free(($23|0));
 STACKTOP = sp;return;
}
function _beck_katz_failed_line($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_plain_format($1)|0);
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$0>>2]|0;
 (_pputs($4,47096)|0);
 $5 = HEAP32[$0>>2]|0;
 (_pputc($5,10)|0);
 STACKTOP = sp;return;
}
function _dpd_asy_vcv_line($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_csv_format($1)|0);
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$0>>2]|0;
 if ($3) {
  HEAP32[$vararg_buffer>>2] = 47064;
  (_pprintf($4,35568,$vararg_buffer)|0);
 } else {
  (_pputs($4,47064)|0);
 }
 $5 = HEAP32[$0>>2]|0;
 (_pputc($5,10)|0);
 STACKTOP = sp;return;
}
function _hc_vcv_line($vi,$prn) {
 $vi = $vi|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hcv = 0, $jack = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $hcv = sp + 24|0;
 $jack = sp + 20|0;
 HEAP32[$0>>2] = $vi;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$hcv>>2] = $4;
 HEAP32[$jack>>2] = 0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(4);
 if ($8) {
  HEAP32[$jack>>2] = 1;
  $9 = HEAP32[$hcv>>2]|0;
  $10 = (($9) + -1)|0;
  HEAP32[$hcv>>2] = $10;
 }
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$jack>>2]|0;
 $13 = ($12|0)!=(0);
 $14 = $13 ? 38752 : 47040;
 $15 = HEAP32[$jack>>2]|0;
 $16 = ($15|0)!=(0);
 $17 = $16 ? 38752 : 33160;
 $18 = HEAP32[$hcv>>2]|0;
 $19 = HEAP32[$jack>>2]|0;
 $20 = ($19|0)!=(0);
 $21 = $20 ? 47048 : 38752;
 HEAP32[$vararg_buffer>>2] = 46992;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $17;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $18;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $21;
 (_pprintf($11,46976,$vararg_buffer)|0);
 $22 = HEAP32[$1>>2]|0;
 $23 = (_rtf_format($22)|0);
 $24 = ($23|0)!=(0);
 $25 = HEAP32[$1>>2]|0;
 if ($24) {
  (_pputs($25,33888)|0);
  STACKTOP = sp;return;
 } else {
  (_pputc($25,10)|0);
  STACKTOP = sp;return;
 }
}
function _hac_vcv_line($vi,$prn) {
 $vi = $vi|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $kstrs = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $kstrs = sp + 8|0;
 HEAP32[$0>>2] = $vi;
 HEAP32[$1>>2] = $prn;
 ;HEAP32[$kstrs+0>>2]=HEAP32[46848+0>>2]|0;HEAP32[$kstrs+4>>2]=HEAP32[46848+4>>2]|0;HEAP32[$kstrs+8>>2]=HEAP32[46848+8>>2]|0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(2);
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 if ($5) {
  $8 = (($7) + 16|0);
  $9 = +HEAPF64[$8>>3];
  HEAPF64[tempDoublePtr>>3]=$9;HEAP32[$vararg_buffer7>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer7+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($6,46864,$vararg_buffer7)|0);
 } else {
  $10 = (($7) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $11;
  (_pprintf($6,46904,$vararg_buffer7)|0);
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($kstrs) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $17;
 (_pprintf($12,46944,$vararg_buffer7)|0);
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $23 = HEAP32[$1>>2]|0;
  (_pputs($23,45008)|0);
  STACKTOP = sp;return;
 }
 $22 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer7>>2] = 46960;
 (_pprintf($22,46952,$vararg_buffer7)|0);
 $23 = HEAP32[$1>>2]|0;
 (_pputs($23,45008)|0);
 STACKTOP = sp;return;
}
function _ml_vcv_line($vi,$prn) {
 $vi = $vi|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, $tex = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $tex = sp + 8|0;
 $s = sp + 4|0;
 HEAP32[$0>>2] = $vi;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_tex_format($2)|0);
 HEAP32[$tex>>2] = $3;
 HEAP32[$s>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 L1: do {
  switch ($6|0) {
  case 6:  {
   HEAP32[$s>>2] = 46752;
   break;
  }
  case 5:  {
   $7 = HEAP32[$tex>>2]|0;
   $8 = ($7|0)!=(0);
   if ($8) {
    HEAP32[$s>>2] = 46672;
    break L1;
   } else {
    HEAP32[$s>>2] = 46712;
    break L1;
   }
   break;
  }
  case 1:  {
   HEAP32[$s>>2] = 46512;
   break;
  }
  case 2:  {
   HEAP32[$s>>2] = 46552;
   break;
  }
  case 3:  {
   HEAP32[$s>>2] = 46600;
   break;
  }
  case 4:  {
   HEAP32[$s>>2] = 46648;
   break;
  }
  default: {
  }
  }
 } while(0);
 $9 = HEAP32[$s>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$1>>2]|0;
 $12 = (_csv_format($11)|0);
 $13 = ($12|0)!=(0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$s>>2]|0;
 if ($13) {
  HEAP32[$vararg_buffer1>>2] = $15;
  (_pprintf($14,42488,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer1>>2] = $15;
  (_pprintf($14,39816,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
}
function _panel_vcv_line($vi,$prn) {
 $vi = $vi|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 HEAP32[$0>>2] = $vi;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  $7 = (_csv_format($6)|0);
  $8 = ($7|0)!=(0);
  $9 = HEAP32[$1>>2]|0;
  if ($8) {
   HEAP32[$vararg_buffer1>>2] = 46416;
   (_pprintf($9,35568,$vararg_buffer1)|0);
  } else {
   (_pputs($9,46416)|0);
  }
  $10 = HEAP32[$1>>2]|0;
  (_pputc($10,10)|0);
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(1);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$1>>2]|0;
 $16 = (_csv_format($15)|0);
 $17 = ($16|0)!=(0);
 $18 = HEAP32[$1>>2]|0;
 do {
  if ($17) {
   HEAP32[$vararg_buffer1>>2] = 46448;
   (_pprintf($18,35568,$vararg_buffer1)|0);
  } else {
   $19 = (_tex_format($18)|0);
   $20 = ($19|0)!=(0);
   $21 = HEAP32[$1>>2]|0;
   if ($20) {
    (_pputs($21,46480)|0);
    break;
   } else {
    (_pputs($21,46448)|0);
    break;
   }
  }
 } while(0);
 $22 = HEAP32[$1>>2]|0;
 (_pputc($22,10)|0);
 STACKTOP = sp;return;
}
function _cluster_vcv_line($pmod,$vi,$dset,$prn) {
 $pmod = $pmod|0;
 $vi = $vi|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cstr = 0, $n_c = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $cstr = sp + 12|0;
 $n_c = sp + 8|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $vi;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $prn;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>=(1);
 if ($7) {
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)<($12|0);
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (_gretl_model_get_int($14,46320)|0);
   HEAP32[$n_c>>2] = $15;
   $16 = HEAP32[$n_c>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$2>>2]|0;
   $21 = (($20) + 68|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + ($19<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $16;
   $vararg_ptr1 = (($vararg_buffer2) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $24;
   $25 = (_g_strdup_printf((46336|0),($vararg_buffer2|0))|0);
   HEAP32[$cstr>>2] = $25;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $26 = (_g_strdup((46384|0))|0);
  HEAP32[$cstr>>2] = $26;
 }
 $27 = HEAP32[$3>>2]|0;
 $28 = (_csv_format($27)|0);
 $29 = ($28|0)!=(0);
 $30 = HEAP32[$3>>2]|0;
 $31 = HEAP32[$cstr>>2]|0;
 if ($29) {
  HEAP32[$vararg_buffer2>>2] = $31;
  (_pprintf($30,35568,$vararg_buffer2)|0);
  $32 = HEAP32[$3>>2]|0;
  (_pputc($32,10)|0);
  $33 = HEAP32[$cstr>>2]|0;
  _g_free(($33|0));
  STACKTOP = sp;return;
 } else {
  (_pputs($30,$31)|0);
  $32 = HEAP32[$3>>2]|0;
  (_pputc($32,10)|0);
  $33 = HEAP32[$cstr>>2]|0;
  _g_free(($33|0));
  STACKTOP = sp;return;
 }
}
function _printmodel($pmod,$dset,$opt,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $opt = $opt|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gotnan = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $gotnan = sp + 24|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $opt;
 HEAP32[$4>>2] = $prn;
 HEAP32[$gotnan>>2] = 0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$3>>2]|0;
  $8 = $7 & 65536;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   $10 = HEAP32[$4>>2]|0;
   $11 = (_csv_format($10)|0);
   $12 = ($11|0)!=(0);
   if ($12) {
    $13 = HEAP32[$4>>2]|0;
    _set_csv_delim($13);
   }
   $14 = HEAP32[$4>>2]|0;
   $15 = (_plain_format($14)|0);
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = HEAP32[$1>>2]|0;
    $18 = HEAP32[$4>>2]|0;
    _print_model_iter_info($17,$18);
   }
   $19 = HEAP32[$4>>2]|0;
   _model_format_start($19);
   $20 = HEAP32[$1>>2]|0;
   $21 = HEAP32[$2>>2]|0;
   $22 = HEAP32[$3>>2]|0;
   $23 = HEAP32[$4>>2]|0;
   _print_model_heading($20,$21,$22,$23);
   $24 = HEAP32[$4>>2]|0;
   $25 = (_plain_format($24)|0);
   $26 = ($25|0)!=(0);
   $27 = HEAP32[$1>>2]|0;
   $28 = HEAP32[$2>>2]|0;
   $29 = HEAP32[$4>>2]|0;
   if ($26) {
    $30 = (_plain_print_coefficients($27,$28,$29)|0);
    HEAP32[$gotnan>>2] = $30;
   } else {
    $31 = (_alt_print_coefficients($27,$28,$29)|0);
    HEAP32[$gotnan>>2] = $31;
   }
   $32 = HEAP32[$1>>2]|0;
   $33 = HEAP32[$4>>2]|0;
   _print_coeff_table_end($32,$33);
   $34 = HEAP32[$1>>2]|0;
   $35 = (($34) + 72|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(9);
   do {
    if ($37) {
     label = 14;
    } else {
     $38 = HEAP32[$1>>2]|0;
     $39 = (($38) + 72|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(10);
     if ($41) {
      label = 14;
     } else {
      $42 = HEAP32[$1>>2]|0;
      $43 = (($42) + 72|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(11);
      if ($45) {
       label = 14;
      } else {
       $48 = HEAP32[$1>>2]|0;
       $49 = (($48) + 72|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ($50|0)==(6);
       if (!($51)) {
        $52 = HEAP32[$1>>2]|0;
        $53 = (($52) + 72|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(13);
        if (!($55)) {
         $56 = HEAP32[$1>>2]|0;
         $57 = (($56) + 72|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = ($58|0)==(19);
         $60 = HEAP32[$1>>2]|0;
         if ($59) {
          $61 = HEAP32[$4>>2]|0;
          _rsqline($60,$61);
          $62 = HEAP32[$1>>2]|0;
          $63 = HEAP32[$4>>2]|0;
          _print_HET_1_results($62,$63);
          break;
         }
         $64 = (($60) + 72|0);
         $65 = HEAP32[$64>>2]|0;
         $66 = ($65|0)==(7);
         $67 = HEAP32[$1>>2]|0;
         if ($66) {
          $68 = HEAP32[$4>>2]|0;
          _rsqline($67,$68);
          $69 = HEAP32[$1>>2]|0;
          $70 = HEAP32[$4>>2]|0;
          _print_whites_results($69,$70);
          break;
         }
         $71 = (($67) + 72|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = ($72|0)==(20);
         $74 = HEAP32[$1>>2]|0;
         if ($73) {
          $75 = HEAP32[$4>>2]|0;
          _rssline($74,$75);
          $76 = HEAP32[$1>>2]|0;
          $77 = HEAP32[$4>>2]|0;
          _print_bp_results($76,$77);
          break;
         }
         $78 = (($74) + 72|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = ($79|0)==(1);
         if (!($80)) {
          $81 = HEAP32[$1>>2]|0;
          $82 = (($81) + 72|0);
          $83 = HEAP32[$82>>2]|0;
          $84 = ($83|0)==(2);
          if (!($84)) {
           $85 = HEAP32[$1>>2]|0;
           $86 = (($85) + 72|0);
           $87 = HEAP32[$86>>2]|0;
           $88 = ($87|0)==(5);
           if (!($88)) {
            $89 = HEAP32[$1>>2]|0;
            $90 = (($89) + 72|0);
            $91 = HEAP32[$90>>2]|0;
            $92 = ($91|0)==(4);
            if (!($92)) {
             $95 = HEAP32[$1>>2]|0;
             $96 = (($95) + 72|0);
             $97 = HEAP32[$96>>2]|0;
             $98 = ($97|0)==(22);
             if ($98) {
              $99 = HEAP32[$1>>2]|0;
              $100 = HEAP32[$4>>2]|0;
              _ssrline($99,$100);
              break;
             }
             $101 = HEAP32[$3>>2]|0;
             $102 = $101 & 262144;
             $103 = ($102|0)!=(0);
             $104 = HEAP32[$1>>2]|0;
             $105 = (($104) + 8|0);
             $106 = HEAP32[$105>>2]|0;
             if ($103) {
              $107 = ($106|0)==(86);
              if (!($107)) {
               break;
              }
              $108 = HEAP32[$1>>2]|0;
              $109 = (($108) + 128|0);
              $110 = +HEAPF64[$109>>3];
              $111 = $110 == 1.79769313486231570815E+308;
              if ($111) {
               break;
              }
              $112 = HEAP32[$4>>2]|0;
              $113 = (_plain_format($112)|0);
              $114 = ($113|0)!=(0);
              if (!($114)) {
               break;
              }
              $115 = HEAP32[$4>>2]|0;
              $116 = HEAP32[$1>>2]|0;
              $117 = (($116) + 104|0);
              $118 = +HEAPF64[$117>>3];
              $119 = HEAP32[$1>>2]|0;
              $120 = (($119) + 128|0);
              $121 = +HEAPF64[$120>>3];
              HEAP32[$vararg_buffer>>2] = 32600;
              $vararg_ptr1 = (($vararg_buffer) + 4|0);
              HEAPF64[tempDoublePtr>>3]=$118;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
              $vararg_ptr2 = (($vararg_buffer) + 12|0);
              HEAP32[$vararg_ptr2>>2] = 32608;
              $vararg_ptr3 = (($vararg_buffer) + 16|0);
              HEAPF64[tempDoublePtr>>3]=$121;HEAP32[$vararg_ptr3>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr3+4>>2]=HEAP32[tempDoublePtr+4>>2];
              (_pprintf($115,32576,$vararg_buffer)|0);
              break;
             }
             $122 = ($106|0)==(53);
             do {
              if ($122) {
               label = 41;
              } else {
               $123 = HEAP32[$1>>2]|0;
               $124 = (($123) + 8|0);
               $125 = HEAP32[$124>>2]|0;
               $126 = ($125|0)==(8);
               if ($126) {
                label = 41;
                break;
               }
               $127 = HEAP32[$1>>2]|0;
               $128 = (($127) + 8|0);
               $129 = HEAP32[$128>>2]|0;
               $130 = ($129|0)==(133);
               if ($130) {
                $131 = HEAP32[$1>>2]|0;
                $132 = (_gretl_model_get_int($131,32624)|0);
                $133 = ($132|0)!=(0);
                if (!($133)) {
                 label = 41;
                 break;
                }
               }
               $134 = HEAP32[$1>>2]|0;
               $135 = (($134) + 8|0);
               $136 = HEAP32[$135>>2]|0;
               $137 = ($136|0)==(91);
               if ($137) {
                $138 = HEAP32[$1>>2]|0;
                $139 = (($138) + 12|0);
                $140 = HEAP32[$139>>2]|0;
                $141 = $140 & 4194304;
                $142 = ($141|0)!=(0);
                if ($142) {
                 label = 41;
                 break;
                }
               }
               $149 = HEAP32[$1>>2]|0;
               $150 = (($149) + 8|0);
               $151 = HEAP32[$150>>2]|0;
               $152 = ($151|0)==(68);
               if ($152) {
                $153 = HEAP32[$4>>2]|0;
                _alternate_stats_message(3,$153);
                $154 = HEAP32[$1>>2]|0;
                $155 = HEAP32[$4>>2]|0;
                _print_middle_table($154,$155,1);
                $156 = HEAP32[$4>>2]|0;
                _alternate_stats_message(0,$156);
                $157 = HEAP32[$1>>2]|0;
                $158 = HEAP32[$4>>2]|0;
                _print_middle_table($157,$158,2);
                break;
               }
               $159 = HEAP32[$1>>2]|0;
               $160 = (($159) + 8|0);
               $161 = HEAP32[$160>>2]|0;
               $162 = ($161|0)==(5);
               if ($162) {
                label = 46;
               } else {
                $163 = HEAP32[$1>>2]|0;
                $164 = (($163) + 8|0);
                $165 = HEAP32[$164>>2]|0;
                $166 = ($165|0)==(6);
                if ($166) {
                 label = 46;
                }
               }
               if ((label|0) == 46) {
                $167 = HEAP32[$4>>2]|0;
                _alternate_stats_message(2,$167);
               }
               $168 = HEAP32[$1>>2]|0;
               $169 = (($168) + 8|0);
               $170 = HEAP32[$169>>2]|0;
               $171 = ($170|0)!=(47);
               if ($171) {
                $172 = HEAP32[$1>>2]|0;
                $173 = HEAP32[$4>>2]|0;
                _print_middle_table($172,$173,0);
               }
               $174 = HEAP32[$1>>2]|0;
               $175 = (($174) + 8|0);
               $176 = HEAP32[$175>>2]|0;
               $177 = ($176|0)==(98);
               do {
                if ($177) {
                 $178 = HEAP32[$1>>2]|0;
                 $179 = (($178) + 12|0);
                 $180 = HEAP32[$179>>2]|0;
                 $181 = $180 & 16;
                 $182 = ($181|0)!=(0);
                 if (!($182)) {
                  break;
                 }
                 $183 = HEAP32[$1>>2]|0;
                 $184 = HEAP32[$4>>2]|0;
                 _print_probit_rho($183,$184);
                }
               } while(0);
               $185 = HEAP32[$1>>2]|0;
               $186 = (($185) + 72|0);
               $187 = HEAP32[$186>>2]|0;
               $188 = ($187|0)==(14);
               if ($188) {
                $189 = HEAP32[$1>>2]|0;
                $190 = (_gretl_model_get_int($189,32640)|0);
                $191 = ($190|0)==(3);
                if ($191) {
                 label = 56;
                } else {
                 label = 54;
                }
               } else {
                label = 54;
               }
               L69: do {
                if ((label|0) == 54) {
                 $192 = HEAP32[$1>>2]|0;
                 $193 = (($192) + 8|0);
                 $194 = HEAP32[$193>>2]|0;
                 $195 = ($194|0)==(127);
                 if ($195) {
                  $196 = HEAP32[$1>>2]|0;
                  $197 = (($196) + 12|0);
                  $198 = HEAP32[$197>>2]|0;
                  $199 = $198 & 2048;
                  $200 = ($199|0)!=(0);
                  if ($200) {
                   label = 56;
                   break;
                  }
                 }
                 $203 = HEAP32[$1>>2]|0;
                 $204 = (($203) + 8|0);
                 $205 = HEAP32[$204>>2]|0;
                 $206 = ($205|0)==(9);
                 $207 = HEAP32[$1>>2]|0;
                 if ($206) {
                  $208 = HEAP32[$4>>2]|0;
                  _print_arma_roots($207,$208);
                  break;
                 }
                 $209 = (($207) + 8|0);
                 $210 = HEAP32[$209>>2]|0;
                 $211 = ($210|0)==(45);
                 $212 = HEAP32[$1>>2]|0;
                 if ($211) {
                  $213 = HEAP32[$4>>2]|0;
                  _garch_variance_line($212,$213);
                  break;
                 }
                 $214 = (($212) + 8|0);
                 $215 = HEAP32[$214>>2]|0;
                 $216 = ($215|0)==(51);
                 $217 = HEAP32[$1>>2]|0;
                 if ($216) {
                  $218 = HEAP32[$4>>2]|0;
                  _print_heckit_stats($217,$218);
                  break;
                 }
                 $219 = (($217) + 8|0);
                 $220 = HEAP32[$219>>2]|0;
                 $221 = ($220|0)==(91);
                 do {
                  if ($221) {
                   $222 = HEAP32[$1>>2]|0;
                   $223 = (($222) + 12|0);
                   $224 = HEAP32[$223>>2]|0;
                   $225 = $224 & 1048576;
                   $226 = ($225|0)!=(0);
                   if (!($226)) {
                    break;
                   }
                   $227 = HEAP32[$1>>2]|0;
                   $228 = HEAP32[$4>>2]|0;
                   _panel_variance_lines($227,$228);
                   break L69;
                  }
                 } while(0);
                 $229 = HEAP32[$1>>2]|0;
                 $230 = (($229) + 8|0);
                 $231 = HEAP32[$230>>2]|0;
                 $232 = ($231|0)==(47);
                 do {
                  if (!($232)) {
                   $233 = HEAP32[$1>>2]|0;
                   $234 = (($233) + 8|0);
                   $235 = HEAP32[$234>>2]|0;
                   $236 = ($235|0)==(127);
                   if ($236) {
                    $237 = HEAP32[$1>>2]|0;
                    $238 = (($237) + 12|0);
                    $239 = HEAP32[$238>>2]|0;
                    $240 = $239 & 64;
                    $241 = ($240|0)!=(0);
                    if ($241) {
                     break;
                    }
                   }
                   $244 = HEAP32[$1>>2]|0;
                   $245 = (($244) + 8|0);
                   $246 = HEAP32[$245>>2]|0;
                   $247 = ($246|0)==(7);
                   do {
                    if (!($247)) {
                     $248 = HEAP32[$1>>2]|0;
                     $249 = (($248) + 8|0);
                     $250 = HEAP32[$249>>2]|0;
                     $251 = ($250|0)==(27);
                     if ($251) {
                      break;
                     }
                     $254 = HEAP32[$1>>2]|0;
                     $255 = (($254) + 8|0);
                     $256 = HEAP32[$255>>2]|0;
                     $257 = ($256|0)==(69);
                     do {
                      if (!($257)) {
                       $258 = HEAP32[$1>>2]|0;
                       $259 = (($258) + 8|0);
                       $260 = HEAP32[$259>>2]|0;
                       $261 = ($260|0)==(98);
                       if ($261) {
                        break;
                       }
                       $268 = HEAP32[$1>>2]|0;
                       $269 = (($268) + 8|0);
                       $270 = HEAP32[$269>>2]|0;
                       $271 = ($270|0)==(127);
                       do {
                        if ($271) {
                         $272 = HEAP32[$1>>2]|0;
                         $273 = (($272) + 12|0);
                         $274 = HEAP32[$273>>2]|0;
                         $275 = $274 & 2048;
                         $276 = ($275|0)!=(0);
                         if ($276) {
                          break;
                         }
                         $277 = HEAP32[$1>>2]|0;
                         $278 = (($277) + 12|0);
                         $279 = HEAP32[$278>>2]|0;
                         $280 = $279 & 64;
                         $281 = ($280|0)!=(0);
                         if ($281) {
                          break;
                         }
                         $282 = HEAP32[$1>>2]|0;
                         $283 = (($282) + 72|0);
                         $284 = HEAP32[$283>>2]|0;
                         $285 = ($284|0)!=(0);
                         if ($285) {
                          break;
                         }
                         $286 = HEAP32[$4>>2]|0;
                         $287 = (_plain_format($286)|0);
                         $288 = ($287|0)!=(0);
                         if (!($288)) {
                          break;
                         }
                         $289 = HEAP32[$1>>2]|0;
                         $290 = HEAP32[$4>>2]|0;
                         _addconst_message($289,$290);
                         break L69;
                        }
                       } while(0);
                       $291 = HEAP32[$1>>2]|0;
                       $292 = (($291) + 8|0);
                       $293 = HEAP32[$292>>2]|0;
                       $294 = ($293|0)==(58);
                       do {
                        if (!($294)) {
                         $295 = HEAP32[$1>>2]|0;
                         $296 = (($295) + 8|0);
                         $297 = HEAP32[$296>>2]|0;
                         $298 = ($297|0)==(126);
                         if ($298) {
                          break;
                         }
                         $302 = HEAP32[$1>>2]|0;
                         $303 = (($302) + 8|0);
                         $304 = HEAP32[$303>>2]|0;
                         $305 = ($304|0)==(95);
                         $306 = HEAP32[$1>>2]|0;
                         if ($305) {
                          $307 = HEAP32[$4>>2]|0;
                          _print_overdisp_test($306,$307);
                          break L69;
                         }
                         $308 = (($306) + 8|0);
                         $309 = HEAP32[$308>>2]|0;
                         $310 = ($309|0)==(29);
                         $311 = HEAP32[$1>>2]|0;
                         if ($310) {
                          $312 = HEAP32[$4>>2]|0;
                          _print_duration_alpha($311,$312);
                          break L69;
                         }
                         $313 = (($311) + 8|0);
                         $314 = HEAP32[$313>>2]|0;
                         $315 = ($314|0)==(10);
                         if (!($315)) {
                          break L69;
                         }
                         $316 = HEAP32[$1>>2]|0;
                         $317 = HEAP32[$4>>2]|0;
                         _print_probit_rho($316,$317);
                         break L69;
                        }
                       } while(0);
                       $299 = HEAP32[$1>>2]|0;
                       $300 = HEAP32[$2>>2]|0;
                       $301 = HEAP32[$4>>2]|0;
                       _print_intreg_info($299,$300,$301);
                       break L69;
                      }
                     } while(0);
                     $262 = HEAP32[$1>>2]|0;
                     $263 = (($262) + 72|0);
                     $264 = HEAP32[$263>>2]|0;
                     $265 = ($264|0)!=(0);
                     if ($265) {
                      break L69;
                     }
                     $266 = HEAP32[$1>>2]|0;
                     $267 = HEAP32[$4>>2]|0;
                     _logit_probit_stats($266,$267);
                     break L69;
                    }
                   } while(0);
                   $252 = HEAP32[$1>>2]|0;
                   $253 = HEAP32[$4>>2]|0;
                   _print_DPD_stats($252,$253);
                   break L69;
                  }
                 } while(0);
                 $242 = HEAP32[$1>>2]|0;
                 $243 = HEAP32[$4>>2]|0;
                 _print_GMM_stats($242,$243);
                }
               } while(0);
               if ((label|0) == 56) {
                $201 = HEAP32[$1>>2]|0;
                $202 = HEAP32[$4>>2]|0;
                _print_liml_equation_data($201,$202);
               }
               $318 = HEAP32[$4>>2]|0;
               $319 = (_plain_format($318)|0);
               $320 = ($319|0)!=(0);
               if (!($320)) {
                break;
               }
               $321 = HEAP32[$1>>2]|0;
               $322 = (($321) + 72|0);
               $323 = HEAP32[$322>>2]|0;
               $324 = ($323|0)!=(0);
               if ($324) {
                break;
               }
               $325 = HEAP32[$1>>2]|0;
               $326 = HEAP32[$4>>2]|0;
               _maybe_print_jll($325,0,$326);
              }
             } while(0);
             if ((label|0) == 41) {
              $143 = HEAP32[$4>>2]|0;
              _alternate_stats_message(1,$143);
              $144 = HEAP32[$1>>2]|0;
              $145 = HEAP32[$4>>2]|0;
              _print_middle_table($144,$145,1);
              $146 = HEAP32[$4>>2]|0;
              _alternate_stats_message(0,$146);
              $147 = HEAP32[$1>>2]|0;
              $148 = HEAP32[$4>>2]|0;
              _print_middle_table($147,$148,2);
             }
             $327 = HEAP32[$4>>2]|0;
             $328 = (_plain_format($327)|0);
             $329 = ($328|0)!=(0);
             if (!($329)) {
              break;
             }
             $330 = HEAP32[$1>>2]|0;
             $331 = (($330) + 8|0);
             $332 = HEAP32[$331>>2]|0;
             $333 = ($332|0)!=(76);
             if (!($333)) {
              break;
             }
             $334 = HEAP32[$1>>2]|0;
             $335 = (($334) + 8|0);
             $336 = HEAP32[$335>>2]|0;
             $337 = ($336|0)!=(91);
             if (!($337)) {
              break;
             }
             $338 = HEAP32[$1>>2]|0;
             $339 = (($338) + 8|0);
             $340 = HEAP32[$339>>2]|0;
             $341 = ($340|0)!=(9);
             if (!($341)) {
              break;
             }
             $342 = HEAP32[$1>>2]|0;
             $343 = (($342) + 8|0);
             $344 = HEAP32[$343>>2]|0;
             $345 = ($344|0)!=(83);
             if (!($345)) {
              break;
             }
             $346 = HEAP32[$1>>2]|0;
             $347 = (($346) + 8|0);
             $348 = HEAP32[$347>>2]|0;
             $349 = ($348|0)!=(47);
             if (!($349)) {
              break;
             }
             $350 = HEAP32[$1>>2]|0;
             $351 = (($350) + 8|0);
             $352 = HEAP32[$351>>2]|0;
             $353 = ($352|0)!=(63);
             if (!($353)) {
              break;
             }
             $354 = HEAP32[$1>>2]|0;
             $355 = (($354) + 8|0);
             $356 = HEAP32[$355>>2]|0;
             $357 = ($356|0)!=(51);
             if (!($357)) {
              break;
             }
             $358 = HEAP32[$1>>2]|0;
             $359 = (($358) + 8|0);
             $360 = HEAP32[$359>>2]|0;
             $361 = ($360|0)!=(7);
             if (!($361)) {
              break;
             }
             $362 = HEAP32[$1>>2]|0;
             $363 = (($362) + 8|0);
             $364 = HEAP32[$363>>2]|0;
             $365 = ($364|0)!=(27);
             if (!($365)) {
              break;
             }
             $366 = HEAP32[$1>>2]|0;
             $367 = (($366) + 8|0);
             $368 = HEAP32[$367>>2]|0;
             $369 = ($368|0)!=(45);
             if (!($369)) {
              break;
             }
             $370 = HEAP32[$1>>2]|0;
             $371 = (($370) + 8|0);
             $372 = HEAP32[$371>>2]|0;
             $373 = ($372|0)!=(29);
             if (!($373)) {
              break;
             }
             $374 = HEAP32[$1>>2]|0;
             $375 = (($374) + 8|0);
             $376 = HEAP32[$375>>2]|0;
             $377 = ($376|0)==(69);
             if ($377) {
              label = 109;
             } else {
              $378 = HEAP32[$1>>2]|0;
              $379 = (($378) + 8|0);
              $380 = HEAP32[$379>>2]|0;
              $381 = ($380|0)==(98);
              if ($381) {
               label = 109;
              }
             }
             if ((label|0) == 109) {
              $382 = HEAP32[$1>>2]|0;
              $383 = (_gretl_model_get_int($382,32152)|0);
              $384 = ($383|0)!=(0);
              if ($384) {
               break;
              }
             }
             $385 = HEAP32[$1>>2]|0;
             $386 = (($385) + 8|0);
             $387 = HEAP32[$386>>2]|0;
             $388 = ($387|0)==(69);
             if ($388) {
              $389 = HEAP32[$1>>2]|0;
              $390 = (_gretl_model_get_int($389,32176)|0);
              $391 = ($390|0)!=(0);
              if ($391) {
               break;
              }
             }
             $392 = HEAP32[$1>>2]|0;
             $393 = (($392) + 8|0);
             $394 = HEAP32[$393>>2]|0;
             $395 = ($394|0)==(95);
             if ($395) {
              break;
             }
             $396 = HEAP32[$1>>2]|0;
             $397 = (($396) + 8|0);
             $398 = HEAP32[$397>>2]|0;
             $399 = ($398|0)==(82);
             if ($399) {
              break;
             }
             $400 = HEAP32[$1>>2]|0;
             $401 = (($400) + 8|0);
             $402 = HEAP32[$401>>2]|0;
             $403 = ($402|0)==(58);
             if ($403) {
              break;
             }
             $404 = HEAP32[$1>>2]|0;
             $405 = (($404) + 8|0);
             $406 = HEAP32[$405>>2]|0;
             $407 = ($406|0)==(126);
             if ($407) {
              break;
             }
             $408 = HEAP32[$1>>2]|0;
             $409 = (($408) + 8|0);
             $410 = HEAP32[$409>>2]|0;
             $411 = ($410|0)!=(10);
             if (!($411)) {
              break;
             }
             $412 = HEAP32[$1>>2]|0;
             $413 = (($412) + 72|0);
             $414 = HEAP32[$413>>2]|0;
             $415 = ($414|0)!=(0);
             if ($415) {
              break;
             }
             $416 = HEAP32[$1>>2]|0;
             $417 = HEAP32[$2>>2]|0;
             $418 = HEAP32[$4>>2]|0;
             _pval_max_line($416,$417,$418);
             break;
            }
           }
          }
         }
         $93 = HEAP32[$1>>2]|0;
         $94 = HEAP32[$4>>2]|0;
         _rsqline($93,$94);
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 14) {
    $46 = HEAP32[$1>>2]|0;
    $47 = HEAP32[$4>>2]|0;
    _aux_print_info_criteria($46,$47);
   }
   $419 = HEAP32[$3>>2]|0;
   $420 = $419 & 2097152;
   $421 = ($420|0)!=(0);
   if ($421) {
    $422 = HEAP32[$1>>2]|0;
    $423 = HEAP32[$4>>2]|0;
    (_ols_print_anova($422,$423)|0);
   }
   $424 = HEAP32[$3>>2]|0;
   $425 = $424 & 16384;
   $426 = ($425|0)!=(0);
   if ($426) {
    $427 = HEAP32[$1>>2]|0;
    $428 = HEAP32[$2>>2]|0;
    $429 = HEAP32[$4>>2]|0;
    (_outcovmx($427,$428,$429)|0);
   }
   $430 = HEAP32[$1>>2]|0;
   $431 = (_any_tests($430)|0);
   $432 = ($431|0)!=(0);
   if ($432) {
    $433 = HEAP32[$3>>2]|0;
    $434 = $433 & 262144;
    $435 = ($434|0)!=(0);
    if (!($435)) {
     $436 = HEAP32[$1>>2]|0;
     $437 = HEAP32[$4>>2]|0;
     _print_model_tests($436,$437);
    }
   }
   $438 = HEAP32[$4>>2]|0;
   _model_format_end($438);
   $439 = HEAP32[$gotnan>>2]|0;
   $440 = ($439|0)!=(0);
   if ($440) {
    $441 = HEAP32[$1>>2]|0;
    $442 = (($441) + 228|0);
    HEAP32[$442>>2] = 35;
   }
   $443 = HEAP32[$gotnan>>2]|0;
   HEAP32[$0>>2] = $443;
   $444 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($444|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $444 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($444|0);
}
function _set_csv_delim($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $test = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 $test = sp + 12|0;
 HEAP32[$0>>2] = $prn;
 HEAPF64[tempDoublePtr>>3]=1.0;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($test,36496,$vararg_buffer)|0);
 $1 = (($test) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(44);
 $5 = HEAP32[$0>>2]|0;
 if ($4) {
  _gretl_print_set_delim($5,59);
  STACKTOP = sp;return;
 } else {
  _gretl_print_set_delim($5,44);
  STACKTOP = sp;return;
 }
}
function _print_model_iter_info($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $fncount = 0, $grcount = 0, $iters = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $iters = sp + 12|0;
 $fncount = sp + 8|0;
 $grcount = sp + 4|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_int($2,31944)|0);
 HEAP32[$iters>>2] = $3;
 $4 = HEAP32[$iters>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  (_pputc($6,10)|0);
  $7 = HEAP32[$1>>2]|0;
  $8 = HEAP32[$iters>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $8;
  (_pprintf($7,46192,$vararg_buffer4)|0);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = (_gretl_model_get_int($9,46240)|0);
 HEAP32[$fncount>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (_gretl_model_get_int($11,46248)|0);
 HEAP32[$grcount>>2] = $12;
 $13 = HEAP32[$fncount>>2]|0;
 $14 = ($13|0)>(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$1>>2]|0;
 (_pputc($15,10)|0);
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$fncount>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $17;
 (_pprintf($16,46256,$vararg_buffer4)|0);
 $18 = HEAP32[$1>>2]|0;
 $19 = HEAP32[$grcount>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $19;
 (_pprintf($18,46288,$vararg_buffer4)|0);
 STACKTOP = sp;return;
}
function _model_format_start($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 _set_alt_gettext_mode($1);
 $2 = HEAP32[$0>>2]|0;
 $3 = (_tex_format($2)|0);
 $4 = ($3|0)!=(0);
 $5 = HEAP32[$0>>2]|0;
 if ($4) {
  $6 = (_tex_doc_format($5)|0);
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = HEAP32[$0>>2]|0;
   _gretl_tex_preamble($8,0);
  }
  $9 = HEAP32[$0>>2]|0;
  (_pputs($9,46144)|0);
  STACKTOP = sp;return;
 }
 $10 = (_rtf_format($5)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = (_rtf_doc_format($12)|0);
 $14 = ($13|0)!=(0);
 $15 = HEAP32[$0>>2]|0;
 if ($14) {
  (_pputs($15,46160)|0);
  STACKTOP = sp;return;
 } else {
  (_pputs($15,46176)|0);
  STACKTOP = sp;return;
 }
}
function _print_model_heading($pmod,$dset,$opt,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $opt = $opt|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0.0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Tmax = 0, $Tmax1 = 0, $Tmin = 0, $csv = 0;
 var $datesep = 0, $dvname = 0, $dvnl = 0, $effn = 0, $enddate = 0, $estr = 0, $fmt = 0, $fmt2 = 0, $mc = 0, $method = 0, $or$cond = 0, $order = 0, $qp = 0, $r = 0, $selvar = 0, $startdate = 0, $t1 = 0, $t2 = 0, $tau = 0, $tex = 0;
 var $vararg_buffer134 = 0, $vararg_ptr103 = 0, $vararg_ptr120 = 0, $vararg_ptr124 = 0, $vararg_ptr13 = 0, $vararg_ptr137 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr5 = 0, $vararg_ptr52 = 0, $vararg_ptr56 = 0;
 var $vararg_ptr68 = 0, $vararg_ptr72 = 0, $vararg_ptr76 = 0, $vararg_ptr86 = 0, $vararg_ptr9 = 0, $vararg_ptr93 = 0, $vname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $vararg_buffer134 = sp + 16|0;
 $0 = sp + 116|0;
 $1 = sp + 112|0;
 $2 = sp + 108|0;
 $3 = sp + 104|0;
 $startdate = sp + 176|0;
 $enddate = sp + 160|0;
 $vname = sp + 128|0;
 $datesep = sp + 120|0;
 $t1 = sp + 100|0;
 $t2 = sp + 96|0;
 $tex = sp + 92|0;
 $csv = sp + 88|0;
 $dvnl = sp + 84|0;
 $order = sp + 80|0;
 $mc = sp + 76|0;
 $Tmax = sp + 72|0;
 $estr = sp + 68|0;
 $fmt = sp + 64|0;
 $effn = sp + 60|0;
 $Tmin = sp + 56|0;
 $Tmax1 = sp + 52|0;
 $fmt2 = sp + 48|0;
 $dvname = sp + 44|0;
 $method = sp + 40|0;
 $tau = sp + 8|0;
 $selvar = sp + 36|0;
 $r = sp;
 $qp = sp + 32|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $opt;
 HEAP32[$3>>2] = $prn;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$t1>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$t2>>2] = $9;
 $10 = HEAP32[$3>>2]|0;
 $11 = (_tex_format($10)|0);
 HEAP32[$tex>>2] = $11;
 $12 = HEAP32[$3>>2]|0;
 $13 = (_csv_format($12)|0);
 HEAP32[$csv>>2] = $13;
 HEAP32[$dvnl>>2] = 1;
 HEAP32[$order>>2] = 0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 72|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(15);
 if ($17) {
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + 72|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(16);
  if ($21) {
   $22 = HEAP32[$t1>>2]|0;
   $23 = HEAP32[$1>>2]|0;
   (_ntodate($startdate,$22,$23)|0);
   $24 = HEAP32[$t2>>2]|0;
   $25 = HEAP32[$1>>2]|0;
   (_ntodate($enddate,$24,$25)|0);
   $26 = HEAP32[$tex>>2]|0;
   _make_obs_sep($datesep,$startdate,$26);
  }
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + 72|0);
 $29 = HEAP32[$28>>2]|0;
 L5: do {
  switch ($29|0) {
  case 23: case 22: case 18: case 13: case 11: case 9: case 10: case 8: case 3: case 19: case 20: case 7: case 4: case 2: case 1:  {
   $30 = HEAP32[$0>>2]|0;
   $31 = HEAP32[$3>>2]|0;
   _print_aux_string($30,$31);
   break;
  }
  case 21:  {
   $55 = HEAP32[$3>>2]|0;
   (_pputc($55,10)|0);
   break;
  }
  case 5:  {
   $32 = HEAP32[$0>>2]|0;
   $33 = (_gretl_model_get_int($32,43096)|0);
   HEAP32[$order>>2] = $33;
   $34 = HEAP32[$0>>2]|0;
   $35 = (($34) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = HEAP32[$order>>2]|0;
   $38 = HEAP32[$3>>2]|0;
   _godfrey_test_string($36,$37,$38);
   break;
  }
  case 14:  {
   $45 = HEAP32[$3>>2]|0;
   $46 = HEAP32[$0>>2]|0;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + 1)|0;
   HEAP32[$vararg_buffer134>>2] = 43152;
   $vararg_ptr5 = (($vararg_buffer134) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $48;
   (_pprintf($45,43144,$vararg_buffer134)|0);
   break;
  }
  case 15:  {
   $49 = HEAP32[$3>>2]|0;
   $50 = HEAP32[$0>>2]|0;
   $51 = HEAP32[$50>>2]|0;
   HEAP32[$vararg_buffer134>>2] = 43152;
   $vararg_ptr9 = (($vararg_buffer134) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $51;
   (_pprintf($49,43168,$vararg_buffer134)|0);
   break;
  }
  case 6:  {
   $39 = HEAP32[$0>>2]|0;
   $40 = (_gretl_model_get_int($39,35304)|0);
   HEAP32[$order>>2] = $40;
   $41 = HEAP32[$3>>2]|0;
   (_pputc($41,10)|0);
   $42 = HEAP32[$3>>2]|0;
   $43 = HEAP32[$order>>2]|0;
   HEAP32[$vararg_buffer134>>2] = $43;
   (_pprintf($42,43112,$vararg_buffer134)|0);
   $44 = HEAP32[$3>>2]|0;
   (_pputc($44,10)|0);
   break;
  }
  case 16:  {
   $52 = HEAP32[$3>>2]|0;
   $53 = HEAP32[$0>>2]|0;
   $54 = HEAP32[$53>>2]|0;
   HEAP32[$vararg_buffer134>>2] = 43152;
   $vararg_ptr13 = (($vararg_buffer134) + 4|0);
   HEAP32[$vararg_ptr13>>2] = $54;
   (_pprintf($52,43144,$vararg_buffer134)|0);
   break;
  }
  default: {
   $56 = HEAP32[$0>>2]|0;
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)<(0);
   if (!($58)) {
    $59 = HEAP32[$2>>2]|0;
    $60 = $59 & 262144;
    $61 = ($60|0)!=(0);
    if (!($61)) {
     $65 = HEAP32[$0>>2]|0;
     $66 = (($65) + 232|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)!=(0|0);
     $69 = HEAP32[$csv>>2]|0;
     $70 = ($69|0)!=(0);
     if (!($68)) {
      $84 = HEAP32[$3>>2]|0;
      $85 = HEAP32[$0>>2]|0;
      $86 = HEAP32[$85>>2]|0;
      if ($70) {
       HEAP32[$vararg_buffer134>>2] = 43224;
       $vararg_ptr26 = (($vararg_buffer134) + 4|0);
       HEAP32[$vararg_ptr26>>2] = $86;
       (_pprintf($84,43208,$vararg_buffer134)|0);
       break L5;
      } else {
       HEAP32[$vararg_buffer134>>2] = 43224;
       $vararg_ptr30 = (($vararg_buffer134) + 4|0);
       HEAP32[$vararg_ptr30>>2] = $86;
       (_pprintf($84,43168,$vararg_buffer134)|0);
       break L5;
      }
     }
     if ($70) {
      $71 = HEAP32[$3>>2]|0;
      $72 = HEAP32[$0>>2]|0;
      $73 = (($72) + 232|0);
      $74 = HEAP32[$73>>2]|0;
      HEAP32[$vararg_buffer134>>2] = $74;
      (_pprintf($71,43184,$vararg_buffer134)|0);
      break L5;
     }
     $75 = HEAP32[$0>>2]|0;
     $76 = (($75) + 232|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (_strlen(($77|0))|0);
     $79 = ($78>>>0)>(8);
     $80 = HEAP32[$3>>2]|0;
     $81 = HEAP32[$0>>2]|0;
     $82 = (($81) + 232|0);
     $83 = HEAP32[$82>>2]|0;
     if ($79) {
      HEAP32[$vararg_buffer134>>2] = $83;
      (_pprintf($80,43192,$vararg_buffer134)|0);
      break L5;
     } else {
      HEAP32[$vararg_buffer134>>2] = $83;
      (_pprintf($80,43200,$vararg_buffer134)|0);
      break L5;
     }
    }
   }
   $62 = HEAP32[$csv>>2]|0;
   $63 = ($62|0)!=(0);
   if (!($63)) {
    $64 = HEAP32[$3>>2]|0;
    (_pputc($64,10)|0);
   }
  }
  }
 } while(0);
 $87 = HEAP32[$0>>2]|0;
 $88 = (($87) + 72|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(15);
 do {
  if (!($90)) {
   $91 = HEAP32[$0>>2]|0;
   $92 = (($91) + 72|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)==(16);
   if (!($94)) {
    $95 = HEAP32[$0>>2]|0;
    $96 = (($95) + 72|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(14);
    if ($98) {
     $99 = HEAP32[$3>>2]|0;
     $100 = HEAP32[$0>>2]|0;
     $101 = (_system_short_string($100)|0);
     HEAP32[$vararg_buffer134>>2] = $101;
     $vararg_ptr34 = (($vararg_buffer134) + 4|0);
     HEAP32[$vararg_ptr34>>2] = $startdate;
     $vararg_ptr35 = (($vararg_buffer134) + 8|0);
     HEAP32[$vararg_ptr35>>2] = $datesep;
     $vararg_ptr36 = (($vararg_buffer134) + 12|0);
     HEAP32[$vararg_ptr36>>2] = $enddate;
     (_pprintf($99,43232,$vararg_buffer134)|0);
     $102 = HEAP32[$0>>2]|0;
     $103 = HEAP32[$1>>2]|0;
     $104 = HEAP32[$3>>2]|0;
     _maybe_print_T($102,$103,$startdate,$104);
     break;
    }
    $105 = HEAP32[$1>>2]|0;
    $106 = ($105|0)!=(0|0);
    if ($106) {
     $107 = HEAP32[$1>>2]|0;
     $108 = (($107) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==(2);
     if ($110) {
      $156 = HEAP32[$0>>2]|0;
      $157 = (_gretl_model_get_int($156,43344)|0);
      HEAP32[$effn>>2] = $157;
      $158 = HEAP32[$0>>2]|0;
      $159 = (_gretl_model_get_int($158,43368)|0);
      HEAP32[$Tmin>>2] = $159;
      $160 = HEAP32[$0>>2]|0;
      $161 = (_gretl_model_get_int($160,43376)|0);
      HEAP32[$Tmax1>>2] = $161;
      $162 = HEAP32[$3>>2]|0;
      $163 = HEAP32[$0>>2]|0;
      $164 = HEAP32[$3>>2]|0;
      $165 = (_estimator_string($163,$164)|0);
      $166 = HEAP32[$0>>2]|0;
      $167 = (($166) + 24|0);
      $168 = HEAP32[$167>>2]|0;
      HEAP32[$vararg_buffer134>>2] = $165;
      $vararg_ptr56 = (($vararg_buffer134) + 4|0);
      HEAP32[$vararg_ptr56>>2] = $168;
      (_pprintf($162,43384,$vararg_buffer134)|0);
      $169 = HEAP32[$0>>2]|0;
      $170 = (($169) + 12|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = $171 & 1048576;
      $173 = ($172|0)!=(0);
      if ($173) {
       $174 = HEAP32[$0>>2]|0;
       $175 = (($174) + 12|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = $176 & 8192;
       $178 = ($177|0)!=(0);
       if ($178) {
        $179 = HEAP32[$3>>2]|0;
        _gretl_prn_newline($179);
        $180 = HEAP32[$3>>2]|0;
        (_pprintf($180,43416,$vararg_buffer134)|0);
       }
      }
      $181 = HEAP32[$effn>>2]|0;
      $182 = ($181|0)>(0);
      if ($182) {
       $183 = HEAP32[$3>>2]|0;
       _gretl_prn_newline($183);
       $184 = HEAP32[$3>>2]|0;
       $185 = HEAP32[$effn>>2]|0;
       HEAP32[$vararg_buffer134>>2] = $185;
       (_pprintf($184,43448,$vararg_buffer134)|0);
      }
      $186 = HEAP32[$Tmin>>2]|0;
      $187 = ($186|0)>(0);
      do {
       if ($187) {
        $188 = HEAP32[$Tmax1>>2]|0;
        $189 = ($188|0)>(0);
        if ($189) {
         $190 = HEAP32[$3>>2]|0;
         _gretl_prn_newline($190);
         $191 = HEAP32[$Tmin>>2]|0;
         $192 = HEAP32[$Tmax1>>2]|0;
         $193 = ($191|0)==($192|0);
         $194 = HEAP32[$3>>2]|0;
         $195 = HEAP32[$Tmin>>2]|0;
         if ($193) {
          HEAP32[$vararg_buffer134>>2] = $195;
          (_pprintf($194,43488,$vararg_buffer134)|0);
          break;
         } else {
          $196 = HEAP32[$Tmax1>>2]|0;
          HEAP32[$vararg_buffer134>>2] = $195;
          $vararg_ptr68 = (($vararg_buffer134) + 4|0);
          HEAP32[$vararg_ptr68>>2] = $196;
          (_pprintf($194,43512,$vararg_buffer134)|0);
          break;
         }
        }
       }
      } while(0);
      $197 = HEAP32[$0>>2]|0;
      $198 = (($197) + 8|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ($199|0)==(27);
      if (!($200)) {
       break;
      }
      $201 = HEAP32[$0>>2]|0;
      $202 = (($201) + 12|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = $203 & 2048;
      $205 = ($204|0)!=(0);
      if ($205) {
       $206 = HEAP32[$3>>2]|0;
       _gretl_prn_newline($206);
       $207 = HEAP32[$3>>2]|0;
       (_pputs($207,43560)|0);
      }
      $208 = HEAP32[$0>>2]|0;
      $209 = (($208) + 12|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = $210 & 8388608;
      $212 = ($211|0)!=(0);
      if (!($212)) {
       break;
      }
      $213 = HEAP32[$3>>2]|0;
      _gretl_prn_newline($213);
      $214 = HEAP32[$3>>2]|0;
      (_pputs($214,43592)|0);
      break;
     }
    }
    $111 = HEAP32[$0>>2]|0;
    $112 = (($111) + 20|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = HEAP32[$0>>2]|0;
    $115 = (($114) + 16|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($113) - ($116))|0;
    $118 = (($117) + 1)|0;
    HEAP32[$Tmax>>2] = $118;
    $119 = HEAP32[$0>>2]|0;
    $120 = HEAP32[$3>>2]|0;
    $121 = (_estimator_string($119,$120)|0);
    HEAP32[$estr>>2] = $121;
    $122 = HEAP32[$estr>>2]|0;
    $123 = (_char_len($122)|0);
    $124 = ($123|0)>(32);
    if ($124) {
     HEAP32[$fmt>>2] = 43264;
     $125 = HEAP32[$3>>2]|0;
     $126 = HEAP32[$fmt>>2]|0;
     $127 = HEAP32[$estr>>2]|0;
     $128 = HEAP32[$tex>>2]|0;
     $129 = ($128|0)!=(0);
     $130 = $129 ? 43280 : 41800;
     HEAP32[$vararg_buffer134>>2] = $127;
     $vararg_ptr40 = (($vararg_buffer134) + 4|0);
     HEAP32[$vararg_ptr40>>2] = $startdate;
     $vararg_ptr41 = (($vararg_buffer134) + 8|0);
     HEAP32[$vararg_ptr41>>2] = $130;
     $vararg_ptr42 = (($vararg_buffer134) + 12|0);
     HEAP32[$vararg_ptr42>>2] = $enddate;
     (_pprintf($125,$126,$vararg_buffer134)|0);
     $131 = HEAP32[$0>>2]|0;
     $132 = HEAP32[$1>>2]|0;
     $133 = HEAP32[$3>>2]|0;
     _maybe_print_T($131,$132,$startdate,$133);
    } else {
     HEAP32[$fmt>>2] = 43232;
     $134 = HEAP32[$3>>2]|0;
     $135 = HEAP32[$fmt>>2]|0;
     $136 = HEAP32[$estr>>2]|0;
     HEAP32[$vararg_buffer134>>2] = $136;
     $vararg_ptr46 = (($vararg_buffer134) + 4|0);
     HEAP32[$vararg_ptr46>>2] = $startdate;
     $vararg_ptr47 = (($vararg_buffer134) + 8|0);
     HEAP32[$vararg_ptr47>>2] = $datesep;
     $vararg_ptr48 = (($vararg_buffer134) + 12|0);
     HEAP32[$vararg_ptr48>>2] = $enddate;
     (_pprintf($134,$135,$vararg_buffer134)|0);
     $137 = HEAP32[$0>>2]|0;
     $138 = HEAP32[$1>>2]|0;
     $139 = HEAP32[$3>>2]|0;
     _maybe_print_T($137,$138,$startdate,$139);
    }
    $140 = HEAP32[$0>>2]|0;
    $141 = (($140) + 8|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)==(51);
    $144 = HEAP32[$Tmax>>2]|0;
    $145 = HEAP32[$0>>2]|0;
    if ($143) {
     $146 = (_gretl_model_get_int($145,33904)|0);
     $147 = (($144) - ($146))|0;
     HEAP32[$mc>>2] = $147;
    } else {
     $148 = (($145) + 24|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (($144) - ($149))|0;
     HEAP32[$mc>>2] = $150;
    }
    $151 = HEAP32[$mc>>2]|0;
    $152 = ($151|0)>(0);
    if ($152) {
     $153 = HEAP32[$3>>2]|0;
     _gretl_prn_newline($153);
     $154 = HEAP32[$3>>2]|0;
     $155 = HEAP32[$mc>>2]|0;
     HEAP32[$vararg_buffer134>>2] = 43296;
     $vararg_ptr52 = (($vararg_buffer134) + 4|0);
     HEAP32[$vararg_ptr52>>2] = $155;
     (_pprintf($154,43288,$vararg_buffer134)|0);
    }
   }
  }
 } while(0);
 $215 = HEAP32[$csv>>2]|0;
 $216 = ($215|0)!=(0);
 if ($216) {
  $217 = HEAP32[$3>>2]|0;
  (_pputc($217,34)|0);
 }
 $218 = HEAP32[$0>>2]|0;
 $219 = (($218) + 72|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = ($220|0)!=(15);
 if ($221) {
  $222 = HEAP32[$0>>2]|0;
  $223 = (($222) + 72|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = ($224|0)!=(16);
  if ($225) {
   $226 = HEAP32[$3>>2]|0;
   _gretl_prn_newline($226);
  }
 }
 $227 = HEAP32[$0>>2]|0;
 $228 = (($227) + 8|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = ($229|0)==(9);
 if ($230) {
  $231 = HEAP32[$3>>2]|0;
  $232 = (_plain_format($231)|0);
  $233 = ($232|0)!=(0);
  if ($233) {
   $234 = HEAP32[$0>>2]|0;
   $235 = HEAP32[$3>>2]|0;
   _arma_extra_info($234,$235);
  }
 }
 $236 = HEAP32[$csv>>2]|0;
 $237 = ($236|0)!=(0);
 if ($237) {
  $238 = HEAP32[$3>>2]|0;
  (_pputc($238,34)|0);
 }
 $239 = HEAP32[$0>>2]|0;
 $240 = (($239) + 72|0);
 $241 = HEAP32[$240>>2]|0;
 $242 = ($241|0)==(1);
 L85: do {
  if ($242) {
   label = 67;
  } else {
   $243 = HEAP32[$0>>2]|0;
   $244 = (($243) + 72|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = ($245|0)==(2);
   if ($246) {
    label = 67;
   } else {
    $247 = HEAP32[$0>>2]|0;
    $248 = (($247) + 72|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = ($249|0)==(4);
    if ($250) {
     label = 67;
    } else {
     $255 = HEAP32[$0>>2]|0;
     $256 = (($255) + 72|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = ($257|0)==(7);
     if (!($258)) {
      $259 = HEAP32[$0>>2]|0;
      $260 = (($259) + 72|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = ($261|0)==(19);
      if (!($262)) {
       $267 = HEAP32[$0>>2]|0;
       $268 = (($267) + 72|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($269|0)==(20);
       $271 = HEAP32[$0>>2]|0;
       if ($270) {
        $272 = (($271) + 12|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = $273 & 131072;
        $275 = ($274|0)!=(0);
        if ($275) {
         HEAP32[$fmt2>>2] = 43696;
        } else {
         HEAP32[$fmt2>>2] = 43736;
        }
        $276 = HEAP32[$3>>2]|0;
        HEAP32[$vararg_buffer134>>2] = 43624;
        (_pprintf($276,38232,$vararg_buffer134)|0);
        $277 = HEAP32[$3>>2]|0;
        $278 = HEAP32[$fmt2>>2]|0;
        $279 = HEAP32[$tex>>2]|0;
        $280 = ($279|0)!=(0);
        $281 = $280 ? 43672 : 43688;
        HEAP32[$vararg_buffer134>>2] = $281;
        (_pprintf($277,$278,$vararg_buffer134)|0);
        break;
       }
       $282 = (($271) + 72|0);
       $283 = HEAP32[$282>>2]|0;
       $284 = ($283|0)==(6);
       if ($284) {
        $285 = HEAP32[$3>>2]|0;
        $286 = HEAP32[$tex>>2]|0;
        $287 = ($286|0)!=(0);
        $288 = $287 ? 43752 : 43760;
        HEAP32[$vararg_buffer134>>2] = 43624;
        $vararg_ptr86 = (($vararg_buffer134) + 4|0);
        HEAP32[$vararg_ptr86>>2] = $288;
        (_pprintf($285,43616,$vararg_buffer134)|0);
        break;
       }
       $289 = HEAP32[$0>>2]|0;
       $290 = (($289) + 8|0);
       $291 = HEAP32[$290>>2]|0;
       $292 = ($291|0)==(83);
       if (!($292)) {
        $293 = HEAP32[$0>>2]|0;
        $294 = (($293) + 8|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($295|0)==(76);
        if (!($296)) {
         $297 = HEAP32[$0>>2]|0;
         $298 = (($297) + 8|0);
         $299 = HEAP32[$298>>2]|0;
         $300 = ($299|0)==(47);
         if (!($300)) {
          $311 = HEAP32[$0>>2]|0;
          $312 = (($311) + 8|0);
          $313 = HEAP32[$312>>2]|0;
          $314 = ($313|0)==(9);
          $315 = HEAP32[$0>>2]|0;
          if ($314) {
           $316 = HEAP32[$1>>2]|0;
           $317 = HEAP32[$3>>2]|0;
           _print_arma_depvar($315,$316,$317);
           break;
          }
          $318 = (($315) + 8|0);
          $319 = HEAP32[$318>>2]|0;
          $320 = ($319|0)==(58);
          $321 = HEAP32[$0>>2]|0;
          if ($320) {
           $322 = HEAP32[$1>>2]|0;
           $323 = HEAP32[$3>>2]|0;
           _print_intreg_depvar($321,$322,$323);
           break;
          }
          $324 = (($321) + 8|0);
          $325 = HEAP32[$324>>2]|0;
          $326 = ($325|0)==(10);
          if ($326) {
           HEAP32[$dvnl>>2] = 0;
           break;
          }
          $327 = HEAP32[$0>>2]|0;
          $328 = HEAP32[$1>>2]|0;
          $329 = (_gretl_model_get_depvar_name($327,$328)|0);
          HEAP32[$dvname>>2] = $329;
          $330 = HEAP32[$tex>>2]|0;
          $331 = ($330|0)!=(0);
          L115: do {
           if ($331) {
            $332 = HEAP32[$0>>2]|0;
            $333 = (($332) + 72|0);
            $334 = HEAP32[$333>>2]|0;
            $335 = ($334|0)==(16);
            if ($335) {
             $336 = HEAP32[$dvname>>2]|0;
             _tex_vecm_depvar_name($vname,$336);
             break;
            }
            $337 = HEAP32[$0>>2]|0;
            $338 = (($337) + 8|0);
            $339 = HEAP32[$338>>2]|0;
            $340 = ($339|0)==(7);
            do {
             if (!($340)) {
              $341 = HEAP32[$0>>2]|0;
              $342 = (($341) + 8|0);
              $343 = HEAP32[$342>>2]|0;
              $344 = ($343|0)==(27);
              if ($344) {
               break;
              }
              $346 = HEAP32[$dvname>>2]|0;
              (_tex_escape($vname,$346)|0);
              break L115;
             }
            } while(0);
            $345 = HEAP32[$dvname>>2]|0;
            _tex_dpd_depvar_name($vname,$345);
           }
          } while(0);
          $347 = HEAP32[$0>>2]|0;
          $348 = (($347) + 72|0);
          $349 = HEAP32[$348>>2]|0;
          $350 = ($349|0)==(15);
          do {
           if (!($350)) {
            $351 = HEAP32[$0>>2]|0;
            $352 = (($351) + 72|0);
            $353 = HEAP32[$352>>2]|0;
            $354 = ($353|0)==(16);
            if ($354) {
             break;
            }
            $360 = HEAP32[$3>>2]|0;
            $361 = HEAP32[$tex>>2]|0;
            $362 = ($361|0)!=(0);
            $363 = HEAP32[$dvname>>2]|0;
            $364 = $362 ? $vname : $363;
            HEAP32[$vararg_buffer134>>2] = 43624;
            $vararg_ptr93 = (($vararg_buffer134) + 4|0);
            HEAP32[$vararg_ptr93>>2] = $364;
            (_pprintf($360,43616,$vararg_buffer134)|0);
            break L85;
           }
          } while(0);
          $355 = HEAP32[$3>>2]|0;
          $356 = HEAP32[$tex>>2]|0;
          $357 = ($356|0)!=(0);
          $358 = HEAP32[$dvname>>2]|0;
          $359 = $357 ? $vname : $358;
          (_pputs($355,$359)|0);
          break;
         }
        }
       }
       $301 = HEAP32[$0>>2]|0;
       $302 = (($301) + 236|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = ($303|0)!=(0|0);
       if (!($304)) {
        HEAP32[$dvnl>>2] = 0;
        break;
       }
       $305 = HEAP32[$tex>>2]|0;
       $306 = ($305|0)!=(0);
       $307 = HEAP32[$3>>2]|0;
       $308 = HEAP32[$0>>2]|0;
       $309 = (($308) + 236|0);
       $310 = HEAP32[$309>>2]|0;
       if ($306) {
        HEAP32[$vararg_buffer134>>2] = $310;
        (_pprintf($307,43768,$vararg_buffer134)|0);
        break;
       } else {
        (_pputs($307,$310)|0);
        break;
       }
      }
     }
     $263 = HEAP32[$3>>2]|0;
     $264 = HEAP32[$tex>>2]|0;
     $265 = ($264|0)!=(0);
     $266 = $265 ? 43672 : 43688;
     HEAP32[$vararg_buffer134>>2] = 43624;
     $vararg_ptr76 = (($vararg_buffer134) + 4|0);
     HEAP32[$vararg_ptr76>>2] = $266;
     (_pprintf($263,43616,$vararg_buffer134)|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 67) {
  $251 = HEAP32[$3>>2]|0;
  $252 = HEAP32[$tex>>2]|0;
  $253 = ($252|0)!=(0);
  $254 = $253 ? 43648 : 43664;
  HEAP32[$vararg_buffer134>>2] = 43624;
  $vararg_ptr72 = (($vararg_buffer134) + 4|0);
  HEAP32[$vararg_ptr72>>2] = $254;
  (_pprintf($251,43616,$vararg_buffer134)|0);
 }
 $365 = HEAP32[$csv>>2]|0;
 $366 = ($365|0)!=(0);
 if ($366) {
  $367 = HEAP32[$3>>2]|0;
  (_pputc($367,34)|0);
 }
 $368 = HEAP32[$dvnl>>2]|0;
 $369 = ($368|0)!=(0);
 if ($369) {
  $370 = HEAP32[$3>>2]|0;
  _gretl_prn_newline($370);
 }
 $371 = HEAP32[$0>>2]|0;
 $372 = (($371) + 8|0);
 $373 = HEAP32[$372>>2]|0;
 $374 = ($373|0)==(127);
 $375 = HEAP32[$0>>2]|0;
 do {
  if ($374) {
   $376 = (_gretl_model_get_int($375,32640)|0);
   HEAP32[$method>>2] = $376;
   $377 = HEAP32[$method>>2]|0;
   $378 = ($377|0)!=(2);
   $379 = HEAP32[$method>>2]|0;
   $380 = ($379|0)!=(3);
   $or$cond = $378 & $380;
   if ($or$cond) {
    $381 = HEAP32[$0>>2]|0;
    $382 = HEAP32[$1>>2]|0;
    $383 = HEAP32[$3>>2]|0;
    (_print_ivreg_instruments($381,$382,$383)|0);
   }
  } else {
   $384 = (($375) + 8|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = ($385|0)==(63);
   $387 = HEAP32[$0>>2]|0;
   if ($386) {
    $388 = (+_gretl_model_get_double($387,36152));
    HEAPF64[$tau>>3] = $388;
    $389 = +HEAPF64[$tau>>3];
    $390 = $389 == 1.79769313486231570815E+308;
    if ($390) {
     break;
    }
    $391 = HEAP32[$tex>>2]|0;
    $392 = ($391|0)!=(0);
    $393 = HEAP32[$3>>2]|0;
    $394 = +HEAPF64[$tau>>3];
    if ($392) {
     HEAPF64[tempDoublePtr>>3]=$394;HEAP32[$vararg_buffer134>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer134+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($393,43784,$vararg_buffer134)|0);
    } else {
     HEAPF64[tempDoublePtr>>3]=$394;HEAP32[$vararg_buffer134>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer134+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($393,43800,$vararg_buffer134)|0);
    }
    $395 = HEAP32[$3>>2]|0;
    _gretl_prn_newline($395);
    break;
   }
   $396 = (($387) + 8|0);
   $397 = HEAP32[$396>>2]|0;
   $398 = ($397|0)==(51);
   $399 = HEAP32[$0>>2]|0;
   if ($398) {
    $400 = HEAP32[$1>>2]|0;
    $401 = (_heckit_selvar_name($399,$400)|0);
    HEAP32[$selvar>>2] = $401;
    $402 = HEAP32[$selvar>>2]|0;
    $403 = ($402|0)!=(0|0);
    if (!($403)) {
     break;
    }
    $404 = HEAP32[$csv>>2]|0;
    $405 = ($404|0)!=(0);
    if ($405) {
     $406 = HEAP32[$3>>2]|0;
     (_pputc($406,34)|0);
    }
    $407 = HEAP32[$tex>>2]|0;
    $408 = ($407|0)!=(0);
    if ($408) {
     $409 = HEAP32[$selvar>>2]|0;
     (_tex_escape($vname,$409)|0);
    }
    $410 = HEAP32[$3>>2]|0;
    $411 = HEAP32[$tex>>2]|0;
    $412 = ($411|0)!=(0);
    $413 = HEAP32[$selvar>>2]|0;
    $414 = $412 ? $vname : $413;
    HEAP32[$vararg_buffer134>>2] = 43816;
    $vararg_ptr103 = (($vararg_buffer134) + 4|0);
    HEAP32[$vararg_ptr103>>2] = $414;
    (_pprintf($410,43616,$vararg_buffer134)|0);
    $415 = HEAP32[$csv>>2]|0;
    $416 = ($415|0)!=(0);
    if ($416) {
     $417 = HEAP32[$3>>2]|0;
     (_pputc($417,34)|0);
    }
    $418 = HEAP32[$3>>2]|0;
    (_pputc($418,10)|0);
    break;
   }
   $419 = (($399) + 8|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = ($420|0)==(6);
   $422 = HEAP32[$0>>2]|0;
   if (!($421)) {
    $437 = (($422) + 8|0);
    $438 = HEAP32[$437>>2]|0;
    $439 = ($438|0)==(98);
    if (!($439)) {
     break;
    }
    $440 = HEAP32[$0>>2]|0;
    $441 = (($440) + 12|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = $442 & 16;
    $444 = ($443|0)!=(0);
    if (!($444)) {
     break;
    }
    $445 = HEAP32[$0>>2]|0;
    $446 = (_gretl_model_get_int($445,43872)|0);
    HEAP32[$qp>>2] = $446;
    $447 = HEAP32[$qp>>2]|0;
    $448 = ($447|0)>(0);
    if (!($448)) {
     break;
    }
    $449 = HEAP32[$3>>2]|0;
    $450 = HEAP32[$qp>>2]|0;
    HEAP32[$vararg_buffer134>>2] = $450;
    (_pprintf($449,43888,$vararg_buffer134)|0);
    $451 = HEAP32[$3>>2]|0;
    _gretl_prn_newline($451);
    break;
   }
   $423 = (($422) + 224|0);
   $424 = HEAP32[$423>>2]|0;
   $425 = ($424|0)!=(0|0);
   if ($425) {
    $426 = HEAP32[$0>>2]|0;
    $427 = (($426) + 224|0);
    $428 = HEAP32[$427>>2]|0;
    $429 = (($428) + 4|0);
    $430 = HEAP32[$429>>2]|0;
    $431 = +HEAPF64[$430>>3];
    HEAPF64[$r>>3] = $431;
    $432 = HEAP32[$tex>>2]|0;
    $433 = ($432|0)!=(0);
    $434 = HEAP32[$3>>2]|0;
    $435 = +HEAPF64[$r>>3];
    if ($433) {
     HEAPF64[tempDoublePtr>>3]=$435;HEAP32[$vararg_buffer134>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer134+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($434,43840,$vararg_buffer134)|0);
    } else {
     HEAPF64[tempDoublePtr>>3]=$435;HEAP32[$vararg_buffer134>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer134+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($434,43856,$vararg_buffer134)|0);
    }
    $436 = HEAP32[$3>>2]|0;
    _gretl_prn_newline($436);
   }
  }
 } while(0);
 $452 = HEAP32[$0>>2]|0;
 $453 = HEAP32[$1>>2]|0;
 $454 = HEAP32[$3>>2]|0;
 _print_model_vcv_info($452,$453,$454);
 $455 = HEAP32[$0>>2]|0;
 $456 = (($455) + 8|0);
 $457 = HEAP32[$456>>2]|0;
 $458 = ($457|0)==(91);
 if ($458) {
  $459 = HEAP32[$0>>2]|0;
  $460 = (($459) + 12|0);
  $461 = HEAP32[$460>>2]|0;
  $462 = $461 & 4194304;
  $463 = ($462|0)!=(0);
  if ($463) {
   $464 = HEAP32[$0>>2]|0;
   $465 = (($464) + 72|0);
   $466 = HEAP32[$465>>2]|0;
   $467 = ($466|0)!=(0);
   if ($467) {
    label = 144;
   } else {
    $468 = HEAP32[$tex>>2]|0;
    $469 = ($468|0)!=(0);
    if ($469) {
     $470 = HEAP32[$3>>2]|0;
     (_pputs($470,43920)|0);
    }
    $471 = HEAP32[$0>>2]|0;
    $472 = (_gretl_model_get_int($471,31944)|0);
    $473 = ($472|0)!=(0);
    $474 = HEAP32[$3>>2]|0;
    if ($473) {
     (_pprintf($474,43928,$vararg_buffer134)|0);
    } else {
     (_pprintf($474,43976,$vararg_buffer134)|0);
    }
    $475 = HEAP32[$3>>2]|0;
    (_pputc($475,10)|0);
   }
  } else {
   label = 144;
  }
 } else {
  label = 144;
 }
 do {
  if ((label|0) == 144) {
   $476 = HEAP32[$0>>2]|0;
   $477 = (($476) + 8|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = ($478|0)==(133);
   if ($479) {
    $480 = HEAP32[$0>>2]|0;
    $481 = (($480) + 72|0);
    $482 = HEAP32[$481>>2]|0;
    $483 = ($482|0)!=(0);
    if (!($483)) {
     $484 = HEAP32[$tex>>2]|0;
     $485 = ($484|0)!=(0);
     if ($485) {
      $486 = HEAP32[$0>>2]|0;
      $487 = (($486) + 68|0);
      $488 = HEAP32[$487>>2]|0;
      $489 = HEAP32[$1>>2]|0;
      $490 = (($489) + 68|0);
      $491 = HEAP32[$490>>2]|0;
      $492 = (($491) + ($488<<2)|0);
      $493 = HEAP32[$492>>2]|0;
      (_tex_escape($vname,$493)|0);
     }
     $494 = HEAP32[$csv>>2]|0;
     $495 = ($494|0)!=(0);
     if ($495) {
      $496 = HEAP32[$3>>2]|0;
      (_pputc($496,34)|0);
     }
     $497 = HEAP32[$3>>2]|0;
     $498 = HEAP32[$tex>>2]|0;
     $499 = ($498|0)!=(0);
     if ($499) {
      $508 = $vname;
     } else {
      $500 = HEAP32[$0>>2]|0;
      $501 = (($500) + 68|0);
      $502 = HEAP32[$501>>2]|0;
      $503 = HEAP32[$1>>2]|0;
      $504 = (($503) + 68|0);
      $505 = HEAP32[$504>>2]|0;
      $506 = (($505) + ($502<<2)|0);
      $507 = HEAP32[$506>>2]|0;
      $508 = $507;
     }
     HEAP32[$vararg_buffer134>>2] = 44024;
     $vararg_ptr120 = (($vararg_buffer134) + 4|0);
     HEAP32[$vararg_ptr120>>2] = $508;
     (_pprintf($497,43616,$vararg_buffer134)|0);
     $509 = HEAP32[$csv>>2]|0;
     $510 = ($509|0)!=(0);
     if ($510) {
      $511 = HEAP32[$3>>2]|0;
      (_pputc($511,34)|0);
     }
     $512 = HEAP32[$3>>2]|0;
     (_pputc($512,10)|0);
     break;
    }
   }
   $513 = HEAP32[$0>>2]|0;
   $514 = (($513) + 8|0);
   $515 = HEAP32[$514>>2]|0;
   $516 = ($515|0)==(8);
   if ($516) {
    $517 = HEAP32[$csv>>2]|0;
    $518 = ($517|0)!=(0);
    if ($518) {
     $519 = HEAP32[$3>>2]|0;
     (_pputc($519,34)|0);
    }
    $520 = HEAP32[$3>>2]|0;
    $521 = HEAP32[$tex>>2]|0;
    $522 = ($521|0)!=(0);
    $523 = $522 ? 44048 : 44072;
    HEAP32[$vararg_buffer134>>2] = 44024;
    $vararg_ptr124 = (($vararg_buffer134) + 4|0);
    HEAP32[$vararg_ptr124>>2] = $523;
    (_pprintf($520,43616,$vararg_buffer134)|0);
    $524 = HEAP32[$csv>>2]|0;
    $525 = ($524|0)!=(0);
    if ($525) {
     $526 = HEAP32[$3>>2]|0;
     (_pputc($526,34)|0);
    }
    $527 = HEAP32[$3>>2]|0;
    (_pputc($527,10)|0);
    break;
   }
   $528 = HEAP32[$0>>2]|0;
   $529 = (($528) + 8|0);
   $530 = HEAP32[$529>>2]|0;
   $531 = ($530|0)==(6);
   if ($531) {
    $532 = HEAP32[$tex>>2]|0;
    $533 = ($532|0)!=(0);
    if (!($533)) {
     break;
    }
    $534 = HEAP32[$3>>2]|0;
    $535 = HEAP32[$0>>2]|0;
    $536 = (+_gretl_model_get_double($535,44104));
    HEAPF64[tempDoublePtr>>3]=$536;HEAP32[$vararg_buffer134>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer134+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($534,44080,$vararg_buffer134)|0);
    break;
   }
   $537 = HEAP32[$0>>2]|0;
   $538 = (($537) + 8|0);
   $539 = HEAP32[$538>>2]|0;
   $540 = ($539|0)==(68);
   if ($540) {
    $541 = HEAP32[$tex>>2]|0;
    $542 = ($541|0)!=(0);
    $543 = HEAP32[$3>>2]|0;
    $544 = HEAP32[$0>>2]|0;
    $545 = (+_gretl_model_get_double($544,44160));
    if ($542) {
     HEAPF64[tempDoublePtr>>3]=$545;HEAP32[$vararg_buffer134>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer134+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($543,44112,$vararg_buffer134)|0);
     break;
    } else {
     HEAPF64[tempDoublePtr>>3]=$545;HEAP32[$vararg_buffer134>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer134+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($543,44168,$vararg_buffer134)|0);
     break;
    }
   }
  }
 } while(0);
 $546 = HEAP32[$3>>2]|0;
 $547 = (_plain_format($546)|0);
 $548 = ($547|0)!=(0);
 if ($548) {
  $549 = HEAP32[$0>>2]|0;
  $550 = (($549) + 8|0);
  $551 = HEAP32[$550>>2]|0;
  $552 = ($551|0)==(127);
  if ($552) {
   $553 = HEAP32[$0>>2]|0;
   $554 = (_gretl_model_get_data($553,44200)|0);
   $555 = ($554|0)!=(0|0);
   if ($555) {
    $556 = HEAP32[$0>>2]|0;
    $557 = HEAP32[$1>>2]|0;
    $558 = HEAP32[$3>>2]|0;
    _print_ivreg_droplist($556,$557,$558);
   }
  }
 }
 $559 = HEAP32[$3>>2]|0;
 $560 = (_plain_format($559)|0);
 $561 = ($560|0)!=(0);
 if ($561) {
  $562 = HEAP32[$0>>2]|0;
  $563 = (_gretl_model_get_data($562,44216)|0);
  $564 = ($563|0)!=(0|0);
  if ($564) {
   $565 = HEAP32[$0>>2]|0;
   $566 = HEAP32[$1>>2]|0;
   $567 = HEAP32[$3>>2]|0;
   _print_model_zerolist($565,$566,$567);
  }
  $568 = HEAP32[$0>>2]|0;
  $569 = (_gretl_model_get_data($568,44232)|0);
  $570 = ($569|0)!=(0|0);
  if ($570) {
   $571 = HEAP32[$0>>2]|0;
   $572 = HEAP32[$1>>2]|0;
   $573 = HEAP32[$3>>2]|0;
   _print_model_droplist($571,$572,$573);
  }
 }
 $574 = HEAP32[$3>>2]|0;
 $575 = (_plain_format($574)|0);
 $576 = ($575|0)!=(0);
 if ($576) {
  $577 = HEAP32[$0>>2]|0;
  $578 = (($577) + 8|0);
  $579 = HEAP32[$578>>2]|0;
  $580 = ($579|0)==(63);
  if ($580) {
   $581 = HEAP32[$0>>2]|0;
   $582 = HEAP32[$3>>2]|0;
   _maybe_print_lad_warning($581,$582);
  }
 }
 $583 = HEAP32[$3>>2]|0;
 $584 = (_plain_format($583)|0);
 $585 = ($584|0)!=(0);
 do {
  if ($585) {
   $586 = HEAP32[$0>>2]|0;
   $587 = (($586) + 8|0);
   $588 = HEAP32[$587>>2]|0;
   $589 = ($588|0)==(9);
   if (!($589)) {
    $590 = HEAP32[$0>>2]|0;
    $591 = (($590) + 8|0);
    $592 = HEAP32[$591>>2]|0;
    $593 = ($592|0)==(98);
    if (!($593)) {
     break;
    }
    $594 = HEAP32[$0>>2]|0;
    $595 = (($594) + 12|0);
    $596 = HEAP32[$595>>2]|0;
    $597 = $596 & 16;
    $598 = ($597|0)!=(0);
    if (!($598)) {
     break;
    }
   }
   $599 = HEAP32[$0>>2]|0;
   $600 = HEAP32[$3>>2]|0;
   _maybe_print_hessian_warning($599,$600);
  }
 } while(0);
 $601 = HEAP32[$0>>2]|0;
 $602 = (($601) + 32|0);
 $603 = HEAP32[$602>>2]|0;
 $604 = ($603|0)==(0|0);
 if ($604) {
  $605 = HEAP32[$0>>2]|0;
  $606 = (_gretl_model_get_int($605,32624)|0);
  $607 = ($606|0)!=(0);
  if ($607) {
   $608 = HEAP32[$3>>2]|0;
   $609 = HEAP32[$0>>2]|0;
   $610 = (($609) + 24|0);
   $611 = HEAP32[$610>>2]|0;
   HEAP32[$vararg_buffer134>>2] = 44256;
   $vararg_ptr137 = (($vararg_buffer134) + 4|0);
   HEAP32[$vararg_ptr137>>2] = $611;
   (_pprintf($608,44248,$vararg_buffer134)|0);
  }
 }
 $612 = HEAP32[$3>>2]|0;
 $613 = (_rtf_format($612)|0);
 $614 = ($613|0)!=(0);
 $615 = HEAP32[$3>>2]|0;
 if ($614) {
  (_pputs($615,33888)|0);
  STACKTOP = sp;return;
 } else {
  (_pputc($615,10)|0);
  STACKTOP = sp;return;
 }
}
function _plain_print_coefficients($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $prn;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   HEAP32[$0>>2] = 0;
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (_gretl_model_get_data($8,34928)|0);
   $10 = ($9|0)!=(0|0);
   $11 = HEAP32[$1>>2]|0;
   if ($10) {
    $12 = HEAP32[$2>>2]|0;
    $13 = HEAP32[$3>>2]|0;
    $14 = (_print_rq_sequence($11,$12,$13)|0);
    HEAP32[$0>>2] = $14;
    break;
   }
   $15 = (($11) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(81);
   $18 = HEAP32[$1>>2]|0;
   $19 = HEAP32[$2>>2]|0;
   $20 = HEAP32[$3>>2]|0;
   if ($17) {
    $21 = (_plain_print_mp_coeffs($18,$19,$20)|0);
    HEAP32[$0>>2] = $21;
    break;
   } else {
    $22 = (_plain_print_coeffs($18,$19,$20)|0);
    HEAP32[$0>>2] = $22;
    break;
   }
  }
 } while(0);
 $23 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($23|0);
}
function _alt_print_coefficients($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $adfnum = 0;
 var $cols = 0, $err = 0, $gotnan = 0, $i = 0, $intervals = 0, $mc = 0, $nc = 0, $seppos = 0, $sepstr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $0 = sp + 152|0;
 $1 = sp + 148|0;
 $2 = sp + 144|0;
 $3 = sp + 140|0;
 $intervals = sp + 136|0;
 $sepstr = sp + 132|0;
 $seppos = sp + 128|0;
 $mc = sp;
 $adfnum = sp + 124|0;
 $nc = sp + 120|0;
 $cols = sp + 116|0;
 $gotnan = sp + 112|0;
 $i = sp + 108|0;
 $err = sp + 104|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $prn;
 HEAP32[$intervals>>2] = 0;
 HEAP32[$sepstr>>2] = 0;
 HEAP32[$seppos>>2] = -1;
 HEAP32[$adfnum>>2] = -1;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$nc>>2] = $6;
 HEAP32[$gotnan>>2] = 0;
 HEAP32[$err>>2] = 0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (_gretl_model_get_data($7,34928)|0);
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[$3>>2]|0;
  (_pputs($10,34944)|0);
  HEAP32[$0>>2] = 1;
  $138 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($138|0);
 }
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$3>>2]|0;
 $16 = (_alt_print_coeff_table_start($11,$14,$15)|0);
 HEAP32[$cols>>2] = $16;
 $17 = HEAP32[$1>>2]|0;
 $18 = (($17) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(91);
 if ($20) {
  $21 = HEAP32[$1>>2]|0;
  $22 = (($21) + 60|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) - 1)|0;
  HEAP32[$nc>>2] = $25;
 }
 $26 = HEAP32[$1>>2]|0;
 (_gretl_model_get_coeff_separator($26,$sepstr,$seppos)|0);
 $27 = HEAP32[$seppos>>2]|0;
 $28 = ($27|0)==(-1);
 if ($28) {
  $29 = HEAP32[$1>>2]|0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(45);
  if ($32) {
   $33 = HEAP32[$1>>2]|0;
   $34 = (($33) + 60|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)>(4);
   if ($37) {
    $38 = HEAP32[$1>>2]|0;
    $39 = (($38) + 60|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) - 4)|0;
    HEAP32[$seppos>>2] = $42;
   }
  }
 }
 $43 = HEAP32[$1>>2]|0;
 $44 = (($43) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(63);
 if ($46) {
  $47 = HEAP32[$1>>2]|0;
  $48 = (_gretl_model_get_data($47,34976)|0);
  HEAP32[$intervals>>2] = $48;
 }
 $49 = HEAP32[$1>>2]|0;
 $50 = (($49) + 72|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(9);
 if ($52) {
  label = 13;
 } else {
  $53 = HEAP32[$1>>2]|0;
  $54 = (($53) + 72|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(10);
  if ($56) {
   label = 13;
  }
 }
 if ((label|0) == 13) {
  $57 = HEAP32[$1>>2]|0;
  $58 = (_gretl_model_get_int($57,34992)|0);
  HEAP32[$adfnum>>2] = $58;
 }
 $59 = HEAP32[$1>>2]|0;
 $60 = (($59) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(10);
 if ($62) {
  $63 = HEAP32[$1>>2]|0;
  $64 = HEAP32[$2>>2]|0;
  $65 = (_gretl_model_get_depvar_name($63,$64)|0);
  $66 = HEAP32[$3>>2]|0;
  _print_coeff_left_string($65,$66);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $67 = HEAP32[$i>>2]|0;
  $68 = HEAP32[$nc>>2]|0;
  $69 = ($67|0)<($68|0);
  $70 = HEAP32[$1>>2]|0;
  if (!($69)) {
   break;
  }
  $71 = HEAP32[$2>>2]|0;
  $72 = HEAP32[$i>>2]|0;
  $73 = HEAP32[$adfnum>>2]|0;
  $74 = HEAP32[$3>>2]|0;
  $75 = (_prepare_model_coeff($70,$71,$72,$73,$mc,$74)|0);
  HEAP32[$err>>2] = $75;
  $76 = HEAP32[$err>>2]|0;
  $77 = ($76|0)!=(0);
  if ($77) {
   HEAP32[$gotnan>>2] = 1;
  }
  $78 = HEAP32[$i>>2]|0;
  $79 = HEAP32[$seppos>>2]|0;
  $80 = ($78|0)==($79|0);
  do {
   if ($80) {
    $81 = HEAP32[$1>>2]|0;
    $82 = (($81) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)==(10);
    $85 = HEAP32[$sepstr>>2]|0;
    if ($84) {
     $86 = HEAP32[$3>>2]|0;
     _print_coeff_left_string($85,$86);
     break;
    } else {
     $87 = HEAP32[$cols>>2]|0;
     $88 = HEAP32[$3>>2]|0;
     _print_coeff_separator($85,$87,$88);
     break;
    }
   }
  } while(0);
  $89 = HEAP32[$intervals>>2]|0;
  $90 = ($89|0)!=(0|0);
  if ($90) {
   $91 = HEAP32[$intervals>>2]|0;
   $92 = HEAP32[$91>>2]|0;
   $93 = 0;
   $94 = HEAP32[$i>>2]|0;
   $95 = (($93) + ($94))|0;
   $96 = HEAP32[$intervals>>2]|0;
   $97 = (($96) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($95<<3)|0);
   $100 = +HEAPF64[$99>>3];
   $101 = (($mc) + 40|0);
   HEAPF64[$101>>3] = $100;
   $102 = HEAP32[$intervals>>2]|0;
   $103 = HEAP32[$102>>2]|0;
   $104 = $103;
   $105 = HEAP32[$i>>2]|0;
   $106 = (($104) + ($105))|0;
   $107 = HEAP32[$intervals>>2]|0;
   $108 = (($107) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + ($106<<3)|0);
   $111 = +HEAPF64[$110>>3];
   $112 = (($mc) + 48|0);
   HEAPF64[$112>>3] = $111;
   $113 = (($mc) + 56|0);
   HEAP32[$113>>2] = 0;
  }
  $114 = HEAP32[$3>>2]|0;
  _alt_print_coeff($mc,$114);
  $115 = HEAP32[$i>>2]|0;
  $116 = (($115) + 1)|0;
  HEAP32[$i>>2] = $116;
 }
 $117 = (($70) + 8|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)==(5);
 $120 = HEAP32[$1>>2]|0;
 do {
  if ($119) {
   $121 = HEAP32[$3>>2]|0;
   _alt_print_rho_terms($120,$121);
  } else {
   $122 = (($120) + 8|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ($123|0)==(8);
   $125 = HEAP32[$1>>2]|0;
   if ($124) {
    $126 = HEAP32[$3>>2]|0;
    _alt_print_arch_terms($125,$126);
    break;
   }
   $127 = (($125) + 8|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($128|0)==(95);
   if (!($129)) {
    $130 = HEAP32[$1>>2]|0;
    $131 = (($130) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = ($132|0)==(82);
    if (!($133)) {
     break;
    }
   }
   $134 = HEAP32[$1>>2]|0;
   $135 = HEAP32[$2>>2]|0;
   $136 = HEAP32[$3>>2]|0;
   _alt_print_count_offset($134,$135,$136);
  }
 } while(0);
 $137 = HEAP32[$gotnan>>2]|0;
 HEAP32[$0>>2] = $137;
 $138 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($138|0);
}
function _print_coeff_table_end($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $msg = sp + 4|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_plain_format($2)|0);
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   label = 3;
  } else {
   $5 = HEAP32[$1>>2]|0;
   $6 = (_csv_format($5)|0);
   $7 = ($6|0)!=(0);
   if ($7) {
    label = 3;
   } else {
    $9 = HEAP32[$1>>2]|0;
    $10 = (_tex_format($9)|0);
    $11 = ($10|0)!=(0);
    $12 = HEAP32[$1>>2]|0;
    if ($11) {
     _tex_coeff_table_end($12);
     break;
    }
    $13 = (_rtf_format($12)|0);
    $14 = ($13|0)!=(0);
    if ($14) {
     $15 = HEAP32[$1>>2]|0;
     (_pputs($15,41288)|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $8 = HEAP32[$1>>2]|0;
  (_pputc($8,10)|0);
 }
 $16 = HEAP32[$1>>2]|0;
 $17 = (_plain_format($16)|0);
 $18 = ($17|0)!=(0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = (_gretl_model_get_int($19,43032)|0);
 $21 = ($20|0)!=(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 HEAP32[$msg>>2] = 43048;
 $22 = HEAP32[$1>>2]|0;
 $23 = HEAP32[$msg>>2]|0;
 HEAP32[$vararg_buffer>>2] = $23;
 (_pprintf($22,34528,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _aux_print_info_criteria($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $i = 0, $istrs = 0, $n = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $istrs = sp + 20|0;
 $i = sp + 16|0;
 $n = sp + 12|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 ;HEAP32[$istrs+0>>2]=HEAP32[42984+0>>2]|0;HEAP32[$istrs+4>>2]=HEAP32[42984+4>>2]|0;HEAP32[$istrs+8>>2]=HEAP32[42984+8>>2]|0;
 HEAP32[$n>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = ($2|0)<(3);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$i>>2]|0;
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + 184|0);
  $7 = (($6) + ($4<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = $8 == 1.79769313486231570815E+308;
  if (!($9)) {
   $10 = HEAP32[$n>>2]|0;
   $11 = ($10|0)>(0);
   if ($11) {
    $12 = HEAP32[$1>>2]|0;
    (_pputc($12,32)|0);
   }
   $13 = HEAP32[$1>>2]|0;
   $14 = HEAP32[$i>>2]|0;
   $15 = (($istrs) + ($14<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$i>>2]|0;
   $18 = HEAP32[$0>>2]|0;
   $19 = (($18) + 184|0);
   $20 = (($19) + ($17<<3)|0);
   $21 = +HEAPF64[$20>>3];
   HEAP32[$vararg_buffer>>2] = $16;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$21;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($13,43000,$vararg_buffer)|0);
   $22 = HEAP32[$n>>2]|0;
   $23 = (($22) + 1)|0;
   HEAP32[$n>>2] = $23;
  }
  $24 = HEAP32[$i>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[$i>>2] = $25;
 }
 $26 = HEAP32[$n>>2]|0;
 $27 = ($26|0)>(0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$0>>2]|0;
 $29 = (_gretl_model_get_int($28,43016)|0);
 $30 = ($29|0)!=(0);
 $31 = HEAP32[$1>>2]|0;
 if ($30) {
  (_pputc($31,10)|0);
  STACKTOP = sp;return;
 } else {
  (_pputs($31,32904)|0);
  STACKTOP = sp;return;
 }
}
function _rsqline($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 128|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $4 == 1.79769313486231570815E+308;
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = (_plain_format($6)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 128|0);
 $12 = +HEAPF64[$11>>3];
 HEAP32[$vararg_buffer>>2] = 42088;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$12;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($9,42944,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _print_HET_1_results($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $pv = 0, $vararg_buffer22 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer22 = sp + 16|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $z = sp + 8|0;
 $pv = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+Math_abs((+$6)));
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $7 / $12;
 HEAPF64[$z>>3] = $13;
 $14 = +HEAPF64[$z>>3];
 $15 = (+_normal_cdf($14));
 $16 = 1.0 - $15;
 $17 = 2.0 * $16;
 HEAPF64[$pv>>3] = $17;
 $18 = HEAP32[$1>>2]|0;
 $19 = (_plain_format($18)|0);
 $20 = ($19|0)!=(0);
 $21 = HEAP32[$1>>2]|0;
 if ($20) {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = HEAP32[$0>>2]|0;
  $28 = (($27) + 80|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $32 = +HEAPF64[$z>>3];
  HEAP32[$vararg_buffer22>>2] = 42536;
  $vararg_ptr1 = (($vararg_buffer22) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$26;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr2 = (($vararg_buffer22) + 12|0);
  HEAPF64[tempDoublePtr>>3]=$31;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr3 = (($vararg_buffer22) + 20|0);
  HEAPF64[tempDoublePtr>>3]=$32;HEAP32[$vararg_ptr3>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr3+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($21,42784,$vararg_buffer22)|0);
  $33 = HEAP32[$1>>2]|0;
  $34 = +HEAPF64[$z>>3];
  $35 = +HEAPF64[$pv>>3];
  HEAP32[$vararg_buffer22>>2] = 42584;
  $vararg_ptr7 = (($vararg_buffer22) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$34;HEAP32[$vararg_ptr7>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr7+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr8 = (($vararg_buffer22) + 12|0);
  HEAPF64[tempDoublePtr>>3]=$35;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($33,42816,$vararg_buffer22)|0);
  STACKTOP = sp;return;
 }
 $36 = (_rtf_format($21)|0);
 $37 = ($36|0)!=(0);
 $38 = HEAP32[$1>>2]|0;
 if ($37) {
  $39 = +HEAPF64[$z>>3];
  HEAP32[$vararg_buffer22>>2] = 42536;
  $vararg_ptr12 = (($vararg_buffer22) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$39;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($38,42848,$vararg_buffer22)|0);
  $40 = HEAP32[$1>>2]|0;
  $41 = +HEAPF64[$z>>3];
  $42 = +HEAPF64[$pv>>3];
  HEAP32[$vararg_buffer22>>2] = 42584;
  $vararg_ptr16 = (($vararg_buffer22) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$41;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr17 = (($vararg_buffer22) + 12|0);
  HEAPF64[tempDoublePtr>>3]=$42;HEAP32[$vararg_ptr17>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr17+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($40,42816,$vararg_buffer22)|0);
  STACKTOP = sp;return;
 }
 $43 = (_tex_format($38)|0);
 $44 = ($43|0)!=(0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = HEAP32[$1>>2]|0;
 $46 = +HEAPF64[$z>>3];
 HEAP32[$vararg_buffer22>>2] = 42536;
 $vararg_ptr21 = (($vararg_buffer22) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$46;HEAP32[$vararg_ptr21>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr21+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($45,42880,$vararg_buffer22)|0);
 $47 = HEAP32[$1>>2]|0;
 $48 = +HEAPF64[$z>>3];
 $49 = +HEAPF64[$pv>>3];
 HEAP32[$vararg_buffer22>>2] = 42584;
 $vararg_ptr25 = (($vararg_buffer22) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$48;HEAP32[$vararg_ptr25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr25+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr26 = (($vararg_buffer22) + 12|0);
 HEAPF64[tempDoublePtr>>3]=$49;HEAP32[$vararg_ptr26>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr26+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($47,42904,$vararg_buffer22)|0);
 STACKTOP = sp;return;
}
function _print_whites_results($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0.0, $X = 0, $df = 0, $pv = 0, $vararg_buffer24 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer24 = sp + 16|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $X = sp + 8|0;
 $df = sp + 44|0;
 $pv = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 128|0);
 $4 = +HEAPF64[$3>>3];
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($7|0));
 $9 = $4 * $8;
 HEAPF64[$X>>3] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - 1)|0;
 HEAP32[$df>>2] = $13;
 $14 = HEAP32[$df>>2]|0;
 $15 = (+($14|0));
 $16 = +HEAPF64[$X>>3];
 $17 = (+_chisq_cdf_comp($15,$16));
 HEAPF64[$pv>>3] = $17;
 $18 = HEAP32[$1>>2]|0;
 $19 = (_plain_format($18)|0);
 $20 = ($19|0)!=(0);
 $21 = HEAP32[$1>>2]|0;
 if ($20) {
  $22 = +HEAPF64[$X>>3];
  HEAP32[$vararg_buffer24>>2] = 42536;
  $vararg_ptr1 = (($vararg_buffer24) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$22;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($21,42696,$vararg_buffer24)|0);
  $23 = HEAP32[$1>>2]|0;
  $24 = HEAP32[$df>>2]|0;
  $25 = +HEAPF64[$X>>3];
  $26 = +HEAPF64[$pv>>3];
  HEAP32[$vararg_buffer24>>2] = 42584;
  $vararg_ptr5 = (($vararg_buffer24) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 33432;
  $vararg_ptr6 = (($vararg_buffer24) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $24;
  $vararg_ptr7 = (($vararg_buffer24) + 12|0);
  HEAPF64[tempDoublePtr>>3]=$25;HEAP32[$vararg_ptr7>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr7+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr8 = (($vararg_buffer24) + 20|0);
  HEAPF64[tempDoublePtr>>3]=$26;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($23,42552,$vararg_buffer24)|0);
  STACKTOP = sp;return;
 }
 $27 = (_rtf_format($21)|0);
 $28 = ($27|0)!=(0);
 $29 = HEAP32[$1>>2]|0;
 if ($28) {
  $30 = +HEAPF64[$X>>3];
  HEAP32[$vararg_buffer24>>2] = 42536;
  $vararg_ptr12 = (($vararg_buffer24) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$30;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($29,42720,$vararg_buffer24)|0);
  $31 = HEAP32[$1>>2]|0;
  $32 = HEAP32[$df>>2]|0;
  $33 = +HEAPF64[$X>>3];
  $34 = +HEAPF64[$pv>>3];
  HEAP32[$vararg_buffer24>>2] = 42584;
  $vararg_ptr16 = (($vararg_buffer24) + 4|0);
  HEAP32[$vararg_ptr16>>2] = 33432;
  $vararg_ptr17 = (($vararg_buffer24) + 8|0);
  HEAP32[$vararg_ptr17>>2] = $32;
  $vararg_ptr18 = (($vararg_buffer24) + 12|0);
  HEAPF64[tempDoublePtr>>3]=$33;HEAP32[$vararg_ptr18>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr18+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr19 = (($vararg_buffer24) + 20|0);
  HEAPF64[tempDoublePtr>>3]=$34;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($31,42552,$vararg_buffer24)|0);
  STACKTOP = sp;return;
 }
 $35 = (_tex_format($29)|0);
 $36 = ($35|0)!=(0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$1>>2]|0;
 $38 = +HEAPF64[$X>>3];
 HEAP32[$vararg_buffer24>>2] = 42536;
 $vararg_ptr23 = (($vararg_buffer24) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$38;HEAP32[$vararg_ptr23>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr23+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($37,42760,$vararg_buffer24)|0);
 $39 = HEAP32[$1>>2]|0;
 $40 = HEAP32[$df>>2]|0;
 $41 = +HEAPF64[$X>>3];
 $42 = +HEAPF64[$pv>>3];
 HEAP32[$vararg_buffer24>>2] = 42584;
 $vararg_ptr27 = (($vararg_buffer24) + 4|0);
 HEAP32[$vararg_ptr27>>2] = $40;
 $vararg_ptr28 = (($vararg_buffer24) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$41;HEAP32[$vararg_ptr28>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr28+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr29 = (($vararg_buffer24) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$42;HEAP32[$vararg_ptr29>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr29+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($39,42624,$vararg_buffer24)|0);
 STACKTOP = sp;return;
}
function _rssline($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $3 = 0;
 var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 104|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $4 == 1.79769313486231570815E+308;
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 112|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $8 == 1.79769313486231570815E+308;
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$1>>2]|0;
 $11 = (_plain_format($10)|0);
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(81);
 $18 = $17 ? 12 : 6;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 112|0);
 $21 = +HEAPF64[$20>>3];
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 104|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $21 - $24;
 HEAP32[$vararg_buffer>>2] = 42664;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $18;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$25;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($13,37064,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _print_bp_results($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $X = 0;
 var $df = 0, $pv = 0, $vararg_buffer24 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer24 = sp + 16|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $pv = sp + 8|0;
 $X = sp;
 $df = sp + 44|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (+_gretl_model_get_double($2,42512));
 HEAPF64[$X>>3] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - 1)|0;
 HEAP32[$df>>2] = $7;
 $8 = +HEAPF64[$X>>3];
 $9 = $8 == 1.79769313486231570815E+308;
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$df>>2]|0;
 $11 = (+($10|0));
 $12 = +HEAPF64[$X>>3];
 $13 = (+_chisq_cdf_comp($11,$12));
 HEAPF64[$pv>>3] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = (_plain_format($14)|0);
 $16 = ($15|0)!=(0);
 $17 = HEAP32[$1>>2]|0;
 if ($16) {
  $18 = +HEAPF64[$X>>3];
  HEAP32[$vararg_buffer24>>2] = 42536;
  $vararg_ptr1 = (($vararg_buffer24) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$18;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($17,42520,$vararg_buffer24)|0);
  $19 = HEAP32[$1>>2]|0;
  $20 = HEAP32[$df>>2]|0;
  $21 = +HEAPF64[$X>>3];
  $22 = +HEAPF64[$pv>>3];
  HEAP32[$vararg_buffer24>>2] = 42584;
  $vararg_ptr5 = (($vararg_buffer24) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 33432;
  $vararg_ptr6 = (($vararg_buffer24) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $20;
  $vararg_ptr7 = (($vararg_buffer24) + 12|0);
  HEAPF64[tempDoublePtr>>3]=$21;HEAP32[$vararg_ptr7>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr7+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr8 = (($vararg_buffer24) + 20|0);
  HEAPF64[tempDoublePtr>>3]=$22;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($19,42552,$vararg_buffer24)|0);
  STACKTOP = sp;return;
 }
 $23 = (_rtf_format($17)|0);
 $24 = ($23|0)!=(0);
 $25 = HEAP32[$1>>2]|0;
 if ($24) {
  $26 = +HEAPF64[$X>>3];
  HEAP32[$vararg_buffer24>>2] = 42536;
  $vararg_ptr12 = (($vararg_buffer24) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$26;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($25,42600,$vararg_buffer24)|0);
  $27 = HEAP32[$1>>2]|0;
  $28 = HEAP32[$df>>2]|0;
  $29 = +HEAPF64[$X>>3];
  $30 = +HEAPF64[$pv>>3];
  HEAP32[$vararg_buffer24>>2] = 42584;
  $vararg_ptr16 = (($vararg_buffer24) + 4|0);
  HEAP32[$vararg_ptr16>>2] = 33432;
  $vararg_ptr17 = (($vararg_buffer24) + 8|0);
  HEAP32[$vararg_ptr17>>2] = $28;
  $vararg_ptr18 = (($vararg_buffer24) + 12|0);
  HEAPF64[tempDoublePtr>>3]=$29;HEAP32[$vararg_ptr18>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr18+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr19 = (($vararg_buffer24) + 20|0);
  HEAPF64[tempDoublePtr>>3]=$30;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($27,42552,$vararg_buffer24)|0);
  STACKTOP = sp;return;
 }
 $31 = (_tex_format($25)|0);
 $32 = ($31|0)!=(0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$1>>2]|0;
 $34 = +HEAPF64[$X>>3];
 HEAP32[$vararg_buffer24>>2] = 42536;
 $vararg_ptr23 = (($vararg_buffer24) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$34;HEAP32[$vararg_ptr23>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr23+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($33,42520,$vararg_buffer24)|0);
 $35 = HEAP32[$1>>2]|0;
 $36 = HEAP32[$df>>2]|0;
 $37 = +HEAPF64[$X>>3];
 $38 = +HEAPF64[$pv>>3];
 HEAP32[$vararg_buffer24>>2] = 42584;
 $vararg_ptr27 = (($vararg_buffer24) + 4|0);
 HEAP32[$vararg_ptr27>>2] = $36;
 $vararg_ptr28 = (($vararg_buffer24) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$37;HEAP32[$vararg_ptr28>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr28+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr29 = (($vararg_buffer24) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$38;HEAP32[$vararg_ptr29>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr29+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($35,42624,$vararg_buffer24)|0);
 STACKTOP = sp;return;
}
function _ssrline($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 104|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $4 == 1.79769313486231570815E+308;
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = (_plain_format($6)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(81);
 $14 = $13 ? 12 : 6;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 104|0);
 $17 = +HEAPF64[$16>>3];
 HEAP32[$vararg_buffer>>2] = 42016;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($9,37064,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _alternate_stats_message($i,$prn) {
 $i = $i|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $msg = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $msg = sp + 8|0;
 HEAP32[$0>>2] = $i;
 HEAP32[$1>>2] = $prn;
 ;HEAP32[$msg+0>>2]=HEAP32[42448+0>>2]|0;HEAP32[$msg+4>>2]=HEAP32[42448+4>>2]|0;HEAP32[$msg+8>>2]=HEAP32[42448+8>>2]|0;HEAP32[$msg+12>>2]=HEAP32[42448+12>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_plain_format($2)|0);
 $4 = ($3|0)!=(0);
 $5 = HEAP32[$1>>2]|0;
 if ($4) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($msg) + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $8;
  (_pprintf($5,32832,$vararg_buffer7)|0);
  STACKTOP = sp;return;
 }
 $9 = (_tex_format($5)|0);
 $10 = ($9|0)!=(0);
 $11 = HEAP32[$1>>2]|0;
 if ($10) {
  $12 = HEAP32[$0>>2]|0;
  $13 = (($msg) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $14;
  (_pprintf($11,42464,$vararg_buffer7)|0);
  STACKTOP = sp;return;
 }
 $15 = (_csv_format($11)|0);
 $16 = ($15|0)!=(0);
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($msg) + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 if ($16) {
  HEAP32[$vararg_buffer7>>2] = $20;
  (_pprintf($17,42488,$vararg_buffer7)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer7>>2] = $20;
  (_pprintf($17,42496,$vararg_buffer7)|0);
  STACKTOP = sp;return;
 }
}
function _print_middle_table($pmod,$prn,$code) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0;
 var $495 = 0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0.0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $57 = 0, $58 = 0.0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $csv = 0, $h = 0, $i = 0, $j = 0, $key = 0, $mtab = 0, $note = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $rtf = 0;
 var $teststr = 0, $tex = 0, $val = 0, $vararg_buffer25 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $vararg_buffer25 = sp + 120|0;
 $0 = sp + 336|0;
 $1 = sp + 332|0;
 $2 = sp + 328|0;
 $note = sp + 324|0;
 $rtf = sp + 320|0;
 $tex = sp + 316|0;
 $csv = sp + 312|0;
 $teststr = sp + 344|0;
 $key = sp + 256|0;
 $val = sp + 8|0;
 $mtab = sp + 136|0;
 $i = sp + 132|0;
 $j = sp + 128|0;
 $h = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 HEAP32[$2>>2] = $code;
 HEAP32[$note>>2] = 40240;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_rtf_format($3)|0);
 HEAP32[$rtf>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (_tex_format($5)|0);
 HEAP32[$tex>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (_csv_format($7)|0);
 HEAP32[$csv>>2] = $8;
 dest=$key+0|0; src=40544+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 168|0);
 $11 = +HEAPF64[$10>>3];
 HEAPF64[$val>>3] = $11;
 $12 = (($val) + 8|0);
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 176|0);
 $15 = +HEAPF64[$14>>3];
 HEAPF64[$12>>3] = $15;
 $16 = (($12) + 8|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 104|0);
 $19 = +HEAPF64[$18>>3];
 HEAPF64[$16>>3] = $19;
 $20 = (($16) + 8|0);
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 120|0);
 $23 = +HEAPF64[$22>>3];
 HEAPF64[$20>>3] = $23;
 $24 = (($20) + 8|0);
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 128|0);
 $27 = +HEAPF64[$26>>3];
 HEAPF64[$24>>3] = $27;
 $28 = (($24) + 8|0);
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + 136|0);
 $31 = +HEAPF64[$30>>3];
 HEAPF64[$28>>3] = $31;
 $32 = (($28) + 8|0);
 $33 = HEAP32[$0>>2]|0;
 $34 = (($33) + 144|0);
 $35 = +HEAPF64[$34>>3];
 HEAPF64[$32>>3] = $35;
 $36 = (($32) + 8|0);
 HEAPF64[$36>>3] = 1.79769313486231570815E+308;
 $37 = (($36) + 8|0);
 $38 = HEAP32[$0>>2]|0;
 $39 = (($38) + 160|0);
 $40 = +HEAPF64[$39>>3];
 HEAPF64[$37>>3] = $40;
 $41 = (($37) + 8|0);
 $42 = HEAP32[$0>>2]|0;
 $43 = (($42) + 184|0);
 $44 = +HEAPF64[$43>>3];
 HEAPF64[$41>>3] = $44;
 $45 = (($41) + 8|0);
 $46 = HEAP32[$0>>2]|0;
 $47 = (($46) + 184|0);
 $48 = (($47) + 8|0);
 $49 = +HEAPF64[$48>>3];
 HEAPF64[$45>>3] = $49;
 $50 = (($45) + 8|0);
 $51 = HEAP32[$0>>2]|0;
 $52 = (($51) + 184|0);
 $53 = (($52) + 16|0);
 $54 = +HEAPF64[$53>>3];
 HEAPF64[$50>>3] = $54;
 $55 = (($50) + 8|0);
 $56 = HEAP32[$0>>2]|0;
 $57 = (($56) + 216|0);
 $58 = +HEAPF64[$57>>3];
 HEAPF64[$55>>3] = $58;
 $59 = (($55) + 8|0);
 $60 = HEAP32[$0>>2]|0;
 $61 = (($60) + 208|0);
 $62 = +HEAPF64[$61>>3];
 HEAPF64[$59>>3] = $62;
 $63 = (($mtab) + 12|0);
 HEAP32[$63>>2] = 0;
 $64 = (($mtab) + 76|0);
 HEAP32[$64>>2] = 0;
 $65 = (($mtab) + 8|0);
 HEAP32[$65>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $66 = HEAP32[$i>>2]|0;
  $67 = ($66|0)<(14);
  if (!($67)) {
   break;
  }
  $68 = HEAP32[$i>>2]|0;
  $69 = (($mtab) + 16|0);
  $70 = (($69) + ($68<<2)|0);
  HEAP32[$70>>2] = 0;
  $71 = HEAP32[$i>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$i>>2] = $72;
 }
 $73 = (($mtab) + 72|0);
 HEAP32[$73>>2] = 0;
 $74 = HEAP32[$0>>2]|0;
 $75 = (($74) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)==(81);
 $78 = $77&1;
 $79 = (($mtab) + 80|0);
 HEAP32[$79>>2] = $78;
 $80 = (_doing_nls()|0);
 $81 = (($mtab) + 72|0);
 HEAP32[$81>>2] = $80;
 $82 = (($mtab) + 72|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)!=(0);
 if ($84) {
  _maybe_remedy_translations($key,14);
 }
 $85 = HEAP32[$tex>>2]|0;
 $86 = ($85|0)!=(0);
 if ($86) {
  $87 = (($mtab) + 8|0);
  HEAP32[$87>>2] = 2;
  $88 = (($key) + 16|0);
  HEAP32[$88>>2] = 40600;
  $89 = (($key) + 20|0);
  HEAP32[$89>>2] = 40608;
  $90 = (($key) + 28|0);
  HEAP32[$90>>2] = 40624;
  $91 = (($key) + 44|0);
  HEAP32[$91>>2] = 40640;
  $92 = (($key) + 48|0);
  HEAP32[$92>>2] = 40656;
  $93 = (($key) + 52|0);
  HEAP32[$93>>2] = 40672;
 } else {
  $94 = HEAP32[$rtf>>2]|0;
  $95 = ($94|0)!=(0);
  if (!($95)) {
   $96 = HEAP32[$1>>2]|0;
   $97 = (_gretl_print_has_minus($96)|0);
   $98 = ($97|0)!=(0);
   if ($98) {
    $99 = (($mtab) + 8|0);
    HEAP32[$99>>2] = 1;
   }
  }
 }
 $100 = HEAP32[$0>>2]|0;
 $101 = (($100) + 72|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)==(16);
 do {
  if ($103) {
   label = 13;
  } else {
   $104 = HEAP32[$0>>2]|0;
   $105 = (($104) + 72|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(8);
   if ($107) {
    label = 13;
   } else {
    $110 = HEAP32[$0>>2]|0;
    $111 = (($110) + 144|0);
    $112 = +HEAPF64[$111>>3];
    $113 = $112 == 1.79769313486231570815E+308;
    if ($113) {
     $155 = HEAP32[$0>>2]|0;
     $156 = (($155) + 152|0);
     $157 = +HEAPF64[$156>>3];
     $158 = $157 == 1.79769313486231570815E+308;
     if ($158) {
      break;
     }
     $159 = HEAP32[$0>>2]|0;
     $160 = (($159) + 52|0);
     $161 = HEAP32[$160>>2]|0;
     HEAP32[$vararg_buffer25>>2] = 33432;
     $vararg_ptr28 = (($vararg_buffer25) + 4|0);
     HEAP32[$vararg_ptr28>>2] = $161;
     (_sprintf($teststr,40736,$vararg_buffer25)|0);
     $162 = (($key) + 24|0);
     HEAP32[$162>>2] = $teststr;
     $163 = HEAP32[$0>>2]|0;
     $164 = (($163) + 152|0);
     $165 = +HEAPF64[$164>>3];
     $166 = (($val) + 48|0);
     HEAPF64[$166>>3] = $165;
     $167 = (($key) + 28|0);
     HEAP32[$167>>2] = 33136;
     $168 = HEAP32[$0>>2]|0;
     $169 = (($168) + 52|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = (+($170|0));
     $172 = (($val) + 48|0);
     $173 = +HEAPF64[$172>>3];
     $174 = (+_chisq_cdf_comp($171,$173));
     $175 = (($val) + 56|0);
     HEAPF64[$175>>3] = $174;
     break;
    }
    $114 = HEAP32[$tex>>2]|0;
    $115 = ($114|0)!=(0);
    do {
     if ($115) {
      $116 = HEAP32[$0>>2]|0;
      $117 = (($116) + 52|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = HEAP32[$0>>2]|0;
      $120 = (($119) + 56|0);
      $121 = HEAP32[$120>>2]|0;
      HEAP32[$vararg_buffer25>>2] = $118;
      $vararg_ptr16 = (($vararg_buffer25) + 4|0);
      HEAP32[$vararg_ptr16>>2] = $121;
      (_sprintf($teststr,40688,$vararg_buffer25)|0);
     } else {
      $122 = HEAP32[$0>>2]|0;
      $123 = (($122) + 8|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(91);
      if ($125) {
       $126 = HEAP32[$0>>2]|0;
       $127 = (($126) + 12|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = $128 & 32;
       $130 = ($129|0)!=(0);
       if ($130) {
        $131 = HEAP32[$0>>2]|0;
        $132 = (($131) + 52|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = HEAP32[$0>>2]|0;
        $135 = (($134) + 56|0);
        $136 = HEAP32[$135>>2]|0;
        HEAP32[$vararg_buffer25>>2] = $133;
        $vararg_ptr20 = (($vararg_buffer25) + 4|0);
        HEAP32[$vararg_ptr20>>2] = $136;
        (_sprintf($teststr,40704,$vararg_buffer25)|0);
        break;
       }
      }
      $137 = HEAP32[$0>>2]|0;
      $138 = (($137) + 52|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = HEAP32[$0>>2]|0;
      $141 = (($140) + 56|0);
      $142 = HEAP32[$141>>2]|0;
      HEAP32[$vararg_buffer25>>2] = $139;
      $vararg_ptr24 = (($vararg_buffer25) + 4|0);
      HEAP32[$vararg_ptr24>>2] = $142;
      (_sprintf($teststr,40720,$vararg_buffer25)|0);
     }
    } while(0);
    $143 = (($key) + 24|0);
    HEAP32[$143>>2] = $teststr;
    $144 = HEAP32[$0>>2]|0;
    $145 = (($144) + 52|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = HEAP32[$0>>2]|0;
    $148 = (($147) + 56|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = HEAP32[$0>>2]|0;
    $151 = (($150) + 144|0);
    $152 = +HEAPF64[$151>>3];
    $153 = (+_snedecor_cdf_comp($146,$149,$152));
    $154 = (($val) + 56|0);
    HEAPF64[$154>>3] = $153;
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $108 = (($val) + 56|0);
  HEAPF64[$108>>3] = 1.79769313486231570815E+308;
  $109 = (($val) + 48|0);
  HEAPF64[$109>>3] = 1.79769313486231570815E+308;
 }
 $176 = HEAP32[$0>>2]|0;
 $177 = (_gretl_model_get_int($176,40744)|0);
 $178 = ($177|0)!=(0);
 L32: do {
  if ($178) {
   $179 = HEAP32[$tex>>2]|0;
   $180 = ($179|0)!=(0);
   $181 = $180 ? 40760 : 40784;
   $182 = (($key) + 16|0);
   HEAP32[$182>>2] = $181;
   $183 = HEAP32[$tex>>2]|0;
   $184 = ($183|0)!=(0);
   $185 = $184 ? 40808 : 40824;
   $186 = (($key) + 20|0);
   HEAP32[$186>>2] = $185;
   $187 = HEAP32[$0>>2]|0;
   $188 = (+_gretl_model_get_double($187,40848));
   $189 = (($val) + 40|0);
   HEAPF64[$189>>3] = $188;
  } else {
   $190 = HEAP32[$0>>2]|0;
   $191 = (($190) + 8|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = ($192|0)==(95);
   do {
    if (!($193)) {
     $194 = HEAP32[$0>>2]|0;
     $195 = (($194) + 8|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($196|0)==(82);
     if (!($197)) {
      $198 = HEAP32[$0>>2]|0;
      $199 = (($198) + 8|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = ($200|0)==(69);
      if ($201) {
       label = 30;
      } else {
       $202 = HEAP32[$0>>2]|0;
       $203 = (($202) + 8|0);
       $204 = HEAP32[$203>>2]|0;
       $205 = ($204|0)==(98);
       if ($205) {
        label = 30;
       }
      }
      if ((label|0) == 30) {
       $206 = HEAP32[$0>>2]|0;
       $207 = (_gretl_model_get_int($206,32152)|0);
       $208 = ($207|0)!=(0);
       if (!($208)) {
        $209 = HEAP32[$0>>2]|0;
        $210 = (_gretl_model_get_int($209,32176)|0);
        $211 = ($210|0)!=(0);
        if (!($211)) {
         break;
        }
       }
      }
      $216 = HEAP32[$0>>2]|0;
      $217 = (($216) + 8|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = ($218|0)==(91);
      if (!($219)) {
       break L32;
      }
      $220 = HEAP32[$0>>2]|0;
      $221 = (($220) + 12|0);
      $222 = HEAP32[$221>>2]|0;
      $223 = $222 & 32;
      $224 = ($223|0)!=(0);
      if (!($224)) {
       break L32;
      }
      $225 = HEAP32[$tex>>2]|0;
      $226 = ($225|0)!=(0);
      $227 = $226 ? 40904 : 40920;
      $228 = (($key) + 16|0);
      HEAP32[$228>>2] = $227;
      $229 = HEAP32[$tex>>2]|0;
      $230 = ($229|0)!=(0);
      $231 = $230 ? 40936 : 40952;
      $232 = (($key) + 20|0);
      HEAP32[$232>>2] = $231;
      break L32;
     }
    }
   } while(0);
   $212 = HEAP32[$tex>>2]|0;
   $213 = ($212|0)!=(0);
   $214 = $213 ? 40864 : 40880;
   $215 = (($key) + 16|0);
   HEAP32[$215>>2] = $214;
  }
 } while(0);
 $233 = HEAP32[$0>>2]|0;
 $234 = (($233) + 8|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = ($235|0)==(7);
 L48: do {
  if ($236) {
   label = 38;
  } else {
   $237 = HEAP32[$0>>2]|0;
   $238 = (($237) + 8|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = ($239|0)==(27);
   if ($240) {
    label = 38;
   } else {
    $251 = HEAP32[$0>>2]|0;
    $252 = (($251) + 8|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = ($253|0)==(127);
    if ($254) {
     $255 = HEAP32[$0>>2]|0;
     $256 = (($255) + 12|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = $257 & 64;
     $259 = ($258|0)!=(0);
     if ($259) {
      HEAP32[$i>>2] = 2;
      while(1) {
       $260 = HEAP32[$i>>2]|0;
       $261 = ($260|0)<(14);
       if (!($261)) {
        break L48;
       }
       $262 = HEAP32[$i>>2]|0;
       $263 = (($val) + ($262<<3)|0);
       HEAPF64[$263>>3] = 1.79769313486231570815E+308;
       $264 = HEAP32[$i>>2]|0;
       $265 = (($264) + 1)|0;
       HEAP32[$i>>2] = $265;
      }
     }
    }
    $266 = HEAP32[$0>>2]|0;
    $267 = (($266) + 72|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = ($268|0)==(14);
    $270 = HEAP32[$0>>2]|0;
    if ($269) {
     $271 = (_gretl_model_get_int($270,32640)|0);
     $272 = ($271|0)==(3);
     if ($272) {
      $273 = HEAP32[$0>>2]|0;
      $274 = (_gretl_model_get_int($273,32504)|0);
      $275 = ($274|0)!=(0);
      if (!($275)) {
       HEAP32[$i>>2] = 4;
       while(1) {
        $276 = HEAP32[$i>>2]|0;
        $277 = ($276|0)<(14);
        if (!($277)) {
         break;
        }
        $278 = HEAP32[$i>>2]|0;
        $279 = ($278|0)<(8);
        $280 = HEAP32[$i>>2]|0;
        $281 = ($280|0)>(9);
        $or$cond3 = $279 | $281;
        if ($or$cond3) {
         $282 = HEAP32[$i>>2]|0;
         $283 = (($val) + ($282<<3)|0);
         HEAPF64[$283>>3] = 1.79769313486231570815E+308;
        }
        $284 = HEAP32[$i>>2]|0;
        $285 = (($284) + 1)|0;
        HEAP32[$i>>2] = $285;
       }
       $286 = (($key) + 36|0);
       HEAP32[$286>>2] = 39976;
       $287 = HEAP32[$0>>2]|0;
       $288 = (+_gretl_model_get_double($287,39944));
       $289 = (($val) + 72|0);
       HEAPF64[$289>>3] = $288;
       break;
      }
     }
     HEAP32[$i>>2] = 6;
     while(1) {
      $290 = HEAP32[$i>>2]|0;
      $291 = ($290|0)<(14);
      if (!($291)) {
       break L48;
      }
      $292 = HEAP32[$i>>2]|0;
      $293 = (($val) + ($292<<3)|0);
      HEAPF64[$293>>3] = 1.79769313486231570815E+308;
      $294 = HEAP32[$i>>2]|0;
      $295 = (($294) + 1)|0;
      HEAP32[$i>>2] = $295;
     }
    }
    $296 = (($270) + 8|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = ($297|0)==(9);
    if ($298) {
     $299 = (($key) + 8|0);
     HEAP32[$299>>2] = 40976;
     $300 = HEAP32[$0>>2]|0;
     $301 = (+_gretl_model_get_double($300,41000));
     $302 = (($val) + 16|0);
     HEAPF64[$302>>3] = $301;
     $303 = (($key) + 12|0);
     HEAP32[$303>>2] = 41016;
     HEAP32[$i>>2] = 4;
     while(1) {
      $304 = HEAP32[$i>>2]|0;
      $305 = ($304|0)<(14);
      if (!($305)) {
       break L48;
      }
      $306 = HEAP32[$i>>2]|0;
      $307 = ($306|0)<(8);
      $308 = HEAP32[$i>>2]|0;
      $309 = ($308|0)>(11);
      $or$cond5 = $307 | $309;
      if ($or$cond5) {
       $310 = HEAP32[$i>>2]|0;
       $311 = (($val) + ($310<<3)|0);
       HEAPF64[$311>>3] = 1.79769313486231570815E+308;
      }
      $312 = HEAP32[$i>>2]|0;
      $313 = (($312) + 1)|0;
      HEAP32[$i>>2] = $313;
     }
    }
    $314 = HEAP32[$0>>2]|0;
    $315 = (($314) + 8|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = ($316|0)==(63);
    if ($317) {
     HEAP32[$key>>2] = 41040;
     $318 = HEAP32[$0>>2]|0;
     $319 = (+_gretl_model_get_double($318,41064));
     HEAPF64[$val>>3] = $319;
     $320 = (($key) + 8|0);
     HEAP32[$320>>2] = 41072;
     $321 = HEAP32[$0>>2]|0;
     $322 = (+_gretl_model_get_double($321,41096));
     $323 = (($val) + 16|0);
     HEAPF64[$323>>3] = $322;
     $324 = (($key) + 12|0);
     HEAP32[$324>>2] = 40336;
     $325 = HEAP32[$0>>2]|0;
     $326 = (($325) + 104|0);
     $327 = +HEAPF64[$326>>3];
     $328 = (($val) + 24|0);
     HEAPF64[$328>>3] = $327;
     HEAP32[$i>>2] = 4;
     while(1) {
      $329 = HEAP32[$i>>2]|0;
      $330 = ($329|0)<(14);
      if (!($330)) {
       break L48;
      }
      $331 = HEAP32[$i>>2]|0;
      $332 = ($331|0)<(8);
      $333 = HEAP32[$i>>2]|0;
      $334 = ($333|0)>(11);
      $or$cond7 = $332 | $334;
      if ($or$cond7) {
       $335 = HEAP32[$i>>2]|0;
       $336 = (($val) + ($335<<3)|0);
       HEAPF64[$336>>3] = 1.79769313486231570815E+308;
      }
      $337 = HEAP32[$i>>2]|0;
      $338 = (($337) + 1)|0;
      HEAP32[$i>>2] = $338;
     }
    }
    $339 = HEAP32[$0>>2]|0;
    $340 = (($339) + 8|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = ($341|0)==(69);
    if (!($342)) {
     $343 = HEAP32[$0>>2]|0;
     $344 = (($343) + 8|0);
     $345 = HEAP32[$344>>2]|0;
     $346 = ($345|0)==(98);
     if (!($346)) {
      $353 = HEAP32[$0>>2]|0;
      $354 = (($353) + 8|0);
      $355 = HEAP32[$354>>2]|0;
      $356 = ($355|0)==(10);
      if ($356) {
       $357 = (($val) + 24|0);
       HEAPF64[$357>>3] = 1.79769313486231570815E+308;
       $358 = (($val) + 16|0);
       HEAPF64[$358>>3] = 1.79769313486231570815E+308;
       $359 = (($val) + 56|0);
       HEAPF64[$359>>3] = 1.79769313486231570815E+308;
       $360 = (($val) + 48|0);
       HEAPF64[$360>>3] = 1.79769313486231570815E+308;
       $361 = (($val) + 104|0);
       HEAPF64[$361>>3] = 1.79769313486231570815E+308;
       $362 = (($val) + 96|0);
       HEAPF64[$362>>3] = 1.79769313486231570815E+308;
       break;
      }
      $363 = HEAP32[$0>>2]|0;
      $364 = (($363) + 8|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = ($365|0)==(51);
      if ($366) {
       $367 = HEAP32[$tex>>2]|0;
       $368 = ($367|0)!=(0);
       $369 = $368 ? 41104 : 36472;
       $370 = (($key) + 8|0);
       HEAP32[$370>>2] = $369;
       $371 = HEAP32[$0>>2]|0;
       $372 = (($371) + 120|0);
       $373 = +HEAPF64[$372>>3];
       $374 = (($val) + 16|0);
       HEAPF64[$374>>3] = $373;
       $375 = HEAP32[$tex>>2]|0;
       $376 = ($375|0)!=(0);
       $377 = $376 ? 40656 : 40520;
       $378 = (($key) + 12|0);
       HEAP32[$378>>2] = $377;
       $379 = HEAP32[$0>>2]|0;
       $380 = (($379) + 216|0);
       $381 = +HEAPF64[$380>>3];
       $382 = (($val) + 24|0);
       HEAPF64[$382>>3] = $381;
       HEAP32[$i>>2] = 4;
       while(1) {
        $383 = HEAP32[$i>>2]|0;
        $384 = ($383|0)<(14);
        if (!($384)) {
         break L48;
        }
        $385 = HEAP32[$i>>2]|0;
        $386 = ($385|0)<(8);
        $387 = HEAP32[$i>>2]|0;
        $388 = ($387|0)>(11);
        $or$cond9 = $386 | $388;
        if ($or$cond9) {
         $389 = HEAP32[$i>>2]|0;
         $390 = (($val) + ($389<<3)|0);
         HEAPF64[$390>>3] = 1.79769313486231570815E+308;
        }
        $391 = HEAP32[$i>>2]|0;
        $392 = (($391) + 1)|0;
        HEAP32[$i>>2] = $392;
       }
      }
      $393 = HEAP32[$0>>2]|0;
      $394 = (($393) + 8|0);
      $395 = HEAP32[$394>>2]|0;
      $396 = ($395|0)==(91);
      if ($396) {
       $397 = HEAP32[$0>>2]|0;
       $398 = (($397) + 12|0);
       $399 = HEAP32[$398>>2]|0;
       $400 = $399 & 4194304;
       $401 = ($400|0)!=(0);
       if ($401) {
        $402 = HEAP32[$0>>2]|0;
        $403 = (_gretl_model_get_int($402,31944)|0);
        $404 = ($403|0)!=(0);
        if (!($404)) {
         label = 86;
        }
       } else {
        label = 86;
       }
      } else {
       label = 86;
      }
      if ((label|0) == 86) {
       $405 = HEAP32[$0>>2]|0;
       $406 = (($405) + 8|0);
       $407 = HEAP32[$406>>2]|0;
       $408 = ($407|0)==(45);
       if (!($408)) {
        $419 = HEAP32[$0>>2]|0;
        $420 = (($419) + 8|0);
        $421 = HEAP32[$420>>2]|0;
        $422 = ($421|0)==(76);
        do {
         if (!($422)) {
          $423 = HEAP32[$0>>2]|0;
          $424 = (($423) + 8|0);
          $425 = HEAP32[$424>>2]|0;
          $426 = ($425|0)==(69);
          if ($426) {
           label = 95;
          } else {
           $427 = HEAP32[$0>>2]|0;
           $428 = (($427) + 8|0);
           $429 = HEAP32[$428>>2]|0;
           $430 = ($429|0)==(98);
           if ($430) {
            label = 95;
           }
          }
          if ((label|0) == 95) {
           $431 = HEAP32[$0>>2]|0;
           $432 = (_gretl_model_get_int($431,32152)|0);
           $433 = ($432|0)!=(0);
           if ($433) {
            break;
           }
          }
          $444 = HEAP32[$0>>2]|0;
          $445 = (($444) + 8|0);
          $446 = HEAP32[$445>>2]|0;
          $447 = ($446|0)!=(128);
          do {
           if ($447) {
            $448 = HEAP32[$0>>2]|0;
            $449 = (($448) + 72|0);
            $450 = HEAP32[$449>>2]|0;
            $451 = ($450|0)!=(16);
            if (!($451)) {
             break;
            }
            $452 = HEAP32[$0>>2]|0;
            $453 = (($452) + 216|0);
            $454 = +HEAPF64[$453>>3];
            $455 = $454 == 1.79769313486231570815E+308;
            if ($455) {
             break;
            }
            $456 = HEAP32[$0>>2]|0;
            $457 = (_gretl_model_get_int($456,41120)|0);
            $458 = ($457|0)!=(0);
            if (!($458)) {
             break;
            }
            $459 = HEAP32[$0>>2]|0;
            $460 = (+_durbins_h($459));
            HEAPF64[$h>>3] = $460;
            $461 = +HEAPF64[$h>>3];
            $462 = $461 == 1.79769313486231570815E+308;
            if ($462) {
             break L48;
            }
            $463 = HEAP32[$tex>>2]|0;
            $464 = ($463|0)!=(0);
            $465 = $464 ? 41128 : 41144;
            $466 = (($key) + 52|0);
            HEAP32[$466>>2] = $465;
            $467 = +HEAPF64[$h>>3];
            $468 = (($val) + 104|0);
            HEAPF64[$468>>3] = $467;
            break L48;
           }
          } while(0);
          $469 = HEAP32[$0>>2]|0;
          $470 = (($469) + 8|0);
          $471 = HEAP32[$470>>2]|0;
          $472 = ($471|0)==(58);
          if (!($472)) {
           $473 = HEAP32[$0>>2]|0;
           $474 = (($473) + 8|0);
           $475 = HEAP32[$474>>2]|0;
           $476 = ($475|0)==(126);
           if (!($476)) {
            break L48;
           }
          }
          HEAP32[$i>>2] = 0;
          while(1) {
           $477 = HEAP32[$i>>2]|0;
           $478 = ($477|0)<(14);
           if (!($478)) {
            break L48;
           }
           $479 = HEAP32[$i>>2]|0;
           $480 = ($479|0)<(6);
           $481 = HEAP32[$i>>2]|0;
           $482 = ($481|0)>(11);
           $or$cond15 = $480 | $482;
           if ($or$cond15) {
            $483 = HEAP32[$i>>2]|0;
            $484 = (($val) + ($483<<3)|0);
            HEAPF64[$484>>3] = 1.79769313486231570815E+308;
           }
           $485 = HEAP32[$i>>2]|0;
           $486 = (($485) + 1)|0;
           HEAP32[$i>>2] = $486;
          }
         }
        } while(0);
        HEAP32[$i>>2] = 0;
        while(1) {
         $434 = HEAP32[$i>>2]|0;
         $435 = ($434|0)<(14);
         if (!($435)) {
          break L48;
         }
         $436 = HEAP32[$i>>2]|0;
         $437 = ($436|0)<(8);
         $438 = HEAP32[$i>>2]|0;
         $439 = ($438|0)>(11);
         $or$cond13 = $437 | $439;
         if ($or$cond13) {
          $440 = HEAP32[$i>>2]|0;
          $441 = (($val) + ($440<<3)|0);
          HEAPF64[$441>>3] = 1.79769313486231570815E+308;
         }
         $442 = HEAP32[$i>>2]|0;
         $443 = (($442) + 1)|0;
         HEAP32[$i>>2] = $443;
        }
       }
      }
      HEAP32[$i>>2] = 2;
      while(1) {
       $409 = HEAP32[$i>>2]|0;
       $410 = ($409|0)<(14);
       if (!($410)) {
        break L48;
       }
       $411 = HEAP32[$i>>2]|0;
       $412 = ($411|0)<(8);
       $413 = HEAP32[$i>>2]|0;
       $414 = ($413|0)>(11);
       $or$cond11 = $412 | $414;
       if ($or$cond11) {
        $415 = HEAP32[$i>>2]|0;
        $416 = (($val) + ($415<<3)|0);
        HEAPF64[$416>>3] = 1.79769313486231570815E+308;
       }
       $417 = HEAP32[$i>>2]|0;
       $418 = (($417) + 1)|0;
       HEAP32[$i>>2] = $418;
      }
     }
    }
    $347 = (($val) + 24|0);
    HEAPF64[$347>>3] = 1.79769313486231570815E+308;
    $348 = (($val) + 16|0);
    HEAPF64[$348>>3] = 1.79769313486231570815E+308;
    $349 = (($val) + 56|0);
    HEAPF64[$349>>3] = 1.79769313486231570815E+308;
    $350 = (($val) + 48|0);
    HEAPF64[$350>>3] = 1.79769313486231570815E+308;
    $351 = (($val) + 104|0);
    HEAPF64[$351>>3] = 1.79769313486231570815E+308;
    $352 = (($val) + 96|0);
    HEAPF64[$352>>3] = 1.79769313486231570815E+308;
   }
  }
 } while(0);
 L152: do {
  if ((label|0) == 38) {
   HEAP32[$i>>2] = 0;
   while(1) {
    $241 = HEAP32[$i>>2]|0;
    $242 = ($241|0)<(14);
    if (!($242)) {
     break L152;
    }
    $243 = HEAP32[$i>>2]|0;
    $244 = ($243|0)<(2);
    $245 = HEAP32[$i>>2]|0;
    $246 = ($245|0)>(3);
    $or$cond = $244 | $246;
    if ($or$cond) {
     $247 = HEAP32[$i>>2]|0;
     $248 = (($val) + ($247<<3)|0);
     HEAPF64[$248>>3] = 1.79769313486231570815E+308;
    }
    $249 = HEAP32[$i>>2]|0;
    $250 = (($249) + 1)|0;
    HEAP32[$i>>2] = $250;
   }
  }
 } while(0);
 $487 = HEAP32[$2>>2]|0;
 $488 = ($487|0)==(1);
 L161: do {
  if ($488) {
   $489 = (($val) + 8|0);
   HEAPF64[$489>>3] = 1.79769313486231570815E+308;
   HEAPF64[$val>>3] = 1.79769313486231570815E+308;
  } else {
   $490 = HEAP32[$2>>2]|0;
   $491 = ($490|0)==(2);
   if ($491) {
    $492 = HEAP32[$0>>2]|0;
    $493 = (+_gretl_model_get_double($492,41160));
    $494 = (($val) + 16|0);
    HEAPF64[$494>>3] = $493;
    $495 = HEAP32[$0>>2]|0;
    $496 = (+_gretl_model_get_double($495,41176));
    $497 = (($val) + 24|0);
    HEAPF64[$497>>3] = $496;
    HEAP32[$i>>2] = 4;
    while(1) {
     $498 = HEAP32[$i>>2]|0;
     $499 = ($498|0)<(14);
     if (!($499)) {
      break L161;
     }
     $500 = HEAP32[$i>>2]|0;
     $501 = (($val) + ($500<<3)|0);
     HEAPF64[$501>>3] = 1.79769313486231570815E+308;
     $502 = HEAP32[$i>>2]|0;
     $503 = (($502) + 1)|0;
     HEAP32[$i>>2] = $503;
    }
   }
  }
 } while(0);
 $504 = HEAP32[$tex>>2]|0;
 $505 = ($504|0)!=(0);
 do {
  if ($505) {
   $506 = HEAP32[$1>>2]|0;
   (_pputs($506,36816)|0);
   $507 = (($mtab) + 80|0);
   $508 = HEAP32[$507>>2]|0;
   $509 = ($508|0)!=(0);
   $510 = HEAP32[$1>>2]|0;
   if ($509) {
    (_pputs($510,41192)|0);
    break;
   } else {
    (_pputs($510,41216)|0);
    break;
   }
  } else {
   $511 = HEAP32[$rtf>>2]|0;
   $512 = ($511|0)!=(0);
   if ($512) {
    $513 = HEAP32[$1>>2]|0;
    (_pputs($513,41240)|0);
    break;
   }
   $514 = HEAP32[$csv>>2]|0;
   $515 = ($514|0)!=(0);
   if ($515) {
    $516 = HEAP32[$1>>2]|0;
    $517 = (_prn_delim($516)|0);
    $518 = $517 << 24 >> 24;
    $519 = (($mtab) + 76|0);
    HEAP32[$519>>2] = $518;
   }
  }
 } while(0);
 HEAP32[$mtab>>2] = $key;
 $520 = (($mtab) + 4|0);
 HEAP32[$520>>2] = $val;
 $521 = (($mtab) + 84|0);
 (_strcpy(($521|0),(41248|0))|0);
 $522 = HEAP32[$1>>2]|0;
 $523 = (_plain_format($522)|0);
 $524 = ($523|0)!=(0);
 if ($524) {
  $525 = (($mtab) + 72|0);
  $526 = HEAP32[$525>>2]|0;
  $527 = ($526|0)!=(0);
  if ($527) {
   _set_mtab_string_width($mtab);
  }
 }
 HEAP32[$i>>2] = 0;
 HEAP32[$j>>2] = 0;
 while(1) {
  $528 = HEAP32[$i>>2]|0;
  $529 = ($528|0)<(7);
  if (!($529)) {
   break;
  }
  $530 = HEAP32[$j>>2]|0;
  $531 = (($val) + ($530<<3)|0);
  $532 = +HEAPF64[$531>>3];
  $533 = $532 == 1.79769313486231570815E+308;
  if (!($533)) {
   $534 = HEAP32[$j>>2]|0;
   $535 = HEAP32[$1>>2]|0;
   _middle_table_row($mtab,$534,$535);
  }
  $536 = HEAP32[$i>>2]|0;
  $537 = (($536) + 1)|0;
  HEAP32[$i>>2] = $537;
  $538 = HEAP32[$j>>2]|0;
  $539 = (($538) + 2)|0;
  HEAP32[$j>>2] = $539;
 }
 $540 = HEAP32[$tex>>2]|0;
 $541 = ($540|0)!=(0);
 if ($541) {
  $542 = HEAP32[$1>>2]|0;
  (_pputs($542,41272)|0);
 } else {
  $543 = HEAP32[$rtf>>2]|0;
  $544 = ($543|0)!=(0);
  if ($544) {
   $545 = HEAP32[$1>>2]|0;
   (_pputs($545,41288)|0);
  }
 }
 $546 = HEAP32[$1>>2]|0;
 $547 = (_plain_format($546)|0);
 $548 = ($547|0)!=(0);
 if ($548) {
  $549 = HEAP32[$note>>2]|0;
  $550 = HEAP32[$note>>2]|0;
  $551 = (_strcmp($549,$550)|0);
  $552 = ($551|0)!=(0);
  if ($552) {
   $553 = HEAP32[$note>>2]|0;
   $554 = (_string_is_blank($553)|0);
   $555 = ($554|0)!=(0);
   if (!($555)) {
    $556 = HEAP32[$1>>2]|0;
    $557 = HEAP32[$note>>2]|0;
    (_pputs($556,$557)|0);
    $558 = HEAP32[$1>>2]|0;
    (_pputc($558,10)|0);
   }
  }
 }
 $559 = HEAP32[$tex>>2]|0;
 $560 = ($559|0)!=(0);
 if ($560) {
  STACKTOP = sp;return;
 }
 $561 = HEAP32[$rtf>>2]|0;
 $562 = ($561|0)!=(0);
 if ($562) {
  STACKTOP = sp;return;
 }
 $563 = HEAP32[$1>>2]|0;
 (_pputc($563,10)|0);
 STACKTOP = sp;return;
}
function _print_probit_rho($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, $vararg_buffer10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer10 = sp + 8|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $r = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$1>>2]|0;
 _ensure_vsep($2);
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(98);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = (($7) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 16;
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = HEAP32[$1>>2]|0;
    $13 = (_tex_format($12)|0);
    $14 = ($13|0)!=(0);
    $15 = HEAP32[$1>>2]|0;
    $16 = HEAP32[$0>>2]|0;
    $17 = (($16) + 120|0);
    $18 = +HEAPF64[$17>>3];
    if ($14) {
     HEAPF64[tempDoublePtr>>3]=$18;HEAP32[$vararg_buffer10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer10+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($15,40128,$vararg_buffer10)|0);
     break;
    } else {
     HEAPF64[tempDoublePtr>>3]=$18;HEAP32[$vararg_buffer10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer10+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($15,40160,$vararg_buffer10)|0);
     break;
    }
   }
  }
 } while(0);
 $19 = HEAP32[$1>>2]|0;
 $20 = (_tex_format($19)|0);
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $30 = HEAP32[$1>>2]|0;
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + 216|0);
  $33 = +HEAPF64[$32>>3];
  HEAPF64[tempDoublePtr>>3]=$33;HEAP32[$vararg_buffer10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer10+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($30,40224,$vararg_buffer10)|0);
  $34 = HEAP32[$1>>2]|0;
  _gretl_prn_newline($34);
  STACKTOP = sp;return;
 }
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 216|0);
 $24 = +HEAPF64[$23>>3];
 HEAPF64[$r>>3] = $24;
 $25 = +HEAPF64[$r>>3];
 $26 = $25 < 0.0;
 $27 = HEAP32[$1>>2]|0;
 $28 = +HEAPF64[$r>>3];
 if ($26) {
  $29 = (+Math_abs((+$28)));
  HEAPF64[tempDoublePtr>>3]=$29;HEAP32[$vararg_buffer10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer10+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($27,40176,$vararg_buffer10)|0);
  $34 = HEAP32[$1>>2]|0;
  _gretl_prn_newline($34);
  STACKTOP = sp;return;
 } else {
  HEAPF64[tempDoublePtr>>3]=$28;HEAP32[$vararg_buffer10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer10+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($27,40200,$vararg_buffer10)|0);
  $34 = HEAP32[$1>>2]|0;
  _gretl_prn_newline($34);
  STACKTOP = sp;return;
 }
}
function _print_liml_equation_data($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $X2 = 0, $idf = 0, $lmin = 0, $pv = 0, $vararg_buffer21 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer21 = sp + 24|0;
 $0 = sp + 56|0;
 $1 = sp + 52|0;
 $lmin = sp + 16|0;
 $idf = sp + 48|0;
 $X2 = sp + 8|0;
 $pv = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (+_gretl_model_get_double($2,39944));
 HEAPF64[$lmin>>3] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_gretl_model_get_int($4,39952)|0);
 HEAP32[$idf>>2] = $5;
 $6 = +HEAPF64[$lmin>>3];
 $7 = $6 == 1.79769313486231570815E+308;
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$1>>2]|0;
 _ensure_vsep($8);
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 do {
  if (!($12)) {
   $13 = HEAP32[$1>>2]|0;
   $14 = (_tex_format($13)|0);
   $15 = ($14|0)!=(0);
   $16 = HEAP32[$1>>2]|0;
   $17 = +HEAPF64[$lmin>>3];
   if ($15) {
    HEAP32[$vararg_buffer21>>2] = 39976;
    $vararg_ptr1 = (($vararg_buffer21) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($16,39960,$vararg_buffer21)|0);
    break;
   } else {
    HEAP32[$vararg_buffer21>>2] = 39976;
    $vararg_ptr5 = (($vararg_buffer21) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($16,39544,$vararg_buffer21)|0);
    break;
   }
  }
 } while(0);
 $18 = HEAP32[$idf>>2]|0;
 $19 = ($18|0)>(0);
 if (!($19)) {
  $43 = HEAP32[$idf>>2]|0;
  $44 = ($43|0)==(0);
  if (!($44)) {
   STACKTOP = sp;return;
  }
  $45 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer21>>2] = 40096;
  (_pprintf($45,34528,$vararg_buffer21)|0);
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (+($22|0));
 $24 = +HEAPF64[$lmin>>3];
 $25 = (+Math_log((+$24)));
 $26 = $23 * $25;
 HEAPF64[$X2>>3] = $26;
 $27 = HEAP32[$idf>>2]|0;
 $28 = (+($27|0));
 $29 = +HEAPF64[$X2>>3];
 $30 = (+_chisq_cdf_comp($28,$29));
 HEAPF64[$pv>>3] = $30;
 $31 = HEAP32[$1>>2]|0;
 $32 = (_tex_format($31)|0);
 $33 = ($32|0)!=(0);
 $34 = HEAP32[$1>>2]|0;
 if ($33) {
  $35 = HEAP32[$idf>>2]|0;
  $36 = +HEAPF64[$X2>>3];
  $37 = +HEAPF64[$pv>>3];
  HEAP32[$vararg_buffer21>>2] = 40040;
  $vararg_ptr9 = (($vararg_buffer21) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $35;
  $vararg_ptr10 = (($vararg_buffer21) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$36;HEAP32[$vararg_ptr10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr10+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr11 = (($vararg_buffer21) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$37;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($34,40000,$vararg_buffer21)|0);
  STACKTOP = sp;return;
 } else {
  (_rtf_format($34)|0);
  $38 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer21>>2] = 40040;
  (_pprintf($38,38232,$vararg_buffer21)|0);
  $39 = HEAP32[$1>>2]|0;
  $40 = HEAP32[$idf>>2]|0;
  $41 = +HEAPF64[$X2>>3];
  $42 = +HEAPF64[$pv>>3];
  HEAP32[$vararg_buffer21>>2] = 33432;
  $vararg_ptr18 = (($vararg_buffer21) + 4|0);
  HEAP32[$vararg_ptr18>>2] = $40;
  $vararg_ptr19 = (($vararg_buffer21) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$41;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr20 = (($vararg_buffer21) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$42;HEAP32[$vararg_ptr20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr20+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($39,40072,$vararg_buffer21)|0);
  STACKTOP = sp;return;
 }
}
function _print_arma_roots($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $P = 0, $Q = 0, $fr = 0;
 var $hline = 0, $i = 0, $k = 0, $mod = 0, $p = 0, $q = 0, $roots = 0, $vararg_buffer14 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer14 = sp + 16|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $roots = sp + 60|0;
 $p = sp + 56|0;
 $q = sp + 52|0;
 $P = sp + 48|0;
 $Q = sp + 44|0;
 $i = sp + 40|0;
 $k = sp + 36|0;
 $hline = sp + 32|0;
 $mod = sp + 8|0;
 $fr = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_data($2,34088)|0);
 HEAP32[$roots>>2] = $3;
 $4 = HEAP32[$roots>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (_arma_model_nonseasonal_AR_order($6)|0);
 HEAP32[$p>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (_arma_model_nonseasonal_MA_order($8)|0);
 HEAP32[$q>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = (_gretl_model_get_int($10,34096)|0);
 HEAP32[$P>>2] = $11;
 $12 = HEAP32[$0>>2]|0;
 $13 = (_gretl_model_get_int($12,34104)|0);
 HEAP32[$Q>>2] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = (_plain_format($14)|0);
 $16 = ($15|0)!=(0);
 $17 = HEAP32[$1>>2]|0;
 do {
  if ($16) {
   $18 = HEAP32[32712>>2]|0;
   $19 = HEAP32[32824>>2]|0;
   HEAP32[$vararg_buffer14>>2] = $18;
   $vararg_ptr1 = (($vararg_buffer14) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $19;
   (_pprintf($17,34112,$vararg_buffer14)|0);
  } else {
   $20 = (_tex_format($17)|0);
   $21 = ($20|0)!=(0);
   $22 = HEAP32[$1>>2]|0;
   if ($21) {
    (_pputs($22,34120)|0);
    $23 = HEAP32[$1>>2]|0;
    (_pputs($23,34136)|0);
    $24 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer14>>2] = 34208;
    $vararg_ptr5 = (($vararg_buffer14) + 4|0);
    HEAP32[$vararg_ptr5>>2] = 34216;
    $vararg_ptr6 = (($vararg_buffer14) + 8|0);
    HEAP32[$vararg_ptr6>>2] = 34232;
    $vararg_ptr7 = (($vararg_buffer14) + 12|0);
    HEAP32[$vararg_ptr7>>2] = 34240;
    (_pprintf($24,34168,$vararg_buffer14)|0);
    break;
   }
   $25 = (_rtf_format($22)|0);
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = HEAP32[$1>>2]|0;
    (_pputs($27,34256)|0);
    $28 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer14>>2] = 34208;
    $vararg_ptr11 = (($vararg_buffer14) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 34216;
    $vararg_ptr12 = (($vararg_buffer14) + 8|0);
    HEAP32[$vararg_ptr12>>2] = 34232;
    $vararg_ptr13 = (($vararg_buffer14) + 12|0);
    HEAP32[$vararg_ptr13>>2] = 34240;
    (_pprintf($28,34376,$vararg_buffer14)|0);
   }
  }
 } while(0);
 $29 = HEAP32[$p>>2]|0;
 $30 = ($29|0)>(0);
 L12: do {
  if ($30) {
   HEAP32[$k>>2] = 1;
   $31 = HEAP32[$1>>2]|0;
   _root_start(34480,$31);
   HEAP32[$i>>2] = 0;
   while(1) {
    $32 = HEAP32[$i>>2]|0;
    $33 = HEAP32[$p>>2]|0;
    $34 = ($32|0)<($33|0);
    if (!($34)) {
     break L12;
    }
    $35 = HEAP32[$i>>2]|0;
    $36 = HEAP32[$roots>>2]|0;
    $37 = (($36) + ($35<<4)|0);
    $38 = (($37) + 8|0);
    $39 = +HEAPF64[$38>>3];
    $40 = $39 != 0.0;
    $41 = HEAP32[$i>>2]|0;
    $42 = HEAP32[$roots>>2]|0;
    $43 = (($42) + ($41<<4)|0);
    $44 = +HEAPF64[$43>>3];
    if ($40) {
     $45 = HEAP32[$i>>2]|0;
     $46 = HEAP32[$roots>>2]|0;
     $47 = (($46) + ($45<<4)|0);
     $48 = +HEAPF64[$47>>3];
     $49 = $44 * $48;
     $50 = HEAP32[$i>>2]|0;
     $51 = HEAP32[$roots>>2]|0;
     $52 = (($51) + ($50<<4)|0);
     $53 = (($52) + 8|0);
     $54 = +HEAPF64[$53>>3];
     $55 = HEAP32[$i>>2]|0;
     $56 = HEAP32[$roots>>2]|0;
     $57 = (($56) + ($55<<4)|0);
     $58 = (($57) + 8|0);
     $59 = +HEAPF64[$58>>3];
     $60 = $54 * $59;
     $61 = $49 + $60;
     HEAPF64[$mod>>3] = $61;
     $62 = +HEAPF64[$mod>>3];
     $63 = (+Math_sqrt((+$62)));
     HEAPF64[$mod>>3] = $63;
    } else {
     $64 = (+Math_abs((+$44)));
     HEAPF64[$mod>>3] = $64;
    }
    $65 = HEAP32[$i>>2]|0;
    $66 = HEAP32[$roots>>2]|0;
    $67 = (($66) + ($65<<4)|0);
    $68 = (($67) + 8|0);
    $69 = +HEAPF64[$68>>3];
    $70 = HEAP32[$i>>2]|0;
    $71 = HEAP32[$roots>>2]|0;
    $72 = (($71) + ($70<<4)|0);
    $73 = +HEAPF64[$72>>3];
    $74 = (+Math_atan2((+$69),(+$73)));
    $75 = $74 / 6.283185307179586232;
    HEAPF64[$fr>>3] = $75;
    $76 = HEAP32[$i>>2]|0;
    $77 = HEAP32[$p>>2]|0;
    $78 = (($77) - 1)|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$q>>2]|0;
     $81 = ($80|0)==(0);
     if ($81) {
      $82 = HEAP32[$P>>2]|0;
      $83 = ($82|0)==(0);
      if ($83) {
       $84 = HEAP32[$Q>>2]|0;
       $85 = ($84|0)==(0);
       if ($85) {
        HEAP32[$hline>>2] = 1;
       } else {
        label = 19;
       }
      } else {
       label = 19;
      }
     } else {
      label = 19;
     }
    } else {
     label = 19;
    }
    if ((label|0) == 19) {
     label = 0;
     HEAP32[$hline>>2] = 0;
    }
    $86 = HEAP32[$i>>2]|0;
    $87 = HEAP32[$roots>>2]|0;
    $88 = (($87) + ($86<<4)|0);
    $89 = +HEAPF64[$88>>3];
    $90 = HEAP32[$i>>2]|0;
    $91 = HEAP32[$roots>>2]|0;
    $92 = (($91) + ($90<<4)|0);
    $93 = (($92) + 8|0);
    $94 = +HEAPF64[$93>>3];
    $95 = +HEAPF64[$mod>>3];
    $96 = +HEAPF64[$fr>>3];
    $97 = HEAP32[$k>>2]|0;
    $98 = (($97) + 1)|0;
    HEAP32[$k>>2] = $98;
    $99 = HEAP32[$hline>>2]|0;
    $100 = HEAP32[$1>>2]|0;
    _print_root($89,$94,$95,$96,$97,$99,$100);
    $101 = HEAP32[$i>>2]|0;
    $102 = (($101) + 1)|0;
    HEAP32[$i>>2] = $102;
   }
  }
 } while(0);
 $103 = HEAP32[$P>>2]|0;
 $104 = ($103|0)>(0);
 L30: do {
  if ($104) {
   HEAP32[$k>>2] = 1;
   $105 = HEAP32[$1>>2]|0;
   _root_start(34488,$105);
   $106 = HEAP32[$p>>2]|0;
   HEAP32[$i>>2] = $106;
   while(1) {
    $107 = HEAP32[$i>>2]|0;
    $108 = HEAP32[$p>>2]|0;
    $109 = HEAP32[$P>>2]|0;
    $110 = (($108) + ($109))|0;
    $111 = ($107|0)<($110|0);
    if (!($111)) {
     break L30;
    }
    $112 = HEAP32[$i>>2]|0;
    $113 = HEAP32[$roots>>2]|0;
    $114 = (($113) + ($112<<4)|0);
    $115 = (($114) + 8|0);
    $116 = +HEAPF64[$115>>3];
    $117 = $116 != 0.0;
    $118 = HEAP32[$i>>2]|0;
    $119 = HEAP32[$roots>>2]|0;
    $120 = (($119) + ($118<<4)|0);
    $121 = +HEAPF64[$120>>3];
    if ($117) {
     $122 = HEAP32[$i>>2]|0;
     $123 = HEAP32[$roots>>2]|0;
     $124 = (($123) + ($122<<4)|0);
     $125 = +HEAPF64[$124>>3];
     $126 = $121 * $125;
     $127 = HEAP32[$i>>2]|0;
     $128 = HEAP32[$roots>>2]|0;
     $129 = (($128) + ($127<<4)|0);
     $130 = (($129) + 8|0);
     $131 = +HEAPF64[$130>>3];
     $132 = HEAP32[$i>>2]|0;
     $133 = HEAP32[$roots>>2]|0;
     $134 = (($133) + ($132<<4)|0);
     $135 = (($134) + 8|0);
     $136 = +HEAPF64[$135>>3];
     $137 = $131 * $136;
     $138 = $126 + $137;
     HEAPF64[$mod>>3] = $138;
     $139 = +HEAPF64[$mod>>3];
     $140 = (+Math_sqrt((+$139)));
     HEAPF64[$mod>>3] = $140;
    } else {
     $141 = (+Math_abs((+$121)));
     HEAPF64[$mod>>3] = $141;
    }
    $142 = HEAP32[$i>>2]|0;
    $143 = HEAP32[$roots>>2]|0;
    $144 = (($143) + ($142<<4)|0);
    $145 = (($144) + 8|0);
    $146 = +HEAPF64[$145>>3];
    $147 = HEAP32[$i>>2]|0;
    $148 = HEAP32[$roots>>2]|0;
    $149 = (($148) + ($147<<4)|0);
    $150 = +HEAPF64[$149>>3];
    $151 = (+Math_atan2((+$146),(+$150)));
    $152 = $151 / 6.283185307179586232;
    HEAPF64[$fr>>3] = $152;
    $153 = HEAP32[$i>>2]|0;
    $154 = HEAP32[$p>>2]|0;
    $155 = HEAP32[$P>>2]|0;
    $156 = (($154) + ($155))|0;
    $157 = (($156) - 1)|0;
    $158 = ($153|0)==($157|0);
    if ($158) {
     $159 = HEAP32[$q>>2]|0;
     $160 = ($159|0)==(0);
     if ($160) {
      $161 = HEAP32[$Q>>2]|0;
      $162 = ($161|0)==(0);
      if ($162) {
       HEAP32[$hline>>2] = 1;
      } else {
       label = 31;
      }
     } else {
      label = 31;
     }
    } else {
     label = 31;
    }
    if ((label|0) == 31) {
     label = 0;
     HEAP32[$hline>>2] = 0;
    }
    $163 = HEAP32[$i>>2]|0;
    $164 = HEAP32[$roots>>2]|0;
    $165 = (($164) + ($163<<4)|0);
    $166 = +HEAPF64[$165>>3];
    $167 = HEAP32[$i>>2]|0;
    $168 = HEAP32[$roots>>2]|0;
    $169 = (($168) + ($167<<4)|0);
    $170 = (($169) + 8|0);
    $171 = +HEAPF64[$170>>3];
    $172 = +HEAPF64[$mod>>3];
    $173 = +HEAPF64[$fr>>3];
    $174 = HEAP32[$k>>2]|0;
    $175 = (($174) + 1)|0;
    HEAP32[$k>>2] = $175;
    $176 = HEAP32[$hline>>2]|0;
    $177 = HEAP32[$1>>2]|0;
    _print_root($166,$171,$172,$173,$174,$176,$177);
    $178 = HEAP32[$i>>2]|0;
    $179 = (($178) + 1)|0;
    HEAP32[$i>>2] = $179;
   }
  }
 } while(0);
 $180 = HEAP32[$q>>2]|0;
 $181 = ($180|0)>(0);
 L47: do {
  if ($181) {
   HEAP32[$k>>2] = 1;
   $182 = HEAP32[$1>>2]|0;
   _root_start(34504,$182);
   $183 = HEAP32[$p>>2]|0;
   $184 = HEAP32[$P>>2]|0;
   $185 = (($183) + ($184))|0;
   HEAP32[$i>>2] = $185;
   while(1) {
    $186 = HEAP32[$i>>2]|0;
    $187 = HEAP32[$p>>2]|0;
    $188 = HEAP32[$P>>2]|0;
    $189 = (($187) + ($188))|0;
    $190 = HEAP32[$q>>2]|0;
    $191 = (($189) + ($190))|0;
    $192 = ($186|0)<($191|0);
    if (!($192)) {
     break L47;
    }
    $193 = HEAP32[$i>>2]|0;
    $194 = HEAP32[$roots>>2]|0;
    $195 = (($194) + ($193<<4)|0);
    $196 = (($195) + 8|0);
    $197 = +HEAPF64[$196>>3];
    $198 = $197 != 0.0;
    $199 = HEAP32[$i>>2]|0;
    $200 = HEAP32[$roots>>2]|0;
    $201 = (($200) + ($199<<4)|0);
    $202 = +HEAPF64[$201>>3];
    if ($198) {
     $203 = HEAP32[$i>>2]|0;
     $204 = HEAP32[$roots>>2]|0;
     $205 = (($204) + ($203<<4)|0);
     $206 = +HEAPF64[$205>>3];
     $207 = $202 * $206;
     $208 = HEAP32[$i>>2]|0;
     $209 = HEAP32[$roots>>2]|0;
     $210 = (($209) + ($208<<4)|0);
     $211 = (($210) + 8|0);
     $212 = +HEAPF64[$211>>3];
     $213 = HEAP32[$i>>2]|0;
     $214 = HEAP32[$roots>>2]|0;
     $215 = (($214) + ($213<<4)|0);
     $216 = (($215) + 8|0);
     $217 = +HEAPF64[$216>>3];
     $218 = $212 * $217;
     $219 = $207 + $218;
     HEAPF64[$mod>>3] = $219;
     $220 = +HEAPF64[$mod>>3];
     $221 = (+Math_sqrt((+$220)));
     HEAPF64[$mod>>3] = $221;
    } else {
     $222 = (+Math_abs((+$202)));
     HEAPF64[$mod>>3] = $222;
    }
    $223 = HEAP32[$i>>2]|0;
    $224 = HEAP32[$roots>>2]|0;
    $225 = (($224) + ($223<<4)|0);
    $226 = (($225) + 8|0);
    $227 = +HEAPF64[$226>>3];
    $228 = HEAP32[$i>>2]|0;
    $229 = HEAP32[$roots>>2]|0;
    $230 = (($229) + ($228<<4)|0);
    $231 = +HEAPF64[$230>>3];
    $232 = (+Math_atan2((+$227),(+$231)));
    $233 = $232 / 6.283185307179586232;
    HEAPF64[$fr>>3] = $233;
    $234 = HEAP32[$i>>2]|0;
    $235 = HEAP32[$p>>2]|0;
    $236 = HEAP32[$P>>2]|0;
    $237 = (($235) + ($236))|0;
    $238 = HEAP32[$q>>2]|0;
    $239 = (($237) + ($238))|0;
    $240 = (($239) - 1)|0;
    $241 = ($234|0)==($240|0);
    if ($241) {
     $242 = HEAP32[$Q>>2]|0;
     $243 = ($242|0)==(0);
     if ($243) {
      HEAP32[$hline>>2] = 1;
     } else {
      label = 42;
     }
    } else {
     label = 42;
    }
    if ((label|0) == 42) {
     label = 0;
     HEAP32[$hline>>2] = 0;
    }
    $244 = HEAP32[$i>>2]|0;
    $245 = HEAP32[$roots>>2]|0;
    $246 = (($245) + ($244<<4)|0);
    $247 = +HEAPF64[$246>>3];
    $248 = HEAP32[$i>>2]|0;
    $249 = HEAP32[$roots>>2]|0;
    $250 = (($249) + ($248<<4)|0);
    $251 = (($250) + 8|0);
    $252 = +HEAPF64[$251>>3];
    $253 = +HEAPF64[$mod>>3];
    $254 = +HEAPF64[$fr>>3];
    $255 = HEAP32[$k>>2]|0;
    $256 = (($255) + 1)|0;
    HEAP32[$k>>2] = $256;
    $257 = HEAP32[$hline>>2]|0;
    $258 = HEAP32[$1>>2]|0;
    _print_root($247,$252,$253,$254,$255,$257,$258);
    $259 = HEAP32[$i>>2]|0;
    $260 = (($259) + 1)|0;
    HEAP32[$i>>2] = $260;
   }
  }
 } while(0);
 $261 = HEAP32[$Q>>2]|0;
 $262 = ($261|0)>(0);
 L63: do {
  if ($262) {
   HEAP32[$k>>2] = 1;
   $263 = HEAP32[$1>>2]|0;
   _root_start(34512,$263);
   $264 = HEAP32[$p>>2]|0;
   $265 = HEAP32[$P>>2]|0;
   $266 = (($264) + ($265))|0;
   $267 = HEAP32[$q>>2]|0;
   $268 = (($266) + ($267))|0;
   HEAP32[$i>>2] = $268;
   while(1) {
    $269 = HEAP32[$i>>2]|0;
    $270 = HEAP32[$p>>2]|0;
    $271 = HEAP32[$P>>2]|0;
    $272 = (($270) + ($271))|0;
    $273 = HEAP32[$q>>2]|0;
    $274 = (($272) + ($273))|0;
    $275 = HEAP32[$Q>>2]|0;
    $276 = (($274) + ($275))|0;
    $277 = ($269|0)<($276|0);
    if (!($277)) {
     break L63;
    }
    $278 = HEAP32[$i>>2]|0;
    $279 = HEAP32[$roots>>2]|0;
    $280 = (($279) + ($278<<4)|0);
    $281 = (($280) + 8|0);
    $282 = +HEAPF64[$281>>3];
    $283 = $282 != 0.0;
    $284 = HEAP32[$i>>2]|0;
    $285 = HEAP32[$roots>>2]|0;
    $286 = (($285) + ($284<<4)|0);
    $287 = +HEAPF64[$286>>3];
    if ($283) {
     $288 = HEAP32[$i>>2]|0;
     $289 = HEAP32[$roots>>2]|0;
     $290 = (($289) + ($288<<4)|0);
     $291 = +HEAPF64[$290>>3];
     $292 = $287 * $291;
     $293 = HEAP32[$i>>2]|0;
     $294 = HEAP32[$roots>>2]|0;
     $295 = (($294) + ($293<<4)|0);
     $296 = (($295) + 8|0);
     $297 = +HEAPF64[$296>>3];
     $298 = HEAP32[$i>>2]|0;
     $299 = HEAP32[$roots>>2]|0;
     $300 = (($299) + ($298<<4)|0);
     $301 = (($300) + 8|0);
     $302 = +HEAPF64[$301>>3];
     $303 = $297 * $302;
     $304 = $292 + $303;
     HEAPF64[$mod>>3] = $304;
     $305 = +HEAPF64[$mod>>3];
     $306 = (+Math_sqrt((+$305)));
     HEAPF64[$mod>>3] = $306;
    } else {
     $307 = (+Math_abs((+$287)));
     HEAPF64[$mod>>3] = $307;
    }
    $308 = HEAP32[$i>>2]|0;
    $309 = HEAP32[$roots>>2]|0;
    $310 = (($309) + ($308<<4)|0);
    $311 = (($310) + 8|0);
    $312 = +HEAPF64[$311>>3];
    $313 = HEAP32[$i>>2]|0;
    $314 = HEAP32[$roots>>2]|0;
    $315 = (($314) + ($313<<4)|0);
    $316 = +HEAPF64[$315>>3];
    $317 = (+Math_atan2((+$312),(+$316)));
    $318 = $317 / 6.283185307179586232;
    HEAPF64[$fr>>3] = $318;
    $319 = HEAP32[$i>>2]|0;
    $320 = HEAP32[$p>>2]|0;
    $321 = HEAP32[$P>>2]|0;
    $322 = (($320) + ($321))|0;
    $323 = HEAP32[$q>>2]|0;
    $324 = (($322) + ($323))|0;
    $325 = HEAP32[$Q>>2]|0;
    $326 = (($324) + ($325))|0;
    $327 = (($326) - 1)|0;
    $328 = ($319|0)==($327|0);
    if ($328) {
     HEAP32[$hline>>2] = 1;
    } else {
     HEAP32[$hline>>2] = 0;
    }
    $329 = HEAP32[$i>>2]|0;
    $330 = HEAP32[$roots>>2]|0;
    $331 = (($330) + ($329<<4)|0);
    $332 = +HEAPF64[$331>>3];
    $333 = HEAP32[$i>>2]|0;
    $334 = HEAP32[$roots>>2]|0;
    $335 = (($334) + ($333<<4)|0);
    $336 = (($335) + 8|0);
    $337 = +HEAPF64[$336>>3];
    $338 = +HEAPF64[$mod>>3];
    $339 = +HEAPF64[$fr>>3];
    $340 = HEAP32[$k>>2]|0;
    $341 = (($340) + 1)|0;
    HEAP32[$k>>2] = $341;
    $342 = HEAP32[$hline>>2]|0;
    $343 = HEAP32[$1>>2]|0;
    _print_root($332,$337,$338,$339,$340,$342,$343);
    $344 = HEAP32[$i>>2]|0;
    $345 = (($344) + 1)|0;
    HEAP32[$i>>2] = $345;
   }
  }
 } while(0);
 $346 = HEAP32[$1>>2]|0;
 $347 = (_plain_format($346)|0);
 $348 = ($347|0)!=(0);
 $349 = HEAP32[$1>>2]|0;
 if ($348) {
  $350 = HEAP32[32824>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $350;
  (_pprintf($349,34528,$vararg_buffer14)|0);
  STACKTOP = sp;return;
 }
 $351 = (_tex_format($349)|0);
 $352 = ($351|0)!=(0);
 $353 = HEAP32[$1>>2]|0;
 if ($352) {
  (_pputs($353,34536)|0);
  STACKTOP = sp;return;
 }
 $354 = (_rtf_format($353)|0);
 $355 = ($354|0)!=(0);
 if (!($355)) {
  STACKTOP = sp;return;
 }
 $356 = HEAP32[$1>>2]|0;
 (_pputs($356,34552)|0);
 STACKTOP = sp;return;
}
function _garch_variance_line($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $LR = 0, $LRdf = 0;
 var $v = 0, $vararg_buffer23 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $varstr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer23 = sp + 16|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $varstr = sp + 44|0;
 $v = sp + 8|0;
 $LR = sp;
 $LRdf = sp + 40|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 HEAP32[$varstr>>2] = 39736;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 120|0);
 $4 = +HEAPF64[$3>>3];
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 120|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $4 * $7;
 HEAPF64[$v>>3] = $8;
 $9 = HEAP32[$1>>2]|0;
 _ensure_vsep($9);
 $10 = HEAP32[$1>>2]|0;
 $11 = (_plain_format($10)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $14 = (+_gretl_model_get_double($13,39768));
  HEAPF64[$LR>>3] = $14;
  $15 = HEAP32[$0>>2]|0;
  $16 = (_gretl_model_get_int($15,39784)|0);
  HEAP32[$LRdf>>2] = $16;
  $17 = HEAP32[$1>>2]|0;
  $18 = HEAP32[$varstr>>2]|0;
  $19 = +HEAPF64[$v>>3];
  HEAP32[$vararg_buffer23>>2] = $18;
  $vararg_ptr1 = (($vararg_buffer23) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 6;
  $vararg_ptr2 = (($vararg_buffer23) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$19;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($17,39800,$vararg_buffer23)|0);
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 16777216;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = HEAP32[$1>>2]|0;
   HEAP32[$vararg_buffer23>>2] = 39824;
   (_pprintf($25,39816,$vararg_buffer23)|0);
  }
  $26 = +HEAPF64[$LR>>3];
  $27 = $26 >= 0.0;
  if ($27) {
   $28 = HEAP32[$LRdf>>2]|0;
   $29 = ($28|0)>(0);
   if ($29) {
    $30 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer23>>2] = 39864;
    (_pprintf($30,39856,$vararg_buffer23)|0);
    $31 = HEAP32[$1>>2]|0;
    $32 = HEAP32[$LRdf>>2]|0;
    $33 = +HEAPF64[$LR>>3];
    $34 = HEAP32[$LRdf>>2]|0;
    $35 = (+($34|0));
    $36 = +HEAPF64[$LR>>3];
    $37 = (+_chisq_cdf_comp($35,$36));
    HEAP32[$vararg_buffer23>>2] = 33432;
    $vararg_ptr12 = (($vararg_buffer23) + 4|0);
    HEAP32[$vararg_ptr12>>2] = $32;
    $vararg_ptr13 = (($vararg_buffer23) + 8|0);
    HEAPF64[tempDoublePtr>>3]=$33;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $vararg_ptr14 = (($vararg_buffer23) + 16|0);
    HEAPF64[tempDoublePtr>>3]=$37;HEAP32[$vararg_ptr14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr14+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($31,39904,$vararg_buffer23)|0);
   }
  }
  $38 = HEAP32[$1>>2]|0;
  (_pputc($38,10)|0);
  STACKTOP = sp;return;
 }
 $39 = HEAP32[$1>>2]|0;
 $40 = (_rtf_format($39)|0);
 $41 = ($40|0)!=(0);
 $42 = HEAP32[$1>>2]|0;
 if ($41) {
  $43 = HEAP32[$varstr>>2]|0;
  $44 = +HEAPF64[$v>>3];
  HEAP32[$vararg_buffer23>>2] = $43;
  $vararg_ptr18 = (($vararg_buffer23) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$44;HEAP32[$vararg_ptr18>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr18+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($42,33168,$vararg_buffer23)|0);
  STACKTOP = sp;return;
 }
 $45 = (_tex_format($42)|0);
 $46 = ($45|0)!=(0);
 $47 = HEAP32[$1>>2]|0;
 if ($46) {
  $48 = HEAP32[$varstr>>2]|0;
  $49 = +HEAPF64[$v>>3];
  HEAP32[$vararg_buffer23>>2] = $48;
  $vararg_ptr22 = (($vararg_buffer23) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$49;HEAP32[$vararg_ptr22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr22+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($47,39928,$vararg_buffer23)|0);
  STACKTOP = sp;return;
 }
 $50 = (_csv_format($47)|0);
 $51 = ($50|0)!=(0);
 if (!($51)) {
  STACKTOP = sp;return;
 }
 $52 = HEAP32[$1>>2]|0;
 $53 = HEAP32[$varstr>>2]|0;
 $54 = HEAP32[$1>>2]|0;
 $55 = (_prn_delim($54)|0);
 $56 = $55 << 24 >> 24;
 $57 = +HEAPF64[$v>>3];
 HEAP32[$vararg_buffer23>>2] = $53;
 $vararg_ptr26 = (($vararg_buffer23) + 4|0);
 HEAP32[$vararg_ptr26>>2] = $56;
 $vararg_ptr27 = (($vararg_buffer23) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$57;HEAP32[$vararg_ptr27>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr27+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($52,33192,$vararg_buffer23)|0);
 STACKTOP = sp;return;
}
function _print_heckit_stats($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cenobs = 0;
 var $cenpc = 0, $totobs = 0, $vararg_buffer20 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer20 = sp + 8|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $totobs = sp + 28|0;
 $cenobs = sp + 24|0;
 $cenpc = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_int($2,33904)|0);
 HEAP32[$totobs>>2] = $3;
 $4 = HEAP32[$totobs>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) - ($7))|0;
 HEAP32[$cenobs>>2] = $8;
 $9 = HEAP32[$cenobs>>2]|0;
 $10 = (+($9|0));
 $11 = 100.0 * $10;
 $12 = HEAP32[$totobs>>2]|0;
 $13 = (+($12|0));
 $14 = $11 / $13;
 HEAPF64[$cenpc>>3] = $14;
 $15 = HEAP32[$1>>2]|0;
 _ensure_vsep($15);
 $16 = HEAP32[$1>>2]|0;
 $17 = (_plain_format($16)|0);
 $18 = ($17|0)!=(0);
 $19 = HEAP32[$1>>2]|0;
 if ($18) {
  $20 = HEAP32[$totobs>>2]|0;
  HEAP32[$vararg_buffer20>>2] = 33920;
  $vararg_ptr1 = (($vararg_buffer20) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $20;
  (_pprintf($19,33912,$vararg_buffer20)|0);
  $21 = HEAP32[$1>>2]|0;
  $22 = HEAP32[$cenobs>>2]|0;
  $23 = +HEAPF64[$cenpc>>3];
  HEAP32[$vararg_buffer20>>2] = 33968;
  $vararg_ptr5 = (($vararg_buffer20) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $22;
  $vararg_ptr6 = (($vararg_buffer20) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$23;HEAP32[$vararg_ptr6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr6+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($21,33944,$vararg_buffer20)|0);
  $24 = HEAP32[$1>>2]|0;
  (_pputc($24,10)|0);
  STACKTOP = sp;return;
 }
 $25 = (_rtf_format($19)|0);
 $26 = ($25|0)!=(0);
 $27 = HEAP32[$1>>2]|0;
 if ($26) {
  $28 = HEAP32[$totobs>>2]|0;
  HEAP32[$vararg_buffer20>>2] = 33920;
  $vararg_ptr10 = (($vararg_buffer20) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $28;
  (_pprintf($27,33992,$vararg_buffer20)|0);
  $29 = HEAP32[$1>>2]|0;
  $30 = HEAP32[$cenobs>>2]|0;
  $31 = +HEAPF64[$cenpc>>3];
  HEAP32[$vararg_buffer20>>2] = 33968;
  $vararg_ptr14 = (($vararg_buffer20) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $30;
  $vararg_ptr15 = (($vararg_buffer20) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$31;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($29,34016,$vararg_buffer20)|0);
  STACKTOP = sp;return;
 }
 $32 = (_tex_format($27)|0);
 $33 = ($32|0)!=(0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = HEAP32[$1>>2]|0;
 $35 = HEAP32[$totobs>>2]|0;
 HEAP32[$vararg_buffer20>>2] = 33920;
 $vararg_ptr19 = (($vararg_buffer20) + 4|0);
 HEAP32[$vararg_ptr19>>2] = $35;
 (_pprintf($34,34048,$vararg_buffer20)|0);
 $36 = HEAP32[$1>>2]|0;
 $37 = HEAP32[$cenobs>>2]|0;
 $38 = +HEAPF64[$cenpc>>3];
 HEAP32[$vararg_buffer20>>2] = 33968;
 $vararg_ptr23 = (($vararg_buffer20) + 4|0);
 HEAP32[$vararg_ptr23>>2] = $37;
 $vararg_ptr24 = (($vararg_buffer20) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$38;HEAP32[$vararg_ptr24>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr24+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($36,34064,$vararg_buffer20)|0);
 STACKTOP = sp;return;
}
function _panel_variance_lines($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $bs2 = 0, $d = 0, $theta = 0, $vararg_buffer41 = 0, $vararg_ptr1 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0;
 var $ws2 = 0, $xstr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer41 = sp + 24|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $ws2 = sp + 16|0;
 $bs2 = sp + 8|0;
 $theta = sp;
 $xstr = sp + 56|0;
 $d = sp + 48|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (+_gretl_model_get_double($2,39488));
 HEAPF64[$ws2>>3] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (+_gretl_model_get_double($4,39504));
 HEAPF64[$bs2>>3] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (+_gretl_model_get_double($6,39528));
 HEAPF64[$theta>>3] = $7;
 $8 = +HEAPF64[$ws2>>3];
 $9 = $8 == 1.79769313486231570815E+308;
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = +HEAPF64[$bs2>>3];
 $11 = $10 == 1.79769313486231570815E+308;
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$1>>2]|0;
 _ensure_vsep($12);
 $13 = HEAP32[$1>>2]|0;
 $14 = (_plain_format($13)|0);
 $15 = ($14|0)!=(0);
 $16 = HEAP32[$1>>2]|0;
 if ($15) {
  $17 = +HEAPF64[$ws2>>3];
  HEAP32[$vararg_buffer41>>2] = 39560;
  $vararg_ptr1 = (($vararg_buffer41) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($16,39544,$vararg_buffer41)|0);
  $18 = HEAP32[$1>>2]|0;
  $19 = +HEAPF64[$bs2>>3];
  HEAP32[$vararg_buffer41>>2] = 39584;
  $vararg_ptr5 = (($vararg_buffer41) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$19;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($18,39544,$vararg_buffer41)|0);
  $20 = +HEAPF64[$theta>>3];
  $21 = $20 == 1.79769313486231570815E+308;
  if (!($21)) {
   $22 = HEAP32[$1>>2]|0;
   $23 = +HEAPF64[$theta>>3];
   HEAP32[$vararg_buffer41>>2] = 39608;
   $vararg_ptr9 = (($vararg_buffer41) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$23;HEAP32[$vararg_ptr9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr9+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($22,39544,$vararg_buffer41)|0);
  }
  $24 = HEAP32[$1>>2]|0;
  (_pputc($24,10)|0);
  STACKTOP = sp;return;
 }
 $25 = (_tex_format($16)|0);
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = +HEAPF64[$ws2>>3];
  (_tex_sprint_double($27,$xstr)|0);
  $28 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer41>>2] = $xstr;
  (_pprintf($28,39640,$vararg_buffer41)|0);
  $29 = +HEAPF64[$bs2>>3];
  (_tex_sprint_double($29,$xstr)|0);
  $30 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer41>>2] = $xstr;
  (_pprintf($30,39680,$vararg_buffer41)|0);
  $31 = +HEAPF64[$theta>>3];
  $32 = $31 == 1.79769313486231570815E+308;
  if ($32) {
   STACKTOP = sp;return;
  }
  $33 = +HEAPF64[$theta>>3];
  (_tex_sprint_double($33,$xstr)|0);
  $34 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer41>>2] = $xstr;
  (_pprintf($34,39712,$vararg_buffer41)|0);
  STACKTOP = sp;return;
 }
 $35 = HEAP32[$1>>2]|0;
 $36 = (_rtf_format($35)|0);
 $37 = ($36|0)!=(0);
 $38 = HEAP32[$1>>2]|0;
 if ($37) {
  $39 = +HEAPF64[$ws2>>3];
  HEAP32[$vararg_buffer41>>2] = 39560;
  $vararg_ptr22 = (($vararg_buffer41) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$39;HEAP32[$vararg_ptr22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr22+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($38,38760,$vararg_buffer41)|0);
  $40 = HEAP32[$1>>2]|0;
  $41 = +HEAPF64[$bs2>>3];
  HEAP32[$vararg_buffer41>>2] = 39584;
  $vararg_ptr26 = (($vararg_buffer41) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$41;HEAP32[$vararg_ptr26>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr26+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($40,38760,$vararg_buffer41)|0);
  $42 = +HEAPF64[$theta>>3];
  $43 = $42 == 1.79769313486231570815E+308;
  if ($43) {
   STACKTOP = sp;return;
  }
  $44 = HEAP32[$1>>2]|0;
  $45 = +HEAPF64[$theta>>3];
  HEAP32[$vararg_buffer41>>2] = 39608;
  $vararg_ptr30 = (($vararg_buffer41) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$45;HEAP32[$vararg_ptr30>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr30+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($44,38760,$vararg_buffer41)|0);
  STACKTOP = sp;return;
 }
 $46 = (_csv_format($38)|0);
 $47 = ($46|0)!=(0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$1>>2]|0;
 $49 = (_prn_delim($48)|0);
 HEAP8[$d>>0] = $49;
 $50 = HEAP32[$1>>2]|0;
 $51 = HEAP8[$d>>0]|0;
 $52 = $51 << 24 >> 24;
 $53 = +HEAPF64[$ws2>>3];
 HEAP32[$vararg_buffer41>>2] = 39560;
 $vararg_ptr34 = (($vararg_buffer41) + 4|0);
 HEAP32[$vararg_ptr34>>2] = $52;
 $vararg_ptr35 = (($vararg_buffer41) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$53;HEAP32[$vararg_ptr35>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr35+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($50,33192,$vararg_buffer41)|0);
 $54 = HEAP32[$1>>2]|0;
 $55 = HEAP8[$d>>0]|0;
 $56 = $55 << 24 >> 24;
 $57 = +HEAPF64[$bs2>>3];
 HEAP32[$vararg_buffer41>>2] = 39584;
 $vararg_ptr39 = (($vararg_buffer41) + 4|0);
 HEAP32[$vararg_ptr39>>2] = $56;
 $vararg_ptr40 = (($vararg_buffer41) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$57;HEAP32[$vararg_ptr40>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr40+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($54,33192,$vararg_buffer41)|0);
 $58 = +HEAPF64[$theta>>3];
 $59 = $58 == 1.79769313486231570815E+308;
 if ($59) {
  STACKTOP = sp;return;
 }
 $60 = HEAP32[$1>>2]|0;
 $61 = HEAP8[$d>>0]|0;
 $62 = $61 << 24 >> 24;
 $63 = +HEAPF64[$theta>>3];
 HEAP32[$vararg_buffer41>>2] = 39608;
 $vararg_ptr44 = (($vararg_buffer41) + 4|0);
 HEAP32[$vararg_ptr44>>2] = $62;
 $vararg_ptr45 = (($vararg_buffer41) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$63;HEAP32[$vararg_ptr45>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr45+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($60,33192,$vararg_buffer41)|0);
 STACKTOP = sp;return;
}
function _print_GMM_stats($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $x = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$1>>2]|0;
 _ensure_vsep($2);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 (_GMM_crit_line($3,$4)|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = (+_gretl_model_get_double($5,39360));
 HEAPF64[$x>>3] = $6;
 $7 = +HEAPF64[$x>>3];
 $8 = $7 == 1.79769313486231570815E+308;
 if (!($8)) {
  $9 = HEAP32[$0>>2]|0;
  $10 = +HEAPF64[$x>>3];
  $11 = HEAP32[$1>>2]|0;
  _print_model_chi2_test($9,$10,3,$11);
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = (_tex_format($12)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$1>>2]|0;
 _gretl_prn_newline($15);
 STACKTOP = sp;return;
}
function _print_DPD_stats($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k = 0, $vararg_buffer = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp + 8|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $x = sp;
 $k = sp + 12|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$1>>2]|0;
 _ensure_vsep($2);
 $3 = HEAP32[$1>>2]|0;
 $4 = (_tex_format($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  (_pputs($6,39160)|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (_gretl_model_get_int($7,39184)|0);
 HEAP32[$k>>2] = $8;
 $9 = HEAP32[$k>>2]|0;
 $10 = ($9|0)>(0);
 if ($10) {
  $11 = HEAP32[$1>>2]|0;
  $12 = HEAP32[$k>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  (_pprintf($11,39192,$vararg_buffer)|0);
  $13 = HEAP32[$1>>2]|0;
  _gretl_prn_newline($13);
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (+_gretl_model_get_double($14,39224));
 HEAPF64[$x>>3] = $15;
 $16 = +HEAPF64[$x>>3];
 $17 = HEAP32[$1>>2]|0;
 _print_panel_AR_test($16,1,$17);
 $18 = HEAP32[$0>>2]|0;
 $19 = (+_gretl_model_get_double($18,39232));
 HEAPF64[$x>>3] = $19;
 $20 = +HEAPF64[$x>>3];
 $21 = HEAP32[$1>>2]|0;
 _print_panel_AR_test($20,2,$21);
 $22 = HEAP32[$0>>2]|0;
 $23 = (+_gretl_model_get_double($22,39240));
 HEAPF64[$x>>3] = $23;
 $24 = HEAP32[$0>>2]|0;
 $25 = +HEAPF64[$x>>3];
 $26 = HEAP32[$1>>2]|0;
 _print_model_chi2_test($24,$25,0,$26);
 $27 = HEAP32[$0>>2]|0;
 $28 = (+_gretl_model_get_double($27,39248));
 HEAPF64[$x>>3] = $28;
 $29 = HEAP32[$0>>2]|0;
 $30 = +HEAPF64[$x>>3];
 $31 = HEAP32[$1>>2]|0;
 _print_model_chi2_test($29,$30,1,$31);
 $32 = HEAP32[$0>>2]|0;
 $33 = (+_gretl_model_get_double($32,39256));
 HEAPF64[$x>>3] = $33;
 $34 = +HEAPF64[$x>>3];
 $35 = $34 == 1.79769313486231570815E+308;
 if (!($35)) {
  $36 = HEAP32[$0>>2]|0;
  $37 = +HEAPF64[$x>>3];
  $38 = HEAP32[$1>>2]|0;
  _print_model_chi2_test($36,$37,2,$38);
 }
 $39 = HEAP32[$1>>2]|0;
 $40 = (_tex_format($39)|0);
 $41 = ($40|0)!=(0);
 $42 = HEAP32[$1>>2]|0;
 if ($41) {
  (_pputs($42,34536)|0);
  STACKTOP = sp;return;
 } else {
  _gretl_prn_newline($42);
  STACKTOP = sp;return;
 }
}
function _logit_probit_stats($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0;
 var $act_pred = 0, $binary = 0, $correct = 0, $df = 0, $fXb = 0, $pc_correct = 0, $slopes = 0, $vararg_buffer42 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0;
 var $vararg_ptr32 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer42 = sp + 16|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $act_pred = sp + 60|0;
 $binary = sp + 56|0;
 $slopes = sp + 52|0;
 $correct = sp + 48|0;
 $pc_correct = sp + 8|0;
 $df = sp + 44|0;
 $fXb = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 HEAP32[$act_pred>>2] = 0;
 HEAP32[$correct>>2] = 0;
 HEAP32[$df>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 4096;
 $6 = ($5|0)!=(0);
 if ($6) {
  label = 3;
 } else {
  $7 = HEAP32[$0>>2]|0;
  $8 = (_gretl_model_get_int($7,32152)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   label = 3;
  } else {
   HEAP32[$binary>>2] = 1;
   $10 = HEAP32[$0>>2]|0;
   $11 = (($10) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & 32768;
   $14 = ($13|0)!=(0);
   $15 = $14 ^ 1;
   $16 = $15&1;
   HEAP32[$slopes>>2] = $16;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$slopes>>2] = 0;
  HEAP32[$binary>>2] = 0;
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 152|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $19 == 1.79769313486231570815E+308;
 if (!($20)) {
  $21 = HEAP32[$0>>2]|0;
  $22 = (_limdep_df($21)|0);
  HEAP32[$df>>2] = $22;
 }
 $23 = HEAP32[$binary>>2]|0;
 $24 = ($23|0)!=(0);
 $25 = HEAP32[$0>>2]|0;
 if ($24) {
  $26 = (_gretl_model_get_data($25,33224)|0);
  HEAP32[$act_pred>>2] = $26;
  $27 = HEAP32[$act_pred>>2]|0;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = HEAP32[$act_pred>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$act_pred>>2]|0;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($30) + ($33))|0;
   HEAP32[$correct>>2] = $34;
  }
 } else {
  $35 = (_gretl_model_get_int($25,33248)|0);
  HEAP32[$correct>>2] = $35;
 }
 $36 = HEAP32[$correct>>2]|0;
 $37 = (+($36|0));
 $38 = 100.0 * $37;
 $39 = HEAP32[$0>>2]|0;
 $40 = (($39) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (+($41|0));
 $43 = $38 / $42;
 HEAPF64[$pc_correct>>3] = $43;
 $44 = HEAP32[$1>>2]|0;
 _ensure_vsep($44);
 $45 = HEAP32[$1>>2]|0;
 $46 = (_plain_format($45)|0);
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = HEAP32[$correct>>2]|0;
  $49 = ($48|0)>(0);
  if ($49) {
   $50 = HEAP32[$1>>2]|0;
   $51 = HEAP32[$correct>>2]|0;
   $52 = +HEAPF64[$pc_correct>>3];
   HEAP32[$vararg_buffer42>>2] = 33280;
   $vararg_ptr1 = (($vararg_buffer42) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $51;
   $vararg_ptr2 = (($vararg_buffer42) + 8|0);
   HEAPF64[tempDoublePtr>>3]=$52;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($50,33256,$vararg_buffer42)|0);
  }
  $53 = HEAP32[$binary>>2]|0;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = HEAP32[$0>>2]|0;
   $56 = (+_gretl_model_get_double($55,33320));
   HEAPF64[$fXb>>3] = $56;
   $57 = +HEAPF64[$fXb>>3];
   $58 = $57 == 1.79769313486231570815E+308;
   if (!($58)) {
    $59 = HEAP32[$1>>2]|0;
    $60 = +HEAPF64[$fXb>>3];
    HEAP32[$vararg_buffer42>>2] = 33352;
    $vararg_ptr6 = (($vararg_buffer42) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$60;HEAP32[$vararg_ptr6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr6+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($59,33328,$vararg_buffer42)|0);
   }
  }
  $61 = HEAP32[$df>>2]|0;
  $62 = ($61|0)!=(0);
  if ($62) {
   $63 = HEAP32[$1>>2]|0;
   $64 = HEAP32[$df>>2]|0;
   $65 = HEAP32[$0>>2]|0;
   $66 = (($65) + 152|0);
   $67 = +HEAPF64[$66>>3];
   $68 = HEAP32[$df>>2]|0;
   $69 = (+($68|0));
   $70 = HEAP32[$0>>2]|0;
   $71 = (($70) + 152|0);
   $72 = +HEAPF64[$71>>3];
   $73 = (+_chisq_cdf_comp($69,$72));
   HEAP32[$vararg_buffer42>>2] = 33408;
   $vararg_ptr10 = (($vararg_buffer42) + 4|0);
   HEAP32[$vararg_ptr10>>2] = 33432;
   $vararg_ptr11 = (($vararg_buffer42) + 8|0);
   HEAP32[$vararg_ptr11>>2] = $64;
   $vararg_ptr12 = (($vararg_buffer42) + 12|0);
   HEAPF64[tempDoublePtr>>3]=$67;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr13 = (($vararg_buffer42) + 20|0);
   HEAPF64[tempDoublePtr>>3]=$73;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($63,33384,$vararg_buffer42)|0);
  }
  $74 = HEAP32[$1>>2]|0;
  (_pputc($74,10)|0);
  $75 = HEAP32[$act_pred>>2]|0;
  $76 = ($75|0)!=(0|0);
  if (!($76)) {
   STACKTOP = sp;return;
  }
  $77 = HEAP32[$act_pred>>2]|0;
  $78 = HEAP32[$1>>2]|0;
  _plain_print_act_pred($77,$78);
  STACKTOP = sp;return;
 }
 $79 = HEAP32[$1>>2]|0;
 $80 = (_rtf_format($79)|0);
 $81 = ($80|0)!=(0);
 $82 = HEAP32[$1>>2]|0;
 if ($81) {
  (_pputc($82,10)|0);
  $83 = HEAP32[$slopes>>2]|0;
  $84 = ($83|0)!=(0);
  if ($84) {
   $85 = HEAP32[$1>>2]|0;
   HEAP32[$vararg_buffer42>>2] = 33472;
   (_pprintf($85,33448,$vararg_buffer42)|0);
  }
  $86 = HEAP32[$correct>>2]|0;
  $87 = ($86|0)>(0);
  if ($87) {
   $88 = HEAP32[$1>>2]|0;
   $89 = HEAP32[$correct>>2]|0;
   $90 = +HEAPF64[$pc_correct>>3];
   HEAP32[$vararg_buffer42>>2] = 33280;
   $vararg_ptr20 = (($vararg_buffer42) + 4|0);
   HEAP32[$vararg_ptr20>>2] = $89;
   $vararg_ptr21 = (($vararg_buffer42) + 8|0);
   HEAPF64[tempDoublePtr>>3]=$90;HEAP32[$vararg_ptr21>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr21+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($88,33496,$vararg_buffer42)|0);
  }
  $91 = HEAP32[$binary>>2]|0;
  $92 = ($91|0)!=(0);
  if ($92) {
   $93 = HEAP32[$1>>2]|0;
   $94 = HEAP32[$0>>2]|0;
   $95 = (($94) + 176|0);
   $96 = +HEAPF64[$95>>3];
   HEAP32[$vararg_buffer42>>2] = 33352;
   $vararg_ptr25 = (($vararg_buffer42) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$96;HEAP32[$vararg_ptr25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr25+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($93,33520,$vararg_buffer42)|0);
  }
  $97 = HEAP32[$df>>2]|0;
  $98 = ($97|0)!=(0);
  if ($98) {
   $99 = HEAP32[$1>>2]|0;
   $100 = HEAP32[$df>>2]|0;
   $101 = HEAP32[$0>>2]|0;
   $102 = (($101) + 152|0);
   $103 = +HEAPF64[$102>>3];
   $104 = HEAP32[$df>>2]|0;
   $105 = (+($104|0));
   $106 = HEAP32[$0>>2]|0;
   $107 = (($106) + 152|0);
   $108 = +HEAPF64[$107>>3];
   $109 = (+_chisq_cdf_comp($105,$108));
   HEAP32[$vararg_buffer42>>2] = 33408;
   $vararg_ptr29 = (($vararg_buffer42) + 4|0);
   HEAP32[$vararg_ptr29>>2] = 33432;
   $vararg_ptr30 = (($vararg_buffer42) + 8|0);
   HEAP32[$vararg_ptr30>>2] = $100;
   $vararg_ptr31 = (($vararg_buffer42) + 12|0);
   HEAPF64[tempDoublePtr>>3]=$103;HEAP32[$vararg_ptr31>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr31+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr32 = (($vararg_buffer42) + 20|0);
   HEAPF64[tempDoublePtr>>3]=$109;HEAP32[$vararg_ptr32>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr32+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($99,33552,$vararg_buffer42)|0);
  }
  $110 = HEAP32[$1>>2]|0;
  (_pputc($110,10)|0);
  STACKTOP = sp;return;
 }
 $111 = (_tex_format($82)|0);
 $112 = ($111|0)!=(0);
 if (!($112)) {
  STACKTOP = sp;return;
 }
 $113 = HEAP32[$slopes>>2]|0;
 $114 = ($113|0)!=(0);
 if ($114) {
  $115 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer42>>2] = 33472;
  (_pprintf($115,33584,$vararg_buffer42)|0);
 }
 $116 = HEAP32[$correct>>2]|0;
 $117 = ($116|0)>(0);
 if (!($117)) {
  $118 = HEAP32[$df>>2]|0;
  $119 = ($118|0)!=(0);
  if (!($119)) {
   STACKTOP = sp;return;
  }
 }
 $120 = HEAP32[$1>>2]|0;
 (_pputs($120,33624)|0);
 $121 = HEAP32[$correct>>2]|0;
 $122 = ($121|0)>(0);
 if ($122) {
  $123 = HEAP32[$1>>2]|0;
  $124 = HEAP32[$correct>>2]|0;
  $125 = +HEAPF64[$pc_correct>>3];
  HEAP32[$vararg_buffer42>>2] = 33688;
  $vararg_ptr39 = (($vararg_buffer42) + 4|0);
  HEAP32[$vararg_ptr39>>2] = $124;
  $vararg_ptr40 = (($vararg_buffer42) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$125;HEAP32[$vararg_ptr40>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr40+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr41 = (($vararg_buffer42) + 16|0);
  HEAP32[$vararg_ptr41>>2] = 33728;
  (_pprintf($123,33664,$vararg_buffer42)|0);
 }
 $126 = HEAP32[$df>>2]|0;
 $127 = ($126|0)!=(0);
 if ($127) {
  $128 = HEAP32[$1>>2]|0;
  $129 = HEAP32[$df>>2]|0;
  $130 = HEAP32[$0>>2]|0;
  $131 = (($130) + 152|0);
  $132 = +HEAPF64[$131>>3];
  $133 = HEAP32[$df>>2]|0;
  $134 = (+($133|0));
  $135 = HEAP32[$0>>2]|0;
  $136 = (($135) + 152|0);
  $137 = +HEAPF64[$136>>3];
  $138 = (+_chisq_cdf_comp($134,$137));
  HEAP32[$vararg_buffer42>>2] = 33408;
  $vararg_ptr45 = (($vararg_buffer42) + 4|0);
  HEAP32[$vararg_ptr45>>2] = $129;
  $vararg_ptr46 = (($vararg_buffer42) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$132;HEAP32[$vararg_ptr46>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr46+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr47 = (($vararg_buffer42) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$138;HEAP32[$vararg_ptr47>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr47+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($128,33736,$vararg_buffer42)|0);
 }
 $139 = HEAP32[$1>>2]|0;
 (_pputs($139,33776)|0);
 STACKTOP = sp;return;
}
function _addconst_message($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_int($2,38888)|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = 38912;
 (_pprintf($5,38904,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _print_intreg_info($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $d = 0, $llim = 0, $lstr = 0, $nb = 0, $nfp = 0, $nl = 0, $np = 0, $nr = 0, $nstrs = 0, $rlim = 0, $rstr = 0, $se_sigma = 0, $vararg_buffer126 = 0, $vararg_ptr1 = 0, $vararg_ptr100 = 0, $vararg_ptr104 = 0, $vararg_ptr105 = 0, $vararg_ptr109 = 0, $vararg_ptr110 = 0, $vararg_ptr114 = 0;
 var $vararg_ptr115 = 0, $vararg_ptr119 = 0, $vararg_ptr120 = 0, $vararg_ptr124 = 0, $vararg_ptr125 = 0, $vararg_ptr129 = 0, $vararg_ptr13 = 0, $vararg_ptr130 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr43 = 0, $vararg_ptr47 = 0, $vararg_ptr5 = 0, $vararg_ptr54 = 0;
 var $vararg_ptr55 = 0, $vararg_ptr59 = 0, $vararg_ptr60 = 0, $vararg_ptr64 = 0, $vararg_ptr68 = 0, $vararg_ptr72 = 0, $vararg_ptr82 = 0, $vararg_ptr83 = 0, $vararg_ptr87 = 0, $vararg_ptr88 = 0, $vararg_ptr9 = 0, $vararg_ptr92 = 0, $vararg_ptr96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer126 = sp + 24|0;
 $0 = sp + 100|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $nstrs = sp + 72|0;
 $lstr = sp + 68|0;
 $rstr = sp + 64|0;
 $nl = sp + 60|0;
 $nr = sp + 56|0;
 $nb = sp + 52|0;
 $np = sp + 48|0;
 $nfp = sp + 44|0;
 $llim = sp + 16|0;
 $rlim = sp + 8|0;
 $se_sigma = sp;
 $d = sp + 40|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $prn;
 ;HEAP32[$nstrs+0>>2]=HEAP32[38480+0>>2]|0;HEAP32[$nstrs+4>>2]=HEAP32[38480+4>>2]|0;HEAP32[$nstrs+8>>2]=HEAP32[38480+8>>2]|0;HEAP32[$nstrs+12>>2]=HEAP32[38480+12>>2]|0;HEAP32[$nstrs+16>>2]=HEAP32[38480+16>>2]|0;
 HEAP32[$lstr>>2] = 0;
 HEAP32[$rstr>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_gretl_model_get_int($3,38504)|0);
 HEAP32[$nl>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_gretl_model_get_int($5,38512)|0);
 HEAP32[$nr>>2] = $6;
 HEAP32[$nb>>2] = -1;
 HEAP32[$np>>2] = -1;
 HEAP32[$nfp>>2] = -1;
 HEAPF64[$llim>>3] = 0.0;
 HEAPF64[$rlim>>3] = 1.79769313486231570815E+308;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(58);
 do {
  if ($10) {
   $11 = HEAP32[$0>>2]|0;
   $12 = (_gretl_model_get_int($11,38520)|0);
   HEAP32[$nb>>2] = $12;
   $13 = HEAP32[$0>>2]|0;
   $14 = (_gretl_model_get_int($13,38528)|0);
   HEAP32[$np>>2] = $14;
   $15 = HEAP32[$0>>2]|0;
   $16 = (_gretl_model_get_int($15,38536)|0);
   HEAP32[$nfp>>2] = $16;
  } else {
   HEAP32[$nstrs>>2] = 38552;
   $17 = (($nstrs) + 4|0);
   HEAP32[$17>>2] = 38584;
   $18 = HEAP32[$0>>2]|0;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 & 2048;
   $22 = ($21|0)!=(0);
   do {
    if ($22) {
     $23 = HEAP32[$0>>2]|0;
     $24 = (+_gretl_model_get_double($23,38616));
     HEAPF64[$llim>>3] = $24;
     $25 = HEAP32[$2>>2]|0;
     $26 = (_tex_format($25)|0);
     $27 = ($26|0)!=(0);
     $28 = HEAP32[$0>>2]|0;
     $29 = (($28) + 60|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = HEAP32[$1>>2]|0;
     $34 = (($33) + 68|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (($35) + ($32<<2)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = +HEAPF64[$llim>>3];
     if ($27) {
      HEAP32[$vararg_buffer126>>2] = $37;
      $vararg_ptr1 = (($vararg_buffer126) + 4|0);
      HEAPF64[tempDoublePtr>>3]=$38;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $39 = (_g_strdup_printf((38624|0),($vararg_buffer126|0))|0);
      HEAP32[$lstr>>2] = $39;
      break;
     } else {
      HEAP32[$vararg_buffer126>>2] = $37;
      $vararg_ptr5 = (($vararg_buffer126) + 4|0);
      HEAPF64[tempDoublePtr>>3]=$38;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $40 = (_g_strdup_printf((38640|0),($vararg_buffer126|0))|0);
      HEAP32[$lstr>>2] = $40;
      break;
     }
    }
   } while(0);
   $41 = HEAP32[$0>>2]|0;
   $42 = (($41) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $43 & 4096;
   $45 = ($44|0)!=(0);
   if ($45) {
    $46 = HEAP32[$nr>>2]|0;
    $47 = ($46|0)>(0);
    if ($47) {
     $48 = HEAP32[$0>>2]|0;
     $49 = (+_gretl_model_get_double($48,38656));
     HEAPF64[$rlim>>3] = $49;
     $50 = +HEAPF64[$rlim>>3];
     $51 = $50 == 1.79769313486231570815E+308;
     if (!($51)) {
      $52 = HEAP32[$2>>2]|0;
      $53 = (_tex_format($52)|0);
      $54 = ($53|0)!=(0);
      if ($54) {
       $55 = HEAP32[$0>>2]|0;
       $56 = (($55) + 60|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (($57) + 4|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = HEAP32[$1>>2]|0;
       $61 = (($60) + 68|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($62) + ($59<<2)|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = +HEAPF64[$rlim>>3];
       HEAP32[$vararg_buffer126>>2] = $64;
       $vararg_ptr9 = (($vararg_buffer126) + 4|0);
       HEAPF64[tempDoublePtr>>3]=$65;HEAP32[$vararg_ptr9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr9+4>>2]=HEAP32[tempDoublePtr+4>>2];
       $66 = (_g_strdup_printf((38664|0),($vararg_buffer126|0))|0);
       HEAP32[$rstr>>2] = $66;
       break;
      }
     }
     $67 = +HEAPF64[$rlim>>3];
     $68 = $67 == 1.79769313486231570815E+308;
     if (!($68)) {
      $69 = HEAP32[$0>>2]|0;
      $70 = (($69) + 60|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($71) + 4|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = HEAP32[$1>>2]|0;
      $75 = (($74) + 68|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($76) + ($73<<2)|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = +HEAPF64[$rlim>>3];
      HEAP32[$vararg_buffer126>>2] = $78;
      $vararg_ptr13 = (($vararg_buffer126) + 4|0);
      HEAPF64[tempDoublePtr>>3]=$79;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $80 = (_g_strdup_printf((38680|0),($vararg_buffer126|0))|0);
      HEAP32[$rstr>>2] = $80;
     }
    }
   }
  }
 } while(0);
 $81 = HEAP32[$2>>2]|0;
 _ensure_vsep($81);
 $82 = HEAP32[$0>>2]|0;
 $83 = (+_gretl_model_get_double($82,38696));
 HEAPF64[$se_sigma>>3] = $83;
 $84 = HEAP32[$2>>2]|0;
 $85 = (_plain_format($84)|0);
 $86 = ($85|0)!=(0);
 $87 = HEAP32[$2>>2]|0;
 if ($86) {
  $88 = HEAP32[$0>>2]|0;
  $89 = (($88) + 120|0);
  $90 = +HEAPF64[$89>>3];
  HEAP32[$vararg_buffer126>>2] = 36472;
  $vararg_ptr17 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr17>>2] = 6;
  $vararg_ptr18 = (($vararg_buffer126) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$90;HEAP32[$vararg_ptr18>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr18+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($87,38712,$vararg_buffer126)|0);
  $91 = +HEAPF64[$se_sigma>>3];
  $92 = $91 == 1.79769313486231570815E+308;
  if (!($92)) {
   $93 = HEAP32[$2>>2]|0;
   $94 = +HEAPF64[$se_sigma>>3];
   HEAPF64[tempDoublePtr>>3]=$94;HEAP32[$vararg_buffer126>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer126+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($93,38728,$vararg_buffer126)|0);
  }
  $95 = HEAP32[$2>>2]|0;
  (_pputc($95,10)|0);
  $96 = HEAP32[$2>>2]|0;
  $97 = HEAP32[$nstrs>>2]|0;
  $98 = HEAP32[$nl>>2]|0;
  $99 = HEAP32[$lstr>>2]|0;
  $100 = ($99|0)==(0|0);
  $101 = HEAP32[$lstr>>2]|0;
  $102 = $100 ? 38752 : $101;
  HEAP32[$vararg_buffer126>>2] = $97;
  $vararg_ptr25 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr25>>2] = $98;
  $vararg_ptr26 = (($vararg_buffer126) + 8|0);
  HEAP32[$vararg_ptr26>>2] = $102;
  (_pprintf($96,38736,$vararg_buffer126)|0);
  $103 = HEAP32[$2>>2]|0;
  $104 = (($nstrs) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$nr>>2]|0;
  $107 = HEAP32[$rstr>>2]|0;
  $108 = ($107|0)==(0|0);
  $109 = HEAP32[$rstr>>2]|0;
  $110 = $108 ? 38752 : $109;
  HEAP32[$vararg_buffer126>>2] = $105;
  $vararg_ptr30 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr30>>2] = $106;
  $vararg_ptr31 = (($vararg_buffer126) + 8|0);
  HEAP32[$vararg_ptr31>>2] = $110;
  (_pprintf($103,38736,$vararg_buffer126)|0);
  $111 = HEAP32[$nb>>2]|0;
  $112 = ($111|0)>=(0);
  if ($112) {
   $113 = HEAP32[$np>>2]|0;
   $114 = ($113|0)>=(0);
   if ($114) {
    $115 = HEAP32[$2>>2]|0;
    $116 = (($nstrs) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = HEAP32[$nb>>2]|0;
    HEAP32[$vararg_buffer126>>2] = $117;
    $vararg_ptr35 = (($vararg_buffer126) + 4|0);
    HEAP32[$vararg_ptr35>>2] = $118;
    (_pprintf($115,33912,$vararg_buffer126)|0);
    $119 = HEAP32[$2>>2]|0;
    $120 = (($nstrs) + 12|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = HEAP32[$np>>2]|0;
    HEAP32[$vararg_buffer126>>2] = $121;
    $vararg_ptr39 = (($vararg_buffer126) + 4|0);
    HEAP32[$vararg_ptr39>>2] = $122;
    (_pprintf($119,33912,$vararg_buffer126)|0);
   }
  }
  $123 = HEAP32[$nfp>>2]|0;
  $124 = ($123|0)>(0);
  if ($124) {
   $125 = HEAP32[$2>>2]|0;
   $126 = (($nstrs) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = HEAP32[$nfp>>2]|0;
   HEAP32[$vararg_buffer126>>2] = $127;
   $vararg_ptr43 = (($vararg_buffer126) + 4|0);
   HEAP32[$vararg_ptr43>>2] = $128;
   (_pprintf($125,33912,$vararg_buffer126)|0);
  }
  $129 = HEAP32[$2>>2]|0;
  (_pputc($129,10)|0);
  $258 = HEAP32[$lstr>>2]|0;
  _g_free(($258|0));
  $259 = HEAP32[$rstr>>2]|0;
  _g_free(($259|0));
  STACKTOP = sp;return;
 }
 $130 = (_rtf_format($87)|0);
 $131 = ($130|0)!=(0);
 $132 = HEAP32[$2>>2]|0;
 if ($131) {
  $133 = HEAP32[$0>>2]|0;
  $134 = (($133) + 120|0);
  $135 = +HEAPF64[$134>>3];
  HEAP32[$vararg_buffer126>>2] = 36472;
  $vararg_ptr47 = (($vararg_buffer126) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$135;HEAP32[$vararg_ptr47>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr47+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($132,38760,$vararg_buffer126)|0);
  $136 = +HEAPF64[$se_sigma>>3];
  $137 = $136 == 1.79769313486231570815E+308;
  if (!($137)) {
   $138 = HEAP32[$2>>2]|0;
   $139 = +HEAPF64[$se_sigma>>3];
   HEAPF64[tempDoublePtr>>3]=$139;HEAP32[$vararg_buffer126>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer126+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($138,38728,$vararg_buffer126)|0);
  }
  $140 = HEAP32[$2>>2]|0;
  (_pputc($140,10)|0);
  $141 = HEAP32[$2>>2]|0;
  $142 = HEAP32[$nstrs>>2]|0;
  $143 = HEAP32[$nl>>2]|0;
  $144 = HEAP32[$lstr>>2]|0;
  $145 = ($144|0)==(0|0);
  $146 = HEAP32[$lstr>>2]|0;
  $147 = $145 ? 38752 : $146;
  HEAP32[$vararg_buffer126>>2] = $142;
  $vararg_ptr54 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr54>>2] = $143;
  $vararg_ptr55 = (($vararg_buffer126) + 8|0);
  HEAP32[$vararg_ptr55>>2] = $147;
  (_pprintf($141,38784,$vararg_buffer126)|0);
  $148 = HEAP32[$2>>2]|0;
  $149 = (($nstrs) + 4|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = HEAP32[$nr>>2]|0;
  $152 = HEAP32[$rstr>>2]|0;
  $153 = ($152|0)==(0|0);
  $154 = HEAP32[$rstr>>2]|0;
  $155 = $153 ? 38752 : $154;
  HEAP32[$vararg_buffer126>>2] = $150;
  $vararg_ptr59 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr59>>2] = $151;
  $vararg_ptr60 = (($vararg_buffer126) + 8|0);
  HEAP32[$vararg_ptr60>>2] = $155;
  (_pprintf($148,38784,$vararg_buffer126)|0);
  $156 = HEAP32[$nb>>2]|0;
  $157 = ($156|0)>=(0);
  if ($157) {
   $158 = HEAP32[$np>>2]|0;
   $159 = ($158|0)>=(0);
   if ($159) {
    $160 = HEAP32[$2>>2]|0;
    $161 = (($nstrs) + 8|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = HEAP32[$nb>>2]|0;
    HEAP32[$vararg_buffer126>>2] = $162;
    $vararg_ptr64 = (($vararg_buffer126) + 4|0);
    HEAP32[$vararg_ptr64>>2] = $163;
    (_pprintf($160,33992,$vararg_buffer126)|0);
    $164 = HEAP32[$2>>2]|0;
    $165 = (($nstrs) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = HEAP32[$np>>2]|0;
    HEAP32[$vararg_buffer126>>2] = $166;
    $vararg_ptr68 = (($vararg_buffer126) + 4|0);
    HEAP32[$vararg_ptr68>>2] = $167;
    (_pprintf($164,33992,$vararg_buffer126)|0);
   }
  }
  $168 = HEAP32[$nfp>>2]|0;
  $169 = ($168|0)>(0);
  if (!($169)) {
   $258 = HEAP32[$lstr>>2]|0;
   _g_free(($258|0));
   $259 = HEAP32[$rstr>>2]|0;
   _g_free(($259|0));
   STACKTOP = sp;return;
  }
  $170 = HEAP32[$2>>2]|0;
  $171 = (($nstrs) + 16|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = HEAP32[$nfp>>2]|0;
  HEAP32[$vararg_buffer126>>2] = $172;
  $vararg_ptr72 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr72>>2] = $173;
  (_pprintf($170,33992,$vararg_buffer126)|0);
  $258 = HEAP32[$lstr>>2]|0;
  _g_free(($258|0));
  $259 = HEAP32[$rstr>>2]|0;
  _g_free(($259|0));
  STACKTOP = sp;return;
 }
 $174 = (_tex_format($132)|0);
 $175 = ($174|0)!=(0);
 $176 = HEAP32[$2>>2]|0;
 if ($175) {
  $177 = HEAP32[$0>>2]|0;
  $178 = (($177) + 120|0);
  $179 = +HEAPF64[$178>>3];
  HEAPF64[tempDoublePtr>>3]=$179;HEAP32[$vararg_buffer126>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer126+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($176,38808,$vararg_buffer126)|0);
  $180 = +HEAPF64[$se_sigma>>3];
  $181 = $180 == 1.79769313486231570815E+308;
  if (!($181)) {
   $182 = HEAP32[$2>>2]|0;
   $183 = +HEAPF64[$se_sigma>>3];
   HEAPF64[tempDoublePtr>>3]=$183;HEAP32[$vararg_buffer126>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer126+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($182,38728,$vararg_buffer126)|0);
  }
  $184 = HEAP32[$2>>2]|0;
  (_pputs($184,38832)|0);
  $185 = HEAP32[$2>>2]|0;
  $186 = HEAP32[$nstrs>>2]|0;
  $187 = HEAP32[$nl>>2]|0;
  $188 = HEAP32[$lstr>>2]|0;
  $189 = ($188|0)==(0|0);
  $190 = HEAP32[$lstr>>2]|0;
  $191 = $189 ? 38752 : $190;
  HEAP32[$vararg_buffer126>>2] = $186;
  $vararg_ptr82 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr82>>2] = $187;
  $vararg_ptr83 = (($vararg_buffer126) + 8|0);
  HEAP32[$vararg_ptr83>>2] = $191;
  (_pprintf($185,38840,$vararg_buffer126)|0);
  $192 = HEAP32[$2>>2]|0;
  $193 = (($nstrs) + 4|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = HEAP32[$nr>>2]|0;
  $196 = HEAP32[$rstr>>2]|0;
  $197 = ($196|0)==(0|0);
  $198 = HEAP32[$rstr>>2]|0;
  $199 = $197 ? 38752 : $198;
  HEAP32[$vararg_buffer126>>2] = $194;
  $vararg_ptr87 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr87>>2] = $195;
  $vararg_ptr88 = (($vararg_buffer126) + 8|0);
  HEAP32[$vararg_ptr88>>2] = $199;
  (_pprintf($192,38840,$vararg_buffer126)|0);
  $200 = HEAP32[$nb>>2]|0;
  $201 = ($200|0)>=(0);
  if ($201) {
   $202 = HEAP32[$np>>2]|0;
   $203 = ($202|0)>=(0);
   if ($203) {
    $204 = HEAP32[$2>>2]|0;
    $205 = (($nstrs) + 8|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = HEAP32[$nb>>2]|0;
    HEAP32[$vararg_buffer126>>2] = $206;
    $vararg_ptr92 = (($vararg_buffer126) + 4|0);
    HEAP32[$vararg_ptr92>>2] = $207;
    (_pprintf($204,34048,$vararg_buffer126)|0);
    $208 = HEAP32[$2>>2]|0;
    $209 = (($nstrs) + 12|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = HEAP32[$np>>2]|0;
    HEAP32[$vararg_buffer126>>2] = $210;
    $vararg_ptr96 = (($vararg_buffer126) + 4|0);
    HEAP32[$vararg_ptr96>>2] = $211;
    (_pprintf($208,34048,$vararg_buffer126)|0);
   }
  }
  $212 = HEAP32[$nfp>>2]|0;
  $213 = ($212|0)>(0);
  if (!($213)) {
   $258 = HEAP32[$lstr>>2]|0;
   _g_free(($258|0));
   $259 = HEAP32[$rstr>>2]|0;
   _g_free(($259|0));
   STACKTOP = sp;return;
  }
  $214 = HEAP32[$2>>2]|0;
  $215 = (($nstrs) + 16|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = HEAP32[$nfp>>2]|0;
  HEAP32[$vararg_buffer126>>2] = $216;
  $vararg_ptr100 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr100>>2] = $217;
  (_pprintf($214,34048,$vararg_buffer126)|0);
  $258 = HEAP32[$lstr>>2]|0;
  _g_free(($258|0));
  $259 = HEAP32[$rstr>>2]|0;
  _g_free(($259|0));
  STACKTOP = sp;return;
 } else {
  $218 = (_csv_format($176)|0);
  $219 = ($218|0)!=(0);
  if (!($219)) {
   $258 = HEAP32[$lstr>>2]|0;
   _g_free(($258|0));
   $259 = HEAP32[$rstr>>2]|0;
   _g_free(($259|0));
   STACKTOP = sp;return;
  }
  $220 = HEAP32[$2>>2]|0;
  $221 = (_prn_delim($220)|0);
  $222 = $221 << 24 >> 24;
  HEAP32[$d>>2] = $222;
  $223 = HEAP32[$2>>2]|0;
  $224 = HEAP32[$d>>2]|0;
  $225 = HEAP32[$0>>2]|0;
  $226 = (($225) + 120|0);
  $227 = +HEAPF64[$226>>3];
  HEAP32[$vararg_buffer126>>2] = 36472;
  $vararg_ptr104 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr104>>2] = $224;
  $vararg_ptr105 = (($vararg_buffer126) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$227;HEAP32[$vararg_ptr105>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr105+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($223,38856,$vararg_buffer126)|0);
  $228 = HEAP32[$2>>2]|0;
  $229 = HEAP32[$nstrs>>2]|0;
  $230 = HEAP32[$d>>2]|0;
  $231 = HEAP32[$nl>>2]|0;
  HEAP32[$vararg_buffer126>>2] = $229;
  $vararg_ptr109 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr109>>2] = $230;
  $vararg_ptr110 = (($vararg_buffer126) + 8|0);
  HEAP32[$vararg_ptr110>>2] = $231;
  (_pprintf($228,38872,$vararg_buffer126)|0);
  $232 = HEAP32[$2>>2]|0;
  $233 = (($nstrs) + 4|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = HEAP32[$d>>2]|0;
  $236 = HEAP32[$nr>>2]|0;
  HEAP32[$vararg_buffer126>>2] = $234;
  $vararg_ptr114 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr114>>2] = $235;
  $vararg_ptr115 = (($vararg_buffer126) + 8|0);
  HEAP32[$vararg_ptr115>>2] = $236;
  (_pprintf($232,38872,$vararg_buffer126)|0);
  $237 = HEAP32[$nb>>2]|0;
  $238 = ($237|0)>=(0);
  if ($238) {
   $239 = HEAP32[$np>>2]|0;
   $240 = ($239|0)>=(0);
   if ($240) {
    $241 = HEAP32[$2>>2]|0;
    $242 = (($nstrs) + 8|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = HEAP32[$d>>2]|0;
    $245 = HEAP32[$nb>>2]|0;
    HEAP32[$vararg_buffer126>>2] = $243;
    $vararg_ptr119 = (($vararg_buffer126) + 4|0);
    HEAP32[$vararg_ptr119>>2] = $244;
    $vararg_ptr120 = (($vararg_buffer126) + 8|0);
    HEAP32[$vararg_ptr120>>2] = $245;
    (_pprintf($241,38872,$vararg_buffer126)|0);
    $246 = HEAP32[$2>>2]|0;
    $247 = (($nstrs) + 12|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = HEAP32[$d>>2]|0;
    $250 = HEAP32[$np>>2]|0;
    HEAP32[$vararg_buffer126>>2] = $248;
    $vararg_ptr124 = (($vararg_buffer126) + 4|0);
    HEAP32[$vararg_ptr124>>2] = $249;
    $vararg_ptr125 = (($vararg_buffer126) + 8|0);
    HEAP32[$vararg_ptr125>>2] = $250;
    (_pprintf($246,38872,$vararg_buffer126)|0);
   }
  }
  $251 = HEAP32[$nfp>>2]|0;
  $252 = ($251|0)>(0);
  if (!($252)) {
   $258 = HEAP32[$lstr>>2]|0;
   _g_free(($258|0));
   $259 = HEAP32[$rstr>>2]|0;
   _g_free(($259|0));
   STACKTOP = sp;return;
  }
  $253 = HEAP32[$2>>2]|0;
  $254 = (($nstrs) + 16|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = HEAP32[$d>>2]|0;
  $257 = HEAP32[$nfp>>2]|0;
  HEAP32[$vararg_buffer126>>2] = $255;
  $vararg_ptr129 = (($vararg_buffer126) + 4|0);
  HEAP32[$vararg_ptr129>>2] = $256;
  $vararg_ptr130 = (($vararg_buffer126) + 8|0);
  HEAP32[$vararg_ptr130>>2] = $257;
  (_pprintf($253,38872,$vararg_buffer126)|0);
  $258 = HEAP32[$lstr>>2]|0;
  _g_free(($258|0));
  $259 = HEAP32[$rstr>>2]|0;
  _g_free(($259|0));
  STACKTOP = sp;return;
 }
}
function _print_overdisp_test($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $x = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (+_gretl_model_get_double($2,37992));
 HEAPF64[$x>>3] = $3;
 $4 = +HEAPF64[$x>>3];
 $5 = $4 == 1.79769313486231570815E+308;
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$1>>2]|0;
 _ensure_vsep($6);
 $7 = HEAP32[$0>>2]|0;
 $8 = +HEAPF64[$x>>3];
 $9 = HEAP32[$1>>2]|0;
 _print_model_chi2_test($7,$8,4,$9);
 $10 = HEAP32[$1>>2]|0;
 $11 = (_tex_format($10)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$1>>2]|0;
 _gretl_prn_newline($13);
 STACKTOP = sp;return;
}
function _print_duration_alpha($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $a = 0, $sa = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp + 16|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $a = sp + 8|0;
 $sa = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 4194304;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (_plain_format($7)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - 1)|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 76|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($13<<3)|0);
 $18 = +HEAPF64[$17>>3];
 $19 = 1.0 / $18;
 HEAPF64[$a>>3] = $19;
 $20 = +HEAPF64[$a>>3];
 $21 = +HEAPF64[$a>>3];
 $22 = $20 * $21;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - 1)|0;
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + 80|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($26<<3)|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $22 * $31;
 HEAPF64[$sa>>3] = $32;
 $33 = HEAP32[$1>>2]|0;
 _ensure_vsep($33);
 $34 = HEAP32[$1>>2]|0;
 $35 = +HEAPF64[$a>>3];
 $36 = +HEAPF64[$sa>>3];
 HEAPF64[tempDoublePtr>>3]=$35;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr1 = (($vararg_buffer) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$36;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($34,37968,$vararg_buffer)|0);
 $37 = HEAP32[$1>>2]|0;
 $38 = (_tex_format($37)|0);
 $39 = ($38|0)!=(0);
 if ($39) {
  STACKTOP = sp;return;
 }
 $40 = HEAP32[$1>>2]|0;
 _gretl_prn_newline($40);
 STACKTOP = sp;return;
}
function _maybe_print_jll($pmod,$lldig,$prn) {
 $pmod = $pmod|0;
 $lldig = $lldig|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $jll = 0, $jllstr = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $xstr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer5 = sp + 8|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $jll = sp;
 $jllstr = sp + 64|0;
 $xstr = sp + 32|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $lldig;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$0>>2]|0;
 $4 = (+_gretl_model_get_double($3,37888));
 HEAPF64[$jll>>3] = $4;
 $5 = +HEAPF64[$jll>>3];
 $6 = $5 == 1.79769313486231570815E+308;
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (_gretl_model_get_data($7,37920)|0);
 HEAP32[$vararg_buffer5>>2] = $8;
 (_sprintf($jllstr,37896,$vararg_buffer5)|0);
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)>(0);
 if ($10) {
  $11 = HEAP32[$1>>2]|0;
  $12 = +HEAPF64[$jll>>3];
  $13 = HEAP32[$2>>2]|0;
  _plain_print_double($xstr,$11,$12,$13);
  $14 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $jllstr;
  $vararg_ptr4 = (($vararg_buffer5) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $xstr;
  (_pprintf($14,37936,$vararg_buffer5)|0);
  STACKTOP = sp;return;
 } else {
  $15 = HEAP32[$0>>2]|0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(81);
  $19 = $18 ? 12 : 6;
  $20 = +HEAPF64[$jll>>3];
  $21 = HEAP32[$2>>2]|0;
  _plain_print_double($xstr,$19,$20,$21);
  $22 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $jllstr;
  $vararg_ptr8 = (($vararg_buffer5) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $xstr;
  (_pprintf($22,37952,$vararg_buffer5)|0);
  STACKTOP = sp;return;
 }
}
function _pval_max_line($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, $tmp = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer6 = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $k = sp + 8|0;
 $tmp = sp + 24|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($5) - ($8))|0;
 HEAP32[$k>>2] = $9;
 $10 = HEAP32[$k>>2]|0;
 $11 = ($10|0)<(3);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = (_least_significant_coeff($12)|0);
 HEAP32[$k>>2] = $13;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 $19 = HEAP32[$k>>2]|0;
 $20 = HEAP32[$k>>2]|0;
 $21 = HEAP32[$1>>2]|0;
 $22 = (($21) + 68|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($20<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 if ($18) {
  HEAP32[$vararg_buffer6>>2] = $19;
  $vararg_ptr1 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $25;
  (_sprintf($tmp,37768,$vararg_buffer6)|0);
 } else {
  HEAP32[$vararg_buffer6>>2] = $19;
  $vararg_ptr5 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $25;
  (_sprintf($tmp,37840,$vararg_buffer6)|0);
 }
 $26 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $tmp;
 (_pprintf($26,34528,$vararg_buffer6)|0);
 STACKTOP = sp;return;
}
function _ols_print_anova($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $F = 0, $c1 = 0;
 var $c2 = 0, $c3 = 0, $mse = 0, $msr = 0, $mst = 0, $n = 0, $pv = 0, $rss = 0, $vararg_buffer61 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0;
 var $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr4 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr5 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr6 = 0, $vararg_ptr60 = 0;
 var $vararg_ptr64 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer61 = sp + 48|0;
 $0 = sp + 104|0;
 $1 = sp + 100|0;
 $2 = sp + 96|0;
 $mst = sp + 40|0;
 $msr = sp + 32|0;
 $mse = sp + 24|0;
 $rss = sp + 16|0;
 $n = sp + 92|0;
 $c1 = sp + 88|0;
 $c2 = sp + 84|0;
 $c3 = sp + 80|0;
 $F = sp + 8|0;
 $pv = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(86);
 if (!($6)) {
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 64|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = HEAP32[$1>>2]|0;
   $12 = (($11) + 104|0);
   $13 = +HEAPF64[$12>>3];
   $14 = $13 == 1.79769313486231570815E+308;
   if (!($14)) {
    $15 = HEAP32[$1>>2]|0;
    $16 = (($15) + 112|0);
    $17 = +HEAPF64[$16>>3];
    $18 = $17 == 1.79769313486231570815E+308;
    if (!($18)) {
     $19 = HEAP32[$2>>2]|0;
     HEAP32[$vararg_buffer61>>2] = 32840;
     (_pprintf($19,32832,$vararg_buffer61)|0);
     $20 = HEAP32[$1>>2]|0;
     $21 = (($20) + 52|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0);
     if ($23) {
      HEAPF64[$rss>>3] = 0.0;
     } else {
      $24 = HEAP32[$1>>2]|0;
      $25 = (($24) + 112|0);
      $26 = +HEAPF64[$25>>3];
      $27 = HEAP32[$1>>2]|0;
      $28 = (($27) + 104|0);
      $29 = +HEAPF64[$28>>3];
      $30 = $26 - $29;
      HEAPF64[$rss>>3] = $30;
     }
     $31 = (_g_utf8_strlen(32864,-1)|0);
     HEAP32[$c1>>2] = $31;
     $32 = (_g_utf8_strlen(32880,-1)|0);
     HEAP32[$c2>>2] = $32;
     $33 = (_g_utf8_strlen(32888,-1)|0);
     HEAP32[$c3>>2] = $33;
     $34 = HEAP32[$c1>>2]|0;
     $35 = ($34|0)<(35);
     $36 = HEAP32[$c1>>2]|0;
     $37 = $35 ? 35 : $36;
     HEAP32[$c1>>2] = $37;
     $38 = HEAP32[$c2>>2]|0;
     $39 = ($38|0)>(8);
     $40 = HEAP32[$c2>>2]|0;
     if ($39) {
      $41 = (($40) + 1)|0;
      $45 = $41;
     } else {
      $42 = ($40|0)<(8);
      $43 = HEAP32[$c2>>2]|0;
      $44 = $42 ? 8 : $43;
      $45 = $44;
     }
     HEAP32[$c2>>2] = $45;
     $46 = HEAP32[$c3>>2]|0;
     $47 = ($46|0)>(16);
     $48 = HEAP32[$c3>>2]|0;
     if ($47) {
      $49 = (($48) + 1)|0;
      $53 = $49;
     } else {
      $50 = ($48|0)<(16);
      $51 = HEAP32[$c3>>2]|0;
      $52 = $50 ? 16 : $51;
      $53 = $52;
     }
     HEAP32[$c3>>2] = $53;
     $54 = (_g_utf8_strlen(32864,-1)|0);
     HEAP32[$n>>2] = $54;
     $55 = HEAP32[$c1>>2]|0;
     $56 = HEAP32[$n>>2]|0;
     $57 = (($55) - ($56))|0;
     $58 = HEAP32[$2>>2]|0;
     _bufspace($57,$58);
     $59 = HEAP32[$2>>2]|0;
     (_pputs($59,32864)|0);
     $60 = (_g_utf8_strlen(32880,-1)|0);
     HEAP32[$n>>2] = $60;
     $61 = HEAP32[$c2>>2]|0;
     $62 = (($61) + 1)|0;
     $63 = HEAP32[$n>>2]|0;
     $64 = (($62) - ($63))|0;
     $65 = HEAP32[$2>>2]|0;
     _bufspace($64,$65);
     $66 = HEAP32[$2>>2]|0;
     (_pputs($66,32880)|0);
     $67 = (_g_utf8_strlen(32888,-1)|0);
     HEAP32[$n>>2] = $67;
     $68 = HEAP32[$c3>>2]|0;
     $69 = (($68) + 1)|0;
     $70 = HEAP32[$n>>2]|0;
     $71 = (($69) - ($70))|0;
     $72 = HEAP32[$2>>2]|0;
     _bufspace($71,$72);
     $73 = HEAP32[$2>>2]|0;
     (_pputs($73,32888)|0);
     $74 = HEAP32[$2>>2]|0;
     (_pputs($74,32904)|0);
     HEAP32[$c1>>2] = 16;
     $75 = +HEAPF64[$rss>>3];
     $76 = HEAP32[$1>>2]|0;
     $77 = (($76) + 52|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (+($78|0));
     $80 = $75 / $79;
     HEAPF64[$msr>>3] = $80;
     $81 = (_g_utf8_strlen(32912,-1)|0);
     HEAP32[$n>>2] = $81;
     $82 = HEAP32[$2>>2]|0;
     _bufspace(2,$82);
     $83 = HEAP32[$2>>2]|0;
     (_pputs($83,32912)|0);
     $84 = HEAP32[$n>>2]|0;
     $85 = (16 - ($84))|0;
     $86 = HEAP32[$2>>2]|0;
     _bufspace($85,$86);
     $87 = HEAP32[$1>>2]|0;
     $88 = (($87) + 52|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($89|0)==(0);
     $91 = HEAP32[$2>>2]|0;
     $92 = HEAP32[$c1>>2]|0;
     $93 = +HEAPF64[$rss>>3];
     $94 = HEAP32[$c2>>2]|0;
     $95 = HEAP32[$1>>2]|0;
     $96 = (($95) + 52|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = HEAP32[$c3>>2]|0;
     if ($90) {
      HEAP32[$vararg_buffer61>>2] = $92;
      $vararg_ptr4 = (($vararg_buffer61) + 4|0);
      HEAPF64[tempDoublePtr>>3]=$93;HEAP32[$vararg_ptr4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr4+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $vararg_ptr5 = (($vararg_buffer61) + 12|0);
      HEAP32[$vararg_ptr5>>2] = $94;
      $vararg_ptr6 = (($vararg_buffer61) + 16|0);
      HEAP32[$vararg_ptr6>>2] = $97;
      $vararg_ptr7 = (($vararg_buffer61) + 20|0);
      HEAP32[$vararg_ptr7>>2] = $98;
      $vararg_ptr8 = (($vararg_buffer61) + 24|0);
      HEAP32[$vararg_ptr8>>2] = 32944;
      (_pprintf($91,32928,$vararg_buffer61)|0);
     } else {
      $99 = +HEAPF64[$msr>>3];
      HEAP32[$vararg_buffer61>>2] = $92;
      $vararg_ptr12 = (($vararg_buffer61) + 4|0);
      HEAPF64[tempDoublePtr>>3]=$93;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $vararg_ptr13 = (($vararg_buffer61) + 12|0);
      HEAP32[$vararg_ptr13>>2] = $94;
      $vararg_ptr14 = (($vararg_buffer61) + 16|0);
      HEAP32[$vararg_ptr14>>2] = $97;
      $vararg_ptr15 = (($vararg_buffer61) + 20|0);
      HEAP32[$vararg_ptr15>>2] = $98;
      $vararg_ptr16 = (($vararg_buffer61) + 24|0);
      HEAPF64[tempDoublePtr>>3]=$99;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
      (_pprintf($91,32960,$vararg_buffer61)|0);
     }
     $100 = HEAP32[$1>>2]|0;
     $101 = (($100) + 104|0);
     $102 = +HEAPF64[$101>>3];
     $103 = HEAP32[$1>>2]|0;
     $104 = (($103) + 56|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (+($105|0));
     $107 = $102 / $106;
     HEAPF64[$mse>>3] = $107;
     $108 = (_g_utf8_strlen(32976,-1)|0);
     HEAP32[$n>>2] = $108;
     $109 = HEAP32[$2>>2]|0;
     _bufspace(2,$109);
     $110 = HEAP32[$2>>2]|0;
     (_pputs($110,32976)|0);
     $111 = HEAP32[$n>>2]|0;
     $112 = (16 - ($111))|0;
     $113 = HEAP32[$2>>2]|0;
     _bufspace($112,$113);
     $114 = HEAP32[$2>>2]|0;
     $115 = HEAP32[$c1>>2]|0;
     $116 = HEAP32[$1>>2]|0;
     $117 = (($116) + 104|0);
     $118 = +HEAPF64[$117>>3];
     $119 = HEAP32[$c2>>2]|0;
     $120 = HEAP32[$1>>2]|0;
     $121 = (($120) + 56|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = HEAP32[$c3>>2]|0;
     $124 = +HEAPF64[$mse>>3];
     HEAP32[$vararg_buffer61>>2] = $115;
     $vararg_ptr20 = (($vararg_buffer61) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$118;HEAP32[$vararg_ptr20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr20+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $vararg_ptr21 = (($vararg_buffer61) + 12|0);
     HEAP32[$vararg_ptr21>>2] = $119;
     $vararg_ptr22 = (($vararg_buffer61) + 16|0);
     HEAP32[$vararg_ptr22>>2] = $122;
     $vararg_ptr23 = (($vararg_buffer61) + 20|0);
     HEAP32[$vararg_ptr23>>2] = $123;
     $vararg_ptr24 = (($vararg_buffer61) + 24|0);
     HEAPF64[tempDoublePtr>>3]=$124;HEAP32[$vararg_ptr24>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr24+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($114,32960,$vararg_buffer61)|0);
     $125 = HEAP32[$1>>2]|0;
     $126 = (($125) + 112|0);
     $127 = +HEAPF64[$126>>3];
     $128 = HEAP32[$1>>2]|0;
     $129 = (($128) + 24|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($130) - 1)|0;
     $132 = (+($131|0));
     $133 = $127 / $132;
     HEAPF64[$mst>>3] = $133;
     $134 = (_g_utf8_strlen(32992,-1)|0);
     HEAP32[$n>>2] = $134;
     $135 = HEAP32[$2>>2]|0;
     _bufspace(2,$135);
     $136 = HEAP32[$2>>2]|0;
     (_pputs($136,32992)|0);
     $137 = HEAP32[$n>>2]|0;
     $138 = (16 - ($137))|0;
     $139 = HEAP32[$2>>2]|0;
     _bufspace($138,$139);
     $140 = HEAP32[$2>>2]|0;
     $141 = HEAP32[$c1>>2]|0;
     $142 = HEAP32[$1>>2]|0;
     $143 = (($142) + 112|0);
     $144 = +HEAPF64[$143>>3];
     $145 = HEAP32[$c2>>2]|0;
     $146 = HEAP32[$1>>2]|0;
     $147 = (($146) + 24|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($148) - 1)|0;
     $150 = HEAP32[$c3>>2]|0;
     $151 = +HEAPF64[$mst>>3];
     HEAP32[$vararg_buffer61>>2] = $141;
     $vararg_ptr28 = (($vararg_buffer61) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$144;HEAP32[$vararg_ptr28>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr28+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $vararg_ptr29 = (($vararg_buffer61) + 12|0);
     HEAP32[$vararg_ptr29>>2] = $145;
     $vararg_ptr30 = (($vararg_buffer61) + 16|0);
     HEAP32[$vararg_ptr30>>2] = $149;
     $vararg_ptr31 = (($vararg_buffer61) + 20|0);
     HEAP32[$vararg_ptr31>>2] = $150;
     $vararg_ptr32 = (($vararg_buffer61) + 24|0);
     HEAPF64[tempDoublePtr>>3]=$151;HEAP32[$vararg_ptr32>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr32+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($140,32960,$vararg_buffer61)|0);
     $152 = HEAP32[$2>>2]|0;
     $153 = +HEAPF64[$rss>>3];
     $154 = HEAP32[$1>>2]|0;
     $155 = (($154) + 112|0);
     $156 = +HEAPF64[$155>>3];
     $157 = +HEAPF64[$rss>>3];
     $158 = HEAP32[$1>>2]|0;
     $159 = (($158) + 112|0);
     $160 = +HEAPF64[$159>>3];
     $161 = $157 / $160;
     HEAPF64[tempDoublePtr>>3]=$153;HEAP32[$vararg_buffer61>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer61+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $vararg_ptr36 = (($vararg_buffer61) + 8|0);
     HEAPF64[tempDoublePtr>>3]=$156;HEAP32[$vararg_ptr36>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr36+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $vararg_ptr37 = (($vararg_buffer61) + 16|0);
     HEAPF64[tempDoublePtr>>3]=$161;HEAP32[$vararg_ptr37>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr37+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($152,33000,$vararg_buffer61)|0);
     $162 = HEAP32[$1>>2]|0;
     $163 = (($162) + 52|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ($164|0)==(0);
     if ($165) {
      $166 = HEAP32[$2>>2]|0;
      $167 = HEAP32[$1>>2]|0;
      $168 = (($167) + 52|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[$1>>2]|0;
      $171 = (($170) + 56|0);
      $172 = HEAP32[$171>>2]|0;
      HEAP32[$vararg_buffer61>>2] = $169;
      $vararg_ptr41 = (($vararg_buffer61) + 4|0);
      HEAP32[$vararg_ptr41>>2] = $172;
      $vararg_ptr42 = (($vararg_buffer61) + 8|0);
      HEAP32[$vararg_ptr42>>2] = 32944;
      (_pprintf($166,33032,$vararg_buffer61)|0);
      HEAP32[$0>>2] = 0;
      $217 = HEAP32[$0>>2]|0;
      STACKTOP = sp;return ($217|0);
     }
     $173 = HEAP32[$1>>2]|0;
     $174 = (($173) + 104|0);
     $175 = +HEAPF64[$174>>3];
     $176 = $175 == 0.0;
     do {
      if ($176) {
       label = 22;
      } else {
       $177 = +HEAPF64[$rss>>3];
       $178 = $177 == 0.0;
       if ($178) {
        label = 22;
       } else {
        $188 = +HEAPF64[$msr>>3];
        $189 = +HEAPF64[$mse>>3];
        $190 = $188 / $189;
        HEAPF64[$F>>3] = $190;
        $191 = HEAP32[$1>>2]|0;
        $192 = (($191) + 52|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = HEAP32[$1>>2]|0;
        $195 = (($194) + 56|0);
        $196 = HEAP32[$195>>2]|0;
        $197 = +HEAPF64[$F>>3];
        $198 = (+_snedecor_cdf_comp($193,$196,$197));
        HEAPF64[$pv>>3] = $198;
        $199 = HEAP32[$2>>2]|0;
        $200 = HEAP32[$1>>2]|0;
        $201 = (($200) + 52|0);
        $202 = HEAP32[$201>>2]|0;
        $203 = HEAP32[$1>>2]|0;
        $204 = (($203) + 56|0);
        $205 = HEAP32[$204>>2]|0;
        $206 = +HEAPF64[$msr>>3];
        $207 = +HEAPF64[$mse>>3];
        $208 = +HEAPF64[$F>>3];
        HEAP32[$vararg_buffer61>>2] = $202;
        $vararg_ptr53 = (($vararg_buffer61) + 4|0);
        HEAP32[$vararg_ptr53>>2] = $205;
        $vararg_ptr54 = (($vararg_buffer61) + 8|0);
        HEAPF64[tempDoublePtr>>3]=$206;HEAP32[$vararg_ptr54>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr54+4>>2]=HEAP32[tempDoublePtr+4>>2];
        $vararg_ptr55 = (($vararg_buffer61) + 16|0);
        HEAPF64[tempDoublePtr>>3]=$207;HEAP32[$vararg_ptr55>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr55+4>>2]=HEAP32[tempDoublePtr+4>>2];
        $vararg_ptr56 = (($vararg_buffer61) + 24|0);
        HEAPF64[tempDoublePtr>>3]=$208;HEAP32[$vararg_ptr56>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr56+4>>2]=HEAP32[tempDoublePtr+4>>2];
        (_pprintf($199,33088,$vararg_buffer61)|0);
        $209 = +HEAPF64[$pv>>3];
        $210 = $209 < 1.00000000000000004792E-4;
        if ($210) {
         $211 = HEAP32[$2>>2]|0;
         $212 = +HEAPF64[$pv>>3];
         HEAP32[$vararg_buffer61>>2] = 33136;
         $vararg_ptr60 = (($vararg_buffer61) + 4|0);
         HEAPF64[tempDoublePtr>>3]=$212;HEAP32[$vararg_ptr60>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr60+4>>2]=HEAP32[tempDoublePtr+4>>2];
         (_pprintf($211,33120,$vararg_buffer61)|0);
         break;
        }
        $213 = +HEAPF64[$pv>>3];
        $214 = $213 == 1.79769313486231570815E+308;
        if (!($214)) {
         $215 = HEAP32[$2>>2]|0;
         $216 = +HEAPF64[$pv>>3];
         HEAP32[$vararg_buffer61>>2] = 33136;
         $vararg_ptr64 = (($vararg_buffer61) + 4|0);
         HEAPF64[tempDoublePtr>>3]=$216;HEAP32[$vararg_ptr64>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr64+4>>2]=HEAP32[tempDoublePtr+4>>2];
         (_pprintf($215,33144,$vararg_buffer61)|0);
        }
       }
      }
     } while(0);
     if ((label|0) == 22) {
      $179 = HEAP32[$2>>2]|0;
      $180 = HEAP32[$1>>2]|0;
      $181 = (($180) + 52|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = HEAP32[$1>>2]|0;
      $184 = (($183) + 56|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = +HEAPF64[$msr>>3];
      $187 = +HEAPF64[$mse>>3];
      HEAP32[$vararg_buffer61>>2] = $182;
      $vararg_ptr46 = (($vararg_buffer61) + 4|0);
      HEAP32[$vararg_ptr46>>2] = $185;
      $vararg_ptr47 = (($vararg_buffer61) + 8|0);
      HEAPF64[tempDoublePtr>>3]=$186;HEAP32[$vararg_ptr47>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr47+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $vararg_ptr48 = (($vararg_buffer61) + 16|0);
      HEAPF64[tempDoublePtr>>3]=$187;HEAP32[$vararg_ptr48>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr48+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $vararg_ptr49 = (($vararg_buffer61) + 24|0);
      HEAP32[$vararg_ptr49>>2] = 32944;
      (_pprintf($179,33056,$vararg_buffer61)|0);
     }
     HEAP32[$0>>2] = 0;
     $217 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($217|0);
    }
   }
  }
 }
 HEAP32[$0>>2] = 8;
 $217 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($217|0);
}
function _any_tests($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $pmod;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 248|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 do {
  if ($5) {
   HEAP32[$0>>2] = 1;
  } else {
   $6 = HEAP32[$1>>2]|0;
   $7 = (($6) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(127);
   if ($9) {
    $10 = HEAP32[$1>>2]|0;
    $11 = (_gretl_model_get_int($10,36920)|0);
    $12 = ($11|0)!=(0);
    if ($12) {
     HEAP32[$0>>2] = 1;
     break;
    }
   }
   HEAP32[$0>>2] = 0;
  }
 } while(0);
 $13 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _print_model_tests($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_tex_format($2)|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  HEAP32[$i>>2] = 0;
  while(1) {
   $27 = HEAP32[$i>>2]|0;
   $28 = HEAP32[$0>>2]|0;
   $29 = (($28) + 248|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($27|0)<($30|0);
   $32 = HEAP32[$0>>2]|0;
   if (!($31)) {
    break;
   }
   $33 = HEAP32[$i>>2]|0;
   $34 = HEAP32[$1>>2]|0;
   _gretl_model_test_print($32,$33,$34);
   $35 = HEAP32[$i>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[$i>>2] = $36;
  }
  $37 = HEAP32[$1>>2]|0;
  _maybe_print_weak_insts_test($32,$37);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 (_pputs($5,33624)|0);
 HEAP32[$i>>2] = 0;
 while(1) {
  $6 = HEAP32[$i>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 248|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$i>>2]|0;
  $12 = ($11|0)>(0);
  if ($12) {
   $13 = HEAP32[$1>>2]|0;
   (_pputs($13,36816)|0);
  }
  $14 = HEAP32[$0>>2]|0;
  $15 = HEAP32[$i>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  _gretl_model_test_print($14,$15,$16);
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 248|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)>(0);
 if ($22) {
  $23 = HEAP32[$1>>2]|0;
  (_pputs($23,36816)|0);
 }
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[$1>>2]|0;
 _maybe_print_weak_insts_test($24,$25);
 $26 = HEAP32[$1>>2]|0;
 (_pputs($26,33776)|0);
 STACKTOP = sp;return;
}
function _model_format_end($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_tex_format($1)|0);
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$0>>2]|0;
 if ($3) {
  (_pputs($4,36768)|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = (_tex_doc_format($5)|0);
  $7 = ($6|0)!=(0);
  if (!($7)) {
   STACKTOP = sp;return;
  }
  $8 = HEAP32[$0>>2]|0;
  (_pputs($8,36784)|0);
  STACKTOP = sp;return;
 } else {
  $9 = (_rtf_doc_format($4)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   STACKTOP = sp;return;
  }
  $11 = HEAP32[$0>>2]|0;
  (_pputs($11,36808)|0);
  STACKTOP = sp;return;
 }
}
function _plain_print_double($s,$d,$x,$prn) {
 $s = $s|0;
 $d = $d|0;
 $x = +$x;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, $vararg_buffer2 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer2 = sp + 8|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp;
 $3 = sp + 20|0;
 $tmp = sp + 32|0;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $d;
 HEAPF64[$2>>3] = $x;
 HEAP32[$3>>2] = $prn;
 $4 = +HEAPF64[$2>>3];
 $5 = $4 < 0.0;
 if ($5) {
  $6 = HEAP32[$3>>2]|0;
  $7 = (_gretl_print_has_minus($6)|0);
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = HEAP32[$0>>2]|0;
   HEAP8[$9>>0] = 0;
   $10 = HEAP32[$0>>2]|0;
   (_strcat(($10|0),(33208|0))|0);
   $11 = HEAP32[$1>>2]|0;
   $12 = +HEAPF64[$2>>3];
   $13 = -$12;
   HEAP32[$vararg_buffer2>>2] = $11;
   $vararg_ptr1 = (($vararg_buffer2) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$13;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($tmp,33216,$vararg_buffer2)|0);
   $14 = HEAP32[$0>>2]|0;
   (_strcat(($14|0),($tmp|0))|0);
   STACKTOP = sp;return;
  }
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = +HEAPF64[$2>>3];
 HEAP32[$vararg_buffer2>>2] = $16;
 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($15,33216,$vararg_buffer2)|0);
 STACKTOP = sp;return;
}
function _limdep_df($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $df = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $df = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_gretl_model_get_int($1,33896)|0);
 HEAP32[$df>>2] = $2;
 $3 = HEAP32[$df>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $8 = HEAP32[$df>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$df>>2] = $7;
 $8 = HEAP32[$df>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _ensure_vsep($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_tex_format($1)|0);
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$0>>2]|0;
 if ($3) {
  (_pputs($4,33872)|0);
  STACKTOP = sp;return;
 }
 $5 = (_rtf_format($4)|0);
 $6 = ($5|0)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 (_pputs($7,33888)|0);
 STACKTOP = sp;return;
}
function _plain_print_act_pred($ap,$prn) {
 $ap = $ap|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bign = 0, $i = 0, $leftlen = 0, $numwidth = 0;
 var $vararg_buffer10 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $leftlen = sp + 28|0;
 $numwidth = sp + 24|0;
 $i = sp + 20|0;
 $bign = sp + 16|0;
 HEAP32[$0>>2] = $ap;
 HEAP32[$1>>2] = $prn;
 HEAP32[$numwidth>>2] = 1;
 HEAP32[$bign>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = ($2|0)<(4);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$i>>2]|0;
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$bign>>2]|0;
  $9 = ($7|0)>($8|0);
  if ($9) {
   $10 = HEAP32[$i>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = (($11) + ($10<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$bign>>2] = $13;
  }
  $14 = HEAP32[$i>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$i>>2] = $15;
 }
 while(1) {
  $16 = HEAP32[$bign>>2]|0;
  $17 = (($16|0) / 10)&-1;
  HEAP32[$bign>>2] = $17;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   break;
  }
  $19 = HEAP32[$numwidth>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$numwidth>>2] = $20;
 }
 $21 = (_char_len(33800)|0);
 $22 = (($21) + 3)|0;
 HEAP32[$leftlen>>2] = $22;
 $23 = HEAP32[$leftlen>>2]|0;
 $24 = (($23) + 2)|0;
 $25 = HEAP32[$1>>2]|0;
 _bufspace($24,$25);
 $26 = HEAP32[$1>>2]|0;
 (_pputs($26,33808)|0);
 $27 = HEAP32[$1>>2]|0;
 (_pputc($27,10)|0);
 $28 = HEAP32[$leftlen>>2]|0;
 $29 = (($28) + 3)|0;
 $30 = HEAP32[$1>>2]|0;
 _bufspace($29,$30);
 $31 = HEAP32[$1>>2]|0;
 $32 = HEAP32[$numwidth>>2]|0;
 $33 = HEAP32[$numwidth>>2]|0;
 HEAP32[$vararg_buffer10>>2] = $32;
 $vararg_ptr1 = (($vararg_buffer10) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = (($vararg_buffer10) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $33;
 $vararg_ptr3 = (($vararg_buffer10) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 1;
 (_pprintf($31,33824,$vararg_buffer10)|0);
 $34 = HEAP32[$1>>2]|0;
 _bufspace(2,$34);
 $35 = HEAP32[$1>>2]|0;
 (_pputs($35,33800)|0);
 $36 = HEAP32[$1>>2]|0;
 $37 = HEAP32[$numwidth>>2]|0;
 $38 = HEAP32[$0>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$numwidth>>2]|0;
 $41 = HEAP32[$0>>2]|0;
 $42 = (($41) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$vararg_buffer10>>2] = $37;
 $vararg_ptr7 = (($vararg_buffer10) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $39;
 $vararg_ptr8 = (($vararg_buffer10) + 8|0);
 HEAP32[$vararg_ptr8>>2] = $40;
 $vararg_ptr9 = (($vararg_buffer10) + 12|0);
 HEAP32[$vararg_ptr9>>2] = $43;
 (_pprintf($36,33840,$vararg_buffer10)|0);
 $44 = HEAP32[$leftlen>>2]|0;
 $45 = HEAP32[$1>>2]|0;
 _bufspace($44,$45);
 $46 = HEAP32[$1>>2]|0;
 $47 = HEAP32[$numwidth>>2]|0;
 $48 = HEAP32[$0>>2]|0;
 $49 = (($48) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$numwidth>>2]|0;
 $52 = HEAP32[$0>>2]|0;
 $53 = (($52) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 HEAP32[$vararg_buffer10>>2] = $47;
 $vararg_ptr13 = (($vararg_buffer10) + 4|0);
 HEAP32[$vararg_ptr13>>2] = $50;
 $vararg_ptr14 = (($vararg_buffer10) + 8|0);
 HEAP32[$vararg_ptr14>>2] = $51;
 $vararg_ptr15 = (($vararg_buffer10) + 12|0);
 HEAP32[$vararg_ptr15>>2] = $54;
 (_pprintf($46,33856,$vararg_buffer10)|0);
 $55 = HEAP32[$1>>2]|0;
 (_pputc($55,10)|0);
 STACKTOP = sp;return;
}
function _char_len($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $s;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_g_utf8_validate($2,-1,0)|0);
 $4 = ($3|0)!=(0);
 $5 = HEAP32[$1>>2]|0;
 if ($4) {
  $6 = (_g_utf8_strlen($5,-1)|0);
  HEAP32[$0>>2] = $6;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  $7 = (_strlen(($5|0))|0);
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _root_start($tag,$prn) {
 $tag = $tag|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer4 = sp;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 HEAP32[$0>>2] = $tag;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_plain_format($2)|0);
 $4 = ($3|0)!=(0);
 $5 = HEAP32[$1>>2]|0;
 if ($4) {
  $6 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $6;
  (_pprintf($5,34840,$vararg_buffer4)|0);
  STACKTOP = sp;return;
 }
 $7 = (_tex_format($5)|0);
 $8 = ($7|0)!=(0);
 $9 = HEAP32[$1>>2]|0;
 if ($8) {
  $10 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $10;
  (_pprintf($9,34848,$vararg_buffer4)|0);
  STACKTOP = sp;return;
 }
 $11 = (_rtf_format($9)|0);
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$1>>2]|0;
 (_pputs($13,34632)|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $15;
 (_pprintf($14,34856,$vararg_buffer4)|0);
 STACKTOP = sp;return;
}
function _print_root($rx,$ix,$mod,$fr,$i,$hline,$prn) {
 $rx = +$rx;
 $ix = +$ix;
 $mod = +$mod;
 $fr = +$fr;
 $i = $i|0;
 $hline = $hline|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer14 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer14 = sp + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = sp + 80|0;
 $5 = sp + 76|0;
 $6 = sp + 72|0;
 HEAPF64[$0>>3] = $rx;
 HEAPF64[$1>>3] = $ix;
 HEAPF64[$2>>3] = $mod;
 HEAPF64[$3>>3] = $fr;
 HEAP32[$4>>2] = $i;
 HEAP32[$5>>2] = $hline;
 HEAP32[$6>>2] = $prn;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_plain_format($7)|0);
 $9 = ($8|0)!=(0);
 $10 = HEAP32[$6>>2]|0;
 if ($9) {
  $11 = HEAP32[32752>>2]|0;
  $12 = HEAP32[$4>>2]|0;
  $13 = +HEAPF64[$0>>3];
  $14 = +HEAPF64[$1>>3];
  $15 = +HEAPF64[$2>>3];
  $16 = +HEAPF64[$3>>3];
  HEAP32[$vararg_buffer14>>2] = 34560;
  $vararg_ptr1 = (($vararg_buffer14) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $12;
  $vararg_ptr2 = (($vararg_buffer14) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$13;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr3 = (($vararg_buffer14) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$14;HEAP32[$vararg_ptr3>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr3+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr4 = (($vararg_buffer14) + 24|0);
  HEAPF64[tempDoublePtr>>3]=$15;HEAP32[$vararg_ptr4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr4+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr5 = (($vararg_buffer14) + 32|0);
  HEAPF64[tempDoublePtr>>3]=$16;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($10,$11,$vararg_buffer14)|0);
  STACKTOP = sp;return;
 }
 $17 = (_tex_format($10)|0);
 $18 = ($17|0)!=(0);
 $19 = HEAP32[$6>>2]|0;
 if (!($18)) {
  $28 = (_rtf_format($19)|0);
  $29 = ($28|0)!=(0);
  if (!($29)) {
   STACKTOP = sp;return;
  }
  $30 = HEAP32[$6>>2]|0;
  (_pputs($30,34632)|0);
  $31 = HEAP32[$6>>2]|0;
  $32 = HEAP32[$4>>2]|0;
  $33 = +HEAPF64[$0>>3];
  $34 = +HEAPF64[$1>>3];
  $35 = +HEAPF64[$2>>3];
  $36 = +HEAPF64[$3>>3];
  HEAP32[$vararg_buffer14>>2] = 34560;
  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $32;
  $vararg_ptr18 = (($vararg_buffer14) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$33;HEAP32[$vararg_ptr18>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr18+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr19 = (($vararg_buffer14) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$34;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr20 = (($vararg_buffer14) + 24|0);
  HEAPF64[tempDoublePtr>>3]=$35;HEAP32[$vararg_ptr20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr20+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr21 = (($vararg_buffer14) + 32|0);
  HEAPF64[tempDoublePtr>>3]=$36;HEAP32[$vararg_ptr21>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr21+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($31,34744,$vararg_buffer14)|0);
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$4>>2]|0;
 $21 = +HEAPF64[$0>>3];
 $22 = +HEAPF64[$1>>3];
 $23 = +HEAPF64[$2>>3];
 $24 = +HEAPF64[$3>>3];
 HEAP32[$vararg_buffer14>>2] = 34560;
 $vararg_ptr9 = (($vararg_buffer14) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $20;
 $vararg_ptr10 = (($vararg_buffer14) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$21;HEAP32[$vararg_ptr10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr10+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr11 = (($vararg_buffer14) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$22;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr12 = (($vararg_buffer14) + 24|0);
 HEAPF64[tempDoublePtr>>3]=$23;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr13 = (($vararg_buffer14) + 32|0);
 HEAPF64[tempDoublePtr>>3]=$24;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($19,34568,$vararg_buffer14)|0);
 $25 = HEAP32[$5>>2]|0;
 $26 = ($25|0)!=(0);
 $27 = HEAP32[$6>>2]|0;
 if ($26) {
  (_pputs($27,34624)|0);
  STACKTOP = sp;return;
 } else {
  (_pputc($27,10)|0);
  STACKTOP = sp;return;
 }
}
function _alt_print_coeff_table_start($pmod,$ci,$prn) {
 $pmod = $pmod|0;
 $ci = $ci|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cols = 0, $d = 0, $i = 0, $intervals = 0, $m = 0, $mp = 0, $ret = 0, $seqcols = 0, $slopes = 0, $tabopt = 0;
 var $tlabel = 0, $use_param = 0, $vararg_buffer63 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0;
 var $vararg_ptr59 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer63 = sp;
 $0 = sp + 104|0;
 $1 = sp + 100|0;
 $2 = sp + 96|0;
 $tlabel = sp + 92|0;
 $use_param = sp + 88|0;
 $slopes = sp + 84|0;
 $intervals = sp + 80|0;
 $seqcols = sp + 76|0;
 $mp = sp + 72|0;
 $ret = sp + 68|0;
 $m = sp + 64|0;
 $d = sp + 108|0;
 $cols = sp + 40|0;
 $i = sp + 36|0;
 $tabopt = sp + 32|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $ci;
 HEAP32[$2>>2] = $prn;
 HEAP32[$use_param>>2] = 0;
 HEAP32[$slopes>>2] = 0;
 HEAP32[$intervals>>2] = 0;
 HEAP32[$seqcols>>2] = 0;
 HEAP32[$mp>>2] = 0;
 HEAP32[$ret>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_use_zscore($3)|0);
 $5 = ($4|0)!=(0);
 $6 = HEAP32[$2>>2]|0;
 $7 = (_tex_format($6)|0);
 $8 = ($7|0)!=(0);
 if ($5) {
  $9 = $8 ? 35960 : 35968;
  HEAP32[$tlabel>>2] = $9;
 } else {
  $10 = $8 ? 35976 : 35992;
  HEAP32[$tlabel>>2] = $10;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(83);
  if ($16) {
   $26 = 1;
  } else {
   $17 = HEAP32[$0>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(76);
   if ($20) {
    $26 = 1;
   } else {
    $21 = HEAP32[$0>>2]|0;
    $22 = (($21) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(47);
    $26 = $24;
   }
  }
  $25 = $26&1;
  HEAP32[$use_param>>2] = $25;
  $27 = HEAP32[$0>>2]|0;
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(69);
  if ($30) {
   label = 10;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = (($31) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(98);
   if ($34) {
    label = 10;
   } else {
    $48 = 0;
   }
  }
  if ((label|0) == 10) {
   $35 = HEAP32[$0>>2]|0;
   $36 = (_gretl_model_get_int($35,32152)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    $48 = 0;
   } else {
    $38 = HEAP32[$0>>2]|0;
    $39 = (_gretl_model_get_int($38,32176)|0);
    $40 = ($39|0)!=(0);
    if ($40) {
     $48 = 0;
    } else {
     $41 = HEAP32[$0>>2]|0;
     $42 = (($41) + 12|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $43 & 32768;
     $45 = ($44|0)!=(0);
     $46 = $45 ^ 1;
     $48 = $46;
    }
   }
  }
  $47 = $48&1;
  HEAP32[$slopes>>2] = $47;
  $49 = HEAP32[$0>>2]|0;
  $50 = (_gretl_model_get_data($49,34976)|0);
  $51 = ($50|0)!=(0|0);
  $52 = $51&1;
  HEAP32[$intervals>>2] = $52;
  $53 = HEAP32[$0>>2]|0;
  $54 = (_gretl_model_get_data($53,34928)|0);
  HEAP32[$m>>2] = $54;
  $55 = HEAP32[$m>>2]|0;
  $56 = ($55|0)==(0|0);
  if ($56) {
   $60 = 0;
  } else {
   $57 = HEAP32[$m>>2]|0;
   $58 = (($57) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59;
  }
  HEAP32[$seqcols>>2] = $60;
  $61 = HEAP32[$0>>2]|0;
  $62 = (($61) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(81);
  $65 = $64&1;
  HEAP32[$mp>>2] = $65;
 }
 $66 = HEAP32[$2>>2]|0;
 $67 = (_csv_format($66)|0);
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = HEAP32[$2>>2]|0;
  $70 = (_prn_delim($69)|0);
  HEAP8[$d>>0] = $70;
  $71 = HEAP32[$mp>>2]|0;
  $72 = ($71|0)!=(0);
  if ($72) {
   $73 = HEAP32[$2>>2]|0;
   $74 = HEAP8[$d>>0]|0;
   $75 = $74 << 24 >> 24;
   $76 = HEAP8[$d>>0]|0;
   $77 = $76 << 24 >> 24;
   HEAP32[$vararg_buffer63>>2] = $75;
   $vararg_ptr1 = (($vararg_buffer63) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 36016;
   $vararg_ptr2 = (($vararg_buffer63) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $77;
   $vararg_ptr3 = (($vararg_buffer63) + 12|0);
   HEAP32[$vararg_ptr3>>2] = 36032;
   (_pprintf($73,36000,$vararg_buffer63)|0);
   $209 = HEAP32[$ret>>2]|0;
   STACKTOP = sp;return ($209|0);
  }
  $78 = HEAP32[$slopes>>2]|0;
  $79 = ($78|0)!=(0);
  if ($79) {
   $80 = HEAP32[$2>>2]|0;
   $81 = HEAP8[$d>>0]|0;
   $82 = $81 << 24 >> 24;
   $83 = HEAP8[$d>>0]|0;
   $84 = $83 << 24 >> 24;
   $85 = HEAP8[$d>>0]|0;
   $86 = $85 << 24 >> 24;
   $87 = HEAP32[$tlabel>>2]|0;
   $88 = HEAP8[$d>>0]|0;
   $89 = $88 << 24 >> 24;
   HEAP32[$vararg_buffer63>>2] = $82;
   $vararg_ptr7 = (($vararg_buffer63) + 4|0);
   HEAP32[$vararg_ptr7>>2] = 36016;
   $vararg_ptr8 = (($vararg_buffer63) + 8|0);
   HEAP32[$vararg_ptr8>>2] = $84;
   $vararg_ptr9 = (($vararg_buffer63) + 12|0);
   HEAP32[$vararg_ptr9>>2] = 36032;
   $vararg_ptr10 = (($vararg_buffer63) + 16|0);
   HEAP32[$vararg_ptr10>>2] = $86;
   $vararg_ptr11 = (($vararg_buffer63) + 20|0);
   HEAP32[$vararg_ptr11>>2] = $87;
   $vararg_ptr12 = (($vararg_buffer63) + 24|0);
   HEAP32[$vararg_ptr12>>2] = $89;
   $vararg_ptr13 = (($vararg_buffer63) + 28|0);
   HEAP32[$vararg_ptr13>>2] = 36080;
   (_pprintf($80,36048,$vararg_buffer63)|0);
   $209 = HEAP32[$ret>>2]|0;
   STACKTOP = sp;return ($209|0);
  }
  $90 = HEAP32[$use_param>>2]|0;
  $91 = ($90|0)!=(0);
  if ($91) {
   $92 = HEAP32[$2>>2]|0;
   $93 = HEAP8[$d>>0]|0;
   $94 = $93 << 24 >> 24;
   $95 = HEAP8[$d>>0]|0;
   $96 = $95 << 24 >> 24;
   $97 = HEAP8[$d>>0]|0;
   $98 = $97 << 24 >> 24;
   $99 = HEAP32[$tlabel>>2]|0;
   $100 = HEAP8[$d>>0]|0;
   $101 = $100 << 24 >> 24;
   HEAP32[$vararg_buffer63>>2] = $94;
   $vararg_ptr17 = (($vararg_buffer63) + 4|0);
   HEAP32[$vararg_ptr17>>2] = 36096;
   $vararg_ptr18 = (($vararg_buffer63) + 8|0);
   HEAP32[$vararg_ptr18>>2] = $96;
   $vararg_ptr19 = (($vararg_buffer63) + 12|0);
   HEAP32[$vararg_ptr19>>2] = 36032;
   $vararg_ptr20 = (($vararg_buffer63) + 16|0);
   HEAP32[$vararg_ptr20>>2] = $98;
   $vararg_ptr21 = (($vararg_buffer63) + 20|0);
   HEAP32[$vararg_ptr21>>2] = $99;
   $vararg_ptr22 = (($vararg_buffer63) + 24|0);
   HEAP32[$vararg_ptr22>>2] = $101;
   $vararg_ptr23 = (($vararg_buffer63) + 28|0);
   HEAP32[$vararg_ptr23>>2] = 33136;
   (_pprintf($92,36048,$vararg_buffer63)|0);
   $209 = HEAP32[$ret>>2]|0;
   STACKTOP = sp;return ($209|0);
  }
  $102 = HEAP32[$intervals>>2]|0;
  $103 = ($102|0)!=(0);
  if ($103) {
   $104 = HEAP32[$2>>2]|0;
   $105 = HEAP8[$d>>0]|0;
   $106 = $105 << 24 >> 24;
   $107 = HEAP8[$d>>0]|0;
   $108 = $107 << 24 >> 24;
   $109 = HEAP8[$d>>0]|0;
   $110 = $109 << 24 >> 24;
   HEAP32[$vararg_buffer63>>2] = $106;
   $vararg_ptr27 = (($vararg_buffer63) + 4|0);
   HEAP32[$vararg_ptr27>>2] = 36016;
   $vararg_ptr28 = (($vararg_buffer63) + 8|0);
   HEAP32[$vararg_ptr28>>2] = $108;
   $vararg_ptr29 = (($vararg_buffer63) + 12|0);
   HEAP32[$vararg_ptr29>>2] = 36136;
   $vararg_ptr30 = (($vararg_buffer63) + 16|0);
   HEAP32[$vararg_ptr30>>2] = $110;
   $vararg_ptr31 = (($vararg_buffer63) + 20|0);
   HEAP32[$vararg_ptr31>>2] = 36144;
   (_pprintf($104,36112,$vararg_buffer63)|0);
   $209 = HEAP32[$ret>>2]|0;
   STACKTOP = sp;return ($209|0);
  }
  $111 = HEAP32[$seqcols>>2]|0;
  $112 = ($111|0)==(3);
  if ($112) {
   $113 = HEAP32[$2>>2]|0;
   $114 = HEAP8[$d>>0]|0;
   $115 = $114 << 24 >> 24;
   $116 = HEAP8[$d>>0]|0;
   $117 = $116 << 24 >> 24;
   $118 = HEAP8[$d>>0]|0;
   $119 = $118 << 24 >> 24;
   $120 = HEAP8[$d>>0]|0;
   $121 = $120 << 24 >> 24;
   HEAP32[$vararg_buffer63>>2] = $115;
   $vararg_ptr35 = (($vararg_buffer63) + 4|0);
   HEAP32[$vararg_ptr35>>2] = 36152;
   $vararg_ptr36 = (($vararg_buffer63) + 8|0);
   HEAP32[$vararg_ptr36>>2] = $117;
   $vararg_ptr37 = (($vararg_buffer63) + 12|0);
   HEAP32[$vararg_ptr37>>2] = 36016;
   $vararg_ptr38 = (($vararg_buffer63) + 16|0);
   HEAP32[$vararg_ptr38>>2] = $119;
   $vararg_ptr39 = (($vararg_buffer63) + 20|0);
   HEAP32[$vararg_ptr39>>2] = 36136;
   $vararg_ptr40 = (($vararg_buffer63) + 24|0);
   HEAP32[$vararg_ptr40>>2] = $121;
   $vararg_ptr41 = (($vararg_buffer63) + 28|0);
   HEAP32[$vararg_ptr41>>2] = 36144;
   (_pprintf($113,36048,$vararg_buffer63)|0);
   $209 = HEAP32[$ret>>2]|0;
   STACKTOP = sp;return ($209|0);
  }
  $122 = HEAP32[$seqcols>>2]|0;
  $123 = ($122|0)==(2);
  $124 = HEAP32[$2>>2]|0;
  $125 = HEAP8[$d>>0]|0;
  $126 = $125 << 24 >> 24;
  $127 = HEAP8[$d>>0]|0;
  $128 = $127 << 24 >> 24;
  $129 = HEAP8[$d>>0]|0;
  $130 = $129 << 24 >> 24;
  $131 = HEAP32[$tlabel>>2]|0;
  if ($123) {
   HEAP32[$vararg_buffer63>>2] = $126;
   $vararg_ptr45 = (($vararg_buffer63) + 4|0);
   HEAP32[$vararg_ptr45>>2] = 36016;
   $vararg_ptr46 = (($vararg_buffer63) + 8|0);
   HEAP32[$vararg_ptr46>>2] = $128;
   $vararg_ptr47 = (($vararg_buffer63) + 12|0);
   HEAP32[$vararg_ptr47>>2] = 36032;
   $vararg_ptr48 = (($vararg_buffer63) + 16|0);
   HEAP32[$vararg_ptr48>>2] = $130;
   $vararg_ptr49 = (($vararg_buffer63) + 20|0);
   HEAP32[$vararg_ptr49>>2] = $131;
   (_pprintf($124,36112,$vararg_buffer63)|0);
   $209 = HEAP32[$ret>>2]|0;
   STACKTOP = sp;return ($209|0);
  } else {
   $132 = HEAP8[$d>>0]|0;
   $133 = $132 << 24 >> 24;
   HEAP32[$vararg_buffer63>>2] = $126;
   $vararg_ptr53 = (($vararg_buffer63) + 4|0);
   HEAP32[$vararg_ptr53>>2] = 36016;
   $vararg_ptr54 = (($vararg_buffer63) + 8|0);
   HEAP32[$vararg_ptr54>>2] = $128;
   $vararg_ptr55 = (($vararg_buffer63) + 12|0);
   HEAP32[$vararg_ptr55>>2] = 36032;
   $vararg_ptr56 = (($vararg_buffer63) + 16|0);
   HEAP32[$vararg_ptr56>>2] = $130;
   $vararg_ptr57 = (($vararg_buffer63) + 20|0);
   HEAP32[$vararg_ptr57>>2] = $131;
   $vararg_ptr58 = (($vararg_buffer63) + 24|0);
   HEAP32[$vararg_ptr58>>2] = $133;
   $vararg_ptr59 = (($vararg_buffer63) + 28|0);
   HEAP32[$vararg_ptr59>>2] = 33136;
   (_pprintf($124,36048,$vararg_buffer63)|0);
   $209 = HEAP32[$ret>>2]|0;
   STACKTOP = sp;return ($209|0);
  }
 }
 ;HEAP32[$cols+0>>2]=0|0;HEAP32[$cols+4>>2]=0|0;HEAP32[$cols+8>>2]=0|0;HEAP32[$cols+12>>2]=0|0;HEAP32[$cols+16>>2]=0|0;HEAP32[$cols+20>>2]=0|0;
 HEAP32[$cols>>2] = 33160;
 $134 = HEAP32[$use_param>>2]|0;
 $135 = ($134|0)!=(0);
 $136 = $135 ? 36160 : 36176;
 $137 = (($cols) + 4|0);
 HEAP32[$137>>2] = $136;
 $138 = HEAP32[$intervals>>2]|0;
 $139 = ($138|0)!=(0);
 do {
  if ($139) {
   $140 = (($cols) + 8|0);
   HEAP32[$140>>2] = 36192;
   $141 = (($cols) + 12|0);
   HEAP32[$141>>2] = 36200;
  } else {
   $142 = HEAP32[$seqcols>>2]|0;
   $143 = ($142|0)==(3);
   if ($143) {
    $144 = (($cols) + 8|0);
    HEAP32[$144>>2] = 36152;
    $145 = (($cols) + 12|0);
    HEAP32[$145>>2] = 36192;
    $146 = (($cols) + 16|0);
    HEAP32[$146>>2] = 36200;
    break;
   }
   $147 = HEAP32[$2>>2]|0;
   $148 = (_tex_format($147)|0);
   $149 = ($148|0)!=(0);
   $150 = $149 ? 36208 : 36224;
   $151 = (($cols) + 8|0);
   HEAP32[$151>>2] = $150;
   $152 = HEAP32[$mp>>2]|0;
   $153 = ($152|0)!=(0);
   if (!($153)) {
    $154 = HEAP32[$tlabel>>2]|0;
    $155 = (($cols) + 12|0);
    HEAP32[$155>>2] = $154;
    $156 = HEAP32[$slopes>>2]|0;
    $157 = ($156|0)!=(0);
    $158 = $157 ? 36240 : 33136;
    $159 = (($cols) + 16|0);
    HEAP32[$159>>2] = $158;
   }
  }
 } while(0);
 $160 = HEAP32[$2>>2]|0;
 $161 = (_tex_format($160)|0);
 $162 = ($161|0)!=(0);
 if ($162) {
  $163 = HEAP32[$1>>2]|0;
  $164 = ($163|0)==(78);
  $165 = $164 ? 1048576 : 0;
  HEAP32[$tabopt>>2] = $165;
  $166 = HEAP32[$slopes>>2]|0;
  $167 = ($166|0)!=(0);
  if ($167) {
   $168 = HEAP32[$tabopt>>2]|0;
   $169 = $168 | 2;
   HEAP32[$tabopt>>2] = $169;
  }
  $170 = HEAP32[$mp>>2]|0;
  $171 = ($170|0)!=(0);
  if ($171) {
   $172 = HEAP32[$tabopt>>2]|0;
   $173 = $172 | 4096;
   HEAP32[$tabopt>>2] = $173;
  }
  $174 = HEAP32[$tabopt>>2]|0;
  $175 = HEAP32[$2>>2]|0;
  $176 = (_tex_coeff_table_start($cols,$174,$175)|0);
  HEAP32[$ret>>2] = $176;
  $209 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($209|0);
 }
 $177 = HEAP32[$2>>2]|0;
 $178 = (_rtf_format($177)|0);
 $179 = ($178|0)!=(0);
 if (!($179)) {
  $209 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($209|0);
 }
 $180 = HEAP32[$2>>2]|0;
 (_pputc($180,123)|0);
 $181 = HEAP32[$intervals>>2]|0;
 $182 = ($181|0)!=(0);
 do {
  if ($182) {
   $183 = HEAP32[$2>>2]|0;
   (_pputs($183,35624)|0);
  } else {
   $184 = HEAP32[$slopes>>2]|0;
   $185 = ($184|0)!=(0);
   $186 = HEAP32[$2>>2]|0;
   if ($185) {
    (_pputs($186,36248)|0);
    break;
   } else {
    (_pputs($186,35048)|0);
    break;
   }
  }
 } while(0);
 HEAP32[$i>>2] = 0;
 while(1) {
  $187 = HEAP32[$i>>2]|0;
  $188 = (($cols) + ($187<<2)|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ($189|0)!=(0|0);
  $191 = HEAP32[$slopes>>2]|0;
  $192 = ($191|0)!=(0);
  if (!($190)) {
   break;
  }
  if ($192) {
   $193 = HEAP32[$i>>2]|0;
   $194 = ($193|0)==(4);
   if ($194) {
    $195 = HEAP32[$2>>2]|0;
    $196 = HEAP32[$i>>2]|0;
    $197 = (($cols) + ($196<<2)|0);
    $198 = HEAP32[$197>>2]|0;
    HEAP32[$vararg_buffer63>>2] = $198;
    (_pprintf($195,36352,$vararg_buffer63)|0);
   } else {
    label = 53;
   }
  } else {
   label = 53;
  }
  if ((label|0) == 53) {
   label = 0;
   $199 = HEAP32[$2>>2]|0;
   $200 = HEAP32[$i>>2]|0;
   $201 = (($cols) + ($200<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   HEAP32[$vararg_buffer63>>2] = $202;
   (_pprintf($199,36384,$vararg_buffer63)|0);
  }
  $203 = HEAP32[$i>>2]|0;
  $204 = (($203) + 1)|0;
  HEAP32[$i>>2] = $204;
 }
 if (!($192)) {
  $205 = HEAP32[$intervals>>2]|0;
  $206 = ($205|0)!=(0);
  if (!($206)) {
   $207 = HEAP32[$2>>2]|0;
   (_pputs($207,35520)|0);
  }
 }
 $208 = HEAP32[$2>>2]|0;
 (_pputs($208,35536)|0);
 $209 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($209|0);
}
function _print_coeff_left_string($s,$prn) {
 $s = $s|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $tmp = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $tmp = sp + 16|0;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_plain_format($2)|0);
 $4 = ($3|0)!=(0);
 $5 = HEAP32[$1>>2]|0;
 if ($4) {
  $6 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $6;
  (_pprintf($5,35928,$vararg_buffer7)|0);
  STACKTOP = sp;return;
 }
 $7 = (_tex_format($5)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  (_tex_escape($tmp,$9)|0);
  $10 = HEAP32[$1>>2]|0;
  (_pputs($10,35744)|0);
  $11 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $tmp;
  (_pprintf($11,35936,$vararg_buffer7)|0);
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = (_rtf_format($12)|0);
 $14 = ($13|0)!=(0);
 $15 = HEAP32[$1>>2]|0;
 if ($14) {
  (_pputs($15,35808)|0);
  $16 = HEAP32[$1>>2]|0;
  $17 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $17;
  (_pprintf($16,35952,$vararg_buffer7)|0);
  $18 = HEAP32[$1>>2]|0;
  (_pputs($18,35880)|0);
  STACKTOP = sp;return;
 }
 $19 = (_csv_format($15)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $22;
 (_pprintf($21,35904,$vararg_buffer7)|0);
 STACKTOP = sp;return;
}
function _prepare_model_coeff($pmod,$dset,$i,$adfnum,$mc,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $i = $i|0;
 $adfnum = $adfnum|0;
 $mc = $mc|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $gotnan = 0, $slopes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $gotnan = sp + 4|0;
 $slopes = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $i;
 HEAP32[$3>>2] = $adfnum;
 HEAP32[$4>>2] = $mc;
 HEAP32[$5>>2] = $prn;
 HEAP32[$gotnan>>2] = 0;
 $6 = HEAP32[$4>>2]|0;
 _model_coeff_init($6);
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(69);
 if ($10) {
  label = 3;
 } else {
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(98);
  if ($14) {
   label = 3;
  } else {
   $27 = 1;
  }
 }
 if ((label|0) == 3) {
  $15 = HEAP32[$0>>2]|0;
  $16 = (_gretl_model_get_int($15,32152)|0);
  $17 = ($16|0)!=(0);
  if ($17) {
   $27 = 1;
  } else {
   $18 = HEAP32[$0>>2]|0;
   $19 = (_gretl_model_get_int($18,32176)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    $27 = 1;
   } else {
    $21 = HEAP32[$0>>2]|0;
    $22 = (($21) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $23 & 32768;
    $25 = ($24|0)!=(0);
    $27 = $25;
   }
  }
 }
 $26 = $27&1;
 $28 = HEAP32[$4>>2]|0;
 $29 = (($28) + 56|0);
 HEAP32[$29>>2] = $26;
 $30 = HEAP32[$5>>2]|0;
 $31 = (_tex_format($30)|0);
 $32 = ($31|0)!=(0);
 $33 = HEAP32[$0>>2]|0;
 $34 = HEAP32[$1>>2]|0;
 $35 = HEAP32[$2>>2]|0;
 $36 = HEAP32[$4>>2]|0;
 $37 = (($36) + 68|0);
 if ($32) {
  _make_tex_coeff_name($33,$34,$35,$37);
 } else {
  (_gretl_model_get_param_name($33,$34,$35,$37)|0);
 }
 $38 = HEAP32[$2>>2]|0;
 $39 = HEAP32[$0>>2]|0;
 $40 = (($39) + 76|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($38<<3)|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $43 == 1.79769313486231570815E+308;
 if ($44) {
  label = 11;
 } else {
  $45 = HEAP32[$2>>2]|0;
  $46 = HEAP32[$0>>2]|0;
  $47 = (($46) + 76|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($45<<3)|0);
  $50 = +HEAPF64[$49>>3];
  $51 = (___DOUBLE_BITS6783($50)|0);
  $52 = tempRet0;
  $53 = $52 & 2147483647;
  $54 = ($53>>>0)<(2146435072);
  $55 = ($53|0)==(2146435072);
  $56 = ($51>>>0)<(0);
  $57 = $55 & $56;
  $58 = $54 | $57;
  if ($58) {
   $59 = HEAP32[$2>>2]|0;
   $60 = HEAP32[$0>>2]|0;
   $61 = (($60) + 76|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + ($59<<3)|0);
   $64 = +HEAPF64[$63>>3];
   $65 = HEAP32[$4>>2]|0;
   HEAPF64[$65>>3] = $64;
  } else {
   label = 11;
  }
 }
 if ((label|0) == 11) {
  HEAP32[$gotnan>>2] = 1;
 }
 $66 = HEAP32[$2>>2]|0;
 $67 = HEAP32[$0>>2]|0;
 $68 = (($67) + 80|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + ($66<<3)|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $71 == 1.79769313486231570815E+308;
 if (!($72)) {
  $73 = HEAP32[$2>>2]|0;
  $74 = HEAP32[$0>>2]|0;
  $75 = (($74) + 80|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + ($73<<3)|0);
  $78 = +HEAPF64[$77>>3];
  $79 = (___DOUBLE_BITS6783($78)|0);
  $80 = tempRet0;
  $81 = $80 & 2147483647;
  $82 = ($81>>>0)<(2146435072);
  $83 = ($81|0)==(2146435072);
  $84 = ($79>>>0)<(0);
  $85 = $83 & $84;
  $86 = $82 | $85;
  if ($86) {
   $87 = HEAP32[$2>>2]|0;
   $88 = HEAP32[$0>>2]|0;
   $89 = (($88) + 80|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + ($87<<3)|0);
   $92 = +HEAPF64[$91>>3];
   $93 = HEAP32[$4>>2]|0;
   $94 = (($93) + 8|0);
   HEAPF64[$94>>3] = $92;
  }
 }
 $95 = HEAP32[$4>>2]|0;
 $96 = +HEAPF64[$95>>3];
 $97 = $96 == 1.79769313486231570815E+308;
 do {
  if (!($97)) {
   $98 = HEAP32[$4>>2]|0;
   $99 = (($98) + 8|0);
   $100 = +HEAPF64[$99>>3];
   $101 = $100 == 1.79769313486231570815E+308;
   if (!($101)) {
    $102 = HEAP32[$4>>2]|0;
    $103 = (($102) + 8|0);
    $104 = +HEAPF64[$103>>3];
    $105 = $104 > 0.0;
    if ($105) {
     $106 = HEAP32[$4>>2]|0;
     $107 = +HEAPF64[$106>>3];
     $108 = HEAP32[$4>>2]|0;
     $109 = (($108) + 8|0);
     $110 = +HEAPF64[$109>>3];
     $111 = $107 / $110;
     $112 = HEAP32[$4>>2]|0;
     $113 = (($112) + 16|0);
     HEAPF64[$113>>3] = $111;
     $114 = HEAP32[$4>>2]|0;
     $115 = (($114) + 16|0);
     $116 = +HEAPF64[$115>>3];
     $117 = $116 == 1.79769313486231570815E+308;
     if (!($117)) {
      $118 = HEAP32[$4>>2]|0;
      $119 = (($118) + 16|0);
      $120 = +HEAPF64[$119>>3];
      $121 = (___DOUBLE_BITS6783($120)|0);
      $122 = tempRet0;
      $123 = $122 & 2147483647;
      $124 = ($123>>>0)<(2146435072);
      $125 = ($123|0)==(2146435072);
      $126 = ($121>>>0)<(0);
      $127 = $125 & $126;
      $128 = $124 | $127;
      if ($128) {
       break;
      }
     }
     $129 = HEAP32[$4>>2]|0;
     $130 = (($129) + 16|0);
     HEAPF64[$130>>3] = 1.79769313486231570815E+308;
    }
   }
  }
 } while(0);
 $131 = HEAP32[$4>>2]|0;
 $132 = (($131) + 56|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ($133|0)!=(0);
 do {
  if ($134) {
   $135 = HEAP32[$4>>2]|0;
   $136 = (($135) + 16|0);
   $137 = +HEAPF64[$136>>3];
   $138 = $137 == 1.79769313486231570815E+308;
   if (!($138)) {
    $139 = HEAP32[$2>>2]|0;
    $140 = HEAP32[$3>>2]|0;
    $141 = ($139|0)==($140|0);
    $142 = HEAP32[$0>>2]|0;
    if ($141) {
     $143 = (+_gretl_model_get_double($142,35912));
     $144 = HEAP32[$4>>2]|0;
     $145 = (($144) + 24|0);
     HEAPF64[$145>>3] = $143;
     $146 = HEAP32[$4>>2]|0;
     $147 = (($146) + 60|0);
     HEAP32[$147>>2] = 1;
     break;
    } else {
     $148 = (($142) + 8|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = HEAP32[$4>>2]|0;
     $151 = (($150) + 16|0);
     $152 = +HEAPF64[$151>>3];
     $153 = HEAP32[$0>>2]|0;
     $154 = (($153) + 56|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (+_coeff_pval($149,$152,$155));
     $157 = HEAP32[$4>>2]|0;
     $158 = (($157) + 24|0);
     HEAPF64[$158>>3] = $156;
     break;
    }
   }
  }
 } while(0);
 $159 = HEAP32[$gotnan>>2]|0;
 $160 = ($159|0)!=(0);
 do {
  if (!($160)) {
   $161 = HEAP32[$4>>2]|0;
   $162 = (($161) + 56|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = ($163|0)!=(0);
   if (!($164)) {
    $165 = HEAP32[$0>>2]|0;
    $166 = (($165) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)==(69);
    if (!($168)) {
     $169 = HEAP32[$0>>2]|0;
     $170 = (($169) + 8|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = ($171|0)==(98);
     if (!($172)) {
      break;
     }
    }
    $173 = HEAP32[$0>>2]|0;
    $174 = (_gretl_model_get_int($173,32152)|0);
    $175 = ($174|0)!=(0);
    if (!($175)) {
     $176 = HEAP32[$0>>2]|0;
     $177 = (_gretl_model_get_int($176,32176)|0);
     $178 = ($177|0)!=(0);
     if (!($178)) {
      $179 = HEAP32[$2>>2]|0;
      $180 = (($179) + 2)|0;
      $181 = HEAP32[$0>>2]|0;
      $182 = (($181) + 60|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = (($183) + ($180<<2)|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ($185|0)!=(0);
      if ($186) {
       $187 = HEAP32[$0>>2]|0;
       $188 = (_gretl_model_get_data($187,35920)|0);
       HEAP32[$slopes>>2] = $188;
       $189 = HEAP32[$slopes>>2]|0;
       $190 = ($189|0)!=(0|0);
       if ($190) {
        $191 = HEAP32[$2>>2]|0;
        $192 = HEAP32[$slopes>>2]|0;
        $193 = (($192) + ($191<<3)|0);
        $194 = +HEAPF64[$193>>3];
        $195 = HEAP32[$4>>2]|0;
        $196 = (($195) + 32|0);
        HEAPF64[$196>>3] = $194;
       }
      }
     }
    }
   }
  }
 } while(0);
 $197 = HEAP32[$0>>2]|0;
 $198 = (($197) + 8|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = ($199|0)==(81);
 if (!($200)) {
  $203 = HEAP32[$gotnan>>2]|0;
  STACKTOP = sp;return ($203|0);
 }
 $201 = HEAP32[$4>>2]|0;
 $202 = (($201) + 64|0);
 HEAP32[$202>>2] = 1;
 $203 = HEAP32[$gotnan>>2]|0;
 STACKTOP = sp;return ($203|0);
}
function _print_coeff_separator($s,$n,$prn) {
 $s = $s|0;
 $n = $n|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $havestr = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $havestr = sp + 8|0;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $n;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  $10 = $8;
 } else {
  $10 = 0;
 }
 $9 = $10&1;
 HEAP32[$havestr>>2] = $9;
 $11 = HEAP32[$2>>2]|0;
 $12 = (_plain_format($11)|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = HEAP32[$havestr>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = HEAP32[$1>>2]|0;
   $17 = ($16|0)>(0);
   $18 = HEAP32[$2>>2]|0;
   if ($17) {
    (_pputs($18,35728)|0);
    $19 = HEAP32[$0>>2]|0;
    $20 = HEAP32[$1>>2]|0;
    $21 = HEAP32[$2>>2]|0;
    _print_centered($19,$20,$21);
   } else {
    (_pputs($18,35736)|0);
    $22 = HEAP32[$2>>2]|0;
    $23 = HEAP32[$0>>2]|0;
    (_pputs($22,$23)|0);
   }
   $24 = HEAP32[$2>>2]|0;
   (_pputc($24,10)|0);
  }
  $25 = HEAP32[$1>>2]|0;
  $26 = ($25|0)>(0);
  if (!($26)) {
   STACKTOP = sp;return;
  }
  $27 = HEAP32[$2>>2]|0;
  (_pputc($27,10)|0);
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$2>>2]|0;
 $29 = (_tex_format($28)|0);
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = HEAP32[$havestr>>2]|0;
  $32 = ($31|0)!=(0);
  $33 = HEAP32[$2>>2]|0;
  if ($32) {
   (_pputs($33,35744)|0);
   $34 = HEAP32[$2>>2]|0;
   $35 = HEAP32[$1>>2]|0;
   $36 = HEAP32[$0>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $35;
   $vararg_ptr1 = (($vararg_buffer5) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $36;
   (_pprintf($34,35760,$vararg_buffer5)|0);
   STACKTOP = sp;return;
  } else {
   (_pputs($33,35800)|0);
   STACKTOP = sp;return;
  }
 }
 $37 = HEAP32[$2>>2]|0;
 $38 = (_rtf_format($37)|0);
 $39 = ($38|0)!=(0);
 $40 = HEAP32[$2>>2]|0;
 if ($39) {
  (_pputs($40,35808)|0);
  $41 = HEAP32[$havestr>>2]|0;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = HEAP32[$2>>2]|0;
   $44 = HEAP32[$0>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $44;
   (_pprintf($43,35872,$vararg_buffer5)|0);
  }
  $45 = HEAP32[$2>>2]|0;
  (_pputs($45,35880)|0);
  STACKTOP = sp;return;
 }
 $46 = (_csv_format($40)|0);
 $47 = ($46|0)!=(0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$havestr>>2]|0;
 $49 = ($48|0)!=(0);
 $50 = HEAP32[$2>>2]|0;
 if ($49) {
  $51 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $51;
  (_pprintf($50,35904,$vararg_buffer5)|0);
  STACKTOP = sp;return;
 } else {
  (_pputc($50,10)|0);
  STACKTOP = sp;return;
 }
}
function _alt_print_coeff($mc,$prn) {
 $mc = $mc|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $mc;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_rtf_format($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  _rtf_print_coeff($5,$6);
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (_tex_format($7)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  _tex_print_coeff($10,$11);
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = (_csv_format($12)|0);
 $14 = ($13|0)!=(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 _csv_print_coeff($15,$16);
 STACKTOP = sp;return;
}
function _alt_print_rho_terms($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $dfd = 0, $i = 0, $xx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $xx = sp;
 $i = sp + 12|0;
 $dfd = sp + 8|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 HEAPF64[$xx>>3] = 0.0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 224|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 224|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 224|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 224|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 224|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)>(1);
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 if ($28) {
  $32 = HEAP32[$0>>2]|0;
  $33 = (($32) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 224|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($34) - ($39))|0;
  $41 = (($31) + ($40))|0;
  HEAP32[$dfd>>2] = $41;
 } else {
  HEAP32[$dfd>>2] = $31;
 }
 HEAP32[$i>>2] = 1;
 while(1) {
  $42 = HEAP32[$i>>2]|0;
  $43 = HEAP32[$0>>2]|0;
  $44 = (($43) + 224|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = ($42|0)<=($47|0);
  if (!($48)) {
   break;
  }
  $49 = HEAP32[$0>>2]|0;
  $50 = (($49) + 224|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[$i>>2]|0;
  $53 = (($52) - 1)|0;
  $54 = HEAP32[$dfd>>2]|0;
  $55 = HEAP32[$1>>2]|0;
  _print_rho($51,$53,$54,$55);
  $56 = HEAP32[$i>>2]|0;
  $57 = (($56) - 1)|0;
  $58 = HEAP32[$0>>2]|0;
  $59 = (($58) + 224|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + ($57<<3)|0);
  $64 = +HEAPF64[$63>>3];
  $65 = +HEAPF64[$xx>>3];
  $66 = $65 + $64;
  HEAPF64[$xx>>3] = $66;
  $67 = HEAP32[$i>>2]|0;
  $68 = (($67) + 1)|0;
  HEAP32[$i>>2] = $68;
 }
 STACKTOP = sp;return;
}
function _alt_print_arch_terms($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $i = 0, $mc = 0, $order = 0;
 var $se = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer1 = sp + 104|0;
 $0 = sp + 128|0;
 $1 = sp + 124|0;
 $a = sp + 120|0;
 $se = sp + 116|0;
 $order = sp + 112|0;
 $mc = sp;
 $i = sp + 108|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_data($2,35272)|0);
 HEAP32[$a>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_gretl_model_get_data($4,35288)|0);
 HEAP32[$se>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (_gretl_model_get_int($6,35304)|0);
 HEAP32[$order>>2] = $7;
 $8 = HEAP32[$a>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$se>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$order>>2]|0;
 $13 = ($12|0)>(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$1>>2]|0;
 _gretl_prn_newline($14);
 HEAP32[$i>>2] = 0;
 while(1) {
  $15 = HEAP32[$i>>2]|0;
  $16 = HEAP32[$order>>2]|0;
  $17 = ($15|0)<=($16|0);
  if (!($17)) {
   break;
  }
  _model_coeff_init($mc);
  $18 = HEAP32[$i>>2]|0;
  $19 = HEAP32[$a>>2]|0;
  $20 = (($19) + ($18<<3)|0);
  $21 = +HEAPF64[$20>>3];
  HEAPF64[$mc>>3] = $21;
  $22 = HEAP32[$i>>2]|0;
  $23 = HEAP32[$se>>2]|0;
  $24 = (($23) + ($22<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = (($mc) + 8|0);
  HEAPF64[$26>>3] = $25;
  $27 = HEAP32[$i>>2]|0;
  $28 = HEAP32[$a>>2]|0;
  $29 = (($28) + ($27<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $31 = HEAP32[$i>>2]|0;
  $32 = HEAP32[$se>>2]|0;
  $33 = (($32) + ($31<<3)|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $30 / $34;
  $36 = (($mc) + 16|0);
  HEAPF64[$36>>3] = $35;
  $37 = HEAP32[$0>>2]|0;
  $38 = (($37) + 24|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$order>>2]|0;
  $41 = (($40) + 1)|0;
  $42 = (($39) - ($41))|0;
  $43 = (+($42|0));
  $44 = (($mc) + 16|0);
  $45 = +HEAPF64[$44>>3];
  $46 = (+_student_pvalue_2($43,$45));
  $47 = (($mc) + 24|0);
  HEAPF64[$47>>3] = $46;
  $48 = HEAP32[$1>>2]|0;
  $49 = (_tex_format($48)|0);
  $50 = ($49|0)!=(0);
  $51 = (($mc) + 68|0);
  $52 = HEAP32[$i>>2]|0;
  if ($50) {
   HEAP32[$vararg_buffer1>>2] = $52;
   (_sprintf($51,35320,$vararg_buffer1)|0);
  } else {
   HEAP32[$vararg_buffer1>>2] = $52;
   (_sprintf($51,35336,$vararg_buffer1)|0);
  }
  $53 = HEAP32[$1>>2]|0;
  _alt_print_coeff($mc,$53);
  $54 = HEAP32[$i>>2]|0;
  $55 = (($54) + 1)|0;
  HEAP32[$i>>2] = $55;
 }
 STACKTOP = sp;return;
}
function _alt_print_count_offset($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $offvar = 0, $tmp = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer7 = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $offvar = sp + 4|0;
 $name = sp + 56|0;
 $tmp = sp + 24|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_gretl_model_get_int($3,35000)|0);
 HEAP32[$offvar>>2] = $4;
 $5 = HEAP32[$offvar>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$offvar>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 68|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($7<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $12;
 (_sprintf($name,35016,$vararg_buffer7)|0);
 $13 = HEAP32[$2>>2]|0;
 $14 = (_plain_format($13)|0);
 $15 = ($14|0)!=(0);
 $16 = HEAP32[$2>>2]|0;
 if ($15) {
  HEAP32[$vararg_buffer7>>2] = $name;
  (_pprintf($16,35024,$vararg_buffer7)|0);
  STACKTOP = sp;return;
 }
 $17 = (_rtf_format($16)|0);
 $18 = ($17|0)!=(0);
 $19 = HEAP32[$2>>2]|0;
 if ($18) {
  (_pputs($19,35048)|0);
  $20 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $name;
  (_pprintf($20,35160,$vararg_buffer7)|0);
  $21 = HEAP32[$2>>2]|0;
  (_pputs($21,35184)|0);
  STACKTOP = sp;return;
 }
 $22 = (_tex_format($19)|0);
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 (_tex_escape($tmp,$name)|0);
 $24 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $tmp;
 (_pprintf($24,35232,$vararg_buffer7)|0);
 STACKTOP = sp;return;
}
function _print_rho($arinfo,$c,$dfd,$prn) {
 $arinfo = $arinfo|0;
 $c = $c|0;
 $dfd = $dfd|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $9 = 0.0, $pval = 0, $pvalstr = 0, $s1 = 0, $s2 = 0, $s3 = 0, $s4 = 0, $tval = 0, $ustr = 0, $vararg_buffer14 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer14 = sp + 16|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $tval = sp + 8|0;
 $ustr = sp + 200|0;
 $s1 = sp + 168|0;
 $s2 = sp + 136|0;
 $s3 = sp + 104|0;
 $s4 = sp + 72|0;
 $pvalstr = sp + 56|0;
 $pval = sp;
 HEAP32[$0>>2] = $arinfo;
 HEAP32[$1>>2] = $c;
 HEAP32[$2>>2] = $dfd;
 HEAP32[$3>>2] = $prn;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4<<3)|0);
 $9 = +HEAPF64[$8>>3];
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10<<3)|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $9 / $15;
 HEAPF64[$tval>>3] = $16;
 $17 = HEAP32[$3>>2]|0;
 $18 = (_tex_format($17)|0);
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = HEAP32[$1>>2]|0;
  $21 = HEAP32[$0>>2]|0;
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20<<3)|0);
  $25 = +HEAPF64[$24>>3];
  (_tex_rl_double($25,$s1)|0);
  $26 = HEAP32[$1>>2]|0;
  $27 = HEAP32[$0>>2]|0;
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<3)|0);
  $31 = +HEAPF64[$30>>3];
  (_tex_rl_double($31,$s2)|0);
  $32 = +HEAPF64[$tval>>3];
  (_tex_rl_float($32,$s3,4)|0);
  $33 = HEAP32[$2>>2]|0;
  $34 = (+($33|0));
  $35 = +HEAPF64[$tval>>3];
  $36 = (+_student_pvalue_2($34,$35));
  (_tex_rl_float($36,$s4,4)|0);
  $37 = HEAP32[$1>>2]|0;
  $38 = (($37) + 1)|0;
  $39 = HEAP32[$0>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($38<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $42;
  (_sprintf($ustr,35352,$vararg_buffer14)|0);
  $43 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $ustr;
  $vararg_ptr4 = (($vararg_buffer14) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $s1;
  $vararg_ptr5 = (($vararg_buffer14) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $s2;
  $vararg_ptr6 = (($vararg_buffer14) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $s3;
  $vararg_ptr7 = (($vararg_buffer14) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $s4;
  (_pprintf($43,35376,$vararg_buffer14)|0);
  STACKTOP = sp;return;
 }
 $44 = HEAP32[$3>>2]|0;
 $45 = (_rtf_format($44)|0);
 $46 = ($45|0)!=(0);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = HEAP32[$3>>2]|0;
 (_pputs($47,35048)|0);
 $48 = HEAP32[$3>>2]|0;
 $49 = HEAP32[$1>>2]|0;
 $50 = (($49) + 1)|0;
 $51 = HEAP32[$0>>2]|0;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + ($50<<2)|0);
 $54 = HEAP32[$53>>2]|0;
 HEAP32[$vararg_buffer14>>2] = $54;
 (_pprintf($48,35424,$vararg_buffer14)|0);
 $55 = HEAP32[$1>>2]|0;
 $56 = HEAP32[$0>>2]|0;
 $57 = (($56) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + ($55<<3)|0);
 $60 = +HEAPF64[$59>>3];
 $61 = HEAP32[$3>>2]|0;
 _rtf_print_double($60,$61);
 $62 = HEAP32[$1>>2]|0;
 $63 = HEAP32[$0>>2]|0;
 $64 = (($63) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + ($62<<3)|0);
 $67 = +HEAPF64[$66>>3];
 $68 = HEAP32[$3>>2]|0;
 _rtf_print_double($67,$68);
 $69 = HEAP32[$3>>2]|0;
 $70 = +HEAPF64[$tval>>3];
 HEAPF64[tempDoublePtr>>3]=$70;HEAP32[$vararg_buffer14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer14+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($69,35440,$vararg_buffer14)|0);
 $71 = HEAP32[$2>>2]|0;
 $72 = (+($71|0));
 $73 = +HEAPF64[$tval>>3];
 $74 = (+_student_pvalue_2($72,$73));
 HEAPF64[$pval>>3] = $74;
 $75 = +HEAPF64[$pval>>3];
 _print_pval_str($75,$pvalstr);
 $76 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer14>>2] = $pvalstr;
 (_pprintf($76,35456,$vararg_buffer14)|0);
 $77 = +HEAPF64[$pval>>3];
 $78 = $77 < 0.0100000000000000002082;
 do {
  if ($78) {
   $79 = HEAP32[$3>>2]|0;
   (_pputs($79,35472)|0);
  } else {
   $80 = +HEAPF64[$pval>>3];
   $81 = $80 < 0.0500000000000000027756;
   if ($81) {
    $82 = HEAP32[$3>>2]|0;
    (_pputs($82,35488)|0);
    break;
   }
   $83 = +HEAPF64[$pval>>3];
   $84 = $83 < 0.100000000000000005551;
   $85 = HEAP32[$3>>2]|0;
   if ($84) {
    (_pputs($85,35504)|0);
    break;
   } else {
    (_pputs($85,35520)|0);
    break;
   }
  }
 } while(0);
 $86 = HEAP32[$3>>2]|0;
 (_pputs($86,35536)|0);
 STACKTOP = sp;return;
}
function _rtf_print_double($xx,$prn) {
 $xx = +$xx;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $numstr = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer2 = sp + 8|0;
 $0 = sp;
 $1 = sp + 20|0;
 $numstr = sp + 24|0;
 HEAPF64[$0>>3] = $xx;
 HEAP32[$1>>2] = $prn;
 $2 = +HEAPF64[$0>>3];
 $3 = (+Math_abs((+$2)));
 $4 = $3 > 1.00000000000000003037E-13;
 $5 = +HEAPF64[$0>>3];
 $6 = $4 ? $5 : 0.0;
 HEAPF64[$0>>3] = $6;
 $7 = +HEAPF64[$0>>3];
 HEAP32[$vararg_buffer2>>2] = 6;
 $vararg_ptr1 = (($vararg_buffer2) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$7;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($numstr,33216,$vararg_buffer2)|0);
 (_gretl_fix_exponent($numstr)|0);
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $numstr;
 (_pprintf($8,35456,$vararg_buffer2)|0);
 STACKTOP = sp;return;
}
function _print_pval_str($pval,$str) {
 $pval = +$pval;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $0 = sp;
 $1 = sp + 16|0;
 HEAPF64[$0>>3] = $pval;
 HEAP32[$1>>2] = $str;
 $2 = +HEAPF64[$0>>3];
 $3 = $2 < 1.0000000000000000818E-5;
 $4 = HEAP32[$1>>2]|0;
 if ($3) {
  HEAPF64[tempDoublePtr>>3]=1.0000000000000000818E-5;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($4,35552,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 } else {
  $5 = +HEAPF64[$0>>3];
  HEAPF64[tempDoublePtr>>3]=$5;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($4,35560,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
}
function _rtf_print_coeff($mc,$prn) {
 $mc = $mc|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $pvalstr = 0, $vararg_buffer25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer25 = sp;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $pvalstr = sp + 16|0;
 HEAP32[$0>>2] = $mc;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 40|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $4 == 1.79769313486231570815E+308;
 $6 = HEAP32[$1>>2]|0;
 if ($5) {
  (_pputs($6,35048)|0);
 } else {
  (_pputs($6,35624)|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 68|0);
 HEAP32[$vararg_buffer25>>2] = $9;
 (_pprintf($7,35712,$vararg_buffer25)|0);
 $10 = HEAP32[$0>>2]|0;
 $11 = +HEAPF64[$10>>3];
 $12 = $11 == 1.79769313486231570815E+308;
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer25>>2] = 32944;
  (_pprintf($13,35456,$vararg_buffer25)|0);
 } else {
  $14 = HEAP32[$0>>2]|0;
  $15 = +HEAPF64[$14>>3];
  $16 = HEAP32[$1>>2]|0;
  _rtf_print_double($15,$16);
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 40|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $19 == 1.79769313486231570815E+308;
 if (!($20)) {
  $21 = HEAP32[$0>>2]|0;
  $22 = (($21) + 48|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 == 1.79769313486231570815E+308;
  if (!($24)) {
   $25 = HEAP32[$0>>2]|0;
   $26 = (($25) + 40|0);
   $27 = +HEAPF64[$26>>3];
   $28 = HEAP32[$1>>2]|0;
   _rtf_print_double($27,$28);
   $29 = HEAP32[$0>>2]|0;
   $30 = (($29) + 48|0);
   $31 = +HEAPF64[$30>>3];
   $32 = HEAP32[$1>>2]|0;
   _rtf_print_double($31,$32);
   $90 = HEAP32[$1>>2]|0;
   (_pputs($90,35536)|0);
   STACKTOP = sp;return;
  }
 }
 $33 = HEAP32[$0>>2]|0;
 $34 = (($33) + 8|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $35 == 1.79769313486231570815E+308;
 if ($36) {
  $37 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer25>>2] = 32944;
  (_pprintf($37,35456,$vararg_buffer25)|0);
  $38 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer25>>2] = 32944;
  (_pprintf($38,35456,$vararg_buffer25)|0);
  $39 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer25>>2] = 32944;
  (_pprintf($39,35456,$vararg_buffer25)|0);
  $90 = HEAP32[$1>>2]|0;
  (_pputs($90,35536)|0);
  STACKTOP = sp;return;
 }
 $40 = HEAP32[$0>>2]|0;
 $41 = (($40) + 8|0);
 $42 = +HEAPF64[$41>>3];
 $43 = HEAP32[$1>>2]|0;
 _rtf_print_double($42,$43);
 $44 = HEAP32[$0>>2]|0;
 $45 = (($44) + 16|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $46 == 1.79769313486231570815E+308;
 $48 = HEAP32[$1>>2]|0;
 if ($47) {
  HEAP32[$vararg_buffer25>>2] = 32944;
  (_pprintf($48,35456,$vararg_buffer25)|0);
 } else {
  $49 = HEAP32[$0>>2]|0;
  $50 = (($49) + 16|0);
  $51 = +HEAPF64[$50>>3];
  HEAPF64[tempDoublePtr>>3]=$51;HEAP32[$vararg_buffer25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer25+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($48,35440,$vararg_buffer25)|0);
 }
 $52 = HEAP32[$0>>2]|0;
 $53 = (($52) + 32|0);
 $54 = +HEAPF64[$53>>3];
 $55 = $54 == 1.79769313486231570815E+308;
 $56 = HEAP32[$0>>2]|0;
 if (!($55)) {
  $57 = (($56) + 32|0);
  $58 = +HEAPF64[$57>>3];
  $59 = HEAP32[$1>>2]|0;
  _rtf_print_double($58,$59);
  $90 = HEAP32[$1>>2]|0;
  (_pputs($90,35536)|0);
  STACKTOP = sp;return;
 }
 $60 = (($56) + 56|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)!=(0);
 if (!($62)) {
  $90 = HEAP32[$1>>2]|0;
  (_pputs($90,35536)|0);
  STACKTOP = sp;return;
 }
 $63 = HEAP32[$0>>2]|0;
 $64 = (($63) + 24|0);
 $65 = +HEAPF64[$64>>3];
 $66 = $65 == 1.79769313486231570815E+308;
 $67 = HEAP32[$0>>2]|0;
 if ($66) {
  $68 = (($67) + 60|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0);
  $71 = HEAP32[$1>>2]|0;
  if ($70) {
   HEAP32[$vararg_buffer25>>2] = 35616;
   (_pprintf($71,35456,$vararg_buffer25)|0);
   $90 = HEAP32[$1>>2]|0;
   (_pputs($90,35536)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer25>>2] = 32944;
   (_pprintf($71,35456,$vararg_buffer25)|0);
   $90 = HEAP32[$1>>2]|0;
   (_pputs($90,35536)|0);
   STACKTOP = sp;return;
  }
 }
 $72 = (($67) + 24|0);
 $73 = +HEAPF64[$72>>3];
 _print_pval_str($73,$pvalstr);
 $74 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer25>>2] = $pvalstr;
 (_pprintf($74,35456,$vararg_buffer25)|0);
 $75 = HEAP32[$0>>2]|0;
 $76 = (($75) + 24|0);
 $77 = +HEAPF64[$76>>3];
 $78 = $77 < 0.0100000000000000002082;
 if ($78) {
  $79 = HEAP32[$1>>2]|0;
  (_pputs($79,35472)|0);
  $90 = HEAP32[$1>>2]|0;
  (_pputs($90,35536)|0);
  STACKTOP = sp;return;
 }
 $80 = HEAP32[$0>>2]|0;
 $81 = (($80) + 24|0);
 $82 = +HEAPF64[$81>>3];
 $83 = $82 < 0.0500000000000000027756;
 if ($83) {
  $84 = HEAP32[$1>>2]|0;
  (_pputs($84,35488)|0);
  $90 = HEAP32[$1>>2]|0;
  (_pputs($90,35536)|0);
  STACKTOP = sp;return;
 }
 $85 = HEAP32[$0>>2]|0;
 $86 = (($85) + 24|0);
 $87 = +HEAPF64[$86>>3];
 $88 = $87 < 0.100000000000000005551;
 $89 = HEAP32[$1>>2]|0;
 if ($88) {
  (_pputs($89,35504)|0);
  $90 = HEAP32[$1>>2]|0;
  (_pputs($90,35536)|0);
  STACKTOP = sp;return;
 } else {
  (_pputs($89,35520)|0);
  $90 = HEAP32[$1>>2]|0;
  (_pputs($90,35536)|0);
  STACKTOP = sp;return;
 }
}
function _csv_print_coeff($mc,$prn) {
 $mc = $mc|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $9 = 0, $d = 0, $vararg_buffer45 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr48 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer45 = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $d = sp + 20|0;
 HEAP32[$0>>2] = $mc;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_prn_delim($2)|0);
 HEAP8[$d>>0] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 68|0);
 HEAP32[$vararg_buffer45>>2] = $6;
 (_pprintf($4,35568,$vararg_buffer45)|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = +HEAPF64[$7>>3];
 $9 = $8 == 1.79769313486231570815E+308;
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP8[$d>>0]|0;
 $12 = $11 << 24 >> 24;
 if ($9) {
  HEAP32[$vararg_buffer45>>2] = $12;
  $vararg_ptr4 = (($vararg_buffer45) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 32944;
  (_pprintf($10,35576,$vararg_buffer45)|0);
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = +HEAPF64[$13>>3];
  HEAP32[$vararg_buffer45>>2] = $12;
  $vararg_ptr8 = (($vararg_buffer45) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$14;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($10,35584,$vararg_buffer45)|0);
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 40|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $17 == 1.79769313486231570815E+308;
 if (!($18)) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 48|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $21 == 1.79769313486231570815E+308;
  if (!($22)) {
   $23 = HEAP32[$1>>2]|0;
   $24 = HEAP8[$d>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 40|0);
   $28 = +HEAPF64[$27>>3];
   HEAP32[$vararg_buffer45>>2] = $25;
   $vararg_ptr12 = (($vararg_buffer45) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$28;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($23,35584,$vararg_buffer45)|0);
   $29 = HEAP32[$1>>2]|0;
   $30 = HEAP8[$d>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = HEAP32[$0>>2]|0;
   $33 = (($32) + 48|0);
   $34 = +HEAPF64[$33>>3];
   HEAP32[$vararg_buffer45>>2] = $31;
   $vararg_ptr16 = (($vararg_buffer45) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$34;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($29,35592,$vararg_buffer45)|0);
   STACKTOP = sp;return;
  }
 }
 $35 = HEAP32[$0>>2]|0;
 $36 = (($35) + 8|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $37 == 1.79769313486231570815E+308;
 $39 = HEAP32[$1>>2]|0;
 $40 = HEAP8[$d>>0]|0;
 $41 = $40 << 24 >> 24;
 if ($38) {
  HEAP32[$vararg_buffer45>>2] = $41;
  $vararg_ptr20 = (($vararg_buffer45) + 4|0);
  HEAP32[$vararg_ptr20>>2] = 32944;
  (_pprintf($39,35608,$vararg_buffer45)|0);
  STACKTOP = sp;return;
 }
 $42 = HEAP32[$0>>2]|0;
 $43 = (($42) + 8|0);
 $44 = +HEAPF64[$43>>3];
 HEAP32[$vararg_buffer45>>2] = $41;
 $vararg_ptr24 = (($vararg_buffer45) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$44;HEAP32[$vararg_ptr24>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr24+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($39,35584,$vararg_buffer45)|0);
 $45 = HEAP32[$0>>2]|0;
 $46 = (($45) + 16|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $47 == 1.79769313486231570815E+308;
 $49 = HEAP32[$1>>2]|0;
 $50 = HEAP8[$d>>0]|0;
 $51 = $50 << 24 >> 24;
 if ($48) {
  HEAP32[$vararg_buffer45>>2] = $51;
  $vararg_ptr32 = (($vararg_buffer45) + 4|0);
  HEAP32[$vararg_ptr32>>2] = 32944;
  (_pprintf($49,35608,$vararg_buffer45)|0);
 } else {
  $52 = HEAP32[$0>>2]|0;
  $53 = (($52) + 16|0);
  $54 = +HEAPF64[$53>>3];
  HEAP32[$vararg_buffer45>>2] = $51;
  $vararg_ptr28 = (($vararg_buffer45) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$54;HEAP32[$vararg_ptr28>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr28+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($49,35584,$vararg_buffer45)|0);
 }
 $55 = HEAP32[$0>>2]|0;
 $56 = (($55) + 32|0);
 $57 = +HEAPF64[$56>>3];
 $58 = $57 == 1.79769313486231570815E+308;
 do {
  if ($58) {
   $65 = HEAP32[$0>>2]|0;
   $66 = (($65) + 56|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)!=(0);
   if ($68) {
    $69 = HEAP32[$0>>2]|0;
    $70 = (($69) + 24|0);
    $71 = +HEAPF64[$70>>3];
    $72 = $71 == 1.79769313486231570815E+308;
    if (!($72)) {
     $80 = HEAP32[$1>>2]|0;
     $81 = HEAP8[$d>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = HEAP32[$0>>2]|0;
     $84 = (($83) + 24|0);
     $85 = +HEAPF64[$84>>3];
     HEAP32[$vararg_buffer45>>2] = $82;
     $vararg_ptr48 = (($vararg_buffer45) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$85;HEAP32[$vararg_ptr48>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr48+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($80,35584,$vararg_buffer45)|0);
     break;
    }
    $73 = HEAP32[$0>>2]|0;
    $74 = (($73) + 60|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)!=(0);
    $77 = HEAP32[$1>>2]|0;
    $78 = HEAP8[$d>>0]|0;
    $79 = $78 << 24 >> 24;
    if ($76) {
     HEAP32[$vararg_buffer45>>2] = $79;
     $vararg_ptr40 = (($vararg_buffer45) + 4|0);
     HEAP32[$vararg_ptr40>>2] = 35616;
     (_pprintf($77,35608,$vararg_buffer45)|0);
     break;
    } else {
     HEAP32[$vararg_buffer45>>2] = $79;
     $vararg_ptr44 = (($vararg_buffer45) + 4|0);
     HEAP32[$vararg_ptr44>>2] = 32944;
     (_pprintf($77,35608,$vararg_buffer45)|0);
     break;
    }
   }
  } else {
   $59 = HEAP32[$1>>2]|0;
   $60 = HEAP8[$d>>0]|0;
   $61 = $60 << 24 >> 24;
   $62 = HEAP32[$0>>2]|0;
   $63 = (($62) + 32|0);
   $64 = +HEAPF64[$63>>3];
   HEAP32[$vararg_buffer45>>2] = $61;
   $vararg_ptr36 = (($vararg_buffer45) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$64;HEAP32[$vararg_ptr36>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr36+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($59,35584,$vararg_buffer45)|0);
  }
 } while(0);
 $86 = HEAP32[$1>>2]|0;
 (_pputc($86,10)|0);
 STACKTOP = sp;return;
}
function ___FLOAT_BITS6782($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $__u = sp;
 HEAPF32[$0>>2] = $__f;
 $1 = +HEAPF32[$0>>2];
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS6783($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $__u = sp;
 HEAPF64[$0>>3] = $__f;
 $1 = +HEAPF64[$0>>3];
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _use_zscore($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $pmod;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$0>>2] = 1;
  $68 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($68|0);
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(7);
 if (!($7)) {
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(9);
  if (!($11)) {
   $12 = HEAP32[$1>>2]|0;
   $13 = (($12) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(27);
   if (!($15)) {
    $16 = HEAP32[$1>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(29);
    if (!($19)) {
     $20 = HEAP32[$1>>2]|0;
     $21 = (($20) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(45);
     if (!($23)) {
      $24 = HEAP32[$1>>2]|0;
      $25 = (($24) + 8|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==(47);
      if (!($27)) {
       $28 = HEAP32[$1>>2]|0;
       $29 = (($28) + 8|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)==(51);
       if (!($31)) {
        $32 = HEAP32[$1>>2]|0;
        $33 = (($32) + 8|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = ($34|0)==(58);
        if (!($35)) {
         $36 = HEAP32[$1>>2]|0;
         $37 = (($36) + 8|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = ($38|0)==(127);
         if (!($39)) {
          $40 = HEAP32[$1>>2]|0;
          $41 = (($40) + 8|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = ($42|0)==(69);
          if (!($43)) {
           $44 = HEAP32[$1>>2]|0;
           $45 = (($44) + 8|0);
           $46 = HEAP32[$45>>2]|0;
           $47 = ($46|0)==(76);
           if (!($47)) {
            $48 = HEAP32[$1>>2]|0;
            $49 = (($48) + 8|0);
            $50 = HEAP32[$49>>2]|0;
            $51 = ($50|0)==(82);
            if (!($51)) {
             $52 = HEAP32[$1>>2]|0;
             $53 = (($52) + 8|0);
             $54 = HEAP32[$53>>2]|0;
             $55 = ($54|0)==(95);
             if (!($55)) {
              $56 = HEAP32[$1>>2]|0;
              $57 = (($56) + 8|0);
              $58 = HEAP32[$57>>2]|0;
              $59 = ($58|0)==(98);
              if (!($59)) {
               $60 = HEAP32[$1>>2]|0;
               $61 = (($60) + 8|0);
               $62 = HEAP32[$61>>2]|0;
               $63 = ($62|0)==(126);
               if (!($63)) {
                $64 = HEAP32[$1>>2]|0;
                $65 = (($64) + 8|0);
                $66 = HEAP32[$65>>2]|0;
                $67 = ($66|0)==(10);
                if (!($67)) {
                 HEAP32[$0>>2] = 0;
                 $68 = HEAP32[$0>>2]|0;
                 STACKTOP = sp;return ($68|0);
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 HEAP32[$0>>2] = 1;
 $68 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($68|0);
}
function _print_rq_sequence($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $B = 0, $bcols = 0, $bhi = 0, $bi = 0, $blo = 0, $head = 0, $headings = 0, $i = 0, $j = 0;
 var $k = 0, $n = 0, $namelen = 0, $ntau = 0, $offset = 0, $se = 0, $tau = 0, $taulen = 0, $tauvec = 0, $test = 0, $vararg_buffer16 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $vararg_buffer16 = sp + 40|0;
 $0 = sp + 160|0;
 $1 = sp + 156|0;
 $2 = sp + 152|0;
 $3 = sp + 148|0;
 $tauvec = sp + 144|0;
 $B = sp + 140|0;
 $tau = sp + 32|0;
 $bi = sp + 24|0;
 $se = sp + 16|0;
 $blo = sp + 8|0;
 $bhi = sp;
 $test = sp + 168|0;
 $n = sp + 136|0;
 $bcols = sp + 132|0;
 $taulen = sp + 128|0;
 $namelen = sp + 124|0;
 $offset = sp + 120|0;
 $ntau = sp + 116|0;
 $i = sp + 112|0;
 $j = sp + 108|0;
 $k = sp + 104|0;
 $headings = sp + 80|0;
 $head = sp + 76|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $prn;
 $4 = HEAP32[$1>>2]|0;
 $5 = (_gretl_model_get_data($4,36664)|0);
 HEAP32[$tauvec>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = (_gretl_model_get_data($6,34928)|0);
 HEAP32[$B>>2] = $7;
 HEAPF64[$se>>3] = 1.79769313486231570815E+308;
 HEAPF64[$blo>>3] = 0.0;
 HEAPF64[$bhi>>3] = 0.0;
 HEAP32[$taulen>>2] = 5;
 HEAP32[$namelen>>2] = 8;
 HEAP32[$k>>2] = 0;
 ;HEAP32[$headings+0>>2]=HEAP32[36680+0>>2]|0;HEAP32[$headings+4>>2]=HEAP32[36680+4>>2]|0;HEAP32[$headings+8>>2]=HEAP32[36680+8>>2]|0;HEAP32[$headings+12>>2]=HEAP32[36680+12>>2]|0;HEAP32[$headings+16>>2]=HEAP32[36680+16>>2]|0;HEAP32[$headings+20>>2]=HEAP32[36680+20>>2]|0;
 $8 = HEAP32[$tauvec>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = HEAP32[$B>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = HEAP32[$tauvec>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $24 = 0;
   } else {
    $14 = HEAP32[$tauvec>>2]|0;
    $15 = (($14) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = HEAP32[$tauvec>>2]|0;
    $19 = HEAP32[$18>>2]|0;
    if ($17) {
     $24 = $19;
    } else {
     $20 = ($19|0)==(1);
     if ($20) {
      $21 = HEAP32[$tauvec>>2]|0;
      $22 = (($21) + 4|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = $23;
     } else {
      $24 = 0;
     }
    }
   }
   HEAP32[$ntau>>2] = $24;
   $25 = HEAP32[$B>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $30 = 0;
   } else {
    $27 = HEAP32[$B>>2]|0;
    $28 = (($27) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $29;
   }
   HEAP32[$bcols>>2] = $30;
   HEAP32[$i>>2] = 2;
   while(1) {
    $31 = HEAP32[$i>>2]|0;
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + 60|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$34>>2]|0;
    $36 = ($31|0)<=($35|0);
    if (!($36)) {
     break;
    }
    $37 = HEAP32[$i>>2]|0;
    $38 = HEAP32[$1>>2]|0;
    $39 = (($38) + 60|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + ($37<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[$2>>2]|0;
    $44 = (($43) + 68|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + ($42<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (_char_len($47)|0);
    HEAP32[$n>>2] = $48;
    $49 = HEAP32[$n>>2]|0;
    $50 = HEAP32[$namelen>>2]|0;
    $51 = ($49|0)>($50|0);
    if ($51) {
     $52 = HEAP32[$n>>2]|0;
     HEAP32[$namelen>>2] = $52;
    }
    $53 = HEAP32[$i>>2]|0;
    $54 = (($53) + 1)|0;
    HEAP32[$i>>2] = $54;
   }
   HEAP32[$j>>2] = 0;
   while(1) {
    $55 = HEAP32[$j>>2]|0;
    $56 = HEAP32[$ntau>>2]|0;
    $57 = ($55|0)<($56|0);
    if (!($57)) {
     break;
    }
    $58 = HEAP32[$j>>2]|0;
    $59 = HEAP32[$tauvec>>2]|0;
    $60 = (($59) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + ($58<<3)|0);
    $63 = +HEAPF64[$62>>3];
    HEAPF64[tempDoublePtr>>3]=$63;HEAP32[$vararg_buffer16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer16+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($test,36704,$vararg_buffer16)|0);
    $64 = (_strlen(($test|0))|0);
    HEAP32[$n>>2] = $64;
    $65 = HEAP32[$n>>2]|0;
    $66 = HEAP32[$taulen>>2]|0;
    $67 = ($65|0)>($66|0);
    if ($67) {
     $68 = HEAP32[$n>>2]|0;
     HEAP32[$taulen>>2] = $68;
    }
    $69 = HEAP32[$j>>2]|0;
    $70 = (($69) + 1)|0;
    HEAP32[$j>>2] = $70;
   }
   $71 = HEAP32[$namelen>>2]|0;
   $72 = (($71) + 4)|0;
   $73 = HEAP32[$3>>2]|0;
   _bufspace($72,$73);
   $74 = HEAP32[$3>>2]|0;
   $75 = HEAP32[$taulen>>2]|0;
   $76 = HEAP32[$headings>>2]|0;
   HEAP32[$vararg_buffer16>>2] = $75;
   $vararg_ptr4 = (($vararg_buffer16) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $76;
   (_pprintf($74,36712,$vararg_buffer16)|0);
   HEAP32[$i>>2] = 1;
   while(1) {
    $77 = HEAP32[$i>>2]|0;
    $78 = ($77|0)<(4);
    if (!($78)) {
     break;
    }
    $79 = HEAP32[$i>>2]|0;
    $80 = ($79|0)==(1);
    if ($80) {
     $86 = 1;
    } else {
     $81 = HEAP32[$bcols>>2]|0;
     $82 = ($81|0)==(3);
     $83 = HEAP32[$i>>2]|0;
     $84 = (($83) + 2)|0;
     $85 = $82 ? $83 : $84;
     $86 = $85;
    }
    HEAP32[$j>>2] = $86;
    $87 = HEAP32[$j>>2]|0;
    $88 = (($headings) + ($87<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    HEAP32[$head>>2] = $89;
    $90 = HEAP32[$head>>2]|0;
    $91 = (_char_len($90)|0);
    HEAP32[$n>>2] = $91;
    $92 = HEAP32[$i>>2]|0;
    $93 = ($92|0)==(1);
    $94 = HEAP32[$n>>2]|0;
    $95 = (13 - ($94))|0;
    $96 = (12 - ($94))|0;
    $97 = $93 ? $95 : $96;
    HEAP32[$offset>>2] = $97;
    $98 = HEAP32[$offset>>2]|0;
    $99 = HEAP32[$3>>2]|0;
    _bufspace($98,$99);
    $100 = HEAP32[$3>>2]|0;
    $101 = HEAP32[$head>>2]|0;
    (_pputs($100,$101)|0);
    $102 = HEAP32[$3>>2]|0;
    (_pputc($102,32)|0);
    $103 = HEAP32[$i>>2]|0;
    $104 = (($103) + 1)|0;
    HEAP32[$i>>2] = $104;
   }
   $105 = HEAP32[$3>>2]|0;
   (_pputc($105,10)|0);
   $106 = HEAP32[$3>>2]|0;
   (_pputs($106,35736)|0);
   $107 = HEAP32[$namelen>>2]|0;
   $108 = (($107) + 2)|0;
   $109 = HEAP32[$taulen>>2]|0;
   $110 = (($108) + ($109))|0;
   $111 = (($110) + 1)|0;
   $112 = (($111) + 39)|0;
   HEAP32[$n>>2] = $112;
   HEAP32[$i>>2] = 0;
   while(1) {
    $113 = HEAP32[$i>>2]|0;
    $114 = HEAP32[$n>>2]|0;
    $115 = ($113|0)<($114|0);
    $116 = HEAP32[$3>>2]|0;
    if (!($115)) {
     break;
    }
    (_pputc($116,45)|0);
    $117 = HEAP32[$i>>2]|0;
    $118 = (($117) + 1)|0;
    HEAP32[$i>>2] = $118;
   }
   (_pputc($116,10)|0);
   HEAP32[$i>>2] = 0;
   while(1) {
    $119 = HEAP32[$i>>2]|0;
    $120 = HEAP32[$1>>2]|0;
    $121 = (($120) + 48|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($119|0)<($122|0);
    if (!($123)) {
     break;
    }
    $124 = HEAP32[$3>>2]|0;
    $125 = HEAP32[$namelen>>2]|0;
    $126 = HEAP32[$i>>2]|0;
    $127 = (($126) + 2)|0;
    $128 = HEAP32[$1>>2]|0;
    $129 = (($128) + 60|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (($130) + ($127<<2)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = HEAP32[$2>>2]|0;
    $134 = (($133) + 68|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $125;
    $vararg_ptr8 = (($vararg_buffer16) + 4|0);
    HEAP32[$vararg_ptr8>>2] = $137;
    (_pprintf($124,36720,$vararg_buffer16)|0);
    HEAP32[$j>>2] = 0;
    while(1) {
     $138 = HEAP32[$j>>2]|0;
     $139 = HEAP32[$ntau>>2]|0;
     $140 = ($138|0)<($139|0);
     if (!($140)) {
      break;
     }
     $141 = HEAP32[$j>>2]|0;
     $142 = HEAP32[$tauvec>>2]|0;
     $143 = (($142) + 8|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (($144) + ($141<<3)|0);
     $146 = +HEAPF64[$145>>3];
     HEAPF64[$tau>>3] = $146;
     $147 = HEAP32[$B>>2]|0;
     $148 = HEAP32[$147>>2]|0;
     $149 = 0;
     $150 = HEAP32[$k>>2]|0;
     $151 = (($149) + ($150))|0;
     $152 = HEAP32[$B>>2]|0;
     $153 = (($152) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($154) + ($151<<3)|0);
     $156 = +HEAPF64[$155>>3];
     HEAPF64[$bi>>3] = $156;
     $157 = HEAP32[$bcols>>2]|0;
     $158 = ($157|0)==(3);
     $159 = HEAP32[$B>>2]|0;
     $160 = HEAP32[$159>>2]|0;
     $161 = $160;
     $162 = HEAP32[$k>>2]|0;
     $163 = (($161) + ($162))|0;
     $164 = HEAP32[$B>>2]|0;
     $165 = (($164) + 8|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + ($163<<3)|0);
     $168 = +HEAPF64[$167>>3];
     if ($158) {
      HEAPF64[$blo>>3] = $168;
      $169 = HEAP32[$B>>2]|0;
      $170 = HEAP32[$169>>2]|0;
      $171 = $170<<1;
      $172 = HEAP32[$k>>2]|0;
      $173 = (($171) + ($172))|0;
      $174 = HEAP32[$B>>2]|0;
      $175 = (($174) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = (($176) + ($173<<3)|0);
      $178 = +HEAPF64[$177>>3];
      HEAPF64[$bhi>>3] = $178;
     } else {
      HEAPF64[$se>>3] = $168;
     }
     $179 = HEAP32[$j>>2]|0;
     $180 = ($179|0)>(0);
     if ($180) {
      $181 = HEAP32[$namelen>>2]|0;
      $182 = (($181) + 4)|0;
      $183 = HEAP32[$3>>2]|0;
      _bufspace($182,$183);
     }
     $184 = HEAP32[$bcols>>2]|0;
     $185 = ($184|0)==(3);
     $186 = HEAP32[$3>>2]|0;
     $187 = HEAP32[$taulen>>2]|0;
     $188 = (($187) - 2)|0;
     $189 = +HEAPF64[$tau>>3];
     $190 = +HEAPF64[$bi>>3];
     if ($185) {
      $191 = +HEAPF64[$blo>>3];
      $192 = +HEAPF64[$bhi>>3];
      HEAP32[$vararg_buffer16>>2] = $188;
      $vararg_ptr12 = (($vararg_buffer16) + 4|0);
      HEAPF64[tempDoublePtr>>3]=$189;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $vararg_ptr13 = (($vararg_buffer16) + 12|0);
      HEAPF64[tempDoublePtr>>3]=$190;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $vararg_ptr14 = (($vararg_buffer16) + 20|0);
      HEAPF64[tempDoublePtr>>3]=$191;HEAP32[$vararg_ptr14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr14+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $vararg_ptr15 = (($vararg_buffer16) + 28|0);
      HEAPF64[tempDoublePtr>>3]=$192;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
      (_pprintf($186,36736,$vararg_buffer16)|0);
     } else {
      $193 = +HEAPF64[$se>>3];
      $194 = +HEAPF64[$bi>>3];
      $195 = +HEAPF64[$se>>3];
      $196 = $194 / $195;
      HEAP32[$vararg_buffer16>>2] = $188;
      $vararg_ptr19 = (($vararg_buffer16) + 4|0);
      HEAPF64[tempDoublePtr>>3]=$189;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $vararg_ptr20 = (($vararg_buffer16) + 12|0);
      HEAPF64[tempDoublePtr>>3]=$190;HEAP32[$vararg_ptr20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr20+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $vararg_ptr21 = (($vararg_buffer16) + 20|0);
      HEAPF64[tempDoublePtr>>3]=$193;HEAP32[$vararg_ptr21>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr21+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $vararg_ptr22 = (($vararg_buffer16) + 28|0);
      HEAPF64[tempDoublePtr>>3]=$196;HEAP32[$vararg_ptr22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr22+4>>2]=HEAP32[tempDoublePtr+4>>2];
      (_pprintf($186,36736,$vararg_buffer16)|0);
     }
     $197 = HEAP32[$k>>2]|0;
     $198 = (($197) + 1)|0;
     HEAP32[$k>>2] = $198;
     $199 = HEAP32[$j>>2]|0;
     $200 = (($199) + 1)|0;
     HEAP32[$j>>2] = $200;
    }
    $201 = HEAP32[$i>>2]|0;
    $202 = HEAP32[$1>>2]|0;
    $203 = (($202) + 48|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = (($204) - 1)|0;
    $206 = ($201|0)<($205|0);
    if ($206) {
     $207 = HEAP32[$3>>2]|0;
     (_pputc($207,10)|0);
    }
    $208 = HEAP32[$i>>2]|0;
    $209 = (($208) + 1)|0;
    HEAP32[$i>>2] = $209;
   }
   HEAP32[$0>>2] = 0;
   $210 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($210|0);
  }
 }
 HEAP32[$0>>2] = 2;
 $210 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($210|0);
}
function _plain_print_mp_coeffs($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addoff = 0, $b = 0, $colsep = 0, $err = 0, $head = 0, $headings = 0, $hlen = 0, $i = 0, $j = 0, $lmax = 0, $minus = 0;
 var $n = 0, $namelen = 0, $names = 0, $nc = 0, $rmax = 0, $se = 0, $vals = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer = sp;
 $0 = sp + 120|0;
 $1 = sp + 116|0;
 $2 = sp + 112|0;
 $3 = sp + 108|0;
 $vals = sp + 104|0;
 $headings = sp + 96|0;
 $b = sp + 92|0;
 $se = sp + 88|0;
 $names = sp + 84|0;
 $head = sp + 80|0;
 $lmax = sp + 72|0;
 $rmax = sp + 64|0;
 $w = sp + 56|0;
 $addoff = sp + 48|0;
 $hlen = sp + 40|0;
 $n = sp + 36|0;
 $nc = sp + 32|0;
 $namelen = sp + 28|0;
 $colsep = sp + 24|0;
 $i = sp + 20|0;
 $j = sp + 16|0;
 $minus = sp + 12|0;
 $err = sp + 8|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $prn;
 ;HEAP32[$headings+0>>2]=HEAP32[36584+0>>2]|0;HEAP32[$headings+4>>2]=HEAP32[36584+4>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$b>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$se>>2] = $9;
 HEAP32[$names>>2] = 0;
 ;HEAP32[$lmax+0>>2]=0|0;HEAP32[$lmax+4>>2]=0|0;
 ;HEAP32[$rmax+0>>2]=0|0;HEAP32[$rmax+4>>2]=0|0;
 ;HEAP32[$addoff+0>>2]=0|0;HEAP32[$addoff+4>>2]=0|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$nc>>2] = $12;
 HEAP32[$namelen>>2] = 0;
 HEAP32[$colsep>>2] = 2;
 HEAP32[$err>>2] = 0;
 $13 = HEAP32[$nc>>2]|0;
 $14 = (_allocate_printvals($13,2)|0);
 HEAP32[$vals>>2] = $14;
 $15 = HEAP32[$vals>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$0>>2] = 12;
  $228 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($228|0);
 }
 $17 = HEAP32[$nc>>2]|0;
 $18 = (_strings_array_new_with_length($17,32)|0);
 HEAP32[$names>>2] = $18;
 $19 = HEAP32[$names>>2]|0;
 $20 = ($19|0)==(0|0);
 L5: do {
  if ($20) {
   HEAP32[$err>>2] = 12;
  } else {
   $21 = HEAP32[$3>>2]|0;
   $22 = (_gretl_print_has_minus($21)|0);
   $23 = ($22|0)!=(0);
   $24 = $23 ? 1 : 0;
   HEAP32[$minus>>2] = $24;
   HEAP32[$i>>2] = 0;
   while(1) {
    $25 = HEAP32[$i>>2]|0;
    $26 = HEAP32[$nc>>2]|0;
    $27 = ($25|0)<($26|0);
    if (!($27)) {
     break;
    }
    $28 = HEAP32[$i>>2]|0;
    $29 = HEAP32[$b>>2]|0;
    $30 = (($29) + ($28<<3)|0);
    $31 = +HEAPF64[$30>>3];
    $32 = $31 == 1.79769313486231570815E+308;
    if ($32) {
     label = 9;
     break;
    }
    $33 = HEAP32[$i>>2]|0;
    $34 = HEAP32[$b>>2]|0;
    $35 = (($34) + ($33<<3)|0);
    $36 = +HEAPF64[$35>>3];
    $37 = (___DOUBLE_BITS6783($36)|0);
    $38 = tempRet0;
    $39 = $38 & 2147483647;
    $40 = ($39>>>0)<(2146435072);
    $41 = ($39|0)==(2146435072);
    $42 = ($37>>>0)<(0);
    $43 = $41 & $42;
    $44 = $40 | $43;
    if (!($44)) {
     label = 9;
     break;
    }
    $45 = HEAP32[$1>>2]|0;
    $46 = HEAP32[$2>>2]|0;
    $47 = HEAP32[$i>>2]|0;
    $48 = HEAP32[$i>>2]|0;
    $49 = HEAP32[$names>>2]|0;
    $50 = (($49) + ($48<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    (_gretl_model_get_param_name($45,$46,$47,$51)|0);
    $52 = HEAP32[$i>>2]|0;
    $53 = HEAP32[$names>>2]|0;
    $54 = (($53) + ($52<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (_char_len($55)|0);
    HEAP32[$n>>2] = $56;
    $57 = HEAP32[$n>>2]|0;
    $58 = HEAP32[$namelen>>2]|0;
    $59 = ($57|0)>($58|0);
    if ($59) {
     $60 = HEAP32[$n>>2]|0;
     HEAP32[$namelen>>2] = $60;
    }
    HEAP32[$j>>2] = 0;
    while(1) {
     $61 = HEAP32[$j>>2]|0;
     $62 = ($61|0)<(2);
     if (!($62)) {
      break;
     }
     $63 = HEAP32[$j>>2]|0;
     $64 = ($63|0)==(0);
     $65 = HEAP32[$i>>2]|0;
     if ($64) {
      $66 = HEAP32[$b>>2]|0;
      $67 = (($66) + ($65<<3)|0);
      $68 = +HEAPF64[$67>>3];
      $79 = $68;
     } else {
      $69 = HEAP32[$se>>2]|0;
      $70 = (($69) + ($65<<3)|0);
      $71 = +HEAPF64[$70>>3];
      $79 = $71;
     }
     $72 = HEAP32[$j>>2]|0;
     $73 = HEAP32[$i>>2]|0;
     $74 = HEAP32[$vals>>2]|0;
     $75 = (($74) + ($73<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) + (($72*56)|0)|0);
     $78 = (($77) + 48|0);
     HEAPF64[$78>>3] = $79;
     $80 = HEAP32[$j>>2]|0;
     $81 = HEAP32[$i>>2]|0;
     $82 = HEAP32[$vals>>2]|0;
     $83 = (($82) + ($81<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + (($80*56)|0)|0);
     $86 = HEAP32[$j>>2]|0;
     $87 = HEAP32[$i>>2]|0;
     $88 = HEAP32[$vals>>2]|0;
     $89 = (($88) + ($87<<2)|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (($90) + (($86*56)|0)|0);
     $92 = (($91) + 48|0);
     $93 = +HEAPF64[$92>>3];
     $94 = HEAP32[$minus>>2]|0;
     (_print_fifteen($85,$93,$94)|0);
     $95 = HEAP32[$j>>2]|0;
     $96 = (($lmax) + ($95<<2)|0);
     HEAP32[$96>>2] = 2;
     $97 = HEAP32[$j>>2]|0;
     $98 = HEAP32[$i>>2]|0;
     $99 = HEAP32[$vals>>2]|0;
     $100 = (($99) + ($98<<2)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (($101) + (($97*56)|0)|0);
     $103 = (($102) + 36|0);
     HEAP32[$103>>2] = 2;
     $104 = HEAP32[$j>>2]|0;
     $105 = (($rmax) + ($104<<2)|0);
     HEAP32[$105>>2] = 19;
     $106 = HEAP32[$j>>2]|0;
     $107 = HEAP32[$i>>2]|0;
     $108 = HEAP32[$vals>>2]|0;
     $109 = (($108) + ($107<<2)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = (($110) + (($106*56)|0)|0);
     $112 = (($111) + 40|0);
     HEAP32[$112>>2] = 19;
     $113 = HEAP32[$j>>2]|0;
     $114 = (($113) + 1)|0;
     HEAP32[$j>>2] = $114;
    }
    $115 = HEAP32[$i>>2]|0;
    $116 = (($115) + 1)|0;
    HEAP32[$i>>2] = $116;
   }
   if ((label|0) == 9) {
    HEAP32[$err>>2] = 35;
    break;
   }
   $117 = HEAP32[$namelen>>2]|0;
   $118 = ($117|0)<(8);
   if ($118) {
    HEAP32[$namelen>>2] = 8;
   }
   HEAP32[$j>>2] = 0;
   while(1) {
    $119 = HEAP32[$j>>2]|0;
    $120 = ($119|0)<(2);
    if (!($120)) {
     break;
    }
    $121 = HEAP32[$j>>2]|0;
    $122 = (($lmax) + ($121<<2)|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = HEAP32[$j>>2]|0;
    $125 = (($rmax) + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($123) + ($126))|0;
    $128 = HEAP32[$j>>2]|0;
    $129 = (($w) + ($128<<2)|0);
    HEAP32[$129>>2] = $127;
    $130 = HEAP32[$j>>2]|0;
    $131 = (($headings) + ($130<<2)|0);
    $132 = HEAP32[$131>>2]|0;
    HEAP32[$head>>2] = $132;
    $133 = HEAP32[$head>>2]|0;
    $134 = (_char_len($133)|0);
    HEAP32[$hlen>>2] = $134;
    $135 = HEAP32[$hlen>>2]|0;
    $136 = HEAP32[$j>>2]|0;
    $137 = (($w) + ($136<<2)|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = ($135|0)>($138|0);
    if ($139) {
     $140 = HEAP32[$hlen>>2]|0;
     $141 = HEAP32[$j>>2]|0;
     $142 = (($w) + ($141<<2)|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = (($140) - ($143))|0;
     $145 = (($144|0) / 2)&-1;
     $146 = HEAP32[$j>>2]|0;
     $147 = (($addoff) + ($146<<2)|0);
     HEAP32[$147>>2] = $145;
     $148 = HEAP32[$hlen>>2]|0;
     $149 = HEAP32[$j>>2]|0;
     $150 = (($w) + ($149<<2)|0);
     HEAP32[$150>>2] = $148;
    }
    $151 = HEAP32[$j>>2]|0;
    $152 = (($151) + 1)|0;
    HEAP32[$j>>2] = $152;
   }
   $153 = HEAP32[$namelen>>2]|0;
   _figure_colsep($153,2,$w,$colsep);
   $154 = HEAP32[$namelen>>2]|0;
   $155 = (($154) + 2)|0;
   $156 = HEAP32[$colsep>>2]|0;
   $157 = (($155) + ($156))|0;
   $158 = HEAP32[$3>>2]|0;
   _bufspace($157,$158);
   HEAP32[$j>>2] = 0;
   while(1) {
    $159 = HEAP32[$j>>2]|0;
    $160 = ($159|0)<(2);
    if (!($160)) {
     break;
    }
    $161 = HEAP32[$j>>2]|0;
    $162 = (($headings) + ($161<<2)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = HEAP32[$j>>2]|0;
    $165 = (($w) + ($164<<2)|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = HEAP32[$3>>2]|0;
    _print_padded_head($163,$166,$167);
    $168 = HEAP32[$j>>2]|0;
    $169 = ($168|0)<(3);
    if ($169) {
     $170 = HEAP32[$colsep>>2]|0;
     $171 = HEAP32[$3>>2]|0;
     _bufspace($170,$171);
    }
    $172 = HEAP32[$j>>2]|0;
    $173 = (($172) + 1)|0;
    HEAP32[$j>>2] = $173;
   }
   $174 = HEAP32[$namelen>>2]|0;
   $175 = HEAP32[$colsep>>2]|0;
   $176 = HEAP32[$3>>2]|0;
   (_print_sep_row($174,2,$w,$175,$176)|0);
   HEAP32[$i>>2] = 0;
   while(1) {
    $177 = HEAP32[$i>>2]|0;
    $178 = HEAP32[$nc>>2]|0;
    $179 = ($177|0)<($178|0);
    if (!($179)) {
     break L5;
    }
    $180 = HEAP32[$3>>2]|0;
    $181 = HEAP32[$namelen>>2]|0;
    $182 = HEAP32[$i>>2]|0;
    $183 = HEAP32[$names>>2]|0;
    $184 = (($183) + ($182<<2)|0);
    $185 = HEAP32[$184>>2]|0;
    HEAP32[$vararg_buffer>>2] = $181;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $185;
    (_pprintf($180,36480,$vararg_buffer)|0);
    $186 = HEAP32[$colsep>>2]|0;
    $187 = HEAP32[$3>>2]|0;
    _bufspace($186,$187);
    HEAP32[$j>>2] = 0;
    while(1) {
     $188 = HEAP32[$j>>2]|0;
     $189 = ($188|0)<(2);
     if (!($189)) {
      break;
     }
     $190 = HEAP32[$j>>2]|0;
     $191 = HEAP32[$i>>2]|0;
     $192 = HEAP32[$vals>>2]|0;
     $193 = (($192) + ($191<<2)|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (($194) + (($190*56)|0)|0);
     $196 = HEAP32[$j>>2]|0;
     $197 = (($w) + ($196<<2)|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = HEAP32[$j>>2]|0;
     $200 = (($lmax) + ($199<<2)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = HEAP32[$j>>2]|0;
     $203 = (($addoff) + ($202<<2)|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = HEAP32[$3>>2]|0;
     _print_padded_value($195,$198,$201,$204,$205);
     $206 = HEAP32[$j>>2]|0;
     $207 = ($206|0)==(0);
     if ($207) {
      $208 = HEAP32[$colsep>>2]|0;
      $209 = HEAP32[$3>>2]|0;
      _bufspace($208,$209);
     }
     $210 = HEAP32[$j>>2]|0;
     $211 = (($210) + 1)|0;
     HEAP32[$j>>2] = $211;
    }
    $212 = HEAP32[$3>>2]|0;
    (_pputc($212,10)|0);
    $213 = HEAP32[$i>>2]|0;
    $214 = (($213) + 1)|0;
    HEAP32[$i>>2] = $214;
   }
  }
 } while(0);
 HEAP32[$i>>2] = 0;
 while(1) {
  $215 = HEAP32[$i>>2]|0;
  $216 = HEAP32[$nc>>2]|0;
  $217 = ($215|0)<($216|0);
  if (!($217)) {
   break;
  }
  $218 = HEAP32[$i>>2]|0;
  $219 = HEAP32[$vals>>2]|0;
  $220 = (($219) + ($218<<2)|0);
  $221 = HEAP32[$220>>2]|0;
  _free($221);
  $222 = HEAP32[$i>>2]|0;
  $223 = (($222) + 1)|0;
  HEAP32[$i>>2] = $223;
 }
 $224 = HEAP32[$vals>>2]|0;
 _free($224);
 $225 = HEAP32[$names>>2]|0;
 $226 = HEAP32[$nc>>2]|0;
 _strings_array_free($225,$226);
 $227 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $227;
 $228 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($228|0);
}
function _plain_print_coeffs($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addoff = 0, $adfnum = 0, $b = 0, $cblock = 0, $colsep = 0, $d = 0, $dfd = 0, $dotlen = 0, $err = 0, $head = 0, $headings = 0;
 var $hlen = 0, $i = 0, $intervals = 0, $j = 0, $k = 0, $lmax = 0, $m = 0, $mnlsep = 0, $n = 0, $namelen = 0, $names = 0, $nc = 0, $ncols = 0, $pval = 0, $rmax = 0, $se = 0, $seppos = 0, $sepstr = 0, $show_slope = 0, $slopes = 0;
 var $tmp = 0, $tval = 0, $vals = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vij = 0, $w = 0, $xb = 0, $xse = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $vararg_buffer = sp + 16|0;
 $0 = sp + 248|0;
 $1 = sp + 244|0;
 $2 = sp + 240|0;
 $3 = sp + 236|0;
 $vals = sp + 232|0;
 $vij = sp + 228|0;
 $headings = sp + 200|0;
 $b = sp + 196|0;
 $se = sp + 192|0;
 $slopes = sp + 188|0;
 $names = sp + 184|0;
 $head = sp + 180|0;
 $sepstr = sp + 176|0;
 $xb = sp + 172|0;
 $xse = sp + 168|0;
 $seppos = sp + 164|0;
 $cblock = sp + 160|0;
 $lmax = sp + 144|0;
 $rmax = sp + 128|0;
 $w = sp + 112|0;
 $addoff = sp + 96|0;
 $hlen = sp + 88|0;
 $tval = sp + 8|0;
 $pval = sp;
 $n = sp + 84|0;
 $d = sp + 80|0;
 $nc = sp + 76|0;
 $dfd = sp + 72|0;
 $show_slope = sp + 68|0;
 $adfnum = sp + 64|0;
 $intervals = sp + 60|0;
 $dotlen = sp + 56|0;
 $namelen = sp + 52|0;
 $colsep = sp + 48|0;
 $ncols = sp + 44|0;
 $i = sp + 40|0;
 $j = sp + 36|0;
 $k = sp + 32|0;
 $err = sp + 28|0;
 $m = sp + 24|0;
 $tmp = sp + 288|0;
 $mnlsep = sp + 256|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $prn;
 ;HEAP32[$headings+0>>2]=HEAP32[36416+0>>2]|0;HEAP32[$headings+4>>2]=HEAP32[36416+4>>2]|0;HEAP32[$headings+8>>2]=HEAP32[36416+8>>2]|0;HEAP32[$headings+12>>2]=HEAP32[36416+12>>2]|0;HEAP32[$headings+16>>2]=HEAP32[36416+16>>2]|0;HEAP32[$headings+20>>2]=HEAP32[36416+20>>2]|0;HEAP32[$headings+24>>2]=HEAP32[36416+24>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$b>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$se>>2] = $9;
 HEAP32[$slopes>>2] = 0;
 HEAP32[$names>>2] = 0;
 HEAP32[$sepstr>>2] = 0;
 HEAP32[$xb>>2] = 0;
 HEAP32[$xse>>2] = 0;
 HEAP32[$seppos>>2] = -1;
 HEAP32[$cblock>>2] = 0;
 ;HEAP32[$lmax+0>>2]=0|0;HEAP32[$lmax+4>>2]=0|0;HEAP32[$lmax+8>>2]=0|0;HEAP32[$lmax+12>>2]=0|0;
 ;HEAP32[$rmax+0>>2]=0|0;HEAP32[$rmax+4>>2]=0|0;HEAP32[$rmax+8>>2]=0|0;HEAP32[$rmax+12>>2]=0|0;
 ;HEAP32[$addoff+0>>2]=0|0;HEAP32[$addoff+4>>2]=0|0;HEAP32[$addoff+8>>2]=0|0;HEAP32[$addoff+12>>2]=0|0;
 HEAPF64[$pval>>3] = 0.0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$nc>>2] = $12;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$dfd>>2] = $15;
 HEAP32[$adfnum>>2] = -1;
 HEAP32[$intervals>>2] = 0;
 HEAP32[$namelen>>2] = 0;
 HEAP32[$colsep>>2] = 2;
 HEAP32[$ncols>>2] = 4;
 HEAP32[$err>>2] = 0;
 $16 = HEAP32[$1>>2]|0;
 $17 = (_use_zscore($16)|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = (($headings) + 8|0);
  HEAP32[$19>>2] = 35968;
 }
 $20 = HEAP32[$1>>2]|0;
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(5);
 do {
  if ($23) {
   label = 5;
  } else {
   $24 = HEAP32[$1>>2]|0;
   $25 = (($24) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(8);
   if ($27) {
    label = 5;
   } else {
    $42 = HEAP32[$1>>2]|0;
    $43 = (($42) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(63);
    $46 = HEAP32[$1>>2]|0;
    if ($45) {
     $47 = (_gretl_model_get_data($46,34976)|0);
     HEAP32[$m>>2] = $47;
     $48 = HEAP32[$m>>2]|0;
     $49 = ($48|0)!=(0|0);
     if (!($49)) {
      break;
     }
     $50 = HEAP32[$m>>2]|0;
     $51 = (($50) + 8|0);
     $52 = HEAP32[$51>>2]|0;
     HEAP32[$se>>2] = $52;
     HEAP32[$intervals>>2] = 1;
     HEAP32[$ncols>>2] = 3;
     break;
    }
    $53 = (($46) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(83);
    if (!($55)) {
     $56 = HEAP32[$1>>2]|0;
     $57 = (($56) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(76);
     if (!($59)) {
      $60 = HEAP32[$1>>2]|0;
      $61 = (($60) + 8|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(47);
      if (!($63)) {
       break;
      }
     }
    }
    HEAP32[$headings>>2] = 36096;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  HEAP32[$k>>2] = 0;
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(5);
  $32 = HEAP32[$1>>2]|0;
  if ($31) {
   $33 = (_get_ar_data($32,$xb,$xse,$k,$dfd)|0);
   HEAP32[$err>>2] = $33;
  } else {
   $34 = (_get_arch_data($32,$xb,$xse,$k)|0);
   HEAP32[$err>>2] = $34;
  }
  $35 = HEAP32[$err>>2]|0;
  $36 = ($35|0)!=(0);
  if (!($36)) {
   $37 = HEAP32[$xb>>2]|0;
   HEAP32[$b>>2] = $37;
   $38 = HEAP32[$xse>>2]|0;
   HEAP32[$se>>2] = $38;
   $39 = HEAP32[$k>>2]|0;
   $40 = HEAP32[$nc>>2]|0;
   $41 = (($40) + ($39))|0;
   HEAP32[$nc>>2] = $41;
  }
 }
 $64 = HEAP32[$err>>2]|0;
 $65 = ($64|0)!=(0);
 if ($65) {
  $66 = HEAP32[$err>>2]|0;
  HEAP32[$0>>2] = $66;
  $588 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($588|0);
 }
 $67 = HEAP32[$1>>2]|0;
 $68 = (_gretl_model_get_int($67,36448)|0);
 $69 = HEAP32[$nc>>2]|0;
 $70 = (($69) - ($68))|0;
 HEAP32[$nc>>2] = $70;
 $71 = HEAP32[$nc>>2]|0;
 $72 = HEAP32[$ncols>>2]|0;
 $73 = (_allocate_printvals($71,$72)|0);
 HEAP32[$vals>>2] = $73;
 $74 = HEAP32[$vals>>2]|0;
 $75 = ($74|0)==(0|0);
 if ($75) {
  HEAP32[$0>>2] = 12;
  $588 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($588|0);
 }
 $76 = HEAP32[$nc>>2]|0;
 $77 = (_strings_array_new_with_length($76,32)|0);
 HEAP32[$names>>2] = $77;
 $78 = HEAP32[$names>>2]|0;
 $79 = ($78|0)==(0|0);
 do {
  if ($79) {
   HEAP32[$err>>2] = 12;
  } else {
   $80 = HEAP32[$1>>2]|0;
   $81 = (($80) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(69);
   if ($83) {
    label = 25;
   } else {
    $84 = HEAP32[$1>>2]|0;
    $85 = (($84) + 8|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==(98);
    if ($87) {
     label = 25;
    } else {
     $101 = 0;
    }
   }
   if ((label|0) == 25) {
    $88 = HEAP32[$1>>2]|0;
    $89 = (_gretl_model_get_int($88,32152)|0);
    $90 = ($89|0)!=(0);
    if ($90) {
     $101 = 0;
    } else {
     $91 = HEAP32[$1>>2]|0;
     $92 = (_gretl_model_get_int($91,32176)|0);
     $93 = ($92|0)!=(0);
     if ($93) {
      $101 = 0;
     } else {
      $94 = HEAP32[$1>>2]|0;
      $95 = (($94) + 12|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = $96 & 32768;
      $98 = ($97|0)!=(0);
      $99 = $98 ^ 1;
      $101 = $99;
     }
    }
   }
   $100 = $101&1;
   HEAP32[$show_slope>>2] = $100;
   $102 = HEAP32[$show_slope>>2]|0;
   $103 = ($102|0)!=(0);
   if ($103) {
    $104 = HEAP32[$1>>2]|0;
    $105 = (_gretl_model_get_data($104,35920)|0);
    HEAP32[$slopes>>2] = $105;
   }
   $106 = HEAP32[$1>>2]|0;
   $107 = (($106) + 72|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($108|0)==(10);
   if ($109) {
    label = 32;
   } else {
    $110 = HEAP32[$1>>2]|0;
    $111 = (($110) + 72|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)==(9);
    if ($113) {
     label = 32;
    }
   }
   if ((label|0) == 32) {
    $114 = HEAP32[$1>>2]|0;
    $115 = (_gretl_model_get_int($114,34992)|0);
    HEAP32[$adfnum>>2] = $115;
   }
   $116 = HEAP32[$1>>2]|0;
   (_gretl_model_get_coeff_separator($116,$sepstr,$seppos)|0);
   $117 = HEAP32[$seppos>>2]|0;
   $118 = ($117|0)==(-1);
   do {
    if ($118) {
     $119 = HEAP32[$1>>2]|0;
     $120 = (($119) + 8|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ($121|0)==(45);
     if ($122) {
      $123 = HEAP32[$1>>2]|0;
      $124 = (($123) + 60|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)>(4);
      if ($127) {
       $128 = HEAP32[$1>>2]|0;
       $129 = (($128) + 60|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = HEAP32[$130>>2]|0;
       $132 = (($131) - 4)|0;
       HEAP32[$seppos>>2] = $132;
       break;
      }
     }
     $133 = HEAP32[$1>>2]|0;
     $134 = (($133) + 8|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==(5);
     if (!($136)) {
      $137 = HEAP32[$1>>2]|0;
      $138 = (($137) + 8|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(8);
      if (!($140)) {
       $144 = HEAP32[$1>>2]|0;
       $145 = (($144) + 8|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ($146|0)==(69);
       if (!($147)) {
        break;
       }
       $148 = HEAP32[$1>>2]|0;
       $149 = (_gretl_model_get_int($148,32176)|0);
       $150 = ($149|0)!=(0);
       if (!($150)) {
        break;
       }
       $151 = HEAP32[$1>>2]|0;
       $152 = (_gretl_model_get_int($151,36464)|0);
       HEAP32[$cblock>>2] = $152;
       break;
      }
     }
     $141 = HEAP32[$1>>2]|0;
     $142 = (($141) + 48|0);
     $143 = HEAP32[$142>>2]|0;
     HEAP32[$seppos>>2] = $143;
    }
   } while(0);
   HEAP32[$i>>2] = 0;
   while(1) {
    $153 = HEAP32[$i>>2]|0;
    $154 = HEAP32[$nc>>2]|0;
    $155 = ($153|0)<($154|0);
    if (!($155)) {
     break;
    }
    $156 = HEAP32[$i>>2]|0;
    $157 = HEAP32[$b>>2]|0;
    $158 = (($157) + ($156<<3)|0);
    $159 = +HEAPF64[$158>>3];
    $160 = $159 == 1.79769313486231570815E+308;
    if ($160) {
     label = 47;
     break;
    }
    $161 = HEAP32[$i>>2]|0;
    $162 = HEAP32[$b>>2]|0;
    $163 = (($162) + ($161<<3)|0);
    $164 = +HEAPF64[$163>>3];
    $165 = (___DOUBLE_BITS6783($164)|0);
    $166 = tempRet0;
    $167 = $166 & 2147483647;
    $168 = ($167>>>0)<(2146435072);
    $169 = ($167|0)==(2146435072);
    $170 = ($165>>>0)<(0);
    $171 = $169 & $170;
    $172 = $168 | $171;
    if (!($172)) {
     label = 47;
     break;
    }
    $173 = HEAP32[$1>>2]|0;
    $174 = HEAP32[$2>>2]|0;
    $175 = HEAP32[$i>>2]|0;
    $176 = HEAP32[$i>>2]|0;
    $177 = HEAP32[$names>>2]|0;
    $178 = (($177) + ($176<<2)|0);
    $179 = HEAP32[$178>>2]|0;
    (_gretl_model_get_param_name($173,$174,$175,$179)|0);
    $180 = HEAP32[$i>>2]|0;
    $181 = HEAP32[$names>>2]|0;
    $182 = (($181) + ($180<<2)|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (_char_len($183)|0);
    HEAP32[$n>>2] = $184;
    $185 = HEAP32[$n>>2]|0;
    $186 = HEAP32[$namelen>>2]|0;
    $187 = ($185|0)>($186|0);
    if ($187) {
     $188 = HEAP32[$n>>2]|0;
     HEAP32[$namelen>>2] = $188;
    }
    $189 = HEAP32[$i>>2]|0;
    $190 = HEAP32[$se>>2]|0;
    $191 = (($190) + ($189<<3)|0);
    $192 = +HEAPF64[$191>>3];
    $193 = $192 == 1.79769313486231570815E+308;
    do {
     if ($193) {
      label = 52;
     } else {
      $194 = HEAP32[$i>>2]|0;
      $195 = HEAP32[$se>>2]|0;
      $196 = (($195) + ($194<<3)|0);
      $197 = +HEAPF64[$196>>3];
      $198 = $197 <= 0.0;
      if ($198) {
       label = 52;
      } else {
       $199 = HEAP32[$i>>2]|0;
       $200 = HEAP32[$b>>2]|0;
       $201 = (($200) + ($199<<3)|0);
       $202 = +HEAPF64[$201>>3];
       $203 = HEAP32[$i>>2]|0;
       $204 = HEAP32[$se>>2]|0;
       $205 = (($204) + ($203<<3)|0);
       $206 = +HEAPF64[$205>>3];
       $207 = $202 / $206;
       HEAPF64[$tval>>3] = $207;
       $208 = HEAP32[$slopes>>2]|0;
       $209 = ($208|0)!=(0|0);
       $210 = HEAP32[$i>>2]|0;
       if ($209) {
        $211 = (($210) + 2)|0;
        $212 = HEAP32[$1>>2]|0;
        $213 = (($212) + 60|0);
        $214 = HEAP32[$213>>2]|0;
        $215 = (($214) + ($211<<2)|0);
        $216 = HEAP32[$215>>2]|0;
        $217 = ($216|0)==(0);
        if ($217) {
         $222 = 0.0;
        } else {
         $218 = HEAP32[$i>>2]|0;
         $219 = HEAP32[$slopes>>2]|0;
         $220 = (($219) + ($218<<3)|0);
         $221 = +HEAPF64[$220>>3];
         $222 = $221;
        }
        HEAPF64[$pval>>3] = $222;
        break;
       }
       $223 = HEAP32[$adfnum>>2]|0;
       $224 = ($210|0)==($223|0);
       if ($224) {
        $225 = HEAP32[$1>>2]|0;
        $226 = (+_gretl_model_get_double($225,35912));
        HEAPF64[$pval>>3] = $226;
        break;
       }
       $227 = HEAP32[$intervals>>2]|0;
       $228 = ($227|0)!=(0);
       if ($228) {
        break;
       }
       $229 = HEAP32[$1>>2]|0;
       $230 = (($229) + 8|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = +HEAPF64[$tval>>3];
       $233 = HEAP32[$dfd>>2]|0;
       $234 = (+_coeff_pval($231,$232,$233));
       HEAPF64[$pval>>3] = $234;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     label = 0;
     HEAPF64[$pval>>3] = 1.79769313486231570815E+308;
     HEAPF64[$tval>>3] = 1.79769313486231570815E+308;
    }
    HEAP32[$j>>2] = 0;
    while(1) {
     $235 = HEAP32[$j>>2]|0;
     $236 = HEAP32[$ncols>>2]|0;
     $237 = ($235|0)<($236|0);
     if (!($237)) {
      break;
     }
     $238 = HEAP32[$j>>2]|0;
     $239 = ($238|0)<(2);
     do {
      if ($239) {
       HEAP32[$d>>2] = 6;
       $240 = HEAP32[$j>>2]|0;
       $241 = ($240|0)==(0);
       $242 = HEAP32[$i>>2]|0;
       if ($241) {
        $243 = HEAP32[$b>>2]|0;
        $244 = (($243) + ($242<<3)|0);
        $245 = +HEAPF64[$244>>3];
        $256 = $245;
       } else {
        $246 = HEAP32[$se>>2]|0;
        $247 = (($246) + ($242<<3)|0);
        $248 = +HEAPF64[$247>>3];
        $256 = $248;
       }
       $249 = HEAP32[$j>>2]|0;
       $250 = HEAP32[$i>>2]|0;
       $251 = HEAP32[$vals>>2]|0;
       $252 = (($251) + ($250<<2)|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = (($253) + (($249*56)|0)|0);
       $255 = (($254) + 48|0);
       HEAPF64[$255>>3] = $256;
      } else {
       $257 = HEAP32[$j>>2]|0;
       $258 = ($257|0)==(2);
       if (!($258)) {
        $282 = HEAP32[$show_slope>>2]|0;
        $283 = ($282|0)!=(0);
        $284 = $283 ? 6 : -4;
        HEAP32[$d>>2] = $284;
        $285 = +HEAPF64[$pval>>3];
        $286 = HEAP32[$j>>2]|0;
        $287 = HEAP32[$i>>2]|0;
        $288 = HEAP32[$vals>>2]|0;
        $289 = (($288) + ($287<<2)|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = (($290) + (($286*56)|0)|0);
        $292 = (($291) + 48|0);
        HEAPF64[$292>>3] = $285;
        break;
       }
       $259 = HEAP32[$intervals>>2]|0;
       $260 = ($259|0)!=(0);
       if ($260) {
        HEAP32[$d>>2] = 6;
        $261 = HEAP32[$i>>2]|0;
        $262 = HEAP32[$nc>>2]|0;
        $263 = (($261) + ($262))|0;
        $264 = HEAP32[$se>>2]|0;
        $265 = (($264) + ($263<<3)|0);
        $266 = +HEAPF64[$265>>3];
        $267 = HEAP32[$j>>2]|0;
        $268 = HEAP32[$i>>2]|0;
        $269 = HEAP32[$vals>>2]|0;
        $270 = (($269) + ($268<<2)|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = (($271) + (($267*56)|0)|0);
        $273 = (($272) + 48|0);
        HEAPF64[$273>>3] = $266;
        break;
       } else {
        HEAP32[$d>>2] = 4;
        $274 = +HEAPF64[$tval>>3];
        $275 = HEAP32[$j>>2]|0;
        $276 = HEAP32[$i>>2]|0;
        $277 = HEAP32[$vals>>2]|0;
        $278 = (($277) + ($276<<2)|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = (($279) + (($275*56)|0)|0);
        $281 = (($280) + 48|0);
        HEAPF64[$281>>3] = $274;
        break;
       }
      }
     } while(0);
     $293 = HEAP32[$show_slope>>2]|0;
     $294 = ($293|0)!=(0);
     do {
      if ($294) {
       $295 = HEAP32[$j>>2]|0;
       $296 = ($295|0)==(3);
       if (!($296)) {
        label = 77;
        break;
       }
       $297 = HEAP32[$i>>2]|0;
       $298 = (($297) + 2)|0;
       $299 = HEAP32[$1>>2]|0;
       $300 = (($299) + 60|0);
       $301 = HEAP32[$300>>2]|0;
       $302 = (($301) + ($298<<2)|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = ($303|0)==(0);
       if (!($304)) {
        label = 77;
        break;
       }
       $305 = HEAP32[$j>>2]|0;
       $306 = HEAP32[$i>>2]|0;
       $307 = HEAP32[$vals>>2]|0;
       $308 = (($307) + ($306<<2)|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = (($309) + (($305*56)|0)|0);
       HEAP8[$310>>0] = 0;
       $311 = HEAP32[$j>>2]|0;
       $312 = HEAP32[$i>>2]|0;
       $313 = HEAP32[$vals>>2]|0;
       $314 = (($313) + ($312<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = (($315) + (($311*56)|0)|0);
       $317 = (($316) + 40|0);
       HEAP32[$317>>2] = 0;
       $318 = HEAP32[$j>>2]|0;
       $319 = HEAP32[$i>>2]|0;
       $320 = HEAP32[$vals>>2]|0;
       $321 = (($320) + ($319<<2)|0);
       $322 = HEAP32[$321>>2]|0;
       $323 = (($322) + (($318*56)|0)|0);
       $324 = (($323) + 36|0);
       HEAP32[$324>>2] = 0;
      } else {
       label = 77;
      }
     } while(0);
     L107: do {
      if ((label|0) == 77) {
       label = 0;
       $325 = HEAP32[$1>>2]|0;
       $326 = (($325) + 8|0);
       $327 = HEAP32[$326>>2]|0;
       $328 = ($327|0)==(29);
       do {
        if ($328) {
         $329 = HEAP32[$j>>2]|0;
         $330 = ($329|0)>(1);
         if (!($330)) {
          break;
         }
         $331 = HEAP32[$i>>2]|0;
         $332 = HEAP32[$names>>2]|0;
         $333 = (($332) + ($331<<2)|0);
         $334 = HEAP32[$333>>2]|0;
         $335 = (_strcmp($334,36472)|0);
         $336 = ($335|0)!=(0);
         if ($336) {
          break;
         }
         $337 = HEAP32[$j>>2]|0;
         $338 = HEAP32[$i>>2]|0;
         $339 = HEAP32[$vals>>2]|0;
         $340 = (($339) + ($338<<2)|0);
         $341 = HEAP32[$340>>2]|0;
         $342 = (($341) + (($337*56)|0)|0);
         $343 = (($342) + 48|0);
         HEAPF64[$343>>3] = 1.79769313486231570815E+308;
         $344 = HEAP32[$j>>2]|0;
         $345 = HEAP32[$i>>2]|0;
         $346 = HEAP32[$vals>>2]|0;
         $347 = (($346) + ($345<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = (($348) + (($344*56)|0)|0);
         HEAP8[$349>>0] = 0;
         $350 = HEAP32[$j>>2]|0;
         $351 = HEAP32[$i>>2]|0;
         $352 = HEAP32[$vals>>2]|0;
         $353 = (($352) + ($351<<2)|0);
         $354 = HEAP32[$353>>2]|0;
         $355 = (($354) + (($350*56)|0)|0);
         $356 = (($355) + 40|0);
         HEAP32[$356>>2] = 0;
         $357 = HEAP32[$j>>2]|0;
         $358 = HEAP32[$i>>2]|0;
         $359 = HEAP32[$vals>>2]|0;
         $360 = (($359) + ($358<<2)|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = (($361) + (($357*56)|0)|0);
         $363 = (($362) + 36|0);
         HEAP32[$363>>2] = 0;
         break L107;
        }
       } while(0);
       $364 = HEAP32[$j>>2]|0;
       $365 = HEAP32[$i>>2]|0;
       $366 = HEAP32[$vals>>2]|0;
       $367 = (($366) + ($365<<2)|0);
       $368 = HEAP32[$367>>2]|0;
       $369 = (($368) + (($364*56)|0)|0);
       $370 = (($369) + 48|0);
       $371 = +HEAPF64[$370>>3];
       $372 = HEAP32[$d>>2]|0;
       $373 = HEAP32[$j>>2]|0;
       $374 = HEAP32[$i>>2]|0;
       $375 = HEAP32[$vals>>2]|0;
       $376 = (($375) + ($374<<2)|0);
       $377 = HEAP32[$376>>2]|0;
       $378 = (($377) + (($373*56)|0)|0);
       $379 = HEAP32[$3>>2]|0;
       _gretl_sprint_fullwidth_double($371,$372,$378,$379);
       $380 = HEAP32[$j>>2]|0;
       $381 = HEAP32[$i>>2]|0;
       $382 = HEAP32[$vals>>2]|0;
       $383 = (($382) + ($381<<2)|0);
       $384 = HEAP32[$383>>2]|0;
       $385 = (($384) + (($380*56)|0)|0);
       $386 = HEAP32[$j>>2]|0;
       $387 = (($lmax) + ($386<<2)|0);
       $388 = HEAP32[$j>>2]|0;
       $389 = (($rmax) + ($388<<2)|0);
       _get_number_dims($385,$387,$389);
      }
     } while(0);
     $390 = HEAP32[$j>>2]|0;
     $391 = (($390) + 1)|0;
     HEAP32[$j>>2] = $391;
    }
    $392 = HEAP32[$i>>2]|0;
    $393 = (($392) + 1)|0;
    HEAP32[$i>>2] = $393;
   }
   if ((label|0) == 47) {
    HEAP32[$err>>2] = 35;
    break;
   }
   $394 = HEAP32[$namelen>>2]|0;
   $395 = ($394|0)<(8);
   if ($395) {
    HEAP32[$namelen>>2] = 8;
   } else {
    $396 = HEAP32[$namelen>>2]|0;
    $397 = ($396|0)>(18);
    if ($397) {
     HEAP32[$namelen>>2] = 18;
    }
   }
   HEAP32[$j>>2] = 0;
   while(1) {
    $398 = HEAP32[$j>>2]|0;
    $399 = HEAP32[$ncols>>2]|0;
    $400 = ($398|0)<($399|0);
    if (!($400)) {
     break;
    }
    $401 = HEAP32[$j>>2]|0;
    $402 = (($lmax) + ($401<<2)|0);
    $403 = HEAP32[$402>>2]|0;
    $404 = HEAP32[$j>>2]|0;
    $405 = (($rmax) + ($404<<2)|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = (($403) + ($406))|0;
    $408 = HEAP32[$j>>2]|0;
    $409 = (($w) + ($408<<2)|0);
    HEAP32[$409>>2] = $407;
    $410 = HEAP32[$j>>2]|0;
    $411 = HEAP32[$show_slope>>2]|0;
    $412 = HEAP32[$intervals>>2]|0;
    $413 = (_get_col_heading($headings,$410,$411,$412)|0);
    HEAP32[$head>>2] = $413;
    $414 = HEAP32[$head>>2]|0;
    $415 = (_char_len($414)|0);
    HEAP32[$hlen>>2] = $415;
    $416 = HEAP32[$hlen>>2]|0;
    $417 = HEAP32[$j>>2]|0;
    $418 = (($w) + ($417<<2)|0);
    $419 = HEAP32[$418>>2]|0;
    $420 = ($416|0)>($419|0);
    if ($420) {
     $421 = HEAP32[$hlen>>2]|0;
     $422 = HEAP32[$j>>2]|0;
     $423 = (($w) + ($422<<2)|0);
     $424 = HEAP32[$423>>2]|0;
     $425 = (($421) - ($424))|0;
     $426 = (($425|0) / 2)&-1;
     $427 = HEAP32[$j>>2]|0;
     $428 = (($addoff) + ($427<<2)|0);
     HEAP32[$428>>2] = $426;
     $429 = HEAP32[$hlen>>2]|0;
     $430 = HEAP32[$j>>2]|0;
     $431 = (($w) + ($430<<2)|0);
     HEAP32[$431>>2] = $429;
    }
    $432 = HEAP32[$j>>2]|0;
    $433 = (($432) + 1)|0;
    HEAP32[$j>>2] = $433;
   }
   $434 = HEAP32[$namelen>>2]|0;
   $435 = HEAP32[$ncols>>2]|0;
   _figure_colsep($434,$435,$w,$colsep);
   $436 = HEAP32[$namelen>>2]|0;
   $437 = (($436) + 2)|0;
   $438 = HEAP32[$colsep>>2]|0;
   $439 = (($437) + ($438))|0;
   $440 = HEAP32[$3>>2]|0;
   _bufspace($439,$440);
   HEAP32[$j>>2] = 0;
   while(1) {
    $441 = HEAP32[$j>>2]|0;
    $442 = HEAP32[$ncols>>2]|0;
    $443 = ($441|0)<($442|0);
    if (!($443)) {
     break;
    }
    $444 = HEAP32[$j>>2]|0;
    $445 = HEAP32[$show_slope>>2]|0;
    $446 = HEAP32[$intervals>>2]|0;
    $447 = (_get_col_heading($headings,$444,$445,$446)|0);
    HEAP32[$head>>2] = $447;
    $448 = HEAP32[$head>>2]|0;
    $449 = HEAP32[$j>>2]|0;
    $450 = (($w) + ($449<<2)|0);
    $451 = HEAP32[$450>>2]|0;
    $452 = HEAP32[$3>>2]|0;
    _print_padded_head($448,$451,$452);
    $453 = HEAP32[$j>>2]|0;
    $454 = HEAP32[$ncols>>2]|0;
    $455 = (($454) - 1)|0;
    $456 = ($453|0)<($455|0);
    if ($456) {
     $457 = HEAP32[$colsep>>2]|0;
     $458 = HEAP32[$3>>2]|0;
     _bufspace($457,$458);
    }
    $459 = HEAP32[$j>>2]|0;
    $460 = (($459) + 1)|0;
    HEAP32[$j>>2] = $460;
   }
   $461 = HEAP32[$namelen>>2]|0;
   $462 = HEAP32[$ncols>>2]|0;
   $463 = HEAP32[$colsep>>2]|0;
   $464 = HEAP32[$3>>2]|0;
   $465 = (_print_sep_row($461,$462,$w,$463,$464)|0);
   HEAP32[$dotlen>>2] = $465;
   $466 = HEAP32[$1>>2]|0;
   $467 = (($466) + 8|0);
   $468 = HEAP32[$467>>2]|0;
   $469 = ($468|0)==(10);
   if ($469) {
    $470 = HEAP32[$1>>2]|0;
    $471 = HEAP32[$2>>2]|0;
    $472 = (_gretl_model_get_depvar_name($470,$471)|0);
    $473 = HEAP32[$3>>2]|0;
    _print_coeff_left_string($472,$473);
   }
   HEAP32[$k>>2] = 0;
   HEAP32[$i>>2] = 0;
   while(1) {
    $474 = HEAP32[$i>>2]|0;
    $475 = HEAP32[$nc>>2]|0;
    $476 = ($474|0)<($475|0);
    if (!($476)) {
     break;
    }
    $477 = HEAP32[$i>>2]|0;
    $478 = HEAP32[$seppos>>2]|0;
    $479 = ($477|0)==($478|0);
    do {
     if ($479) {
      $480 = HEAP32[$1>>2]|0;
      $481 = (($480) + 8|0);
      $482 = HEAP32[$481>>2]|0;
      $483 = ($482|0)==(10);
      if ($483) {
       $484 = HEAP32[$3>>2]|0;
       (_pputc($484,10)|0);
       $485 = HEAP32[$sepstr>>2]|0;
       $486 = HEAP32[$3>>2]|0;
       _print_coeff_left_string($485,$486);
       break;
      } else {
       $487 = HEAP32[$sepstr>>2]|0;
       $488 = HEAP32[$dotlen>>2]|0;
       $489 = HEAP32[$3>>2]|0;
       _print_coeff_separator($487,$488,$489);
       break;
      }
     } else {
      $490 = HEAP32[$cblock>>2]|0;
      $491 = ($490|0)>(0);
      if ($491) {
       $492 = HEAP32[$i>>2]|0;
       $493 = HEAP32[$cblock>>2]|0;
       $494 = (($492|0) % ($493|0))&-1;
       $495 = ($494|0)==(0);
       if ($495) {
        $496 = HEAP32[$1>>2]|0;
        $497 = HEAP32[$2>>2]|0;
        $498 = HEAP32[$k>>2]|0;
        $499 = (($498) + 1)|0;
        HEAP32[$k>>2] = $499;
        _mn_logit_coeffsep($mnlsep,$496,$497,$499);
        $500 = HEAP32[$3>>2]|0;
        _print_coeff_separator($mnlsep,0,$500);
       }
      }
     }
    } while(0);
    $501 = HEAP32[$i>>2]|0;
    $502 = HEAP32[$names>>2]|0;
    $503 = (($502) + ($501<<2)|0);
    $504 = HEAP32[$503>>2]|0;
    (_maybe_trim_varname($tmp,$504)|0);
    $505 = HEAP32[$3>>2]|0;
    $506 = HEAP32[$namelen>>2]|0;
    HEAP32[$vararg_buffer>>2] = $506;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $tmp;
    (_pprintf($505,36480,$vararg_buffer)|0);
    $507 = HEAP32[$colsep>>2]|0;
    $508 = HEAP32[$3>>2]|0;
    _bufspace($507,$508);
    HEAP32[$j>>2] = 0;
    while(1) {
     $509 = HEAP32[$j>>2]|0;
     $510 = HEAP32[$ncols>>2]|0;
     $511 = ($509|0)<($510|0);
     if (!($511)) {
      break;
     }
     $512 = HEAP32[$j>>2]|0;
     $513 = HEAP32[$i>>2]|0;
     $514 = HEAP32[$vals>>2]|0;
     $515 = (($514) + ($513<<2)|0);
     $516 = HEAP32[$515>>2]|0;
     $517 = (($516) + (($512*56)|0)|0);
     HEAP32[$vij>>2] = $517;
     $518 = HEAP32[$vij>>2]|0;
     $519 = HEAP32[$j>>2]|0;
     $520 = (($w) + ($519<<2)|0);
     $521 = HEAP32[$520>>2]|0;
     $522 = HEAP32[$j>>2]|0;
     $523 = (($lmax) + ($522<<2)|0);
     $524 = HEAP32[$523>>2]|0;
     $525 = HEAP32[$j>>2]|0;
     $526 = (($addoff) + ($525<<2)|0);
     $527 = HEAP32[$526>>2]|0;
     $528 = HEAP32[$3>>2]|0;
     _print_padded_value($518,$521,$524,$527,$528);
     $529 = HEAP32[$j>>2]|0;
     $530 = HEAP32[$ncols>>2]|0;
     $531 = (($530) - 1)|0;
     $532 = ($529|0)<($531|0);
     do {
      if ($532) {
       $533 = HEAP32[$colsep>>2]|0;
       $534 = HEAP32[$3>>2]|0;
       _bufspace($533,$534);
      } else {
       $535 = HEAP32[$show_slope>>2]|0;
       $536 = ($535|0)!=(0);
       if (!($536)) {
        $537 = HEAP32[$vij>>2]|0;
        $538 = (($537) + 48|0);
        $539 = +HEAPF64[$538>>3];
        $540 = $539 == 1.79769313486231570815E+308;
        if ($540) {
         break;
        }
        $541 = HEAP32[$vij>>2]|0;
        $542 = (($541) + 48|0);
        $543 = +HEAPF64[$542>>3];
        $544 = HEAP32[$3>>2]|0;
        _put_asts($543,$544);
       }
      }
     } while(0);
     $545 = HEAP32[$j>>2]|0;
     $546 = (($545) + 1)|0;
     HEAP32[$j>>2] = $546;
    }
    $547 = HEAP32[$3>>2]|0;
    (_pputc($547,10)|0);
    $548 = HEAP32[$i>>2]|0;
    $549 = (($548) + 1)|0;
    HEAP32[$i>>2] = $549;
   }
   $550 = HEAP32[$1>>2]|0;
   $551 = (($550) + 8|0);
   $552 = HEAP32[$551>>2]|0;
   $553 = ($552|0)==(5);
   $554 = HEAP32[$1>>2]|0;
   if ($553) {
    $555 = HEAP32[$3>>2]|0;
    _print_ar_sum($554,$555);
    break;
   }
   $556 = (($554) + 8|0);
   $557 = HEAP32[$556>>2]|0;
   $558 = ($557|0)==(95);
   if (!($558)) {
    $559 = HEAP32[$1>>2]|0;
    $560 = (($559) + 8|0);
    $561 = HEAP32[$560>>2]|0;
    $562 = ($561|0)==(82);
    if (!($562)) {
     break;
    }
   }
   $563 = HEAP32[$1>>2]|0;
   $564 = HEAP32[$2>>2]|0;
   $565 = HEAP32[$vals>>2]|0;
   $566 = HEAP32[$565>>2]|0;
   $567 = HEAP32[$namelen>>2]|0;
   $568 = HEAP32[$colsep>>2]|0;
   $569 = HEAP32[$w>>2]|0;
   $570 = HEAP32[$lmax>>2]|0;
   $571 = HEAP32[$addoff>>2]|0;
   $572 = HEAP32[$3>>2]|0;
   _print_count_offset($563,$564,$566,$567,$568,$569,$570,$571,$572);
  }
 } while(0);
 HEAP32[$i>>2] = 0;
 while(1) {
  $573 = HEAP32[$i>>2]|0;
  $574 = HEAP32[$nc>>2]|0;
  $575 = ($573|0)<($574|0);
  if (!($575)) {
   break;
  }
  $576 = HEAP32[$i>>2]|0;
  $577 = HEAP32[$vals>>2]|0;
  $578 = (($577) + ($576<<2)|0);
  $579 = HEAP32[$578>>2]|0;
  _free($579);
  $580 = HEAP32[$i>>2]|0;
  $581 = (($580) + 1)|0;
  HEAP32[$i>>2] = $581;
 }
 $582 = HEAP32[$vals>>2]|0;
 _free($582);
 $583 = HEAP32[$names>>2]|0;
 $584 = HEAP32[$nc>>2]|0;
 _strings_array_free($583,$584);
 $585 = HEAP32[$xb>>2]|0;
 _free($585);
 $586 = HEAP32[$xse>>2]|0;
 _free($586);
 $587 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $587;
 $588 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($588|0);
}
function _get_ar_data($pmod,$pb,$pse,$pk,$dfd) {
 $pmod = $pmod|0;
 $pb = $pb|0;
 $pse = $pse|0;
 $pk = $pk|0;
 $dfd = $dfd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $b = 0, $err = 0, $i = 0, $k = 0, $se = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $b = sp + 16|0;
 $se = sp + 12|0;
 $i = sp + 8|0;
 $k = sp + 4|0;
 $err = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $pb;
 HEAP32[$3>>2] = $pse;
 HEAP32[$4>>2] = $pk;
 HEAP32[$5>>2] = $dfd;
 HEAP32[$err>>2] = 0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 224|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = HEAP32[$1>>2]|0;
  $11 = (($10) + 224|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $15 = HEAP32[$1>>2]|0;
   $16 = (($15) + 224|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    $21 = HEAP32[$1>>2]|0;
    $22 = (($21) + 224|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0|0);
    if (!($26)) {
     $27 = HEAP32[$1>>2]|0;
     $28 = (($27) + 224|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = HEAP32[$29>>2]|0;
     $31 = HEAP32[$30>>2]|0;
     HEAP32[$k>>2] = $31;
     $32 = HEAP32[$k>>2]|0;
     $33 = ($32|0)>(1);
     if ($33) {
      $34 = HEAP32[$1>>2]|0;
      $35 = (($34) + 56|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = HEAP32[$1>>2]|0;
      $38 = (($37) + 48|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = HEAP32[$k>>2]|0;
      $41 = (($39) - ($40))|0;
      $42 = (($36) + ($41))|0;
      $43 = HEAP32[$5>>2]|0;
      HEAP32[$43>>2] = $42;
     }
     $44 = HEAP32[$1>>2]|0;
     $45 = (($44) + 48|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = HEAP32[$k>>2]|0;
     $48 = (($46) + ($47))|0;
     $49 = $48<<3;
     $50 = (_malloc($49)|0);
     HEAP32[$b>>2] = $50;
     $51 = HEAP32[$1>>2]|0;
     $52 = (($51) + 48|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = HEAP32[$k>>2]|0;
     $55 = (($53) + ($54))|0;
     $56 = $55<<3;
     $57 = (_malloc($56)|0);
     HEAP32[$se>>2] = $57;
     $58 = HEAP32[$b>>2]|0;
     $59 = ($58|0)==(0|0);
     if (!($59)) {
      $60 = HEAP32[$se>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       HEAP32[$i>>2] = 0;
       while(1) {
        $64 = HEAP32[$i>>2]|0;
        $65 = HEAP32[$1>>2]|0;
        $66 = (($65) + 48|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = ($64|0)<($67|0);
        if (!($68)) {
         break;
        }
        $69 = HEAP32[$i>>2]|0;
        $70 = HEAP32[$1>>2]|0;
        $71 = (($70) + 76|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = (($72) + ($69<<3)|0);
        $74 = +HEAPF64[$73>>3];
        $75 = HEAP32[$i>>2]|0;
        $76 = HEAP32[$b>>2]|0;
        $77 = (($76) + ($75<<3)|0);
        HEAPF64[$77>>3] = $74;
        $78 = HEAP32[$i>>2]|0;
        $79 = HEAP32[$1>>2]|0;
        $80 = (($79) + 80|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($81) + ($78<<3)|0);
        $83 = +HEAPF64[$82>>3];
        $84 = HEAP32[$i>>2]|0;
        $85 = HEAP32[$se>>2]|0;
        $86 = (($85) + ($84<<3)|0);
        HEAPF64[$86>>3] = $83;
        $87 = HEAP32[$i>>2]|0;
        $88 = (($87) + 1)|0;
        HEAP32[$i>>2] = $88;
       }
       HEAP32[$i>>2] = 0;
       while(1) {
        $89 = HEAP32[$i>>2]|0;
        $90 = HEAP32[$k>>2]|0;
        $91 = ($89|0)<($90|0);
        if (!($91)) {
         break;
        }
        $92 = HEAP32[$i>>2]|0;
        $93 = HEAP32[$1>>2]|0;
        $94 = (($93) + 224|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = (($95) + 4|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = (($97) + ($92<<3)|0);
        $99 = +HEAPF64[$98>>3];
        $100 = HEAP32[$1>>2]|0;
        $101 = (($100) + 48|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = HEAP32[$i>>2]|0;
        $104 = (($102) + ($103))|0;
        $105 = HEAP32[$b>>2]|0;
        $106 = (($105) + ($104<<3)|0);
        HEAPF64[$106>>3] = $99;
        $107 = HEAP32[$i>>2]|0;
        $108 = HEAP32[$1>>2]|0;
        $109 = (($108) + 224|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = (($110) + 8|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = (($112) + ($107<<3)|0);
        $114 = +HEAPF64[$113>>3];
        $115 = HEAP32[$1>>2]|0;
        $116 = (($115) + 48|0);
        $117 = HEAP32[$116>>2]|0;
        $118 = HEAP32[$i>>2]|0;
        $119 = (($117) + ($118))|0;
        $120 = HEAP32[$se>>2]|0;
        $121 = (($120) + ($119<<3)|0);
        HEAPF64[$121>>3] = $114;
        $122 = HEAP32[$i>>2]|0;
        $123 = (($122) + 1)|0;
        HEAP32[$i>>2] = $123;
       }
       $124 = HEAP32[$b>>2]|0;
       $125 = HEAP32[$2>>2]|0;
       HEAP32[$125>>2] = $124;
       $126 = HEAP32[$se>>2]|0;
       $127 = HEAP32[$3>>2]|0;
       HEAP32[$127>>2] = $126;
       $128 = HEAP32[$k>>2]|0;
       $129 = HEAP32[$4>>2]|0;
       HEAP32[$129>>2] = $128;
       $130 = HEAP32[$err>>2]|0;
       HEAP32[$0>>2] = $130;
       $131 = HEAP32[$0>>2]|0;
       STACKTOP = sp;return ($131|0);
      }
     }
     $62 = HEAP32[$b>>2]|0;
     _free($62);
     $63 = HEAP32[$se>>2]|0;
     _free($63);
     HEAP32[$0>>2] = 12;
     $131 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($131|0);
    }
   }
  }
 }
 HEAP32[$0>>2] = 2;
 $131 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($131|0);
}
function _get_arch_data($pmod,$pb,$pse,$pk) {
 $pmod = $pmod|0;
 $pb = $pb|0;
 $pse = $pse|0;
 $pk = $pk|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $ab = 0;
 var $ase = 0, $b = 0, $err = 0, $i = 0, $k = 0, $order = 0, $se = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $ab = sp + 28|0;
 $ase = sp + 24|0;
 $order = sp + 20|0;
 $b = sp + 16|0;
 $se = sp + 12|0;
 $err = sp + 8|0;
 $i = sp + 4|0;
 $k = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $pb;
 HEAP32[$3>>2] = $pse;
 HEAP32[$4>>2] = $pk;
 $5 = HEAP32[$1>>2]|0;
 $6 = (_gretl_model_get_data($5,35272)|0);
 HEAP32[$ab>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (_gretl_model_get_data($7,35288)|0);
 HEAP32[$ase>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = (_gretl_model_get_int($9,35304)|0);
 HEAP32[$order>>2] = $10;
 HEAP32[$err>>2] = 0;
 $11 = HEAP32[$ab>>2]|0;
 $12 = ($11|0)!=(0|0);
 do {
  if ($12) {
   $13 = HEAP32[$ase>>2]|0;
   $14 = ($13|0)!=(0|0);
   if ($14) {
    $15 = HEAP32[$order>>2]|0;
    $16 = ($15|0)>(0);
    if ($16) {
     $17 = HEAP32[$order>>2]|0;
     $18 = (($17) + 1)|0;
     HEAP32[$k>>2] = $18;
     $19 = HEAP32[$1>>2]|0;
     $20 = (($19) + 48|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP32[$k>>2]|0;
     $23 = (($21) + ($22))|0;
     $24 = $23<<3;
     $25 = (_malloc($24)|0);
     HEAP32[$b>>2] = $25;
     $26 = HEAP32[$1>>2]|0;
     $27 = (($26) + 48|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = HEAP32[$k>>2]|0;
     $30 = (($28) + ($29))|0;
     $31 = $30<<3;
     $32 = (_malloc($31)|0);
     HEAP32[$se>>2] = $32;
     $33 = HEAP32[$b>>2]|0;
     $34 = ($33|0)==(0|0);
     if (!($34)) {
      $35 = HEAP32[$se>>2]|0;
      $36 = ($35|0)==(0|0);
      if (!($36)) {
       HEAP32[$i>>2] = 0;
       while(1) {
        $39 = HEAP32[$i>>2]|0;
        $40 = HEAP32[$1>>2]|0;
        $41 = (($40) + 48|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($39|0)<($42|0);
        if (!($43)) {
         break;
        }
        $44 = HEAP32[$i>>2]|0;
        $45 = HEAP32[$1>>2]|0;
        $46 = (($45) + 76|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = (($47) + ($44<<3)|0);
        $49 = +HEAPF64[$48>>3];
        $50 = HEAP32[$i>>2]|0;
        $51 = HEAP32[$b>>2]|0;
        $52 = (($51) + ($50<<3)|0);
        HEAPF64[$52>>3] = $49;
        $53 = HEAP32[$i>>2]|0;
        $54 = HEAP32[$1>>2]|0;
        $55 = (($54) + 80|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = (($56) + ($53<<3)|0);
        $58 = +HEAPF64[$57>>3];
        $59 = HEAP32[$i>>2]|0;
        $60 = HEAP32[$se>>2]|0;
        $61 = (($60) + ($59<<3)|0);
        HEAPF64[$61>>3] = $58;
        $62 = HEAP32[$i>>2]|0;
        $63 = (($62) + 1)|0;
        HEAP32[$i>>2] = $63;
       }
       HEAP32[$i>>2] = 0;
       while(1) {
        $64 = HEAP32[$i>>2]|0;
        $65 = HEAP32[$k>>2]|0;
        $66 = ($64|0)<($65|0);
        if (!($66)) {
         break;
        }
        $67 = HEAP32[$i>>2]|0;
        $68 = HEAP32[$ab>>2]|0;
        $69 = (($68) + ($67<<3)|0);
        $70 = +HEAPF64[$69>>3];
        $71 = HEAP32[$1>>2]|0;
        $72 = (($71) + 48|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = HEAP32[$i>>2]|0;
        $75 = (($73) + ($74))|0;
        $76 = HEAP32[$b>>2]|0;
        $77 = (($76) + ($75<<3)|0);
        HEAPF64[$77>>3] = $70;
        $78 = HEAP32[$i>>2]|0;
        $79 = HEAP32[$ase>>2]|0;
        $80 = (($79) + ($78<<3)|0);
        $81 = +HEAPF64[$80>>3];
        $82 = HEAP32[$1>>2]|0;
        $83 = (($82) + 48|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = HEAP32[$i>>2]|0;
        $86 = (($84) + ($85))|0;
        $87 = HEAP32[$se>>2]|0;
        $88 = (($87) + ($86<<3)|0);
        HEAPF64[$88>>3] = $81;
        $89 = HEAP32[$i>>2]|0;
        $90 = (($89) + 1)|0;
        HEAP32[$i>>2] = $90;
       }
       $91 = HEAP32[$b>>2]|0;
       $92 = HEAP32[$2>>2]|0;
       HEAP32[$92>>2] = $91;
       $93 = HEAP32[$se>>2]|0;
       $94 = HEAP32[$3>>2]|0;
       HEAP32[$94>>2] = $93;
       $95 = HEAP32[$k>>2]|0;
       $96 = HEAP32[$4>>2]|0;
       HEAP32[$96>>2] = $95;
       break;
      }
     }
     $37 = HEAP32[$b>>2]|0;
     _free($37);
     $38 = HEAP32[$se>>2]|0;
     _free($38);
     HEAP32[$0>>2] = 12;
     $98 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($98|0);
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
 } while(0);
 if ((label|0) == 14) {
  HEAP32[$err>>2] = 2;
 }
 $97 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $97;
 $98 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($98|0);
}
function _allocate_printvals($n,$m) {
 $n = $n|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $vals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $vals = sp + 8|0;
 $i = sp + 4|0;
 $j = sp;
 HEAP32[$0>>2] = $n;
 HEAP32[$1>>2] = $m;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2<<2;
 $4 = (_malloc($3)|0);
 HEAP32[$vals>>2] = $4;
 HEAP32[$i>>2] = 0;
 while(1) {
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   label = 10;
   break;
  }
  $8 = HEAP32[$vals>>2]|0;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 10;
   break;
  }
  $10 = HEAP32[$1>>2]|0;
  $11 = ($10*56)|0;
  $12 = (_malloc($11)|0);
  $13 = HEAP32[$i>>2]|0;
  $14 = HEAP32[$vals>>2]|0;
  $15 = (($14) + ($13<<2)|0);
  HEAP32[$15>>2] = $12;
  $16 = HEAP32[$i>>2]|0;
  $17 = HEAP32[$vals>>2]|0;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   HEAP32[$j>>2] = 0;
   while(1) {
    $21 = HEAP32[$j>>2]|0;
    $22 = HEAP32[$i>>2]|0;
    $23 = ($21|0)<($22|0);
    if (!($23)) {
     break;
    }
    $24 = HEAP32[$j>>2]|0;
    $25 = HEAP32[$vals>>2]|0;
    $26 = (($25) + ($24<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    _free($27);
    $28 = HEAP32[$j>>2]|0;
    $29 = (($28) + 1)|0;
    HEAP32[$j>>2] = $29;
   }
   $30 = HEAP32[$vals>>2]|0;
   _free($30);
   HEAP32[$vals>>2] = 0;
  }
  $31 = HEAP32[$i>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$i>>2] = $32;
 }
 if ((label|0) == 10) {
  $33 = HEAP32[$vals>>2]|0;
  STACKTOP = sp;return ($33|0);
 }
 return 0|0;
}
function _get_number_dims($v,$lmax,$rmax) {
 $v = $v|0;
 $lmax = $lmax|0;
 $rmax = $rmax|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $n = 0, $p = 0, $s = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $tmp = sp + 28|0;
 $s = sp + 12|0;
 $p = sp + 8|0;
 $i = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $v;
 HEAP32[$1>>2] = $lmax;
 HEAP32[$2>>2] = $rmax;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$s>>2] = $3;
 while(1) {
  $4 = HEAP32[$s>>2]|0;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(32);
  $8 = HEAP32[$s>>2]|0;
  if (!($7)) {
   break;
  }
  $9 = (($8) + 1|0);
  HEAP32[$s>>2] = $9;
 }
 $10 = (_strlen(($8|0))|0);
 HEAP32[$n>>2] = $10;
 $11 = HEAP32[$n>>2]|0;
 $12 = (($11) - 1)|0;
 HEAP32[$i>>2] = $12;
 while(1) {
  $13 = HEAP32[$i>>2]|0;
  $14 = ($13|0)>(0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$i>>2]|0;
  $16 = HEAP32[$s>>2]|0;
  $17 = (($16) + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(32);
  if (!($20)) {
   break;
  }
  $21 = HEAP32[$n>>2]|0;
  $22 = (($21) + -1)|0;
  HEAP32[$n>>2] = $22;
  $23 = HEAP32[$i>>2]|0;
  $24 = (($23) + -1)|0;
  HEAP32[$i>>2] = $24;
 }
 HEAP8[$tmp>>0] = 0;
 $25 = HEAP32[$s>>2]|0;
 $26 = HEAP32[$n>>2]|0;
 (_strncat($tmp,$25,$26)|0);
 $27 = (_strchr($tmp,46)|0);
 HEAP32[$p>>2] = $27;
 $28 = HEAP32[$p>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $30 = (_strchr($tmp,44)|0);
  HEAP32[$p>>2] = $30;
 }
 $31 = HEAP32[$p>>2]|0;
 $32 = ($31|0)==(0|0);
 $33 = (_char_len($tmp)|0);
 if ($32) {
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 36|0);
  HEAP32[$35>>2] = $33;
  $36 = HEAP32[$0>>2]|0;
  $37 = (($36) + 40|0);
  HEAP32[$37>>2] = 0;
 } else {
  HEAP32[$n>>2] = $33;
  $38 = HEAP32[$p>>2]|0;
  HEAP8[$38>>0] = 0;
  $39 = (_char_len($tmp)|0);
  $40 = HEAP32[$0>>2]|0;
  $41 = (($40) + 36|0);
  HEAP32[$41>>2] = $39;
  $42 = HEAP32[$n>>2]|0;
  $43 = HEAP32[$0>>2]|0;
  $44 = (($43) + 36|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($42) - ($45))|0;
  $47 = HEAP32[$0>>2]|0;
  $48 = (($47) + 40|0);
  HEAP32[$48>>2] = $46;
 }
 $49 = HEAP32[$0>>2]|0;
 $50 = (($49) + 36|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$1>>2]|0;
 $53 = HEAP32[$52>>2]|0;
 $54 = ($51|0)>($53|0);
 if ($54) {
  $55 = HEAP32[$0>>2]|0;
  $56 = (($55) + 36|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$1>>2]|0;
  HEAP32[$58>>2] = $57;
 }
 $59 = HEAP32[$0>>2]|0;
 $60 = (($59) + 40|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$2>>2]|0;
 $63 = HEAP32[$62>>2]|0;
 $64 = ($61|0)>($63|0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = HEAP32[$0>>2]|0;
 $66 = (($65) + 40|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$2>>2]|0;
 HEAP32[$68>>2] = $67;
 STACKTOP = sp;return;
}
function _get_col_heading($S,$j,$slopes,$intervals) {
 $S = $S|0;
 $j = $j|0;
 $slopes = $slopes|0;
 $intervals = $intervals|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$1>>2] = $S;
 HEAP32[$2>>2] = $j;
 HEAP32[$3>>2] = $slopes;
 HEAP32[$4>>2] = $intervals;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(3);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = HEAP32[$2>>2]|0;
   $10 = (($9) + 1)|0;
   $11 = HEAP32[$1>>2]|0;
   $12 = (($11) + ($10<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$0>>2] = $13;
   $29 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($29|0);
  }
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = HEAP32[$2>>2]|0;
  $17 = ($16|0)==(1);
  $18 = HEAP32[$2>>2]|0;
  $19 = ($18|0)==(2);
  $or$cond = $17 | $19;
  if ($or$cond) {
   $20 = HEAP32[$2>>2]|0;
   $21 = (($20) + 4)|0;
   $22 = HEAP32[$1>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$0>>2] = $24;
   $29 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($29|0);
  }
 }
 $25 = HEAP32[$2>>2]|0;
 $26 = HEAP32[$1>>2]|0;
 $27 = (($26) + ($25<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$0>>2] = $28;
 $29 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _figure_colsep($namelen,$ncols,$w,$colsep) {
 $namelen = $namelen|0;
 $ncols = $ncols|0;
 $w = $w|0;
 $colsep = $colsep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $j = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $namelen;
 HEAP32[$1>>2] = $ncols;
 HEAP32[$2>>2] = $w;
 HEAP32[$3>>2] = $colsep;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($5, $7)|0;
 $9 = (($4) + ($8))|0;
 HEAP32[$n>>2] = $9;
 HEAP32[$j>>2] = 0;
 while(1) {
  $10 = HEAP32[$j>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[$j>>2]|0;
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) + ($13<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$n>>2]|0;
  $18 = (($17) + ($16))|0;
  HEAP32[$n>>2] = $18;
  $19 = HEAP32[$j>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$j>>2] = $20;
 }
 $21 = HEAP32[$n>>2]|0;
 $22 = (($21) + 2)|0;
 $23 = (68 - ($22))|0;
 HEAP32[$n>>2] = $23;
 $24 = HEAP32[$n>>2]|0;
 $25 = HEAP32[$1>>2]|0;
 $26 = ($24|0)>($25|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$3>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 1)|0;
 HEAP32[$27>>2] = $29;
 STACKTOP = sp;return;
}
function _print_padded_head($s,$w,$prn) {
 $s = $s|0;
 $w = $w|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $hlen = 0, $offset = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $hlen = sp + 8|0;
 $offset = sp + 4|0;
 $pad = sp;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $w;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_char_len($3)|0);
 HEAP32[$hlen>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$hlen>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 2)&-1;
 HEAP32[$offset>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$hlen>>2]|0;
 $11 = (($9) - ($10))|0;
 $12 = HEAP32[$offset>>2]|0;
 $13 = (($11) - ($12))|0;
 HEAP32[$pad>>2] = $13;
 $14 = HEAP32[$offset>>2]|0;
 $15 = HEAP32[$2>>2]|0;
 _bufspace($14,$15);
 $16 = HEAP32[$2>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 (_pputs($16,$17)|0);
 $18 = HEAP32[$pad>>2]|0;
 $19 = HEAP32[$2>>2]|0;
 _bufspace($18,$19);
 STACKTOP = sp;return;
}
function _print_sep_row($namelen,$ncols,$w,$colsep,$prn) {
 $namelen = $namelen|0;
 $ncols = $ncols|0;
 $w = $w|0;
 $colsep = $colsep|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $j = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $namelen;
 HEAP32[$1>>2] = $ncols;
 HEAP32[$2>>2] = $w;
 HEAP32[$3>>2] = $colsep;
 HEAP32[$4>>2] = $prn;
 $5 = HEAP32[$4>>2]|0;
 (_pputc($5,10)|0);
 $6 = HEAP32[$4>>2]|0;
 _bufspace(2,$6);
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$3>>2]|0;
 $10 = Math_imul($8, $9)|0;
 $11 = (($7) + ($10))|0;
 HEAP32[$n>>2] = $11;
 HEAP32[$j>>2] = 0;
 while(1) {
  $12 = HEAP32[$j>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$j>>2]|0;
  $16 = HEAP32[$2>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$n>>2]|0;
  $20 = (($19) + ($18))|0;
  HEAP32[$n>>2] = $20;
  $21 = HEAP32[$j>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$j>>2] = $22;
 }
 HEAP32[$j>>2] = 0;
 while(1) {
  $23 = HEAP32[$j>>2]|0;
  $24 = HEAP32[$n>>2]|0;
  $25 = ($23|0)<($24|0);
  $26 = HEAP32[$4>>2]|0;
  if (!($25)) {
   break;
  }
  (_pputc($26,45)|0);
  $27 = HEAP32[$j>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$j>>2] = $28;
 }
 (_pputc($26,10)|0);
 $29 = HEAP32[$n>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _mn_logit_coeffsep($sep,$pmod,$dset,$i) {
 $sep = $sep|0;
 $pmod = $pmod|0;
 $dset = $dset|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $val = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vname = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $vname = sp + 16|0;
 $y = sp + 12|0;
 $val = sp + 8|0;
 HEAP32[$0>>2] = $sep;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $i;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (_gretl_model_get_depvar_name($4,$5)|0);
 HEAP32[$vname>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (_gretl_model_get_data($7,36568)|0);
 HEAP32[$y>>2] = $8;
 $9 = HEAP32[$y>>2]|0;
 $10 = ($9|0)!=(0|0);
 $11 = HEAP32[$3>>2]|0;
 if ($10) {
  $12 = HEAP32[$y>>2]|0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $19 = $16;
 } else {
  $17 = (+($11|0));
  $19 = $17;
 }
 $18 = (~~(($19)));
 HEAP32[$val>>2] = $18;
 $20 = HEAP32[$0>>2]|0;
 $21 = HEAP32[$vname>>2]|0;
 $22 = HEAP32[$val>>2]|0;
 HEAP32[$vararg_buffer>>2] = $21;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $22;
 (_sprintf($20,36576,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _print_padded_value($val,$w,$lmax,$addoff,$prn) {
 $val = $val|0;
 $w = $w|0;
 $lmax = $lmax|0;
 $addoff = $addoff|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $offset = sp + 4|0;
 $pad = sp;
 HEAP32[$0>>2] = $val;
 HEAP32[$1>>2] = $w;
 HEAP32[$2>>2] = $lmax;
 HEAP32[$3>>2] = $addoff;
 HEAP32[$4>>2] = $prn;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($5) - ($8))|0;
 $10 = HEAP32[$3>>2]|0;
 $11 = (($9) + ($10))|0;
 HEAP32[$offset>>2] = $11;
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13) + ($16))|0;
 $18 = HEAP32[$3>>2]|0;
 $19 = (($17) + ($18))|0;
 $20 = (($12) - ($19))|0;
 HEAP32[$pad>>2] = $20;
 $21 = HEAP32[$offset>>2]|0;
 $22 = HEAP32[$4>>2]|0;
 _bufspace($21,$22);
 $23 = HEAP32[$4>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 (_pputs($23,$24)|0);
 $25 = HEAP32[$pad>>2]|0;
 $26 = HEAP32[$4>>2]|0;
 _bufspace($25,$26);
 STACKTOP = sp;return;
}
function _put_asts($pv,$prn) {
 $pv = +$pv;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = sp + 8|0;
 HEAPF64[$0>>3] = $pv;
 HEAP32[$1>>2] = $prn;
 $2 = +HEAPF64[$0>>3];
 $3 = $2 < 0.0100000000000000002082;
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  (_pputs($4,36544)|0);
  STACKTOP = sp;return;
 }
 $5 = +HEAPF64[$0>>3];
 $6 = $5 < 0.0500000000000000027756;
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  (_pputs($7,36552)|0);
  STACKTOP = sp;return;
 }
 $8 = +HEAPF64[$0>>3];
 $9 = $8 < 0.100000000000000005551;
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$1>>2]|0;
 (_pputs($10,36560)|0);
 STACKTOP = sp;return;
}
function _print_ar_sum($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arsum = 0, $i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp + 8|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $arsum = sp;
 $i = sp + 20|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 224|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 224|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(1);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAPF64[$arsum>>3] = 0.0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $12 = HEAP32[$i>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 224|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($12|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = HEAP32[$i>>2]|0;
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 224|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($19<<3)|0);
  $26 = +HEAPF64[$25>>3];
  $27 = +HEAPF64[$arsum>>3];
  $28 = $27 + $26;
  HEAPF64[$arsum>>3] = $28;
  $29 = HEAP32[$i>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$i>>2] = $30;
 }
 $31 = HEAP32[$1>>2]|0;
 $32 = +HEAPF64[$arsum>>3];
 HEAP32[$vararg_buffer>>2] = 36520;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$32;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($31,36504,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _print_count_offset($pmod,$dset,$val,$namelen,$colsep,$w,$lmax,$addoff,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $val = $val|0;
 $namelen = $namelen|0;
 $colsep = $colsep|0;
 $w = $w|0;
 $lmax = $lmax|0;
 $addoff = $addoff|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $name = 0, $offvar = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer5 = sp;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $offvar = sp + 12|0;
 $name = sp + 56|0;
 $n = sp + 8|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $val;
 HEAP32[$3>>2] = $namelen;
 HEAP32[$4>>2] = $colsep;
 HEAP32[$5>>2] = $w;
 HEAP32[$6>>2] = $lmax;
 HEAP32[$7>>2] = $addoff;
 HEAP32[$8>>2] = $prn;
 $9 = HEAP32[$0>>2]|0;
 $10 = (_gretl_model_get_int($9,35000)|0);
 HEAP32[$offvar>>2] = $10;
 $11 = HEAP32[$offvar>>2]|0;
 $12 = ($11|0)>(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$offvar>>2]|0;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 68|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($13<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $18;
 (_sprintf($name,35016,$vararg_buffer5)|0);
 $19 = (_strlen(($name|0))|0);
 HEAP32[$n>>2] = $19;
 $20 = HEAP32[$8>>2]|0;
 $21 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $21;
 $vararg_ptr4 = (($vararg_buffer5) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $name;
 (_pprintf($20,36488,$vararg_buffer5)|0);
 $22 = HEAP32[$n>>2]|0;
 $23 = HEAP32[$3>>2]|0;
 $24 = ($22|0)>($23|0);
 if ($24) {
  $25 = HEAP32[$n>>2]|0;
  $26 = HEAP32[$3>>2]|0;
  $27 = (($25) - ($26))|0;
  $28 = HEAP32[$4>>2]|0;
  $29 = (($28) - ($27))|0;
  HEAP32[$4>>2] = $29;
 }
 $30 = HEAP32[$4>>2]|0;
 $31 = ($30|0)>(0);
 if ($31) {
  $32 = HEAP32[$4>>2]|0;
  $33 = HEAP32[$8>>2]|0;
  _bufspace($32,$33);
 }
 $34 = HEAP32[$2>>2]|0;
 HEAPF64[tempDoublePtr>>3]=1.0;HEAP32[$vararg_buffer5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer5+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($34,36496,$vararg_buffer5)|0);
 $35 = HEAP32[$2>>2]|0;
 $36 = (($35) + 40|0);
 HEAP32[$36>>2] = 1;
 $37 = HEAP32[$2>>2]|0;
 $38 = (($37) + 36|0);
 HEAP32[$38>>2] = 1;
 $39 = HEAP32[$2>>2]|0;
 $40 = HEAP32[$5>>2]|0;
 $41 = HEAP32[$6>>2]|0;
 $42 = HEAP32[$7>>2]|0;
 $43 = HEAP32[$8>>2]|0;
 _print_padded_value($39,$40,$41,$42,$43);
 $44 = HEAP32[$8>>2]|0;
 (_pputc($44,10)|0);
 STACKTOP = sp;return;
}
function _print_fifteen($s,$x,$minus) {
 $s = $s|0;
 $x = +$x;
 $minus = $minus|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $p = 0, $tmp = 0, $vararg_buffer13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer13 = sp + 8|0;
 $0 = sp + 24|0;
 $1 = sp;
 $2 = sp + 20|0;
 $p = sp + 16|0;
 $tmp = sp + 32|0;
 HEAP32[$0>>2] = $s;
 HEAPF64[$1>>3] = $x;
 HEAP32[$2>>2] = $minus;
 $3 = +HEAPF64[$1>>3];
 $4 = $3 == 1.79769313486231570815E+308;
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  (_strcpy(($5|0),(36592|0))|0);
  $28 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($28|0);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)==(2);
 if ($7) {
  $8 = +HEAPF64[$1>>3];
  $9 = $8 < 0.0;
  $10 = HEAP32[$0>>2]|0;
  $11 = +HEAPF64[$1>>3];
  if ($9) {
   $12 = -$11;
   HEAPF64[tempDoublePtr>>3]=$12;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($10,36600,$vararg_buffer13)|0);
  } else {
   HEAPF64[tempDoublePtr>>3]=$11;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($10,36616,$vararg_buffer13)|0);
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = (_strstr($13,36624)|0);
  HEAP32[$p>>2] = $14;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   $28 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($28|0);
  }
  $16 = HEAP32[$p>>2]|0;
  $17 = (($16) + 2|0);
  HEAP32[$vararg_buffer13>>2] = $17;
  (_sprintf($tmp,36632,$vararg_buffer13)|0);
  $18 = HEAP32[$p>>2]|0;
  (_strcpy(($18|0),($tmp|0))|0);
  $28 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($28|0);
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = ($19|0)==(1);
 if (!($20)) {
  $26 = HEAP32[$0>>2]|0;
  $27 = +HEAPF64[$1>>3];
  HEAPF64[tempDoublePtr>>3]=$27;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($26,36656,$vararg_buffer13)|0);
  $28 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($28|0);
 }
 $21 = +HEAPF64[$1>>3];
 $22 = $21 < 0.0;
 $23 = HEAP32[$0>>2]|0;
 $24 = +HEAPF64[$1>>3];
 if ($22) {
  $25 = -$24;
  HEAPF64[tempDoublePtr>>3]=$25;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($23,36640,$vararg_buffer13)|0);
  $28 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($28|0);
 } else {
  HEAPF64[tempDoublePtr>>3]=$24;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($23,36656,$vararg_buffer13)|0);
  $28 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($28|0);
 }
 return 0|0;
}
function _maybe_print_weak_insts_test($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0;
 var $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0;
 var $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F = 0, $K2 = 0, $bvals = 0, $dfd = 0, $dfn = 0, $g = 0, $got_critvals = 0, $head = 0, $n = 0, $svals = 0, $vararg_buffer38 = 0;
 var $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $x1str = 0, $x1str1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer38 = sp + 16|0;
 $0 = sp + 76|0;
 $1 = sp + 72|0;
 $head = sp + 68|0;
 $F = sp + 8|0;
 $g = sp;
 $got_critvals = sp + 64|0;
 $dfn = sp + 60|0;
 $dfd = sp + 56|0;
 $x1str = sp + 112|0;
 $x1str1 = sp + 80|0;
 $bvals = sp + 52|0;
 $svals = sp + 48|0;
 $n = sp + 44|0;
 $K2 = sp + 40|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 HEAP32[$head>>2] = 36832;
 $2 = HEAP32[$0>>2]|0;
 $3 = (+_gretl_model_get_double($2,36856));
 HEAPF64[$F>>3] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (+_gretl_model_get_double($4,36872));
 HEAPF64[$g>>3] = $5;
 HEAP32[$got_critvals>>2] = 0;
 HEAP32[$dfn>>2] = 0;
 HEAP32[$dfd>>2] = 0;
 $6 = +HEAPF64[$F>>3];
 $7 = $6 == 1.79769313486231570815E+308;
 if ($7) {
  $8 = +HEAPF64[$g>>3];
  $9 = $8 == 1.79769313486231570815E+308;
  if ($9) {
   STACKTOP = sp;return;
  }
 }
 $10 = HEAP32[$1>>2]|0;
 $11 = (_plain_format($10)|0);
 $12 = ($11|0)!=(0);
 $13 = HEAP32[$1>>2]|0;
 do {
  if ($12) {
   $14 = HEAP32[$head>>2]|0;
   HEAP32[$vararg_buffer38>>2] = $14;
   (_pprintf($13,36880,$vararg_buffer38)|0);
  } else {
   $15 = (_tex_format($13)|0);
   $16 = ($15|0)!=(0);
   $17 = HEAP32[$1>>2]|0;
   if ($16) {
    $18 = HEAP32[$head>>2]|0;
    HEAP32[$vararg_buffer38>>2] = $18;
    (_pprintf($17,36888,$vararg_buffer38)|0);
    break;
   }
   $19 = (_rtf_format($17)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    $21 = HEAP32[$1>>2]|0;
    $22 = HEAP32[$head>>2]|0;
    HEAP32[$vararg_buffer38>>2] = $22;
    (_pprintf($21,36904,$vararg_buffer38)|0);
   }
  }
 } while(0);
 $23 = +HEAPF64[$F>>3];
 $24 = $23 == 1.79769313486231570815E+308;
 do {
  if ($24) {
   $49 = HEAP32[$1>>2]|0;
   $50 = (_plain_format($49)|0);
   $51 = ($50|0)!=(0);
   $52 = HEAP32[$1>>2]|0;
   if ($51) {
    $53 = +HEAPF64[$g>>3];
    HEAP32[$vararg_buffer38>>2] = 37080;
    $vararg_ptr28 = (($vararg_buffer38) + 4|0);
    HEAP32[$vararg_ptr28>>2] = 6;
    $vararg_ptr29 = (($vararg_buffer38) + 8|0);
    HEAPF64[tempDoublePtr>>3]=$53;HEAP32[$vararg_ptr29>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr29+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($52,37064,$vararg_buffer38)|0);
    break;
   }
   $54 = (_tex_format($52)|0);
   $55 = ($54|0)!=(0);
   if ($55) {
    $56 = +HEAPF64[$g>>3];
    (_tex_sprint_double($56,$x1str1)|0);
    $57 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer38>>2] = 37136;
    $vararg_ptr33 = (($vararg_buffer38) + 4|0);
    HEAP32[$vararg_ptr33>>2] = $x1str1;
    (_pprintf($57,37112,$vararg_buffer38)|0);
    break;
   }
   $58 = HEAP32[$1>>2]|0;
   $59 = (_rtf_format($58)|0);
   $60 = ($59|0)!=(0);
   if ($60) {
    $61 = HEAP32[$1>>2]|0;
    $62 = +HEAPF64[$g>>3];
    HEAP32[$vararg_buffer38>>2] = 37080;
    $vararg_ptr37 = (($vararg_buffer38) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$62;HEAP32[$vararg_ptr37>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr37+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($61,37176,$vararg_buffer38)|0);
   }
  } else {
   $25 = HEAP32[$0>>2]|0;
   $26 = (_gretl_model_get_int($25,36920)|0);
   HEAP32[$dfn>>2] = $26;
   $27 = HEAP32[$0>>2]|0;
   $28 = (_gretl_model_get_int($27,36936)|0);
   HEAP32[$dfd>>2] = $28;
   $29 = HEAP32[$1>>2]|0;
   $30 = (_plain_format($29)|0);
   $31 = ($30|0)!=(0);
   $32 = HEAP32[$1>>2]|0;
   if ($31) {
    $33 = HEAP32[$dfn>>2]|0;
    $34 = HEAP32[$dfd>>2]|0;
    $35 = +HEAPF64[$F>>3];
    HEAP32[$vararg_buffer38>>2] = 36976;
    $vararg_ptr10 = (($vararg_buffer38) + 4|0);
    HEAP32[$vararg_ptr10>>2] = $33;
    $vararg_ptr11 = (($vararg_buffer38) + 8|0);
    HEAP32[$vararg_ptr11>>2] = $34;
    $vararg_ptr12 = (($vararg_buffer38) + 12|0);
    HEAP32[$vararg_ptr12>>2] = 6;
    $vararg_ptr13 = (($vararg_buffer38) + 16|0);
    HEAPF64[tempDoublePtr>>3]=$35;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($32,36952,$vararg_buffer38)|0);
    break;
   }
   $36 = (_tex_format($32)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = +HEAPF64[$F>>3];
    (_tex_sprint_double($38,$x1str)|0);
    $39 = HEAP32[$1>>2]|0;
    $40 = HEAP32[$dfn>>2]|0;
    $41 = HEAP32[$dfd>>2]|0;
    HEAP32[$vararg_buffer38>>2] = $40;
    $vararg_ptr17 = (($vararg_buffer38) + 4|0);
    HEAP32[$vararg_ptr17>>2] = $41;
    $vararg_ptr18 = (($vararg_buffer38) + 8|0);
    HEAP32[$vararg_ptr18>>2] = $x1str;
    (_pprintf($39,37000,$vararg_buffer38)|0);
    break;
   }
   $42 = HEAP32[$1>>2]|0;
   $43 = (_rtf_format($42)|0);
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = HEAP32[$1>>2]|0;
    $46 = HEAP32[$dfn>>2]|0;
    $47 = HEAP32[$dfd>>2]|0;
    $48 = +HEAPF64[$F>>3];
    HEAP32[$vararg_buffer38>>2] = 36976;
    $vararg_ptr22 = (($vararg_buffer38) + 4|0);
    HEAP32[$vararg_ptr22>>2] = $46;
    $vararg_ptr23 = (($vararg_buffer38) + 8|0);
    HEAP32[$vararg_ptr23>>2] = $47;
    $vararg_ptr24 = (($vararg_buffer38) + 12|0);
    HEAPF64[tempDoublePtr>>3]=$48;HEAP32[$vararg_ptr24>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr24+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($45,37040,$vararg_buffer38)|0);
   }
  }
 } while(0);
 $63 = +HEAPF64[$g>>3];
 $64 = $63 == 1.79769313486231570815E+308;
 if (!($64)) {
  HEAP32[$bvals>>2] = 0;
  HEAP32[$svals>>2] = 0;
  $65 = +HEAPF64[$F>>3];
  $66 = $65 == 1.79769313486231570815E+308;
  if ($66) {
   $67 = HEAP32[$0>>2]|0;
   $68 = (_gretl_model_get_int($67,37192)|0);
   HEAP32[$n>>2] = $68;
   $69 = HEAP32[$0>>2]|0;
   $70 = (_gretl_model_get_int($69,37200)|0);
   HEAP32[$K2>>2] = $70;
  } else {
   HEAP32[$n>>2] = 1;
   $71 = HEAP32[$dfn>>2]|0;
   HEAP32[$K2>>2] = $71;
  }
  $72 = HEAP32[$n>>2]|0;
  $73 = HEAP32[$K2>>2]|0;
  $74 = HEAP32[$0>>2]|0;
  $75 = (($74) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  _get_stock_yogo_critvals($72,$73,$76,$bvals,$svals);
  $77 = HEAP32[$bvals>>2]|0;
  $78 = ($77|0)!=(0|0);
  if ($78) {
   HEAP32[$got_critvals>>2] = 1;
   $79 = HEAP32[$1>>2]|0;
   $80 = (_plain_format($79)|0);
   $81 = ($80|0)!=(0);
   if ($81) {
    $82 = HEAP32[$bvals>>2]|0;
    $83 = +HEAPF64[$g>>3];
    $84 = HEAP32[$0>>2]|0;
    $85 = (($84) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = HEAP32[$1>>2]|0;
    _plain_print_sy_vals($82,$83,1,$86,$87);
   }
   $88 = HEAP32[$bvals>>2]|0;
   _gretl_matrix_free($88);
  }
  $89 = HEAP32[$svals>>2]|0;
  $90 = ($89|0)!=(0|0);
  if ($90) {
   HEAP32[$got_critvals>>2] = 1;
   $91 = HEAP32[$1>>2]|0;
   $92 = (_plain_format($91)|0);
   $93 = ($92|0)!=(0);
   if ($93) {
    $94 = HEAP32[$svals>>2]|0;
    $95 = +HEAPF64[$g>>3];
    $96 = HEAP32[$0>>2]|0;
    $97 = (($96) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$1>>2]|0;
    _plain_print_sy_vals($94,$95,2,$98,$99);
   }
   $100 = HEAP32[$svals>>2]|0;
   _gretl_matrix_free($100);
  }
 }
 $101 = +HEAPF64[$F>>3];
 $102 = $101 == 1.79769313486231570815E+308;
 if ($102) {
  STACKTOP = sp;return;
 }
 $103 = HEAP32[$got_critvals>>2]|0;
 $104 = ($103|0)!=(0);
 if ($104) {
  STACKTOP = sp;return;
 }
 $105 = HEAP32[$1>>2]|0;
 $106 = (_plain_format($105)|0);
 $107 = ($106|0)!=(0);
 if (!($107)) {
  STACKTOP = sp;return;
 }
 $108 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer38>>2] = 37216;
 (_pprintf($108,37208,$vararg_buffer38)|0);
 STACKTOP = sp;return;
}
function _get_stock_yogo_critvals($n,$K2,$opt,$p1,$p2) {
 $n = $n|0;
 $K2 = $K2|0;
 $opt = $opt|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $handle = 0, $lookup = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $lookup = sp + 4|0;
 $handle = sp;
 HEAP32[$0>>2] = $n;
 HEAP32[$1>>2] = $K2;
 HEAP32[$2>>2] = $opt;
 HEAP32[$3>>2] = $p1;
 HEAP32[$4>>2] = $p2;
 $5 = (_get_plugin_function(37744,$handle)|0);
 HEAP32[$lookup>>2] = $5;
 $6 = HEAP32[$lookup>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = $8 & 2048;
 $10 = ($9|0)!=(0);
 $11 = HEAP32[$lookup>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$1>>2]|0;
 if ($10) {
  $14 = (FUNCTION_TABLE_iiii[$11 & 3]($12,$13,3)|0);
  $15 = HEAP32[$4>>2]|0;
  HEAP32[$15>>2] = $14;
 } else {
  $16 = (FUNCTION_TABLE_iiii[$11 & 3]($12,$13,1)|0);
  $17 = HEAP32[$3>>2]|0;
  HEAP32[$17>>2] = $16;
  $18 = HEAP32[$lookup>>2]|0;
  $19 = HEAP32[$0>>2]|0;
  $20 = HEAP32[$1>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$18 & 3]($19,$20,2)|0);
  $22 = HEAP32[$4>>2]|0;
  HEAP32[$22>>2] = $21;
 }
 $23 = HEAP32[$handle>>2]|0;
 _close_plugin($23);
 STACKTOP = sp;return;
}
function _plain_print_sy_vals($v,$g,$k,$opt,$prn) {
 $v = $v|0;
 $g = +$g;
 $k = $k|0;
 $opt = $opt|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $gpos = 0, $i = 0, $vararg_buffer19 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer19 = sp + 16|0;
 $0 = sp + 44|0;
 $1 = sp + 8|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $i = sp + 28|0;
 $gpos = sp + 24|0;
 $x = sp;
 HEAP32[$0>>2] = $v;
 HEAPF64[$1>>3] = $g;
 HEAP32[$2>>2] = $k;
 HEAP32[$3>>2] = $opt;
 HEAP32[$4>>2] = $prn;
 HEAP32[$gpos>>2] = -1;
 $5 = HEAP32[$4>>2]|0;
 (_pputs($5,35736)|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)==(1);
 do {
  if ($7) {
   $8 = HEAP32[$4>>2]|0;
   (_pputs($8,37264)|0);
  } else {
   $9 = HEAP32[$3>>2]|0;
   $10 = $9 & 2048;
   $11 = ($10|0)!=(0);
   $12 = HEAP32[$4>>2]|0;
   if ($11) {
    (_pputs($12,37312)|0);
    break;
   } else {
    (_pputs($12,37424)|0);
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$4>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = ($14|0)==(1);
 $16 = $15 ? 37544 : 37552;
 HEAP32[$vararg_buffer19>>2] = $16;
 (_pprintf($13,37536,$vararg_buffer19)|0);
 HEAP32[$i>>2] = 0;
 while(1) {
  $17 = HEAP32[$i>>2]|0;
  $18 = ($17|0)<(4);
  $19 = HEAP32[$4>>2]|0;
  if (!($18)) {
   break;
  }
  $20 = HEAP32[$i>>2]|0;
  $21 = HEAP32[$0>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = Math_imul($20, $22)|0;
  $24 = (($23) + 0)|0;
  $25 = HEAP32[$0>>2]|0;
  $26 = (($25) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($24<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = 100.0 * $29;
  HEAPF64[tempDoublePtr>>3]=$30;HEAP32[$vararg_buffer19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer19+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($19,37560,$vararg_buffer19)|0);
  $31 = HEAP32[$i>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$i>>2] = $32;
 }
 HEAP32[$vararg_buffer19>>2] = 37568;
 (_pprintf($19,37536,$vararg_buffer19)|0);
 HEAP32[$i>>2] = 0;
 while(1) {
  $33 = HEAP32[$i>>2]|0;
  $34 = ($33|0)<(4);
  if (!($34)) {
   break;
  }
  $35 = HEAP32[$i>>2]|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$36>>2]|0;
  $38 = Math_imul($35, $37)|0;
  $39 = (($38) + 1)|0;
  $40 = HEAP32[$0>>2]|0;
  $41 = (($40) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($39<<3)|0);
  $44 = +HEAPF64[$43>>3];
  HEAPF64[$x>>3] = $44;
  $45 = HEAP32[$gpos>>2]|0;
  $46 = ($45|0)<(0);
  if ($46) {
   $47 = +HEAPF64[$1>>3];
   $48 = +HEAPF64[$x>>3];
   $49 = $47 > $48;
   if ($49) {
    $50 = HEAP32[$i>>2]|0;
    HEAP32[$gpos>>2] = $50;
   }
  }
  $51 = HEAP32[$4>>2]|0;
  $52 = +HEAPF64[$x>>3];
  HEAPF64[tempDoublePtr>>3]=$52;HEAP32[$vararg_buffer19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer19+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($51,37576,$vararg_buffer19)|0);
  $53 = HEAP32[$i>>2]|0;
  $54 = (($53) + 1)|0;
  HEAP32[$i>>2] = $54;
 }
 $55 = HEAP32[$4>>2]|0;
 (_pputs($55,37584)|0);
 $56 = HEAP32[$gpos>>2]|0;
 $57 = ($56|0)==(0);
 if ($57) {
  $58 = HEAP32[$0>>2]|0;
  $59 = HEAP32[$58>>2]|0;
  $60 = 0;
  $61 = (($60) + 0)|0;
  $62 = HEAP32[$0>>2]|0;
  $63 = (($62) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($61<<3)|0);
  $66 = +HEAPF64[$65>>3];
  HEAPF64[$x>>3] = $66;
  $67 = HEAP32[$2>>2]|0;
  $68 = ($67|0)==(1);
  $69 = HEAP32[$4>>2]|0;
  $70 = +HEAPF64[$x>>3];
  $71 = 100.0 * $70;
  if ($68) {
   HEAPF64[tempDoublePtr>>3]=$71;HEAP32[$vararg_buffer19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer19+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($69,37592,$vararg_buffer19)|0);
   $91 = HEAP32[$4>>2]|0;
   (_pputs($91,32904)|0);
   STACKTOP = sp;return;
  } else {
   HEAPF64[tempDoublePtr>>3]=$71;HEAP32[$vararg_buffer19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer19+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($69,37640,$vararg_buffer19)|0);
   $91 = HEAP32[$4>>2]|0;
   (_pputs($91,32904)|0);
   STACKTOP = sp;return;
  }
 }
 $72 = HEAP32[$gpos>>2]|0;
 $73 = ($72|0)<(0);
 if ($73) {
  HEAP32[$gpos>>2] = 3;
 } else {
  $74 = HEAP32[$gpos>>2]|0;
  $75 = (($74) + -1)|0;
  HEAP32[$gpos>>2] = $75;
 }
 $76 = HEAP32[$gpos>>2]|0;
 $77 = HEAP32[$0>>2]|0;
 $78 = HEAP32[$77>>2]|0;
 $79 = Math_imul($76, $78)|0;
 $80 = (($79) + 0)|0;
 $81 = HEAP32[$0>>2]|0;
 $82 = (($81) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + ($80<<3)|0);
 $85 = +HEAPF64[$84>>3];
 HEAPF64[$x>>3] = $85;
 $86 = HEAP32[$2>>2]|0;
 $87 = ($86|0)==(1);
 $88 = HEAP32[$4>>2]|0;
 $89 = +HEAPF64[$x>>3];
 $90 = 100.0 * $89;
 if ($87) {
  HEAPF64[tempDoublePtr>>3]=$90;HEAP32[$vararg_buffer19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer19+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($88,37680,$vararg_buffer19)|0);
  $91 = HEAP32[$4>>2]|0;
  (_pputs($91,32904)|0);
  STACKTOP = sp;return;
 } else {
  HEAPF64[tempDoublePtr>>3]=$90;HEAP32[$vararg_buffer19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer19+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($88,37712,$vararg_buffer19)|0);
  $91 = HEAP32[$4>>2]|0;
  (_pputs($91,32904)|0);
  STACKTOP = sp;return;
 }
}
function _least_significant_coeff($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $k = 0, $or$cond = 0, $tmin = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $x = sp + 8|0;
 $tmin = sp;
 $i = sp + 20|0;
 $k = sp + 16|0;
 HEAP32[$1>>2] = $pmod;
 HEAPF64[$tmin>>3] = 3.20000000000000017764;
 HEAP32[$k>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_gretl_list_separator_position($4)|0);
 $6 = ($5|0)>(0);
 if ($6) {
  HEAP32[$0>>2] = 0;
  $64 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($64|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 64|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$i>>2] = $9;
 while(1) {
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$i>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 80|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $20 > 0.0;
  if ($21) {
   $22 = HEAP32[$i>>2]|0;
   $23 = HEAP32[$1>>2]|0;
   $24 = (($23) + 76|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($22<<3)|0);
   $27 = +HEAPF64[$26>>3];
   $28 = HEAP32[$i>>2]|0;
   $29 = HEAP32[$1>>2]|0;
   $30 = (($29) + 80|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + ($28<<3)|0);
   $33 = +HEAPF64[$32>>3];
   $34 = $27 / $33;
   $35 = (+Math_abs((+$34)));
   HEAPF64[$x>>3] = $35;
   $36 = +HEAPF64[$x>>3];
   $37 = +HEAPF64[$tmin>>3];
   $38 = $36 < $37;
   if ($38) {
    $39 = +HEAPF64[$x>>3];
    HEAPF64[$tmin>>3] = $39;
    $40 = HEAP32[$i>>2]|0;
    HEAP32[$k>>2] = $40;
   }
  }
  $41 = HEAP32[$i>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$i>>2] = $42;
 }
 $43 = +HEAPF64[$tmin>>3];
 $44 = $43 < 3.20000000000000017764;
 if ($44) {
  $45 = HEAP32[$1>>2]|0;
  $46 = (($45) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = +HEAPF64[$tmin>>3];
  $49 = HEAP32[$1>>2]|0;
  $50 = (($49) + 56|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (+_coeff_pval($47,$48,$51));
  HEAPF64[$x>>3] = $52;
  $53 = +HEAPF64[$x>>3];
  $54 = $53 != 1.79769313486231570815E+308;
  $55 = +HEAPF64[$x>>3];
  $56 = $55 > 0.100000000000000005551;
  $or$cond = $54 & $56;
  if ($or$cond) {
   $57 = HEAP32[$k>>2]|0;
   $58 = (($57) + 2)|0;
   $59 = HEAP32[$1>>2]|0;
   $60 = (($59) + 60|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + ($58<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP32[$0>>2] = $63;
   $64 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($64|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $64 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($64|0);
}
function _print_model_chi2_test($pmod,$x,$j,$prn) {
 $pmod = $pmod|0;
 $x = +$x;
 $j = $j|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $df = 0, $or$cond = 0;
 var $pv = 0, $strs = 0, $texstrs = 0, $vararg_buffer39 = 0, $vararg_ptr11 = 0, $vararg_ptr18 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer39 = sp + 16|0;
 $0 = sp + 92|0;
 $1 = sp + 8|0;
 $2 = sp + 88|0;
 $3 = sp + 84|0;
 $strs = sp + 64|0;
 $texstrs = sp + 44|0;
 $pv = sp;
 $df = sp + 40|0;
 HEAP32[$0>>2] = $pmod;
 HEAPF64[$1>>3] = $x;
 HEAP32[$2>>2] = $j;
 HEAP32[$3>>2] = $prn;
 ;HEAP32[$strs+0>>2]=HEAP32[38120+0>>2]|0;HEAP32[$strs+4>>2]=HEAP32[38120+4>>2]|0;HEAP32[$strs+8>>2]=HEAP32[38120+8>>2]|0;HEAP32[$strs+12>>2]=HEAP32[38120+12>>2]|0;HEAP32[$strs+16>>2]=HEAP32[38120+16>>2]|0;
 ;HEAP32[$texstrs+0>>2]=HEAP32[38160+0>>2]|0;HEAP32[$texstrs+4>>2]=HEAP32[38160+4>>2]|0;HEAP32[$texstrs+8>>2]=HEAP32[38160+8>>2]|0;HEAP32[$texstrs+12>>2]=HEAP32[38160+12>>2]|0;HEAP32[$texstrs+16>>2]=HEAP32[38160+16>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = HEAP32[$0>>2]|0;
   $7 = (_gretl_model_get_int($6,38184)|0);
   HEAP32[$df>>2] = $7;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = ($8|0)==(1);
   if ($9) {
    $10 = HEAP32[$0>>2]|0;
    $11 = (_gretl_model_get_int($10,38200)|0);
    HEAP32[$df>>2] = $11;
    break;
   }
   $12 = HEAP32[$2>>2]|0;
   $13 = ($12|0)==(2);
   if ($13) {
    $14 = HEAP32[$0>>2]|0;
    $15 = (_gretl_model_get_int($14,38208)|0);
    HEAP32[$df>>2] = $15;
    break;
   }
   $16 = HEAP32[$2>>2]|0;
   $17 = ($16|0)==(3);
   if ($17) {
    $18 = HEAP32[$0>>2]|0;
    $19 = (_gretl_model_get_int($18,38224)|0);
    HEAP32[$df>>2] = $19;
    break;
   }
   $20 = HEAP32[$2>>2]|0;
   $21 = ($20|0)==(4);
   if ($21) {
    HEAP32[$df>>2] = 1;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $22 = +HEAPF64[$1>>3];
 $23 = $22 == 1.79769313486231570815E+308;
 if (!($23)) {
  $68 = HEAP32[$df>>2]|0;
  $69 = (+($68|0));
  $70 = +HEAPF64[$1>>3];
  $71 = (+_chisq_cdf_comp($69,$70));
  HEAPF64[$pv>>3] = $71;
  $72 = +HEAPF64[$pv>>3];
  $73 = $72 == 1.79769313486231570815E+308;
  if ($73) {
   STACKTOP = sp;return;
  }
  $74 = HEAP32[$3>>2]|0;
  $75 = (_tex_format($74)|0);
  $76 = ($75|0)!=(0);
  $77 = HEAP32[$3>>2]|0;
  do {
   if ($76) {
    $78 = HEAP32[$2>>2]|0;
    $79 = (($texstrs) + ($78<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    HEAP32[$vararg_buffer39>>2] = $80;
    (_pprintf($77,38232,$vararg_buffer39)|0);
    $81 = HEAP32[$3>>2]|0;
    $82 = HEAP32[$df>>2]|0;
    $83 = +HEAPF64[$1>>3];
    $84 = +HEAPF64[$pv>>3];
    HEAP32[$vararg_buffer39>>2] = $82;
    $vararg_ptr25 = (($vararg_buffer39) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$83;HEAP32[$vararg_ptr25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr25+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $vararg_ptr26 = (($vararg_buffer39) + 12|0);
    HEAPF64[tempDoublePtr>>3]=$84;HEAP32[$vararg_ptr26>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr26+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($81,38280,$vararg_buffer39)|0);
   } else {
    $85 = (_plain_format($77)|0);
    $86 = ($85|0)!=(0);
    if (!($86)) {
     $109 = HEAP32[$3>>2]|0;
     $110 = HEAP32[$2>>2]|0;
     $111 = (($strs) + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     HEAP32[$vararg_buffer39>>2] = $112;
     (_pprintf($109,38232,$vararg_buffer39)|0);
     $113 = HEAP32[$3>>2]|0;
     $114 = HEAP32[$df>>2]|0;
     $115 = +HEAPF64[$1>>3];
     $116 = +HEAPF64[$pv>>3];
     HEAP32[$vararg_buffer39>>2] = 33432;
     $vararg_ptr42 = (($vararg_buffer39) + 4|0);
     HEAP32[$vararg_ptr42>>2] = $114;
     $vararg_ptr43 = (($vararg_buffer39) + 8|0);
     HEAPF64[tempDoublePtr>>3]=$115;HEAP32[$vararg_ptr43>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr43+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $vararg_ptr44 = (($vararg_buffer39) + 16|0);
     HEAPF64[tempDoublePtr>>3]=$116;HEAP32[$vararg_ptr44>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr44+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($113,38312,$vararg_buffer39)|0);
     break;
    }
    $87 = HEAP32[$0>>2]|0;
    $88 = (($87) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(47);
    if ($90) {
     label = 32;
    } else {
     $91 = HEAP32[$0>>2]|0;
     $92 = (($91) + 8|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ($93|0)==(127);
     if ($94) {
      $95 = HEAP32[$0>>2]|0;
      $96 = (($95) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $97 & 64;
      $99 = ($98|0)!=(0);
      if ($99) {
       label = 32;
      }
     }
    }
    if ((label|0) == 32) {
     $100 = HEAP32[$3>>2]|0;
     (_pputs($100,35736)|0);
    }
    $101 = HEAP32[$3>>2]|0;
    $102 = HEAP32[$2>>2]|0;
    $103 = (($strs) + ($102<<2)|0);
    $104 = HEAP32[$103>>2]|0;
    HEAP32[$vararg_buffer39>>2] = $104;
    (_pprintf($101,38232,$vararg_buffer39)|0);
    $105 = HEAP32[$3>>2]|0;
    $106 = HEAP32[$df>>2]|0;
    $107 = +HEAPF64[$1>>3];
    $108 = +HEAPF64[$pv>>3];
    HEAP32[$vararg_buffer39>>2] = 33432;
    $vararg_ptr33 = (($vararg_buffer39) + 4|0);
    HEAP32[$vararg_ptr33>>2] = $106;
    $vararg_ptr34 = (($vararg_buffer39) + 8|0);
    HEAPF64[tempDoublePtr>>3]=$107;HEAP32[$vararg_ptr34>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr34+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $vararg_ptr35 = (($vararg_buffer39) + 16|0);
    HEAPF64[tempDoublePtr>>3]=$108;HEAP32[$vararg_ptr35>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr35+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($105,38312,$vararg_buffer39)|0);
   }
  } while(0);
  $117 = HEAP32[$3>>2]|0;
  _gretl_prn_newline($117);
  STACKTOP = sp;return;
 }
 $24 = HEAP32[$2>>2]|0;
 $25 = ($24|0)==(0);
 $26 = HEAP32[$2>>2]|0;
 $27 = ($26|0)==(1);
 $or$cond = $25 | $27;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$df>>2]|0;
 $29 = ($28|0)<(0);
 if ($29) {
  HEAP32[$df>>2] = 0;
 }
 $30 = HEAP32[$3>>2]|0;
 $31 = (_tex_format($30)|0);
 $32 = ($31|0)!=(0);
 $33 = HEAP32[$3>>2]|0;
 do {
  if ($32) {
   $34 = HEAP32[$2>>2]|0;
   $35 = (($texstrs) + ($34<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$vararg_buffer39>>2] = $36;
   (_pprintf($33,38232,$vararg_buffer39)|0);
   $37 = HEAP32[$3>>2]|0;
   $38 = HEAP32[$df>>2]|0;
   HEAP32[$vararg_buffer39>>2] = $38;
   (_pprintf($37,38240,$vararg_buffer39)|0);
  } else {
   $39 = (_plain_format($33)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    $61 = HEAP32[$3>>2]|0;
    $62 = HEAP32[$2>>2]|0;
    $63 = (($strs) + ($62<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    HEAP32[$vararg_buffer39>>2] = $64;
    (_pprintf($61,38232,$vararg_buffer39)|0);
    $65 = HEAP32[$3>>2]|0;
    $66 = HEAP32[$df>>2]|0;
    HEAP32[$vararg_buffer39>>2] = 33432;
    $vararg_ptr18 = (($vararg_buffer39) + 4|0);
    HEAP32[$vararg_ptr18>>2] = $66;
    (_pprintf($65,38264,$vararg_buffer39)|0);
    break;
   }
   $41 = HEAP32[$0>>2]|0;
   $42 = (($41) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(47);
   if ($44) {
    label = 21;
   } else {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(127);
    if ($48) {
     $49 = HEAP32[$0>>2]|0;
     $50 = (($49) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $51 & 64;
     $53 = ($52|0)!=(0);
     if ($53) {
      label = 21;
     }
    }
   }
   if ((label|0) == 21) {
    $54 = HEAP32[$3>>2]|0;
    (_pputs($54,35736)|0);
   }
   $55 = HEAP32[$3>>2]|0;
   $56 = HEAP32[$2>>2]|0;
   $57 = (($strs) + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$vararg_buffer39>>2] = $58;
   (_pprintf($55,38232,$vararg_buffer39)|0);
   $59 = HEAP32[$3>>2]|0;
   $60 = HEAP32[$df>>2]|0;
   HEAP32[$vararg_buffer39>>2] = 33432;
   $vararg_ptr11 = (($vararg_buffer39) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $60;
   (_pprintf($59,38264,$vararg_buffer39)|0);
  }
 } while(0);
 $67 = HEAP32[$3>>2]|0;
 _gretl_prn_newline($67);
 STACKTOP = sp;return;
}
function _print_panel_AR_test($z,$order,$prn) {
 $z = +$z;
 $order = $order|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $numstr = 0, $pv = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer5 = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $pv = sp;
 $numstr = sp + 40|0;
 HEAPF64[$0>>3] = $z;
 HEAP32[$1>>2] = $order;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $4;
 (_pprintf($3,39272,$vararg_buffer5)|0);
 $5 = +HEAPF64[$0>>3];
 $6 = $5 == 1.79769313486231570815E+308;
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  $8 = (_tex_format($7)|0);
  $9 = ($8|0)!=(0);
  $10 = HEAP32[$2>>2]|0;
  if ($9) {
   (_pputs($10,39296)|0);
   $22 = HEAP32[$2>>2]|0;
   _gretl_prn_newline($22);
   STACKTOP = sp;return;
  } else {
   (_pputs($10,39312)|0);
   $22 = HEAP32[$2>>2]|0;
   _gretl_prn_newline($22);
   STACKTOP = sp;return;
  }
 } else {
  $11 = +HEAPF64[$0>>3];
  $12 = (+_normal_pvalue_2($11));
  HEAPF64[$pv>>3] = $12;
  $13 = HEAP32[$2>>2]|0;
  $14 = (_tex_format($13)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = +HEAPF64[$0>>3];
   (_tex_sprint_double_digits($16,$numstr,4)|0);
   $17 = HEAP32[$2>>2]|0;
   $18 = +HEAPF64[$pv>>3];
   HEAP32[$vararg_buffer5>>2] = $numstr;
   $vararg_ptr4 = (($vararg_buffer5) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$18;HEAP32[$vararg_ptr4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr4+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($17,39320,$vararg_buffer5)|0);
   $22 = HEAP32[$2>>2]|0;
   _gretl_prn_newline($22);
   STACKTOP = sp;return;
  } else {
   $19 = HEAP32[$2>>2]|0;
   $20 = +HEAPF64[$0>>3];
   $21 = +HEAPF64[$pv>>3];
   HEAPF64[tempDoublePtr>>3]=$20;HEAP32[$vararg_buffer5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer5+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr8 = (($vararg_buffer5) + 8|0);
   HEAPF64[tempDoublePtr>>3]=$21;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_pprintf($19,39344,$vararg_buffer5)|0);
   $22 = HEAP32[$2>>2]|0;
   _gretl_prn_newline($22);
   STACKTOP = sp;return;
  }
 }
}
function _GMM_crit_line($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $Q = 0, $TQ = 0, $vararg_buffer15 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
 var $x1 = 0, $x2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer15 = sp + 16|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $Q = sp + 8|0;
 $TQ = sp;
 $x1 = sp + 88|0;
 $x2 = sp + 56|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 104|0);
 $4 = +HEAPF64[$3>>3];
 HEAPF64[$Q>>3] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 104|0);
 $7 = +HEAPF64[$6>>3];
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (+($10|0));
 $12 = $7 * $11;
 HEAPF64[$TQ>>3] = $12;
 $13 = HEAP32[$1>>2]|0;
 $14 = (_plain_format($13)|0);
 $15 = ($14|0)!=(0);
 $16 = HEAP32[$1>>2]|0;
 if ($15) {
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(81);
  $21 = $20 ? 12 : 6;
  $22 = +HEAPF64[$Q>>3];
  $23 = HEAP32[$0>>2]|0;
  $24 = (($23) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(81);
  $27 = $26 ? 12 : 6;
  $28 = +HEAPF64[$TQ>>3];
  HEAP32[$vararg_buffer15>>2] = 39400;
  $vararg_ptr1 = (($vararg_buffer15) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $21;
  $vararg_ptr2 = (($vararg_buffer15) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$22;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr3 = (($vararg_buffer15) + 16|0);
  HEAP32[$vararg_ptr3>>2] = $27;
  $vararg_ptr4 = (($vararg_buffer15) + 20|0);
  HEAPF64[tempDoublePtr>>3]=$28;HEAP32[$vararg_ptr4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr4+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($16,39368,$vararg_buffer15)|0);
  STACKTOP = sp;return 0;
 }
 $29 = (_rtf_format($16)|0);
 $30 = ($29|0)!=(0);
 $31 = HEAP32[$1>>2]|0;
 if ($30) {
  $32 = +HEAPF64[$Q>>3];
  $33 = +HEAPF64[$TQ>>3];
  HEAP32[$vararg_buffer15>>2] = 39400;
  $vararg_ptr8 = (($vararg_buffer15) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$32;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr9 = (($vararg_buffer15) + 12|0);
  HEAPF64[tempDoublePtr>>3]=$33;HEAP32[$vararg_ptr9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_pprintf($31,39416,$vararg_buffer15)|0);
  STACKTOP = sp;return 0;
 }
 $34 = (_tex_format($31)|0);
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = +HEAPF64[$Q>>3];
  (_tex_sprint_double($36,$x1)|0);
  $37 = +HEAPF64[$TQ>>3];
  (_tex_sprint_double($37,$x2)|0);
  $38 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer15>>2] = 39400;
  $vararg_ptr13 = (($vararg_buffer15) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $x1;
  $vararg_ptr14 = (($vararg_buffer15) + 8|0);
  HEAP32[$vararg_ptr14>>2] = $x2;
  (_pprintf($38,39456,$vararg_buffer15)|0);
  STACKTOP = sp;return 0;
 }
 $39 = HEAP32[$1>>2]|0;
 $40 = (_csv_format($39)|0);
 $41 = ($40|0)!=(0);
 if (!($41)) {
  STACKTOP = sp;return 0;
 }
 $42 = HEAP32[$1>>2]|0;
 $43 = HEAP32[$1>>2]|0;
 $44 = (_prn_delim($43)|0);
 $45 = $44 << 24 >> 24;
 $46 = +HEAPF64[$Q>>3];
 HEAP32[$vararg_buffer15>>2] = 39400;
 $vararg_ptr18 = (($vararg_buffer15) + 4|0);
 HEAP32[$vararg_ptr18>>2] = $45;
 $vararg_ptr19 = (($vararg_buffer15) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$46;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_pprintf($42,33192,$vararg_buffer15)|0);
 STACKTOP = sp;return 0;
}
function _maybe_remedy_translations($S,$n) {
 $S = $S|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $old_key = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $old_key = sp + 8|0;
 $i = sp;
 HEAP32[$0>>2] = $S;
 HEAP32[$1>>2] = $n;
 dest=$old_key+0|0; src=42216+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$i>>2]|0;
  $6 = (($old_key) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = HEAP32[$i>>2]|0;
   $10 = HEAP32[$0>>2]|0;
   $11 = (($10) + ($9<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_string_is_translated($12)|0);
   $14 = ($13|0)!=(0);
   if (!($14)) {
    $15 = HEAP32[$i>>2]|0;
    $16 = (($old_key) + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$i>>2]|0;
    $19 = (($old_key) + ($18<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_strcmp($17,$20)|0);
    $22 = ($21|0)!=(0);
    if ($22) {
     $23 = HEAP32[$i>>2]|0;
     $24 = (($old_key) + ($23<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$i>>2]|0;
     $27 = HEAP32[$0>>2]|0;
     $28 = (($27) + ($26<<2)|0);
     HEAP32[$28>>2] = $25;
    }
   }
  }
  $29 = HEAP32[$i>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$i>>2] = $30;
 }
 STACKTOP = sp;return;
}
function _durbins_h($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $T = 0, $h = 0, $ldv = 0;
 var $se = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $ldv = sp + 20|0;
 $se = sp + 8|0;
 $T = sp + 16|0;
 $h = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_gretl_model_get_int($1,41120)|0);
 HEAP32[$ldv>>2] = $2;
 $3 = HEAP32[$ldv>>2]|0;
 $4 = (($3) - 2)|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 80|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4<<3)|0);
 $9 = +HEAPF64[$8>>3];
 HEAPF64[$se>>3] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$T>>2] = $12;
 HEAPF64[$h>>3] = 1.79769313486231570815E+308;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 104|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $15 <= 0.0;
 if ($16) {
  $56 = +HEAPF64[$h>>3];
  STACKTOP = sp;return (+$56);
 }
 $17 = +HEAPF64[$se>>3];
 $18 = $17 == 1.79769313486231570815E+308;
 if ($18) {
  $56 = +HEAPF64[$h>>3];
  STACKTOP = sp;return (+$56);
 }
 $19 = HEAP32[$T>>2]|0;
 $20 = (+($19|0));
 $21 = +HEAPF64[$se>>3];
 $22 = $20 * $21;
 $23 = +HEAPF64[$se>>3];
 $24 = $22 * $23;
 $25 = $24 >= 1.0;
 if ($25) {
  $56 = +HEAPF64[$h>>3];
  STACKTOP = sp;return (+$56);
 }
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + 216|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $28 == 1.79769313486231570815E+308;
 if ($29) {
  $56 = +HEAPF64[$h>>3];
  STACKTOP = sp;return (+$56);
 }
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + 216|0);
 $32 = +HEAPF64[$31>>3];
 $33 = HEAP32[$T>>2]|0;
 $34 = (+($33|0));
 $35 = HEAP32[$T>>2]|0;
 $36 = (+($35|0));
 $37 = +HEAPF64[$se>>3];
 $38 = $36 * $37;
 $39 = +HEAPF64[$se>>3];
 $40 = $38 * $39;
 $41 = 1.0 - $40;
 $42 = $34 / $41;
 $43 = (+Math_sqrt((+$42)));
 $44 = $32 * $43;
 HEAPF64[$h>>3] = $44;
 $45 = +HEAPF64[$h>>3];
 $46 = $45 == 1.79769313486231570815E+308;
 if (!($46)) {
  $47 = +HEAPF64[$h>>3];
  $48 = (___DOUBLE_BITS6783($47)|0);
  $49 = tempRet0;
  $50 = $49 & 2147483647;
  $51 = ($50>>>0)<(2146435072);
  $52 = ($50|0)==(2146435072);
  $53 = ($48>>>0)<(0);
  $54 = $52 & $53;
  $55 = $51 | $54;
  if ($55) {
   $56 = +HEAPF64[$h>>3];
   STACKTOP = sp;return (+$56);
  }
 }
 HEAPF64[$h>>3] = 1.79769313486231570815E+308;
 $56 = +HEAPF64[$h>>3];
 STACKTOP = sp;return (+$56);
}
function _set_mtab_string_width($mt) {
 $mt = $mt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $badkey = 0, $i = 0, $j = 0, $len = 0;
 var $maxlen = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp;
 $0 = sp + 28|0;
 $len = sp + 24|0;
 $badkey = sp + 20|0;
 $maxlen = sp + 16|0;
 $i = sp + 12|0;
 $j = sp + 8|0;
 HEAP32[$0>>2] = $mt;
 HEAP32[$badkey>>2] = 0;
 HEAP32[$maxlen>>2] = 0;
 HEAP32[$i>>2] = 0;
 HEAP32[$j>>2] = 0;
 while(1) {
  $1 = HEAP32[$i>>2]|0;
  $2 = ($1|0)<(7);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$j>>2]|0;
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($3<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = $8 == 1.79769313486231570815E+308;
  if (!($9)) {
   $10 = HEAP32[$j>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($10<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_g_utf8_strlen($14,-1)|0);
   HEAP32[$len>>2] = $15;
   $16 = HEAP32[$len>>2]|0;
   $17 = HEAP32[$maxlen>>2]|0;
   $18 = ($16|0)>($17|0);
   if ($18) {
    $19 = HEAP32[$len>>2]|0;
    HEAP32[$maxlen>>2] = $19;
    $20 = HEAP32[$j>>2]|0;
    HEAP32[$badkey>>2] = $20;
   }
   $21 = HEAP32[$j>>2]|0;
   $22 = (($21) + 1)|0;
   $23 = HEAP32[$0>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($22<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_g_utf8_strlen($26,-1)|0);
   HEAP32[$len>>2] = $27;
   $28 = HEAP32[$len>>2]|0;
   $29 = HEAP32[$maxlen>>2]|0;
   $30 = ($28|0)>($29|0);
   if ($30) {
    $31 = HEAP32[$len>>2]|0;
    HEAP32[$maxlen>>2] = $31;
    $32 = HEAP32[$j>>2]|0;
    $33 = (($32) + 1)|0;
    HEAP32[$badkey>>2] = $33;
   }
  }
  $34 = HEAP32[$i>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$i>>2] = $35;
  $36 = HEAP32[$j>>2]|0;
  $37 = (($36) + 2)|0;
  HEAP32[$j>>2] = $37;
 }
 $38 = HEAP32[$maxlen>>2]|0;
 $39 = ($38|0)>(22);
 if (!($39)) {
  $53 = HEAP32[$maxlen>>2]|0;
  $54 = HEAP32[$0>>2]|0;
  $55 = (($54) + 12|0);
  HEAP32[$55>>2] = $53;
  STACKTOP = sp;return;
 }
 $40 = HEAP32[_stderr>>2]|0;
 $41 = HEAP32[$maxlen>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $41;
 (_fprintf(($40|0),(41808|0),($vararg_buffer1|0))|0);
 $42 = HEAP32[_stderr>>2]|0;
 $43 = HEAP32[$badkey>>2]|0;
 $44 = HEAP32[$0>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($43<<2)|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$badkey>>2]|0;
 $49 = HEAP32[$0>>2]|0;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + ($48<<2)|0);
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $47;
 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $52;
 (_fprintf(($42|0),(41912|0),($vararg_buffer1|0))|0);
 $53 = HEAP32[$maxlen>>2]|0;
 $54 = HEAP32[$0>>2]|0;
 $55 = (($54) + 12|0);
 HEAP32[$55>>2] = $53;
 STACKTOP = sp;return;
}
function _middle_table_row($mt,$j,$prn) {
 $mt = $mt|0;
 $j = $j|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k = 0, $s1 = 0, $s2 = 0, $vararg_buffer39 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0;
 var $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $x1 = 0, $x2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer39 = sp;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $s1 = sp + 36|0;
 $s2 = sp + 32|0;
 $x1 = sp + 104|0;
 $x2 = sp + 56|0;
 $k = sp + 28|0;
 HEAP32[$0>>2] = $mt;
 HEAP32[$1>>2] = $j;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$s1>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$s2>>2] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$k>>2] = $15;
 $16 = HEAP32[$2>>2]|0;
 $17 = (_tex_format($16)|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 80|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0);
  $23 = HEAP32[$2>>2]|0;
  $24 = HEAP32[$s1>>2]|0;
  if ($22) {
   $25 = HEAP32[$1>>2]|0;
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($25<<3)|0);
   $30 = +HEAPF64[$29>>3];
   $31 = HEAP32[$0>>2]|0;
   $32 = (($31) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (_print_fifteen($x1,$30,$33)|0);
   $35 = HEAP32[$s2>>2]|0;
   $36 = HEAP32[$k>>2]|0;
   $37 = HEAP32[$0>>2]|0;
   $38 = (($37) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36<<3)|0);
   $41 = +HEAPF64[$40>>3];
   $42 = HEAP32[$0>>2]|0;
   $43 = (($42) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (_print_fifteen($x2,$41,$44)|0);
   HEAP32[$vararg_buffer39>>2] = $24;
   $vararg_ptr1 = (($vararg_buffer39) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $34;
   $vararg_ptr2 = (($vararg_buffer39) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $35;
   $vararg_ptr3 = (($vararg_buffer39) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $45;
   (_pprintf($23,41296,$vararg_buffer39)|0);
   STACKTOP = sp;return;
  } else {
   $46 = HEAP32[$0>>2]|0;
   $47 = HEAP32[$1>>2]|0;
   $48 = (_print_eight($x1,$46,$47)|0);
   $49 = HEAP32[$s2>>2]|0;
   $50 = HEAP32[$0>>2]|0;
   $51 = HEAP32[$k>>2]|0;
   $52 = (_print_eight($x2,$50,$51)|0);
   HEAP32[$vararg_buffer39>>2] = $24;
   $vararg_ptr7 = (($vararg_buffer39) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $48;
   $vararg_ptr8 = (($vararg_buffer39) + 8|0);
   HEAP32[$vararg_ptr8>>2] = $49;
   $vararg_ptr9 = (($vararg_buffer39) + 12|0);
   HEAP32[$vararg_ptr9>>2] = $52;
   (_pprintf($23,41320,$vararg_buffer39)|0);
   STACKTOP = sp;return;
  }
 }
 $53 = HEAP32[$2>>2]|0;
 $54 = (_rtf_format($53)|0);
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = HEAP32[$0>>2]|0;
  $57 = (($56) + 80|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)!=(0);
  $60 = HEAP32[$2>>2]|0;
  if ($59) {
   (_pputs($60,41344)|0);
   $61 = HEAP32[$2>>2]|0;
   $62 = HEAP32[$s1>>2]|0;
   $63 = HEAP32[$1>>2]|0;
   $64 = HEAP32[$0>>2]|0;
   $65 = (($64) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($66) + ($63<<3)|0);
   $68 = +HEAPF64[$67>>3];
   $69 = HEAP32[$0>>2]|0;
   $70 = (($69) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (_print_fifteen($x1,$68,$71)|0);
   HEAP32[$vararg_buffer39>>2] = $62;
   $vararg_ptr13 = (($vararg_buffer39) + 4|0);
   HEAP32[$vararg_ptr13>>2] = $72;
   (_pprintf($61,41408,$vararg_buffer39)|0);
   $73 = HEAP32[$2>>2]|0;
   (_pputs($73,41344)|0);
   $74 = HEAP32[$2>>2]|0;
   $75 = HEAP32[$s2>>2]|0;
   $76 = HEAP32[$k>>2]|0;
   $77 = HEAP32[$0>>2]|0;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + ($76<<3)|0);
   $81 = +HEAPF64[$80>>3];
   $82 = HEAP32[$0>>2]|0;
   $83 = (($82) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (_print_fifteen($x1,$81,$84)|0);
   HEAP32[$vararg_buffer39>>2] = $75;
   $vararg_ptr17 = (($vararg_buffer39) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $85;
   (_pprintf($74,41408,$vararg_buffer39)|0);
   STACKTOP = sp;return;
  } else {
   (_pputs($60,41448)|0);
   $86 = HEAP32[$2>>2]|0;
   $87 = HEAP32[$s1>>2]|0;
   $88 = HEAP32[$0>>2]|0;
   $89 = HEAP32[$1>>2]|0;
   $90 = (_print_eight($x1,$88,$89)|0);
   $91 = HEAP32[$s2>>2]|0;
   $92 = HEAP32[$0>>2]|0;
   $93 = HEAP32[$k>>2]|0;
   $94 = (_print_eight($x2,$92,$93)|0);
   HEAP32[$vararg_buffer39>>2] = $87;
   $vararg_ptr21 = (($vararg_buffer39) + 4|0);
   HEAP32[$vararg_ptr21>>2] = $90;
   $vararg_ptr22 = (($vararg_buffer39) + 8|0);
   HEAP32[$vararg_ptr22>>2] = $91;
   $vararg_ptr23 = (($vararg_buffer39) + 12|0);
   HEAP32[$vararg_ptr23>>2] = $94;
   (_pprintf($86,41544,$vararg_buffer39)|0);
   STACKTOP = sp;return;
  }
 }
 $95 = HEAP32[$2>>2]|0;
 $96 = (_csv_format($95)|0);
 $97 = ($96|0)!=(0);
 if ($97) {
  $98 = HEAP32[$2>>2]|0;
  $99 = HEAP32[$s1>>2]|0;
  $100 = HEAP32[$0>>2]|0;
  $101 = (($100) + 76|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = HEAP32[$1>>2]|0;
  $104 = HEAP32[$0>>2]|0;
  $105 = (($104) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + ($103<<3)|0);
  $108 = +HEAPF64[$107>>3];
  $109 = (_print_csv($x1,$108)|0);
  $110 = HEAP32[$0>>2]|0;
  $111 = (($110) + 76|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = HEAP32[$s2>>2]|0;
  $114 = HEAP32[$0>>2]|0;
  $115 = (($114) + 76|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = HEAP32[$k>>2]|0;
  $118 = HEAP32[$0>>2]|0;
  $119 = (($118) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + ($117<<3)|0);
  $122 = +HEAPF64[$121>>3];
  $123 = (_print_csv($x2,$122)|0);
  HEAP32[$vararg_buffer39>>2] = $99;
  $vararg_ptr27 = (($vararg_buffer39) + 4|0);
  HEAP32[$vararg_ptr27>>2] = $102;
  $vararg_ptr28 = (($vararg_buffer39) + 8|0);
  HEAP32[$vararg_ptr28>>2] = $109;
  $vararg_ptr29 = (($vararg_buffer39) + 12|0);
  HEAP32[$vararg_ptr29>>2] = $112;
  $vararg_ptr30 = (($vararg_buffer39) + 16|0);
  HEAP32[$vararg_ptr30>>2] = $113;
  $vararg_ptr31 = (($vararg_buffer39) + 20|0);
  HEAP32[$vararg_ptr31>>2] = $116;
  $vararg_ptr32 = (($vararg_buffer39) + 24|0);
  HEAP32[$vararg_ptr32>>2] = $123;
  (_pprintf($98,41616,$vararg_buffer39)|0);
  STACKTOP = sp;return;
 }
 $124 = HEAP32[$0>>2]|0;
 $125 = (($124) + 72|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ($126|0)!=(0);
 if ($127) {
  label = 13;
 } else {
  $128 = HEAP32[$0>>2]|0;
  $129 = (($128) + 80|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ($130|0)!=(0);
  if ($131) {
   label = 13;
  }
 }
 if ((label|0) == 13) {
  $132 = HEAP32[$0>>2]|0;
  $133 = HEAP32[$1>>2]|0;
  _middletab_prepare_format($132,$133);
 }
 $134 = HEAP32[$0>>2]|0;
 $135 = (($134) + 80|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)!=(0);
 $138 = HEAP32[$2>>2]|0;
 $139 = HEAP32[$0>>2]|0;
 $140 = (($139) + 84|0);
 $141 = HEAP32[$s1>>2]|0;
 if ($137) {
  $142 = HEAP32[$1>>2]|0;
  $143 = HEAP32[$0>>2]|0;
  $144 = (($143) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($145) + ($142<<3)|0);
  $147 = +HEAPF64[$146>>3];
  $148 = HEAP32[$0>>2]|0;
  $149 = (($148) + 8|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (_print_fifteen($x1,$147,$150)|0);
  $152 = HEAP32[$s2>>2]|0;
  $153 = HEAP32[$k>>2]|0;
  $154 = HEAP32[$0>>2]|0;
  $155 = (($154) + 4|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (($156) + ($153<<3)|0);
  $158 = +HEAPF64[$157>>3];
  $159 = HEAP32[$0>>2]|0;
  $160 = (($159) + 8|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (_print_fifteen($x2,$158,$161)|0);
  HEAP32[$vararg_buffer39>>2] = $141;
  $vararg_ptr36 = (($vararg_buffer39) + 4|0);
  HEAP32[$vararg_ptr36>>2] = $151;
  $vararg_ptr37 = (($vararg_buffer39) + 8|0);
  HEAP32[$vararg_ptr37>>2] = $152;
  $vararg_ptr38 = (($vararg_buffer39) + 12|0);
  HEAP32[$vararg_ptr38>>2] = $162;
  (_pprintf($138,$140,$vararg_buffer39)|0);
  STACKTOP = sp;return;
 } else {
  $163 = HEAP32[$0>>2]|0;
  $164 = HEAP32[$1>>2]|0;
  $165 = (_print_eight($x1,$163,$164)|0);
  $166 = HEAP32[$s2>>2]|0;
  $167 = HEAP32[$0>>2]|0;
  $168 = HEAP32[$k>>2]|0;
  $169 = (_print_eight($x2,$167,$168)|0);
  HEAP32[$vararg_buffer39>>2] = $141;
  $vararg_ptr42 = (($vararg_buffer39) + 4|0);
  HEAP32[$vararg_ptr42>>2] = $165;
  $vararg_ptr43 = (($vararg_buffer39) + 8|0);
  HEAP32[$vararg_ptr43>>2] = $166;
  $vararg_ptr44 = (($vararg_buffer39) + 12|0);
  HEAP32[$vararg_ptr44>>2] = $169;
  (_pprintf($138,$140,$vararg_buffer39)|0);
  STACKTOP = sp;return;
 }
}
function _print_eight($s,$mt,$i) {
 $s = $s|0;
 $mt = $mt|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $ax = 0, $d7 = 0, $ldig = 0, $lx = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $tmp = 0, $vararg_buffer25 = 0, $vararg_ptr28 = 0, $x = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer25 = sp + 24|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $ax = sp + 16|0;
 $x = sp + 8|0;
 $d7 = sp + 44|0;
 $tmp = sp + 64|0;
 $p = sp + 40|0;
 $lx = sp;
 $ldig = sp + 36|0;
 HEAP32[$1>>2] = $s;
 HEAP32[$2>>2] = $mt;
 HEAP32[$3>>2] = $i;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4<<3)|0);
 $9 = +HEAPF64[$8>>3];
 HEAPF64[$x>>3] = $9;
 $10 = +HEAPF64[$x>>3];
 $11 = $10 < 0.0;
 if ($11) {
  $12 = +HEAPF64[$x>>3];
  $13 = -$12;
  $14 = $13 > 999999.0;
  if ($14) {
   $15 = +HEAPF64[$x>>3];
   $16 = -$15;
   $17 = $16 < 1.0E+8;
   $19 = $17;
  } else {
   $19 = 0;
  }
 } else {
  $19 = 0;
 }
 $18 = $19&1;
 HEAP32[$d7>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 $21 = HEAP32[$2>>2]|0;
 $22 = (($21) + 16|0);
 $23 = (($22) + ($20<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = HEAP32[$1>>2]|0;
  $27 = +HEAPF64[$x>>3];
  $28 = (~~(($27)));
  HEAP32[$vararg_buffer25>>2] = $28;
  (_sprintf($26,41712,$vararg_buffer25)|0);
  $29 = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = $29;
  $108 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($108|0);
 }
 $30 = +HEAPF64[$x>>3];
 $31 = $30 == 1.79769313486231570815E+308;
 if ($31) {
  $32 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer25>>2] = 41696;
  (_sprintf($32,41720,$vararg_buffer25)|0);
  $33 = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = $33;
  $108 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($108|0);
 }
 $34 = HEAP32[$3>>2]|0;
 $35 = ($34|0)==(4);
 $36 = HEAP32[$3>>2]|0;
 $37 = ($36|0)==(5);
 $or$cond = $35 | $37;
 $38 = HEAP32[$1>>2]|0;
 $39 = +HEAPF64[$x>>3];
 if ($or$cond) {
  HEAPF64[tempDoublePtr>>3]=$39;HEAP32[$vararg_buffer25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer25+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($38,41728,$vararg_buffer25)|0);
  $40 = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = $40;
  $108 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($108|0);
 }
 $41 = HEAP32[$d7>>2]|0;
 $42 = HEAP32[$2>>2]|0;
 $43 = (($42) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 _mtab_numstart($38,$39,$41,$44);
 $45 = +HEAPF64[$x>>3];
 $46 = (+Math_abs((+$45)));
 HEAPF64[$ax>>3] = $46;
 $47 = HEAP32[$d7>>2]|0;
 $48 = ($47|0)!=(0);
 do {
  if ($48) {
   $49 = +HEAPF64[$ax>>3];
   HEAPF64[tempDoublePtr>>3]=$49;HEAP32[$vararg_buffer25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer25+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($tmp,41736,$vararg_buffer25)|0);
  } else {
   $50 = +HEAPF64[$ax>>3];
   $51 = $50 < 1.0000000000000000818E-5;
   $52 = +HEAPF64[$ax>>3];
   $53 = $52 > 99999999.0;
   $or$cond3 = $51 | $53;
   if (!($or$cond3)) {
    $75 = +HEAPF64[$ax>>3];
    $76 = $75 < 10.0;
    if ($76) {
     $77 = +HEAPF64[$ax>>3];
     HEAPF64[tempDoublePtr>>3]=$77;HEAP32[$vararg_buffer25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer25+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_sprintf($tmp,41752,$vararg_buffer25)|0);
     break;
    } else {
     $78 = +HEAPF64[$ax>>3];
     $79 = (+_log10((+$78)));
     HEAPF64[$lx>>3] = $79;
     $80 = +HEAPF64[$lx>>3];
     $81 = (+Math_ceil((+$80)));
     $82 = +HEAPF64[$lx>>3];
     $83 = +HEAPF64[$lx>>3];
     $84 = (+Math_floor((+$83)));
     $85 = $82 == $84;
     $86 = $85&1;
     $87 = (+($86|0));
     $88 = $81 + $87;
     $89 = (~~(($88)));
     HEAP32[$ldig>>2] = $89;
     $90 = HEAP32[$ldig>>2]|0;
     $91 = ($90|0)>(7);
     $92 = HEAP32[$ldig>>2]|0;
     $93 = $91 ? 7 : $92;
     HEAP32[$ldig>>2] = $93;
     $94 = HEAP32[$ldig>>2]|0;
     $95 = (8 - ($94))|0;
     $96 = (($95) - 1)|0;
     $97 = +HEAPF64[$ax>>3];
     HEAP32[$vararg_buffer25>>2] = $96;
     $vararg_ptr28 = (($vararg_buffer25) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$97;HEAP32[$vararg_ptr28>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr28+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_sprintf($tmp,41768,$vararg_buffer25)|0);
     break;
    }
   }
   $54 = +HEAPF64[$ax>>3];
   HEAPF64[tempDoublePtr>>3]=$54;HEAP32[$vararg_buffer25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer25+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($tmp,41744,$vararg_buffer25)|0);
   $55 = +HEAPF64[$ax>>3];
   $56 = $55 < 1.0;
   $57 = $56 ? 45 : 43;
   $58 = (_strrchr($tmp,$57)|0);
   HEAP32[$p>>2] = $58;
   $59 = HEAP32[$p>>2]|0;
   $60 = ($59|0)==(0|0);
   if ($60) {
    $61 = +HEAPF64[$ax>>3];
    HEAPF64[tempDoublePtr>>3]=$61;HEAP32[$vararg_buffer25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer25+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($tmp,41752,$vararg_buffer25)|0);
    break;
   }
   $62 = HEAP32[$p>>2]|0;
   $63 = (_strlen(($62|0))|0);
   $64 = ($63|0)==(4);
   if ($64) {
    $65 = HEAP32[$p>>2]|0;
    $66 = (($65) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $69 = ($68|0)==(48);
    if ($69) {
     $70 = HEAP32[$p>>2]|0;
     $71 = (($70) + 1|0);
     $72 = HEAP32[$p>>2]|0;
     $73 = (($72) + 2|0);
     ;HEAP8[$71+0>>0]=HEAP8[$73+0>>0]|0;HEAP8[$71+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$71+2>>0]=HEAP8[$73+2>>0]|0;
     break;
    } else {
     $74 = +HEAPF64[$ax>>3];
     HEAPF64[tempDoublePtr>>3]=$74;HEAP32[$vararg_buffer25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer25+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_sprintf($tmp,41760,$vararg_buffer25)|0);
     break;
    }
   }
  }
 } while(0);
 $98 = HEAP32[$1>>2]|0;
 (_strcat(($98|0),($tmp|0))|0);
 $99 = HEAP32[$2>>2]|0;
 $100 = (($99) + 8|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)==(2);
 if ($102) {
  $103 = HEAP32[$1>>2]|0;
  $104 = (_strchr($103,101)|0);
  $105 = ($104|0)!=(0|0);
  if ($105) {
   $106 = HEAP32[$1>>2]|0;
   (_tex_modify_exponent($106)|0);
  }
 }
 $107 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $107;
 $108 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($108|0);
}
function _print_csv($s,$x) {
 $s = $s|0;
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp + 8|0;
 $0 = sp + 16|0;
 $1 = sp;
 HEAP32[$0>>2] = $s;
 HEAPF64[$1>>3] = $x;
 $2 = +HEAPF64[$1>>3];
 $3 = $2 == 1.79769313486231570815E+308;
 $4 = HEAP32[$0>>2]|0;
 if ($3) {
  (_strcpy(($4|0),(41696|0))|0);
  $6 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($6|0);
 } else {
  $5 = +HEAPF64[$1>>3];
  HEAPF64[tempDoublePtr>>3]=$5;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($4,41704,$vararg_buffer)|0);
  $6 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($6|0);
 }
 return 0|0;
}
function _middletab_prepare_format($mt,$j) {
 $mt = $mt|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $d1 = 0, $d2 = 0, $len = 0, $s1 = 0, $s2 = 0, $vararg_buffer10 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $s1 = sp + 24|0;
 $s2 = sp + 20|0;
 $d1 = sp + 16|0;
 $d2 = sp + 12|0;
 $len = sp + 8|0;
 HEAP32[$0>>2] = $mt;
 HEAP32[$1>>2] = $j;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$s1>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$s2>>2] = $12;
 HEAP32[$d1>>2] = 0;
 HEAP32[$d2>>2] = 0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$len>>2] = $15;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 72|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = HEAP32[$s1>>2]|0;
  $21 = (_strlen(($20|0))|0);
  $22 = HEAP32[$s1>>2]|0;
  $23 = (_g_utf8_strlen($22,-1)|0);
  $24 = (($21) - ($23))|0;
  HEAP32[$d1>>2] = $24;
  $25 = HEAP32[$s2>>2]|0;
  $26 = (_strlen(($25|0))|0);
  $27 = HEAP32[$s2>>2]|0;
  $28 = (_g_utf8_strlen($27,-1)|0);
  $29 = (($26) - ($28))|0;
  HEAP32[$d2>>2] = $29;
 }
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + 80|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0);
 $34 = HEAP32[$len>>2]|0;
 $35 = ($34|0)<(20);
 if ($33) {
  if ($35) {
   $38 = 20;
  } else {
   $36 = HEAP32[$len>>2]|0;
   $37 = (($36) + 1)|0;
   $38 = $37;
  }
  HEAP32[$len>>2] = $38;
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 84|0);
  $41 = HEAP32[$len>>2]|0;
  $42 = HEAP32[$d1>>2]|0;
  $43 = (($41) + ($42))|0;
  $44 = HEAP32[$len>>2]|0;
  $45 = HEAP32[$d2>>2]|0;
  $46 = (($44) + ($45))|0;
  HEAP32[$vararg_buffer10>>2] = $43;
  $vararg_ptr1 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $46;
  (_sprintf($40,41640,$vararg_buffer10)|0);
  STACKTOP = sp;return;
 }
 if ($35) {
  $47 = HEAP32[$0>>2]|0;
  $48 = (($47) + 84|0);
  $49 = HEAP32[$d1>>2]|0;
  $50 = (20 + ($49))|0;
  $51 = HEAP32[$d2>>2]|0;
  $52 = (20 + ($51))|0;
  HEAP32[$vararg_buffer10>>2] = $50;
  $vararg_ptr5 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $52;
  (_sprintf($48,41672,$vararg_buffer10)|0);
  STACKTOP = sp;return;
 }
 $53 = HEAP32[$len>>2]|0;
 $54 = ($53|0)<(23);
 $55 = HEAP32[$0>>2]|0;
 $56 = (($55) + 84|0);
 $57 = HEAP32[$len>>2]|0;
 $58 = HEAP32[$d1>>2]|0;
 $59 = (($57) + ($58))|0;
 if ($54) {
  $60 = (($59) + 1)|0;
  $61 = HEAP32[$len>>2]|0;
  $62 = HEAP32[$d2>>2]|0;
  $63 = (($61) + ($62))|0;
  $64 = (($63) + 1)|0;
  HEAP32[$vararg_buffer10>>2] = $60;
  $vararg_ptr9 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $64;
  (_sprintf($56,41672,$vararg_buffer10)|0);
  STACKTOP = sp;return;
 } else {
  $65 = HEAP32[$len>>2]|0;
  $66 = HEAP32[$d2>>2]|0;
  $67 = (($65) + ($66))|0;
  HEAP32[$vararg_buffer10>>2] = $59;
  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $67;
  (_sprintf($56,41640,$vararg_buffer10)|0);
  STACKTOP = sp;return;
 }
}
function _mtab_numstart($s,$x,$d7,$minus) {
 $s = $s|0;
 $x = +$x;
 $d7 = $d7|0;
 $minus = $minus|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 HEAP32[$0>>2] = $s;
 HEAPF64[$1>>3] = $x;
 HEAP32[$2>>2] = $d7;
 HEAP32[$3>>2] = $minus;
 $4 = +HEAPF64[$1>>3];
 $5 = $4 < 0.0;
 if (!($5)) {
  $18 = HEAP32[$0>>2]|0;
  (_strcpy(($18|0),(33160|0))|0);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = HEAP32[$0>>2]|0;
  $9 = HEAP32[$2>>2]|0;
  $10 = ($9|0)!=(0);
  $11 = $10 ? 41776 : 33208;
  (_strcpy(($8|0),($11|0))|0);
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$3>>2]|0;
 $13 = ($12|0)==(2);
 $14 = HEAP32[$0>>2]|0;
 if ($13) {
  (_strcpy(($14|0),(41784|0))|0);
  STACKTOP = sp;return;
 } else {
  $15 = HEAP32[$2>>2]|0;
  $16 = ($15|0)!=(0);
  $17 = $16 ? 41792 : 41800;
  (_strcpy(($14|0),($17|0))|0);
  STACKTOP = sp;return;
 }
}
function _string_is_translated($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $s;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strcmp($2,40504)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (_strcmp($5,40520)|0);
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = HEAP32[$1>>2]|0;
   $9 = HEAP32[$1>>2]|0;
   $10 = (_strcmp($8,$9)|0);
   HEAP32[$0>>2] = $10;
   $11 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($11|0);
  }
 }
 HEAP32[$0>>2] = 1;
 $11 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function _make_obs_sep($targ,$obs,$tex) {
 $targ = $targ|0;
 $obs = $obs|0;
 $tex = $tex|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = $targ;
 HEAP32[$1>>2] = $obs;
 HEAP32[$2>>2] = $tex;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  (_strcpy(($5|0),(43280|0))|0);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = (_strchr($6,45)|0);
 $8 = ($7|0)!=(0|0);
 $9 = HEAP32[$0>>2]|0;
 if ($8) {
  (_strcpy(($9|0),(46136|0))|0);
  STACKTOP = sp;return;
 } else {
  (_strcpy(($9|0),(41800|0))|0);
  STACKTOP = sp;return;
 }
}
function _print_aux_string($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $aux = 0, $close = 0, $csv = 0, $plain = 0, $tex = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $aux = sp + 20|0;
 $plain = sp + 16|0;
 $tex = sp + 12|0;
 $csv = sp + 8|0;
 $close = sp + 4|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$aux>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (_plain_format($5)|0);
 HEAP32[$plain>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (_tex_format($7)|0);
 HEAP32[$tex>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = (_csv_format($9)|0);
 HEAP32[$csv>>2] = $10;
 HEAP32[$close>>2] = 1;
 $11 = HEAP32[$plain>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  label = 3;
 } else {
  $13 = HEAP32[$tex>>2]|0;
  $14 = ($13|0)!=(0);
  if ($14) {
   label = 3;
  } else {
   $16 = HEAP32[$csv>>2]|0;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = HEAP32[$1>>2]|0;
    (_pputc($18,34)|0);
   }
  }
 }
 if ((label|0) == 3) {
  $15 = HEAP32[$1>>2]|0;
  (_pputc($15,10)|0);
 }
 $19 = HEAP32[$aux>>2]|0;
 $20 = ($19|0)==(1);
 do {
  if ($20) {
   $21 = HEAP32[$1>>2]|0;
   (_pputs($21,45400)|0);
  } else {
   $22 = HEAP32[$aux>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    $24 = HEAP32[$1>>2]|0;
    (_pputs($24,45464)|0);
    break;
   }
   $25 = HEAP32[$aux>>2]|0;
   $26 = ($25|0)==(4);
   if ($26) {
    $27 = HEAP32[$1>>2]|0;
    (_pputs($27,45520)|0);
    break;
   }
   $28 = HEAP32[$aux>>2]|0;
   $29 = ($28|0)==(7);
   if ($29) {
    $30 = HEAP32[$1>>2]|0;
    (_pputs($30,45568)|0);
    $31 = HEAP32[$0>>2]|0;
    $32 = (($31) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 & 8388608;
    $35 = ($34|0)!=(0);
    if (!($35)) {
     break;
    }
    $36 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer>>2] = 45616;
    (_pprintf($36,45608,$vararg_buffer)|0);
    break;
   }
   $37 = HEAP32[$aux>>2]|0;
   $38 = ($37|0)==(20);
   if ($38) {
    $39 = HEAP32[$1>>2]|0;
    (_pputs($39,45632)|0);
    break;
   }
   $40 = HEAP32[$aux>>2]|0;
   $41 = ($40|0)==(19);
   if ($41) {
    $42 = HEAP32[$1>>2]|0;
    (_pputs($42,45680)|0);
    break;
   }
   $43 = HEAP32[$aux>>2]|0;
   $44 = ($43|0)==(3);
   if ($44) {
    $45 = HEAP32[$1>>2]|0;
    (_pputs($45,45728)|0);
    break;
   }
   $46 = HEAP32[$aux>>2]|0;
   $47 = ($46|0)==(8);
   if ($47) {
    $48 = HEAP32[$1>>2]|0;
    $49 = (_tex_format($48)|0);
    $50 = ($49|0)!=(0);
    $51 = HEAP32[$1>>2]|0;
    if ($50) {
     (_pputs($51,45768)|0);
     break;
    } else {
     (_pputs($51,45800)|0);
     break;
    }
   }
   $52 = HEAP32[$aux>>2]|0;
   $53 = ($52|0)==(10);
   if ($53) {
    $54 = HEAP32[$1>>2]|0;
    $55 = (_tex_format($54)|0);
    $56 = ($55|0)!=(0);
    $57 = HEAP32[$1>>2]|0;
    if ($56) {
     (_pputs($57,45832)|0);
     break;
    } else {
     (_pputs($57,45872)|0);
     break;
    }
   }
   $58 = HEAP32[$aux>>2]|0;
   $59 = ($58|0)==(9);
   if ($59) {
    $60 = HEAP32[$1>>2]|0;
    $61 = (_tex_format($60)|0);
    $62 = ($61|0)!=(0);
    $63 = HEAP32[$1>>2]|0;
    if ($62) {
     (_pputs($63,45912)|0);
     break;
    } else {
     (_pputs($63,45944)|0);
     break;
    }
   }
   $64 = HEAP32[$aux>>2]|0;
   $65 = ($64|0)==(11);
   if ($65) {
    $66 = HEAP32[$1>>2]|0;
    (_pputs($66,45976)|0);
    break;
   }
   $67 = HEAP32[$aux>>2]|0;
   $68 = ($67|0)==(13);
   if ($68) {
    $69 = HEAP32[$1>>2]|0;
    (_pputs($69,45992)|0);
    break;
   }
   $70 = HEAP32[$aux>>2]|0;
   $71 = ($70|0)==(18);
   if ($71) {
    $72 = HEAP32[$1>>2]|0;
    (_pputs($72,46048)|0);
    break;
   }
   $73 = HEAP32[$aux>>2]|0;
   $74 = ($73|0)==(22);
   if ($74) {
    $75 = HEAP32[$1>>2]|0;
    (_pputs($75,46080)|0);
    break;
   } else {
    HEAP32[$close>>2] = 0;
    break;
   }
  }
 } while(0);
 $76 = HEAP32[$close>>2]|0;
 $77 = ($76|0)!=(0);
 if (!($77)) {
  STACKTOP = sp;return;
 }
 $78 = HEAP32[$plain>>2]|0;
 $79 = ($78|0)!=(0);
 if (!($79)) {
  $80 = HEAP32[$tex>>2]|0;
  $81 = ($80|0)!=(0);
  if (!($81)) {
   $83 = HEAP32[$csv>>2]|0;
   $84 = ($83|0)!=(0);
   $85 = HEAP32[$1>>2]|0;
   if ($84) {
    (_pputs($85,46128)|0);
    STACKTOP = sp;return;
   } else {
    (_pputs($85,33888)|0);
    STACKTOP = sp;return;
   }
  }
 }
 $82 = HEAP32[$1>>2]|0;
 (_pputc($82,10)|0);
 STACKTOP = sp;return;
}
function _godfrey_test_string($ci,$order,$prn) {
 $ci = $ci|0;
 $order = $order|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 HEAP32[$0>>2] = $ci;
 HEAP32[$1>>2] = $order;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$2>>2]|0;
 (_pputc($3,10)|0);
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(127);
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)>(1);
 $8 = HEAP32[$2>>2]|0;
 do {
  if ($5) {
   if ($7) {
    $9 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $9;
    (_pprintf($8,45176,$vararg_buffer1)|0);
    break;
   } else {
    (_pputs($8,45232)|0);
    break;
   }
  } else {
   if ($7) {
    $10 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $10;
    (_pprintf($8,45288,$vararg_buffer1)|0);
    break;
   } else {
    (_pputs($8,45344)|0);
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$2>>2]|0;
 (_pputc($11,10)|0);
 STACKTOP = sp;return;
}
function _maybe_print_T($pmod,$dset,$start,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $start = $start|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nstr = 0, $nstrs = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $xsect = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer2 = sp;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $xsect = sp + 24|0;
 $nstrs = sp + 16|0;
 $nstr = sp + 8|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $start;
 HEAP32[$3>>2] = $prn;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(51);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = (_strcmp($8,45120)|0);
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = HEAP32[$0>>2]|0;
  $12 = (_model_has_missing_obs($11)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   STACKTOP = sp;return;
  }
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  $21 = $19;
 } else {
  $21 = 0;
 }
 $20 = $21&1;
 HEAP32[$xsect>>2] = $20;
 $22 = HEAP32[$0>>2]|0;
 $23 = (_model_has_missing_obs($22)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $25 = HEAP32[$xsect>>2]|0;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = HEAP32[$2>>2]|0;
   $28 = (_strcmp($27,45120)|0);
   $29 = ($28|0)!=(0);
   if (!($29)) {
    STACKTOP = sp;return;
   }
  }
 }
 ;HEAP32[$nstrs+0>>2]=HEAP32[45136+0>>2]|0;HEAP32[$nstrs+4>>2]=HEAP32[45136+4>>2]|0;
 $30 = HEAP32[$xsect>>2]|0;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = HEAP32[$nstrs>>2]|0;
  $35 = $32;
 } else {
  $33 = (($nstrs) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34;
 }
 HEAP32[$nstr>>2] = $35;
 $36 = HEAP32[$3>>2]|0;
 $37 = (_tex_format($36)|0);
 $38 = ($37|0)!=(0);
 $39 = HEAP32[$3>>2]|0;
 $40 = HEAP32[$nstr>>2]|0;
 $41 = HEAP32[$0>>2]|0;
 $42 = (($41) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 if ($38) {
  HEAP32[$vararg_buffer2>>2] = $40;
  $vararg_ptr1 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $43;
  (_pprintf($39,45144,$vararg_buffer2)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer2>>2] = $40;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $43;
  (_pprintf($39,45160,$vararg_buffer2)|0);
  STACKTOP = sp;return;
 }
}
function _arma_extra_info($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $acode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $acode = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_int($2,44888)|0);
 HEAP32[$acode>>2] = $3;
 $4 = HEAP32[$acode>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = (_gretl_x12_is_x13()|0);
  $8 = ($7|0)!=(0);
  $9 = HEAP32[$1>>2]|0;
  if ($8) {
   (_pputs($9,44904)|0);
  } else {
   (_pputs($9,44936)|0);
  }
  $10 = HEAP32[$1>>2]|0;
  (_pputs($10,44968)|0);
  $11 = HEAP32[$1>>2]|0;
  $12 = HEAP32[$acode>>2]|0;
  $13 = $12 & 2;
  $14 = ($13|0)!=(0);
  $15 = $14 ? 44976 : 44992;
  (_pputs($11,$15)|0);
  $16 = HEAP32[$1>>2]|0;
  (_pputs($16,45008)|0);
  STACKTOP = sp;return;
 }
 $17 = HEAP32[$acode>>2]|0;
 $18 = $17 & 8;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = HEAP32[$1>>2]|0;
  (_pputs($20,45016)|0);
  $21 = HEAP32[$1>>2]|0;
  (_pputs($21,44968)|0);
  $22 = HEAP32[$1>>2]|0;
  (_pputs($22,45048)|0);
  $23 = HEAP32[$1>>2]|0;
  (_pputs($23,45008)|0);
  STACKTOP = sp;return;
 }
 $24 = HEAP32[$acode>>2]|0;
 $25 = $24 & 2;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = HEAP32[$1>>2]|0;
  (_pputs($27,45056)|0);
  $28 = HEAP32[$1>>2]|0;
  (_pputs($28,44968)|0);
  $29 = HEAP32[$1>>2]|0;
  (_pputs($29,44976)|0);
  $30 = HEAP32[$1>>2]|0;
  (_pputs($30,45008)|0);
  STACKTOP = sp;return;
 }
 $31 = HEAP32[$acode>>2]|0;
 $32 = $31 & 4;
 $33 = ($32|0)!=(0);
 $34 = HEAP32[$1>>2]|0;
 if ($33) {
  (_pputs($34,45016)|0);
  $35 = HEAP32[$1>>2]|0;
  (_pputs($35,44968)|0);
  $36 = HEAP32[$1>>2]|0;
  (_pputs($36,44992)|0);
  $37 = HEAP32[$1>>2]|0;
  (_pputs($37,45008)|0);
  STACKTOP = sp;return;
 } else {
  (_pputs($34,45088)|0);
  $38 = HEAP32[$1>>2]|0;
  (_pputs($38,44968)|0);
  $39 = HEAP32[$1>>2]|0;
  (_pputs($39,44992)|0);
  $40 = HEAP32[$1>>2]|0;
  (_pputs($40,45008)|0);
  STACKTOP = sp;return;
 }
}
function _print_arma_depvar($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $D = 0, $d = 0, $tex = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vname = 0;
 var $yno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $tex = sp + 20|0;
 $yno = sp + 16|0;
 $d = sp + 12|0;
 $D = sp + 8|0;
 $vname = sp + 72|0;
 $tmp = sp + 40|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_tex_format($3)|0);
 HEAP32[$tex>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_gretl_model_get_depvar($5)|0);
 HEAP32[$yno>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_gretl_model_get_int($7,31848)|0);
 HEAP32[$d>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = (_gretl_model_get_int($9,31856)|0);
 HEAP32[$D>>2] = $10;
 HEAP8[$vname>>0] = 0;
 $11 = HEAP32[$tex>>2]|0;
 $12 = ($11|0)!=(0);
 $13 = HEAP32[$d>>2]|0;
 if (!($12)) {
  $35 = ($13|0)==(1);
  if ($35) {
   (_strcat(($vname|0),(44824|0))|0);
  } else {
   $36 = HEAP32[$d>>2]|0;
   $37 = ($36|0)==(2);
   if ($37) {
    (_strcat(($vname|0),(44832|0))|0);
   }
  }
  $38 = HEAP32[$D>>2]|0;
  $39 = ($38|0)==(1);
  if ($39) {
   (_strcat(($vname|0),(44864|0))|0);
  } else {
   $40 = HEAP32[$D>>2]|0;
   $41 = ($40|0)==(2);
   if ($41) {
    (_strcat(($vname|0),(44872|0))|0);
   }
  }
  $42 = HEAP32[$d>>2]|0;
  $43 = ($42|0)>(0);
  if ($43) {
   label = 27;
  } else {
   $44 = HEAP32[$D>>2]|0;
   $45 = ($44|0)>(0);
   if ($45) {
    label = 27;
   }
  }
  if ((label|0) == 27) {
   (_strcat(($vname|0),(33160|0))|0);
  }
  $46 = HEAP32[$yno>>2]|0;
  $47 = HEAP32[$1>>2]|0;
  $48 = (($47) + 68|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($46<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  (_strcat(($vname|0),($51|0))|0);
  $52 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer>>2] = 43624;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $vname;
  (_pprintf($52,43616,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $14 = ($13|0)>(0);
 if ($14) {
  label = 4;
 } else {
  $15 = HEAP32[$D>>2]|0;
  $16 = ($15|0)>(0);
  if ($16) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  (_strcat(($vname|0),(44816|0))|0);
 }
 $17 = HEAP32[$d>>2]|0;
 $18 = ($17|0)==(1);
 if ($18) {
  (_strcat(($vname|0),(44824|0))|0);
 } else {
  $19 = HEAP32[$d>>2]|0;
  $20 = ($19|0)==(2);
  if ($20) {
   (_strcat(($vname|0),(44832|0))|0);
  }
 }
 $21 = HEAP32[$D>>2]|0;
 $22 = ($21|0)==(1);
 if ($22) {
  (_strcat(($vname|0),(44840|0))|0);
 } else {
  $23 = HEAP32[$D>>2]|0;
  $24 = ($23|0)==(2);
  if ($24) {
   (_strcat(($vname|0),(44848|0))|0);
  }
 }
 $25 = HEAP32[$d>>2]|0;
 $26 = ($25|0)>(0);
 if ($26) {
  label = 15;
 } else {
  $27 = HEAP32[$D>>2]|0;
  $28 = ($27|0)>(0);
  if ($28) {
   label = 15;
  }
 }
 if ((label|0) == 15) {
  (_strcat(($vname|0),(44816|0))|0);
 }
 $29 = HEAP32[$yno>>2]|0;
 $30 = HEAP32[$1>>2]|0;
 $31 = (($30) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($29<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 (_tex_escape($tmp,$34)|0);
 (_strcat(($vname|0),($tmp|0))|0);
 $52 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer>>2] = 43624;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $vname;
 (_pprintf($52,43616,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _print_intreg_depvar($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hiv = 0, $lov = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $lov = sp + 12|0;
 $hiv = sp + 8|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_gretl_model_get_int($3,44752)|0);
 HEAP32[$lov>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_gretl_model_get_int($5,44760)|0);
 HEAP32[$hiv>>2] = $6;
 $7 = HEAP32[$lov>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)<($9|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$hiv>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)<($13|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$2>>2]|0;
 $16 = HEAP32[$lov>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = (($17) + 68|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($16<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$vararg_buffer2>>2] = 44768;
 $vararg_ptr1 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $21;
 (_pprintf($15,43616,$vararg_buffer2)|0);
 $22 = HEAP32[$2>>2]|0;
 $23 = HEAP32[$hiv>>2]|0;
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 68|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$vararg_buffer2>>2] = 44800;
 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $28;
 (_pprintf($22,44784,$vararg_buffer2)|0);
 STACKTOP = sp;return;
}
function _tex_vecm_depvar_name($s,$vname) {
 $s = $s|0;
 $vname = $vname|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gotit = 0, $myvar = 0, $tmp = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer1 = sp;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $tmp = sp + 40|0;
 $gotit = sp + 4|0;
 $myvar = sp + 16|0;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $vname;
 HEAP32[$gotit>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $tmp;
 $3 = (_sscanf($2,44744,$vararg_buffer1)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  (_tex_escape($myvar,$tmp)|0);
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $myvar;
  (_sprintf($5,44728,$vararg_buffer1)|0);
  HEAP32[$gotit>>2] = 1;
 }
 $6 = HEAP32[$gotit>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 (_tex_escape($8,$9)|0);
 STACKTOP = sp;return;
}
function _tex_dpd_depvar_name($s,$vname) {
 $s = $s|0;
 $vname = $vname|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vnesc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $vnesc = sp + 16|0;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $vname;
 $2 = HEAP32[$1>>2]|0;
 (_tex_escape($vnesc,$2)|0);
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $vnesc;
 (_sprintf($3,44728,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _print_ivreg_instruments($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $ccount = 0, $i = 0, $imin = 0, $j = 0, $jmin = 0, $list = 0, $nv = 0, $strs = 0, $tex = 0, $vararg_buffer4 = 0, $vi = 0, $vname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer4 = sp;
 $0 = sp + 56|0;
 $1 = sp + 52|0;
 $2 = sp + 48|0;
 $strs = sp + 40|0;
 $list = sp + 36|0;
 $vname = sp + 64|0;
 $tex = sp + 32|0;
 $i = sp + 28|0;
 $j = sp + 24|0;
 $imin = sp + 20|0;
 $jmin = sp + 16|0;
 $vi = sp + 12|0;
 $ccount = sp + 8|0;
 $nv = sp + 4|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $prn;
 ;HEAP32[$strs+0>>2]=HEAP32[44648+0>>2]|0;HEAP32[$strs+4>>2]=HEAP32[44648+4>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_tex_format($3)|0);
 HEAP32[$tex>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = $8 ? 1 : 0;
 HEAP32[$jmin>>2] = $9;
 $10 = HEAP32[$jmin>>2]|0;
 HEAP32[$j>>2] = $10;
 while(1) {
  $11 = HEAP32[$j>>2]|0;
  $12 = ($11|0)<(2);
  if (!($12)) {
   break;
  }
  HEAP32[$nv>>2] = 0;
  $13 = HEAP32[$j>>2]|0;
  $14 = ($13|0)==(0);
  $15 = HEAP32[$0>>2]|0;
  do {
   if ($14) {
    $16 = (_gretl_model_get_data($15,44656)|0);
    HEAP32[$list>>2] = $16;
    $17 = HEAP32[$list>>2]|0;
    $18 = ($17|0)==(0|0);
    $19 = $18 ? -1 : 1;
    HEAP32[$imin>>2] = $19;
   } else {
    $20 = (($15) + 60|0);
    $21 = HEAP32[$20>>2]|0;
    HEAP32[$list>>2] = $21;
    $22 = HEAP32[$list>>2]|0;
    $23 = (_gretl_list_separator_position($22)|0);
    HEAP32[$imin>>2] = $23;
    $24 = HEAP32[$imin>>2]|0;
    $25 = ($24|0)>(0);
    if ($25) {
     $26 = HEAP32[$imin>>2]|0;
     $27 = (($26) + 1)|0;
     HEAP32[$imin>>2] = $27;
     break;
    } else {
     HEAP32[$imin>>2] = -1;
     break;
    }
   }
  } while(0);
  $28 = HEAP32[$imin>>2]|0;
  $29 = ($28|0)<(0);
  if (!($29)) {
   $30 = HEAP32[$2>>2]|0;
   $31 = HEAP32[$j>>2]|0;
   $32 = (($strs) + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $33;
   $34 = (_pprintf($30,38232,$vararg_buffer4)|0);
   HEAP32[$ccount>>2] = $34;
   $35 = HEAP32[$imin>>2]|0;
   HEAP32[$i>>2] = $35;
   while(1) {
    $36 = HEAP32[$i>>2]|0;
    $37 = HEAP32[$list>>2]|0;
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)<=($38|0);
    if (!($39)) {
     break;
    }
    $40 = HEAP32[$i>>2]|0;
    $41 = HEAP32[$list>>2]|0;
    $42 = (($41) + ($40<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP32[$vi>>2] = $43;
    $44 = HEAP32[$vi>>2]|0;
    $45 = HEAP32[$1>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)>=($46|0);
    if ($47) {
     $48 = HEAP32[_stderr>>2]|0;
     $49 = HEAP32[$vi>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $49;
     (_fprintf(($48|0),(44672|0),($vararg_buffer4|0))|0);
    } else {
     $50 = HEAP32[$tex>>2]|0;
     $51 = ($50|0)!=(0);
     $52 = HEAP32[$vi>>2]|0;
     $53 = HEAP32[$1>>2]|0;
     $54 = (($53) + 68|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) + ($52<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     if ($51) {
      (_tex_escape($vname,$57)|0);
     } else {
      (_strcpy(($vname|0),($57|0))|0);
     }
     $58 = HEAP32[$2>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $vname;
     $59 = (_pprintf($58,44712,$vararg_buffer4)|0);
     $60 = HEAP32[$ccount>>2]|0;
     $61 = (($60) + ($59))|0;
     HEAP32[$ccount>>2] = $61;
     $62 = HEAP32[$ccount>>2]|0;
     $63 = ($62|0)>=(64);
     if ($63) {
      $64 = HEAP32[$tex>>2]|0;
      $65 = ($64|0)!=(0);
      $66 = HEAP32[$2>>2]|0;
      do {
       if ($65) {
        (_pputs($66,43920)|0);
       } else {
        $67 = (_rtf_format($66)|0);
        $68 = ($67|0)!=(0);
        $69 = HEAP32[$2>>2]|0;
        if ($68) {
         (_pputs($69,33888)|0);
         break;
        } else {
         (_pputs($69,35728)|0);
         break;
        }
       }
      } while(0);
      HEAP32[$ccount>>2] = 0;
     }
     $70 = HEAP32[$nv>>2]|0;
     $71 = (($70) + 1)|0;
     HEAP32[$nv>>2] = $71;
    }
    $72 = HEAP32[$i>>2]|0;
    $73 = (($72) + 1)|0;
    HEAP32[$i>>2] = $73;
   }
   $74 = HEAP32[$nv>>2]|0;
   $75 = ($74|0)==(0);
   if ($75) {
    $76 = HEAP32[$2>>2]|0;
    (_pputs($76,44720)|0);
   }
   $77 = HEAP32[$2>>2]|0;
   _gretl_prn_newline($77);
  }
  $78 = HEAP32[$j>>2]|0;
  $79 = (($78) + 1)|0;
  HEAP32[$j>>2] = $79;
 }
 STACKTOP = sp;return 0;
}
function _heckit_selvar_name($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $list = sp + 4|0;
 $pos = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$list>>2] = $5;
 $6 = HEAP32[$list>>2]|0;
 $7 = (_gretl_list_separator_position($6)|0);
 HEAP32[$pos>>2] = $7;
 $8 = HEAP32[$pos>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = HEAP32[$pos>>2]|0;
  $11 = HEAP32[$list>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)<($12|0);
  if ($13) {
   $14 = HEAP32[$pos>>2]|0;
   $15 = (($14) + 1)|0;
   $16 = HEAP32[$list>>2]|0;
   $17 = (($16) + ($15<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$2>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($18|0)<($20|0);
   if ($21) {
    $22 = HEAP32[$pos>>2]|0;
    $23 = (($22) + 1)|0;
    $24 = HEAP32[$list>>2]|0;
    $25 = (($24) + ($23<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = HEAP32[$2>>2]|0;
    $28 = (($27) + 68|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + ($26<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    HEAP32[$0>>2] = $31;
    $32 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($32|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $32 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _print_ivreg_droplist($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dlist = 0, $i = 0, $v = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $dlist = sp + 12|0;
 $i = sp + 8|0;
 $v = sp + 4|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_gretl_model_get_data($3,44200)|0);
 HEAP32[$dlist>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 (_pputs($5,44592)|0);
 HEAP32[$i>>2] = 1;
 while(1) {
  $6 = HEAP32[$i>>2]|0;
  $7 = HEAP32[$dlist>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<=($8|0);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$dlist>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$v>>2] = $13;
  $14 = HEAP32[$v>>2]|0;
  $15 = HEAP32[$1>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)<($16|0);
  $18 = HEAP32[$2>>2]|0;
  $19 = HEAP32[$v>>2]|0;
  if ($17) {
   $20 = HEAP32[$1>>2]|0;
   $21 = (($20) + 68|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + ($19<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $24;
   (_pprintf($18,44536,$vararg_buffer1)|0);
  } else {
   HEAP32[$vararg_buffer1>>2] = $19;
   (_pprintf($18,44544,$vararg_buffer1)|0);
  }
  $25 = HEAP32[$i>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$i>>2] = $26;
 }
 $27 = HEAP32[$2>>2]|0;
 (_pputc($27,10)|0);
 STACKTOP = sp;return;
}
function _print_model_zerolist($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tag = 0, $zlist = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $zlist = sp + 4|0;
 $tag = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_gretl_model_get_data($3,44216)|0);
 HEAP32[$zlist>>2] = $4;
 HEAP32[$tag>>2] = 44552;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(91);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = (($9) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 2;
  $13 = ($12|0)!=(0);
  if ($13) {
   STACKTOP = sp;return;
  }
 }
 $14 = HEAP32[$tag>>2]|0;
 $15 = HEAP32[$zlist>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$2>>2]|0;
 _print_extra_list($14,$15,$16,$17);
 STACKTOP = sp;return;
}
function _print_model_droplist($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $dlist = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $dlist = sp + 4|0;
 $tag = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_gretl_model_get_data($3,44232)|0);
 HEAP32[$dlist>>2] = $4;
 HEAP32[$tag>>2] = 44496;
 $5 = HEAP32[$tag>>2]|0;
 $6 = HEAP32[$dlist>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 _print_extra_list($5,$6,$7,$8);
 STACKTOP = sp;return;
}
function _maybe_print_lad_warning($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_int($2,44432)|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 (_pputs($5,44448)|0);
 $6 = HEAP32[$1>>2]|0;
 (_pputc($6,10)|0);
 STACKTOP = sp;return;
}
function _maybe_print_hessian_warning($pmod,$prn) {
 $pmod = $pmod|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $prn;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_gretl_model_get_int($2,44304)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  (_pputs($5,44320)|0);
  $6 = HEAP32[$1>>2]|0;
  (_pputc($6,10)|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (_gretl_model_get_int($7,44368)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$1>>2]|0;
 (_pputs($10,44384)|0);
 $11 = HEAP32[$1>>2]|0;
 (_pputc($11,10)|0);
 STACKTOP = sp;return;
}
function _print_extra_list($tag,$list,$dset,$prn) {
 $tag = $tag|0;
 $list = $list|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $len = 0, $v = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $i = sp + 12|0;
 $v = sp + 8|0;
 $len = sp + 4|0;
 HEAP32[$0>>2] = $tag;
 HEAP32[$1>>2] = $list;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $prn;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_pputs($4,$5)|0);
 HEAP32[$len>>2] = $6;
 HEAP32[$i>>2] = 1;
 while(1) {
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<=($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + ($11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$v>>2] = $14;
  $15 = HEAP32[$v>>2]|0;
  $16 = HEAP32[$2>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15|0)<($17|0);
  $19 = HEAP32[$3>>2]|0;
  $20 = HEAP32[$v>>2]|0;
  if ($18) {
   $21 = HEAP32[$2>>2]|0;
   $22 = (($21) + 68|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($20<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $25;
   $26 = (_pprintf($19,44536,$vararg_buffer1)|0);
   $27 = HEAP32[$len>>2]|0;
   $28 = (($27) + ($26))|0;
   HEAP32[$len>>2] = $28;
  } else {
   HEAP32[$vararg_buffer1>>2] = $20;
   $29 = (_pprintf($19,44544,$vararg_buffer1)|0);
   $30 = HEAP32[$len>>2]|0;
   $31 = (($30) + ($29))|0;
   HEAP32[$len>>2] = $31;
  }
  $32 = HEAP32[$len>>2]|0;
  $33 = ($32|0)>(68);
  if ($33) {
   $34 = HEAP32[$i>>2]|0;
   $35 = HEAP32[$1>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)<($36|0);
   if ($37) {
    $38 = HEAP32[$3>>2]|0;
    (_pputc($38,10)|0);
    HEAP32[$len>>2] = 0;
   }
  }
  $39 = HEAP32[$i>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$i>>2] = $40;
 }
 $41 = HEAP32[$3>>2]|0;
 (_pputc($41,10)|0);
 STACKTOP = sp;return;
}
function _model_is_in_loop($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $loop = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $loop = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $pmod;
 $2 = HEAP32[47616>>2]|0;
 HEAP32[$loop>>2] = $2;
 L1: while(1) {
  $3 = HEAP32[$loop>>2]|0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   label = 9;
   break;
  }
  HEAP32[$i>>2] = 0;
  while(1) {
   $5 = HEAP32[$i>>2]|0;
   $6 = HEAP32[$loop>>2]|0;
   $7 = (($6) + 292|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($5|0)<($8|0);
   if (!($9)) {
    break;
   }
   $10 = HEAP32[$1>>2]|0;
   $11 = HEAP32[$i>>2]|0;
   $12 = HEAP32[$loop>>2]|0;
   $13 = (($12) + 316|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($11<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($10|0)==($16|0);
   if ($17) {
    label = 6;
    break L1;
   }
   $18 = HEAP32[$i>>2]|0;
   $19 = (($18) + 1)|0;
   HEAP32[$i>>2] = $19;
  }
  $20 = HEAP32[$loop>>2]|0;
  $21 = (($20) + 360|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$loop>>2] = $22;
 }
 if ((label|0) == 6) {
  HEAP32[$0>>2] = 1;
  $23 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 9) {
  HEAP32[$0>>2] = 0;
  $23 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($23|0);
 }
 return 0|0;
}
function _mtherr_with_arg($name,$code,$arg) {
 $name = $name|0;
 $code = $code|0;
 $arg = +$arg;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp;
 HEAP32[$0>>2] = $name;
 HEAP32[$1>>2] = $code;
 HEAPF64[$2>>3] = $arg;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = +HEAPF64[$2>>3];
 $6 = (_real_mtherr($3,$4,$5,1,0)|0);
 STACKTOP = sp;return ($6|0);
}
function _real_mtherr($name,$code,$arg,$have_arg,$quiet) {
 $name = $name|0;
 $code = $code|0;
 $arg = +$arg;
 $have_arg = $have_arg|0;
 $quiet = $quiet|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer6 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer6 = sp + 8|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 HEAP32[$1>>2] = $name;
 HEAP32[$2>>2] = $code;
 HEAPF64[$3>>3] = $arg;
 HEAP32[$4>>2] = $have_arg;
 HEAP32[$5>>2] = $quiet;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = HEAP32[$5>>2]|0;
  HEAP32[47632>>2] = $8;
  HEAP32[$0>>2] = 0;
  $25 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 $9 = HEAP32[47632>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  HEAP32[$0>>2] = 0;
  $25 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 $11 = HEAP32[_stderr>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $12;
 (_fprintf(($11|0),(47640|0),($vararg_buffer6|0))|0);
 $13 = HEAP32[$2>>2]|0;
 $14 = ($13|0)<=(0);
 $15 = HEAP32[$2>>2]|0;
 $16 = ($15|0)>(7);
 $or$cond = $14 | $16;
 if ($or$cond) {
  HEAP32[$2>>2] = 7;
 }
 $17 = HEAP32[$2>>2]|0;
 HEAP32[47624>>2] = $17;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)!=(0);
 $20 = HEAP32[_stderr>>2]|0;
 $21 = HEAP32[$2>>2]|0;
 $22 = (47672 + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 if ($19) {
  $24 = +HEAPF64[$3>>3];
  HEAP32[$vararg_buffer6>>2] = $23;
  $vararg_ptr5 = (($vararg_buffer6) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$24;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_fprintf(($20|0),(47648|0),($vararg_buffer6|0))|0);
 } else {
  HEAP32[$vararg_buffer6>>2] = $23;
  (_fprintf(($20|0),(47704|0),($vararg_buffer6|0))|0);
 }
 HEAP32[$0>>2] = 0;
 $25 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($25|0);
}
function _mtherr($name,$code) {
 $name = $name|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $name;
 HEAP32[$1>>2] = $code;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_real_mtherr($2,$3,0.0,0,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _get_cephes_errno() {
 var $0 = 0, $1 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ret = sp;
 $0 = HEAP32[47624>>2]|0;
 HEAP32[$ret>>2] = $0;
 HEAP32[47624>>2] = 0;
 $1 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _ndtr($a) {
 $a = +$a;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0;
 var $err = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 24|0;
 $x = sp + 16|0;
 $y = sp + 8|0;
 $z = sp;
 $err = sp + 32|0;
 HEAPF64[$0>>3] = $a;
 HEAP32[$err>>2] = 0;
 $1 = +HEAPF64[$0>>3];
 $2 = +HEAPF64[2024>>3];
 $3 = $1 * $2;
 HEAPF64[$x>>3] = $3;
 $4 = +HEAPF64[$x>>3];
 $5 = (+Math_abs((+$4)));
 HEAPF64[$z>>3] = $5;
 $6 = +HEAPF64[$z>>3];
 $7 = $6 < 1.0;
 if ($7) {
  $8 = +HEAPF64[$x>>3];
  $9 = (+_cephes_erf($8));
  $10 = 0.5 * $9;
  $11 = 0.5 + $10;
  HEAPF64[$y>>3] = $11;
  $19 = +HEAPF64[$y>>3];
  STACKTOP = sp;return (+$19);
 }
 $12 = +HEAPF64[$z>>3];
 $13 = (+_cephes_erfc($12,$err));
 $14 = 0.5 * $13;
 HEAPF64[$y>>3] = $14;
 $15 = +HEAPF64[$x>>3];
 $16 = $15 > 0.0;
 if (!($16)) {
  $19 = +HEAPF64[$y>>3];
  STACKTOP = sp;return (+$19);
 }
 $17 = +HEAPF64[$y>>3];
 $18 = 1.0 - $17;
 HEAPF64[$y>>3] = $18;
 $19 = +HEAPF64[$y>>3];
 STACKTOP = sp;return (+$19);
}
function _cephes_erf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $err = 0;
 var $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 24|0;
 $1 = sp + 16|0;
 $y = sp + 8|0;
 $z = sp;
 $err = sp + 32|0;
 HEAPF64[$1>>3] = $x;
 HEAP32[$err>>2] = 0;
 $2 = +HEAPF64[$1>>3];
 $3 = (+Math_abs((+$2)));
 $4 = $3 > 1.0;
 $5 = +HEAPF64[$1>>3];
 if ($4) {
  $6 = (+_cephes_erfc($5,$err));
  $7 = 1.0 - $6;
  HEAPF64[$0>>3] = $7;
  $18 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$18);
 } else {
  $8 = +HEAPF64[$1>>3];
  $9 = $5 * $8;
  HEAPF64[$z>>3] = $9;
  $10 = +HEAPF64[$1>>3];
  $11 = +HEAPF64[$z>>3];
  $12 = (+_polevl($11,47856,4));
  $13 = $10 * $12;
  $14 = +HEAPF64[$z>>3];
  $15 = (+_p1evl($14,47896,5));
  $16 = $13 / $15;
  HEAPF64[$y>>3] = $16;
  $17 = +HEAPF64[$y>>3];
  HEAPF64[$0>>3] = $17;
  $18 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$18);
 }
 return +0;
}
function _cephes_erfc($a,$err) {
 $a = +$a;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $p = 0, $q = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 40|0;
 $2 = sp + 56|0;
 $p = sp + 32|0;
 $q = sp + 24|0;
 $x = sp + 16|0;
 $y = sp + 8|0;
 $z = sp;
 HEAPF64[$1>>3] = $a;
 HEAP32[$2>>2] = $err;
 $3 = +HEAPF64[$1>>3];
 $4 = $3 < 0.0;
 $5 = +HEAPF64[$1>>3];
 if ($4) {
  $6 = -$5;
  HEAPF64[$x>>3] = $6;
 } else {
  HEAPF64[$x>>3] = $5;
 }
 $7 = +HEAPF64[$x>>3];
 $8 = $7 < 1.0;
 $9 = +HEAPF64[$1>>3];
 if ($8) {
  $10 = (+_cephes_erf($9));
  $11 = 1.0 - $10;
  HEAPF64[$0>>3] = $11;
  $45 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$45);
 }
 $12 = -$9;
 $13 = +HEAPF64[$1>>3];
 $14 = $12 * $13;
 HEAPF64[$z>>3] = $14;
 $15 = +HEAPF64[$z>>3];
 $16 = +HEAPF64[2000>>3];
 $17 = -$16;
 $18 = $15 < $17;
 if (!($18)) {
  $22 = +HEAPF64[$1>>3];
  $23 = (+_expx2($22,-1));
  HEAPF64[$z>>3] = $23;
  $24 = +HEAPF64[$x>>3];
  $25 = $24 < 8.0;
  $26 = +HEAPF64[$x>>3];
  if ($25) {
   $27 = (+_polevl($26,47936,8));
   HEAPF64[$p>>3] = $27;
   $28 = +HEAPF64[$x>>3];
   $29 = (+_p1evl($28,48008,8));
   HEAPF64[$q>>3] = $29;
  } else {
   $30 = (+_polevl($26,48072,5));
   HEAPF64[$p>>3] = $30;
   $31 = +HEAPF64[$x>>3];
   $32 = (+_p1evl($31,48120,6));
   HEAPF64[$q>>3] = $32;
  }
  $33 = +HEAPF64[$z>>3];
  $34 = +HEAPF64[$p>>3];
  $35 = $33 * $34;
  $36 = +HEAPF64[$q>>3];
  $37 = $35 / $36;
  HEAPF64[$y>>3] = $37;
  $38 = +HEAPF64[$1>>3];
  $39 = $38 < 0.0;
  if ($39) {
   $40 = +HEAPF64[$y>>3];
   $41 = 2.0 - $40;
   HEAPF64[$y>>3] = $41;
  }
  $42 = +HEAPF64[$y>>3];
  $43 = $42 == 0.0;
  if (!($43)) {
   $44 = +HEAPF64[$y>>3];
   HEAPF64[$0>>3] = $44;
   $45 = +HEAPF64[$0>>3];
   STACKTOP = sp;return (+$45);
  }
 }
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$19>>2] = 1;
 $20 = +HEAPF64[$1>>3];
 $21 = $20 < 0.0;
 if ($21) {
  HEAPF64[$0>>3] = 2.0;
  $45 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$45);
 } else {
  HEAPF64[$0>>3] = 0.0;
  $45 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$45);
 }
 return +0;
}
function _ndtri($y0) {
 $y0 = +$y0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $8 = 0.0, $9 = 0.0, $code = 0, $expm2 = 0, $x = 0, $x0 = 0, $x1 = 0, $y = 0;
 var $y2 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 64|0;
 $1 = sp + 56|0;
 $expm2 = sp + 48|0;
 $x = sp + 40|0;
 $y = sp + 32|0;
 $z = sp + 24|0;
 $y2 = sp + 16|0;
 $x0 = sp + 8|0;
 $x1 = sp;
 $code = sp + 72|0;
 HEAPF64[$1>>3] = $y0;
 HEAPF64[$expm2>>3] = 0.135335283236612702318;
 $2 = +HEAPF64[$1>>3];
 $3 = $2 <= 0.0;
 $4 = +HEAPF64[$1>>3];
 if ($3) {
  (_mtherr_with_arg(48168,1,$4)|0);
  $5 = +HEAPF64[1992>>3];
  $6 = -$5;
  HEAPF64[$0>>3] = $6;
  $73 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$73);
 }
 $7 = $4 >= 1.0;
 if ($7) {
  $8 = +HEAPF64[$1>>3];
  (_mtherr_with_arg(48168,1,$8)|0);
  $9 = +HEAPF64[1992>>3];
  HEAPF64[$0>>3] = $9;
  $73 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$73);
 }
 HEAP32[$code>>2] = 1;
 $10 = +HEAPF64[$1>>3];
 HEAPF64[$y>>3] = $10;
 $11 = +HEAPF64[$y>>3];
 $12 = +HEAPF64[$expm2>>3];
 $13 = 1.0 - $12;
 $14 = $11 > $13;
 if ($14) {
  $15 = +HEAPF64[$y>>3];
  $16 = 1.0 - $15;
  HEAPF64[$y>>3] = $16;
  HEAP32[$code>>2] = 0;
 }
 $17 = +HEAPF64[$y>>3];
 $18 = +HEAPF64[$expm2>>3];
 $19 = $17 > $18;
 $20 = +HEAPF64[$y>>3];
 if ($19) {
  $21 = $20 - 0.5;
  HEAPF64[$y>>3] = $21;
  $22 = +HEAPF64[$y>>3];
  $23 = +HEAPF64[$y>>3];
  $24 = $22 * $23;
  HEAPF64[$y2>>3] = $24;
  $25 = +HEAPF64[$y>>3];
  $26 = +HEAPF64[$y>>3];
  $27 = +HEAPF64[$y2>>3];
  $28 = +HEAPF64[$y2>>3];
  $29 = (+_polevl($28,48176,4));
  $30 = $27 * $29;
  $31 = +HEAPF64[$y2>>3];
  $32 = (+_p1evl($31,48216,8));
  $33 = $30 / $32;
  $34 = $26 * $33;
  $35 = $25 + $34;
  HEAPF64[$x>>3] = $35;
  $36 = +HEAPF64[$x>>3];
  $37 = +HEAPF64[48280>>3];
  $38 = $36 * $37;
  HEAPF64[$x>>3] = $38;
  $39 = +HEAPF64[$x>>3];
  HEAPF64[$0>>3] = $39;
  $73 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$73);
 }
 $40 = (+Math_log((+$20)));
 $41 = -2.0 * $40;
 $42 = (+Math_sqrt((+$41)));
 HEAPF64[$x>>3] = $42;
 $43 = +HEAPF64[$x>>3];
 $44 = +HEAPF64[$x>>3];
 $45 = (+Math_log((+$44)));
 $46 = +HEAPF64[$x>>3];
 $47 = $45 / $46;
 $48 = $43 - $47;
 HEAPF64[$x0>>3] = $48;
 $49 = +HEAPF64[$x>>3];
 $50 = 1.0 / $49;
 HEAPF64[$z>>3] = $50;
 $51 = +HEAPF64[$x>>3];
 $52 = $51 < 8.0;
 $53 = +HEAPF64[$z>>3];
 $54 = +HEAPF64[$z>>3];
 if ($52) {
  $55 = (+_polevl($54,48288,8));
  $56 = $53 * $55;
  $57 = +HEAPF64[$z>>3];
  $58 = (+_p1evl($57,48360,8));
  $59 = $56 / $58;
  HEAPF64[$x1>>3] = $59;
 } else {
  $60 = (+_polevl($54,48424,8));
  $61 = $53 * $60;
  $62 = +HEAPF64[$z>>3];
  $63 = (+_p1evl($62,48496,8));
  $64 = $61 / $63;
  HEAPF64[$x1>>3] = $64;
 }
 $65 = +HEAPF64[$x0>>3];
 $66 = +HEAPF64[$x1>>3];
 $67 = $65 - $66;
 HEAPF64[$x>>3] = $67;
 $68 = HEAP32[$code>>2]|0;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = +HEAPF64[$x>>3];
  $71 = -$70;
  HEAPF64[$x>>3] = $71;
 }
 $72 = +HEAPF64[$x>>3];
 HEAPF64[$0>>3] = $72;
 $73 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$73);
}
function _get_default_nls_toler() {
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[48560>>3];
 $1 = $0 == 0.0;
 if ($1) {
  $2 = (+Math_pow(2.22044604925031308085E-16,0.75));
  HEAPF64[48560>>3] = $2;
 }
 $3 = +HEAPF64[48560>>3];
 STACKTOP = sp;return (+$3);
}
function _gretl_object_unref($ptr,$type) {
 $ptr = $ptr|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pmod = 0, $rc = 0, $sys = 0, $var = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $rc = sp + 16|0;
 $pmod = sp + 12|0;
 $var = sp + 8|0;
 $sys = sp + 4|0;
 HEAP32[$0>>2] = $ptr;
 HEAP32[$1>>2] = $type;
 HEAP32[$rc>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(18);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (_get_stacked_type_by_data($6)|0);
  HEAP32[$1>>2] = $7;
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)==(1);
 do {
  if ($9) {
   $10 = HEAP32[$0>>2]|0;
   HEAP32[$pmod>>2] = $10;
   $11 = HEAP32[$pmod>>2]|0;
   $12 = ($11|0)!=(0|0);
   if ($12) {
    $13 = HEAP32[$pmod>>2]|0;
    $14 = (_model_is_protected($13)|0);
    $15 = ($14|0)!=(0);
    if ($15) {
     STACKTOP = sp;return;
    } else {
     $16 = HEAP32[$pmod>>2]|0;
     $17 = (($16) + 4|0);
     HEAP32[$rc>>2] = $17;
     break;
    }
   }
  } else {
   $18 = HEAP32[$1>>2]|0;
   $19 = ($18|0)==(3);
   if ($19) {
    $20 = HEAP32[$0>>2]|0;
    HEAP32[$var>>2] = $20;
    $21 = HEAP32[$var>>2]|0;
    $22 = ($21|0)!=(0|0);
    if (!($22)) {
     break;
    }
    $23 = HEAP32[$var>>2]|0;
    $24 = (($23) + 4|0);
    HEAP32[$rc>>2] = $24;
    break;
   }
   $25 = HEAP32[$1>>2]|0;
   $26 = ($25|0)==(2);
   if ($26) {
    $27 = HEAP32[$0>>2]|0;
    HEAP32[$sys>>2] = $27;
    $28 = HEAP32[$sys>>2]|0;
    $29 = ($28|0)!=(0|0);
    if (!($29)) {
     break;
    }
    $30 = HEAP32[$sys>>2]|0;
    $31 = (($30) + 4|0);
    HEAP32[$rc>>2] = $31;
    break;
   } else {
    $32 = HEAP32[_stderr>>2]|0;
    $33 = HEAP32[$0>>2]|0;
    HEAP32[$vararg_buffer>>2] = $33;
    (_fprintf(($32|0),(48584|0),($vararg_buffer|0))|0);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $34 = HEAP32[$rc>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = HEAP32[$rc>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) - 1)|0;
 HEAP32[$36>>2] = $38;
 $39 = HEAP32[$rc>>2]|0;
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)<=(0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = HEAP32[$0>>2]|0;
 $43 = HEAP32[$1>>2]|0;
 _gretl_object_destroy($42,$43);
 STACKTOP = sp;return;
}
function _get_stacked_type_by_data($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $ptr;
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = HEAP32[48640>>2]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[48648>>2]|0;
  $7 = (($6) + ($5<<3)|0);
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$1>>2]|0;
  $11 = ($9|0)==($10|0);
  $12 = HEAP32[$i>>2]|0;
  if ($11) {
   label = 4;
   break;
  }
  $16 = (($12) + 1)|0;
  HEAP32[$i>>2] = $16;
 }
 if ((label|0) == 4) {
  $13 = HEAP32[48648>>2]|0;
  $14 = (($13) + ($12<<3)|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$0>>2] = $15;
  $17 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  HEAP32[$0>>2] = 0;
  $17 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 return 0|0;
}
function _model_is_protected($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $prot = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $i = sp + 4|0;
 $prot = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$prot>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $1 = HEAP32[$i>>2]|0;
  $2 = HEAP32[48576>>2]|0;
  $3 = ($1|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$0>>2]|0;
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[48568>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($4|0)==($8|0);
  if ($9) {
   label = 4;
   break;
  }
  $10 = HEAP32[$i>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$i>>2] = $11;
 }
 if ((label|0) == 4) {
  HEAP32[$prot>>2] = 1;
 }
 $12 = HEAP32[$prot>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $16 = HEAP32[$prot>>2]|0;
  STACKTOP = sp;return ($16|0);
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (_model_is_in_loop($14)|0);
 HEAP32[$prot>>2] = $15;
 $16 = HEAP32[$prot>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _gretl_object_destroy($ptr,$type) {
 $ptr = $ptr|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $ptr;
 HEAP32[$1>>2] = $type;
 $2 = HEAP32[$0>>2]|0;
 _gretl_object_unstack($2,1);
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  _gretl_model_free($5);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(3);
 if ($7) {
  $8 = HEAP32[$0>>2]|0;
  _gretl_VAR_free($8);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)==(2);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$0>>2]|0;
 _equation_system_destroy($11);
 STACKTOP = sp;return;
}
function _gretl_object_unstack($ptr,$action) {
 $ptr = $ptr|0;
 $action = $action|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $new_stack = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $i = sp + 8|0;
 $pos = sp + 4|0;
 $new_stack = sp;
 HEAP32[$0>>2] = $ptr;
 HEAP32[$1>>2] = $action;
 HEAP32[$pos>>2] = -1;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = HEAP32[((48632 + 4|0))>>2]|0;
  $6 = ($4|0)==($5|0);
  if ($6) {
   HEAP32[((48632 + 4|0))>>2] = 0;
   HEAP32[48632>>2] = 0;
  }
 }
 $7 = HEAP32[48672>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $9 = HEAP32[$i>>2]|0;
  $10 = HEAP32[48640>>2]|0;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$i>>2]|0;
  $14 = HEAP32[48648>>2]|0;
  $15 = (($14) + ($13<<3)|0);
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($12|0)==($17|0);
  $19 = HEAP32[$i>>2]|0;
  if ($18) {
   label = 8;
   break;
  }
  $20 = (($19) + 1)|0;
  HEAP32[$i>>2] = $20;
 }
 if ((label|0) == 8) {
  HEAP32[$pos>>2] = $19;
 }
 $21 = HEAP32[$pos>>2]|0;
 $22 = ($21|0)>=(0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[48640>>2]|0;
 $24 = (($23) + -1)|0;
 HEAP32[48640>>2] = $24;
 $25 = HEAP32[48640>>2]|0;
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = HEAP32[48648>>2]|0;
  _free($27);
  HEAP32[48648>>2] = 0;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$pos>>2]|0;
 HEAP32[$i>>2] = $28;
 while(1) {
  $29 = HEAP32[$i>>2]|0;
  $30 = HEAP32[48640>>2]|0;
  $31 = ($29|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = HEAP32[$i>>2]|0;
  $33 = HEAP32[48648>>2]|0;
  $34 = (($33) + ($32<<3)|0);
  $35 = HEAP32[$i>>2]|0;
  $36 = (($35) + 1)|0;
  $37 = HEAP32[48648>>2]|0;
  $38 = (($37) + ($36<<3)|0);
  ;HEAP32[$34+0>>2]=HEAP32[$38+0>>2]|0;HEAP32[$34+4>>2]=HEAP32[$38+4>>2]|0;
  $39 = HEAP32[$i>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$i>>2] = $40;
 }
 $41 = HEAP32[48648>>2]|0;
 $42 = HEAP32[48640>>2]|0;
 $43 = $42<<3;
 $44 = (_realloc($41,$43)|0);
 HEAP32[$new_stack>>2] = $44;
 $45 = HEAP32[$new_stack>>2]|0;
 $46 = ($45|0)!=(0|0);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = HEAP32[$new_stack>>2]|0;
 HEAP32[48648>>2] = $47;
 STACKTOP = sp;return;
}
function _gretl_saved_objects_cleanup() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $lmp = 0, $lmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $lmp = sp + 8|0;
 $lmt = sp + 4|0;
 $i = sp;
 $0 = HEAP32[((48632 + 4|0))>>2]|0;
 HEAP32[$lmp>>2] = $0;
 $1 = HEAP32[48632>>2]|0;
 HEAP32[$lmt>>2] = $1;
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = HEAP32[48640>>2]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[48648>>2]|0;
  $7 = (($6) + ($5<<3)|0);
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$lmp>>2]|0;
  $11 = ($9|0)==($10|0);
  if ($11) {
   $12 = HEAP32[$lmp>>2]|0;
   $13 = HEAP32[$lmt>>2]|0;
   _gretl_object_unref($12,$13);
   HEAP32[$lmp>>2] = 0;
  }
  $14 = HEAP32[$i>>2]|0;
  $15 = HEAP32[48648>>2]|0;
  $16 = (($15) + ($14<<3)|0);
  _saved_object_free($16);
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[48648>>2]|0;
 _free($19);
 HEAP32[48648>>2] = 0;
 HEAP32[48640>>2] = 0;
 HEAP32[48664>>2] = 0;
 HEAP32[48656>>2] = 0;
 $20 = HEAP32[$lmp>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = HEAP32[$lmt>>2]|0;
 $23 = ($22|0)!=(1);
 if ($23) {
  label = 9;
 } else {
  $24 = HEAP32[$lmp>>2]|0;
  $25 = (_model_is_protected($24)|0);
  $26 = ($25|0)!=(0);
  if (!($26)) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $27 = HEAP32[$lmp>>2]|0;
  $28 = HEAP32[$lmt>>2]|0;
  _gretl_object_destroy($27,$28);
 }
 HEAP32[((48632 + 4|0))>>2] = 0;
 HEAP32[48632>>2] = 0;
 STACKTOP = sp;return;
}
function _saved_object_free($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $s;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 $6 = HEAP32[$0>>2]|0;
 if ($5) {
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_model_is_protected($8)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   STACKTOP = sp;return;
  }
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  _gretl_model_free($13);
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)==(3);
 $16 = HEAP32[$0>>2]|0;
 if ($15) {
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  _gretl_VAR_free($18);
  STACKTOP = sp;return;
 }
 $19 = HEAP32[$16>>2]|0;
 $20 = ($19|0)==(2);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 _equation_system_destroy($23);
 STACKTOP = sp;return;
}
function _get_optval_string($ci,$opt) {
 $ci = $ci|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $op = sp;
 HEAP32[$0>>2] = $ci;
 HEAP32[$1>>2] = $opt;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_matching_optparm($2,$3)|0);
 HEAP32[$op>>2] = $4;
 $5 = HEAP32[$op>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 $7 = HEAP32[$op>>2]|0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function _matching_optparm($ci,$opt) {
 $ci = $ci|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $ci;
 HEAP32[$2>>2] = $opt;
 HEAP32[$i>>2] = 0;
 while(1) {
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[48680>>2]|0;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 7;
   break;
  }
  $6 = HEAP32[$i>>2]|0;
  $7 = HEAP32[48688>>2]|0;
  $8 = (($7) + (($6*12)|0)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$1>>2]|0;
  $11 = ($9|0)==($10|0);
  if ($11) {
   $12 = HEAP32[$i>>2]|0;
   $13 = HEAP32[48688>>2]|0;
   $14 = (($13) + (($12*12)|0)|0);
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$2>>2]|0;
   $18 = ($16|0)==($17|0);
   if ($18) {
    label = 5;
    break;
   }
  }
  $22 = HEAP32[$i>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[$i>>2] = $23;
 }
 if ((label|0) == 5) {
  $19 = HEAP32[$i>>2]|0;
  $20 = HEAP32[48688>>2]|0;
  $21 = (($20) + (($19*12)|0)|0);
  HEAP32[$0>>2] = $21;
  $24 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 else if ((label|0) == 7) {
  HEAP32[$0>>2] = 0;
  $24 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 return 0|0;
}
function _option_flags_cleanup() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[48696>>2]|0;
 _gretl_print_destroy($0);
 HEAP32[48696>>2] = 0;
 STACKTOP = sp;return;
}
function _gretl_dlopen($path,$now) {
 $path = $path|0;
 $now = $now|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $handle = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $handle = sp + 4|0;
 HEAP32[$0>>2] = $path;
 HEAP32[$1>>2] = $now;
 HEAP32[$handle>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0);
 $5 = $4 ? 2 : 1;
 $6 = (_dlopen(($2|0),($5|0))|0);
 HEAP32[$handle>>2] = $6;
 $7 = HEAP32[$handle>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $12 = HEAP32[$handle>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $9;
 _gretl_errmsg_sprintf(51496,$vararg_buffer1);
 $10 = HEAP32[_stderr>>2]|0;
 $11 = (_dlerror()|0);
 HEAP32[$vararg_buffer1>>2] = $11;
 (_fprintf(($10|0),(51528|0),($vararg_buffer1|0))|0);
 $12 = HEAP32[$handle>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function _get_plugin_function($funcname,$handle) {
 $funcname = $funcname|0;
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $funp = 0, $munged = 0, $plugname = 0, $vararg_buffer10 = 0, $vararg_ptr13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer10 = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $funp = sp + 12|0;
 $plugname = sp + 8|0;
 $munged = sp + 32|0;
 HEAP32[$1>>2] = $funcname;
 HEAP32[$2>>2] = $handle;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_get_plugin_name_for_function($3)|0);
 HEAP32[$plugname>>2] = $4;
 $5 = HEAP32[$plugname>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _gretl_errmsg_set(51536);
  $7 = HEAP32[_stderr>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $8;
  (_fprintf(($7|0),(51568|0),($vararg_buffer10|0))|0);
  $9 = HEAP32[$2>>2]|0;
  HEAP32[$9>>2] = 0;
  HEAP32[$0>>2] = 0;
  $41 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 $10 = HEAP32[$plugname>>2]|0;
 $11 = (_get_plugin_handle($10)|0);
 $12 = HEAP32[$2>>2]|0;
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$2>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = HEAP32[_stderr>>2]|0;
  $17 = HEAP32[$plugname>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $17;
  (_fprintf(($16|0),(51600|0),($vararg_buffer10|0))|0);
  HEAP32[$0>>2] = 0;
  $41 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 $18 = HEAP32[$2>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$1>>2]|0;
 $21 = (_dlsym(($19|0),($20|0))|0);
 HEAP32[$funp>>2] = $21;
 $22 = HEAP32[$funp>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $24 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $24;
  (_sprintf($munged,51632,$vararg_buffer10)|0);
  $25 = HEAP32[$2>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = (_dlsym(($26|0),($munged|0))|0);
  HEAP32[$funp>>2] = $27;
  $28 = HEAP32[$funp>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   $30 = HEAP32[_stderr>>2]|0;
   $31 = (_dlerror()|0);
   HEAP32[$vararg_buffer10>>2] = $31;
   (_fprintf(($30|0),(51528|0),($vararg_buffer10|0))|0);
  }
 }
 $32 = HEAP32[$funp>>2]|0;
 $33 = ($32|0)==(0|0);
 if ($33) {
  _gretl_errmsg_set(51536);
  $34 = HEAP32[_stderr>>2]|0;
  $35 = HEAP32[$plugname>>2]|0;
  $36 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $35;
  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $36;
  (_fprintf(($34|0),(51640|0),($vararg_buffer10|0))|0);
  $37 = HEAP32[$2>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  _close_plugin($38);
  $39 = HEAP32[$2>>2]|0;
  HEAP32[$39>>2] = 0;
 }
 $40 = HEAP32[$funp>>2]|0;
 HEAP32[$0>>2] = $40;
 $41 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function _get_plugin_name_for_function($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $i = sp + 4|0;
 $idx = sp;
 HEAP32[$0>>2] = $func;
 HEAP32[$idx>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $1 = HEAP32[$i>>2]|0;
  $2 = (50944 + ($1<<3)|0);
  $3 = (($2) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$0>>2]|0;
  $7 = HEAP32[$i>>2]|0;
  $8 = (50944 + ($7<<3)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_strcmp($6,$9)|0);
  $11 = ($10|0)!=(0);
  $12 = HEAP32[$i>>2]|0;
  if (!($11)) {
   label = 4;
   break;
  }
  $16 = (($12) + 1)|0;
  HEAP32[$i>>2] = $16;
 }
 if ((label|0) == 4) {
  $13 = (50944 + ($12<<3)|0);
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$idx>>2] = $15;
 }
 $17 = HEAP32[$idx>>2]|0;
 $18 = (49240 + ($17<<3)|0);
 $19 = (($18) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 STACKTOP = sp;return ($20|0);
}
function _get_plugin_handle($plugin) {
 $plugin = $plugin|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $pluginpath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0;
 $0 = sp;
 $pluginpath = sp + 8|0;
 HEAP32[$0>>2] = $plugin;
 $1 = (_gretl_lib_path()|0);
 (_strcpy(($pluginpath|0),($1|0))|0);
 $2 = HEAP32[$0>>2]|0;
 (_strcat(($pluginpath|0),($2|0))|0);
 (_strcat(($pluginpath|0),(51680|0))|0);
 $3 = (_gretl_dlopen($pluginpath,0)|0);
 STACKTOP = sp;return ($3|0);
}
function _close_plugin($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $handle;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 (_dlclose(($3|0))|0);
 STACKTOP = sp;return;
}
function _polevl($x,$coef,$N) {
 $x = +$x;
 $coef = $coef|0;
 $N = $N|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $ans = 0;
 var $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 8|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $ans = sp;
 $i = sp + 20|0;
 $p = sp + 16|0;
 HEAPF64[$0>>3] = $x;
 HEAP32[$1>>2] = $coef;
 HEAP32[$2>>2] = $N;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$p>>2] = $3;
 $4 = HEAP32[$p>>2]|0;
 $5 = (($4) + 8|0);
 HEAP32[$p>>2] = $5;
 $6 = +HEAPF64[$4>>3];
 HEAPF64[$ans>>3] = $6;
 $7 = HEAP32[$2>>2]|0;
 HEAP32[$i>>2] = $7;
 while(1) {
  $8 = +HEAPF64[$ans>>3];
  $9 = +HEAPF64[$0>>3];
  $10 = $8 * $9;
  $11 = HEAP32[$p>>2]|0;
  $12 = (($11) + 8|0);
  HEAP32[$p>>2] = $12;
  $13 = +HEAPF64[$11>>3];
  $14 = $10 + $13;
  HEAPF64[$ans>>3] = $14;
  $15 = HEAP32[$i>>2]|0;
  $16 = (($15) + -1)|0;
  HEAP32[$i>>2] = $16;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
 }
 $18 = +HEAPF64[$ans>>3];
 STACKTOP = sp;return (+$18);
}
function _p1evl($x,$coef,$N) {
 $x = +$x;
 $coef = $coef|0;
 $N = $N|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, $ans = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 8|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $ans = sp;
 $p = sp + 20|0;
 $i = sp + 16|0;
 HEAPF64[$0>>3] = $x;
 HEAP32[$1>>2] = $coef;
 HEAP32[$2>>2] = $N;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$p>>2] = $3;
 $4 = +HEAPF64[$0>>3];
 $5 = HEAP32[$p>>2]|0;
 $6 = (($5) + 8|0);
 HEAP32[$p>>2] = $6;
 $7 = +HEAPF64[$5>>3];
 $8 = $4 + $7;
 HEAPF64[$ans>>3] = $8;
 $9 = HEAP32[$2>>2]|0;
 $10 = (($9) - 1)|0;
 HEAP32[$i>>2] = $10;
 while(1) {
  $11 = +HEAPF64[$ans>>3];
  $12 = +HEAPF64[$0>>3];
  $13 = $11 * $12;
  $14 = HEAP32[$p>>2]|0;
  $15 = (($14) + 8|0);
  HEAP32[$p>>2] = $15;
  $16 = +HEAPF64[$14>>3];
  $17 = $13 + $16;
  HEAPF64[$ans>>3] = $17;
  $18 = HEAP32[$i>>2]|0;
  $19 = (($18) + -1)|0;
  HEAP32[$i>>2] = $19;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   break;
  }
 }
 $21 = +HEAPF64[$ans>>3];
 STACKTOP = sp;return (+$21);
}
function _bufspace($n,$prn) {
 $n = $n|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $n;
 HEAP32[$1>>2] = $prn;
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (($2) + -1)|0;
  HEAP32[$0>>2] = $3;
  $4 = ($2|0)>(0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$1>>2]|0;
  (_pputc($5,32)|0);
 }
 STACKTOP = sp;return;
}
function _logo($quiet) {
 $quiet = $quiet|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 HEAP32[$0>>2] = $quiet;
 HEAP32[$vararg_buffer>>2] = 51712;
 (_printf((51688|0),($vararg_buffer|0))|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 (_puts((51720|0))|0);
 (_puts((51792|0))|0);
 STACKTOP = sp;return;
}
function _print_centered($s,$width,$prn) {
 $s = $s|0;
 $width = $width|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $off = 0, $rem = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $rem = sp + 16|0;
 $i = sp + 12|0;
 $off = sp + 8|0;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $width;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_strlen(($4|0))|0);
 $6 = (($3) - ($5))|0;
 HEAP32[$rem>>2] = $6;
 $7 = HEAP32[$rem>>2]|0;
 $8 = ($7|0)<=(1);
 if ($8) {
  $9 = HEAP32[$2>>2]|0;
  $10 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $10;
  (_pprintf($9,51848,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$rem>>2]|0;
 $12 = (($11|0) / 2)&-1;
 HEAP32[$off>>2] = $12;
 HEAP32[$i>>2] = 0;
 while(1) {
  $13 = HEAP32[$i>>2]|0;
  $14 = HEAP32[$off>>2]|0;
  $15 = ($13|0)<($14|0);
  $16 = HEAP32[$2>>2]|0;
  if (!($15)) {
   break;
  }
  (_pputs($16,51856)|0);
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[$1>>2]|0;
 $20 = HEAP32[$off>>2]|0;
 $21 = (($19) - ($20))|0;
 $22 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $21;
 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $22;
 (_pprintf($16,51864,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _gretl_fix_exponent($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0;
 var $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $p = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $s;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strstr($1,51888)|0);
 HEAP32[$p>>2] = $2;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  label = 3;
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = (_strstr($4,51896)|0);
  HEAP32[$p>>2] = $5;
  $6 = ($5|0)!=(0|0);
  if ($6) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $7 = HEAP32[$p>>2]|0;
  $8 = (($7) + 3|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)!=(0);
  if ($10) {
   $11 = HEAP32[$p>>2]|0;
   $12 = (($11) + 1|0);
   $13 = HEAP32[$p>>2]|0;
   $14 = (($13) + 2|0);
   $15 = HEAP32[$p>>2]|0;
   $16 = (($15) + 1|0);
   $17 = (_strlen(($16|0))|0);
   _memmove(($12|0),($14|0),($17|0))|0;
  }
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = (_strlen(($18|0))|0);
 HEAP32[$n>>2] = $19;
 $20 = HEAP32[$n>>2]|0;
 $21 = (($20) - 1)|0;
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + ($21)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 << 24 >> 24;
 $26 = ($25|0)==(46);
 if (!($26)) {
  $27 = HEAP32[$n>>2]|0;
  $28 = (($27) - 1)|0;
  $29 = HEAP32[$0>>2]|0;
  $30 = (($29) + ($28)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)==(44);
  if (!($33)) {
   $38 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($38|0);
  }
 }
 $34 = HEAP32[$n>>2]|0;
 $35 = (($34) - 1)|0;
 $36 = HEAP32[$0>>2]|0;
 $37 = (($36) + ($35)|0);
 HEAP8[$37>>0] = 0;
 $38 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($38|0);
}
function _gretl_sprint_fullwidth_double($x,$digits,$targ,$prn) {
 $x = +$x;
 $digits = $digits|0;
 $targ = $targ|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $decpoint = 0, $n = 0, $or$cond = 0, $tmp = 0, $vararg_buffer5 = 0, $vararg_ptr8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer5 = sp + 8|0;
 $0 = sp;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $decpoint = sp + 72|0;
 $n = sp + 20|0;
 $tmp = sp + 36|0;
 HEAPF64[$0>>3] = $x;
 HEAP32[$1>>2] = $digits;
 HEAP32[$2>>2] = $targ;
 HEAP32[$3>>2] = $prn;
 $4 = HEAP32[$2>>2]|0;
 HEAP8[$4>>0] = 0;
 $5 = +HEAPF64[$0>>3];
 $6 = $5 == 1.79769313486231570815E+308;
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  (_strcpy(($7|0),(51904|0))|0);
  STACKTOP = sp;return;
 }
 $8 = (_get_local_decpoint()|0);
 $9 = $8&255;
 HEAP8[$decpoint>>0] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10|0)==(-4);
 $12 = +HEAPF64[$0>>3];
 do {
  if ($11) {
   $13 = $12 < 1.00000000000000004792E-4;
   $14 = +HEAPF64[$0>>3];
   $15 = $14 > 0.0;
   $or$cond = $13 & $15;
   $16 = HEAP32[$2>>2]|0;
   $17 = +HEAPF64[$0>>3];
   if ($or$cond) {
    HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_buffer5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer5+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($16,51912,$vararg_buffer5)|0);
    HEAP32[$1>>2] = 3;
    break;
   }
   HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_buffer5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer5+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($16,51920,$vararg_buffer5)|0);
   STACKTOP = sp;return;
  } else {
   $18 = (+Math_abs((+$12)));
   $19 = $18 > 1.00000000000000003037E-13;
   $20 = +HEAPF64[$0>>3];
   $21 = $19 ? $20 : 0.0;
   HEAPF64[$0>>3] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = HEAP32[$1>>2]|0;
   $24 = +HEAPF64[$0>>3];
   HEAP32[$vararg_buffer5>>2] = $23;
   $vararg_ptr8 = (($vararg_buffer5) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$24;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($22,51872,$vararg_buffer5)|0);
  }
 } while(0);
 $25 = HEAP32[$2>>2]|0;
 (_gretl_fix_exponent($25)|0);
 $26 = HEAP32[$2>>2]|0;
 $27 = (_strlen(($26|0))|0);
 $28 = (($27) - 1)|0;
 HEAP32[$n>>2] = $28;
 $29 = HEAP32[$n>>2]|0;
 $30 = HEAP32[$2>>2]|0;
 $31 = (($30) + ($29)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32 << 24 >> 24;
 $34 = HEAP8[$decpoint>>0]|0;
 $35 = $34 << 24 >> 24;
 $36 = ($33|0)==($35|0);
 if ($36) {
  $37 = HEAP32[$n>>2]|0;
  $38 = HEAP32[$2>>2]|0;
  $39 = (($38) + ($37)|0);
  HEAP8[$39>>0] = 0;
 }
 $40 = HEAP32[$2>>2]|0;
 $41 = HEAP32[$1>>2]|0;
 (_cut_extra_zero($40,$41)|0);
 $42 = HEAP32[$2>>2]|0;
 $43 = HEAP8[$42>>0]|0;
 $44 = $43 << 24 >> 24;
 $45 = ($44|0)==(45);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$3>>2]|0;
 $47 = (_gretl_print_has_minus($46)|0);
 $48 = ($47|0)!=(0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = HEAP32[$2>>2]|0;
 $50 = (($49) + 1|0);
 (_strcpy(($tmp|0),($50|0))|0);
 $51 = HEAP32[$2>>2]|0;
 HEAP8[$51>>0] = 0;
 $52 = HEAP32[$2>>2]|0;
 (_strcat(($52|0),(51928|0))|0);
 $53 = HEAP32[$2>>2]|0;
 (_strcat(($53|0),($tmp|0))|0);
 STACKTOP = sp;return;
}
function _cut_extra_zero($s,$digits) {
 $s = $s|0;
 $digits = $digits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $n = sp + 4|0;
 $m = sp;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $digits;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_strchr($2,69)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $29 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($29|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (_strchr($5,101)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $29 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($29|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (_strspn($8,52088)|0);
 HEAP32[$n>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$n>>2]|0;
 $12 = (($10) + ($11)|0);
 $13 = (_strchr($12,46)|0);
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $21 = 1;
 } else {
  $15 = HEAP32[$0>>2]|0;
  $16 = HEAP32[$n>>2]|0;
  $17 = (($15) + ($16)|0);
  $18 = (_strchr($17,44)|0);
  $19 = ($18|0)!=(0|0);
  $21 = $19;
 }
 $20 = $21&1;
 HEAP32[$m>>2] = $20;
 $22 = HEAP32[$n>>2]|0;
 $23 = HEAP32[$m>>2]|0;
 $24 = (($22) + ($23))|0;
 $25 = HEAP32[$1>>2]|0;
 $26 = (($24) + ($25))|0;
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + ($26)|0);
 HEAP8[$28>>0] = 0;
 $29 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _outcovmx($pmod,$dset,$prn) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $vmat = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $vmat = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $prn;
 HEAP32[$err>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (_gretl_model_get_vcv($3,$4)|0);
 HEAP32[$vmat>>2] = $5;
 $6 = HEAP32[$vmat>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$err>>2] = 12;
  $11 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($11|0);
 } else {
  $8 = HEAP32[$vmat>>2]|0;
  $9 = HEAP32[$2>>2]|0;
  _text_print_vmatrix($8,$9);
  $10 = HEAP32[$vmat>>2]|0;
  _free_vmatrix($10);
  $11 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function _text_print_vmatrix($vmat,$prn) {
 $vmat = $vmat|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fields = 0, $fwidth = 0, $i = 0, $idx = 0, $ij2 = 0, $j = 0, $k = 0, $li2 = 0, $maxlen = 0, $n = 0, $nf = 0;
 var $p = 0, $s = 0, $vararg_buffer13 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer13 = sp;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $i = sp + 56|0;
 $j = sp + 52|0;
 $n = sp + 48|0;
 $nf = sp + 44|0;
 $li2 = sp + 40|0;
 $p = sp + 36|0;
 $k = sp + 32|0;
 $idx = sp + 28|0;
 $ij2 = sp + 24|0;
 $maxlen = sp + 20|0;
 $fwidth = sp + 16|0;
 $fields = sp + 12|0;
 $s = sp + 8|0;
 HEAP32[$0>>2] = $vmat;
 HEAP32[$1>>2] = $prn;
 HEAP32[$maxlen>>2] = 0;
 HEAP32[$fwidth>>2] = 14;
 HEAP32[$fields>>2] = 5;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(18);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  _covhdr($5);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (_vmat_maxlen($6)|0);
 HEAP32[$maxlen>>2] = $7;
 $8 = HEAP32[$maxlen>>2]|0;
 $9 = ($8|0)>(10);
 if ($9) {
  HEAP32[$fields>>2] = 4;
  HEAP32[$fwidth>>2] = 16;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$fields>>2]|0;
  $15 = (($13|0) / ($14|0))&-1;
  $16 = ($10|0)<=($15|0);
  if (!($16)) {
   label = 37;
   break;
  }
  $17 = HEAP32[$i>>2]|0;
  $18 = HEAP32[$fields>>2]|0;
  $19 = Math_imul($17, $18)|0;
  HEAP32[$nf>>2] = $19;
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$nf>>2]|0;
  $24 = (($22) - ($23))|0;
  HEAP32[$li2>>2] = $24;
  $25 = HEAP32[$li2>>2]|0;
  $26 = HEAP32[$fields>>2]|0;
  $27 = ($25|0)>($26|0);
  $28 = HEAP32[$fields>>2]|0;
  $29 = HEAP32[$li2>>2]|0;
  $30 = $27 ? $28 : $29;
  HEAP32[$p>>2] = $30;
  $31 = HEAP32[$p>>2]|0;
  $32 = ($31|0)==(0);
  if ($32) {
   label = 37;
   break;
  }
  HEAP32[$j>>2] = 1;
  while(1) {
   $33 = HEAP32[$j>>2]|0;
   $34 = HEAP32[$p>>2]|0;
   $35 = ($33|0)<=($34|0);
   if (!($35)) {
    break;
   }
   $36 = HEAP32[$j>>2]|0;
   $37 = HEAP32[$nf>>2]|0;
   $38 = (($36) + ($37))|0;
   $39 = (($38) - 1)|0;
   $40 = HEAP32[$0>>2]|0;
   $41 = (($40) + 20|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   HEAP32[$s>>2] = $44;
   $45 = HEAP32[$s>>2]|0;
   $46 = (_strlen(($45|0))|0);
   HEAP32[$n>>2] = $46;
   $47 = HEAP32[$n>>2]|0;
   $48 = HEAP32[$fwidth>>2]|0;
   $49 = (($48) - 1)|0;
   $50 = ($47|0)>($49|0);
   if ($50) {
    $51 = HEAP32[$1>>2]|0;
    $52 = HEAP32[$fwidth>>2]|0;
    $53 = (($52) - 2)|0;
    $54 = HEAP32[$s>>2]|0;
    HEAP32[$vararg_buffer13>>2] = $53;
    $vararg_ptr1 = (($vararg_buffer13) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $54;
    (_pprintf($51,51936,$vararg_buffer13)|0);
   } else {
    $55 = HEAP32[$fwidth>>2]|0;
    $56 = HEAP32[$n>>2]|0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP32[$1>>2]|0;
    _bufspace($57,$58);
    $59 = HEAP32[$1>>2]|0;
    $60 = HEAP32[$s>>2]|0;
    (_pputs($59,$60)|0);
   }
   $61 = HEAP32[$j>>2]|0;
   $62 = (($61) + 1)|0;
   HEAP32[$j>>2] = $62;
  }
  $63 = HEAP32[$1>>2]|0;
  (_pputc($63,10)|0);
  HEAP32[$j>>2] = 0;
  while(1) {
   $64 = HEAP32[$j>>2]|0;
   $65 = HEAP32[$nf>>2]|0;
   $66 = ($64|0)<($65|0);
   if (!($66)) {
    break;
   }
   HEAP32[$k>>2] = 0;
   while(1) {
    $67 = HEAP32[$k>>2]|0;
    $68 = HEAP32[$p>>2]|0;
    $69 = ($67|0)<($68|0);
    if (!($69)) {
     break;
    }
    $70 = HEAP32[$j>>2]|0;
    $71 = HEAP32[$nf>>2]|0;
    $72 = HEAP32[$k>>2]|0;
    $73 = (($71) + ($72))|0;
    $74 = HEAP32[$0>>2]|0;
    $75 = (($74) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (_ijton($70,$73,$76)|0);
    HEAP32[$idx>>2] = $77;
    $78 = HEAP32[$idx>>2]|0;
    $79 = HEAP32[$0>>2]|0;
    $80 = (($79) + 24|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81) + ($78<<3)|0);
    $83 = +HEAPF64[$82>>3];
    $84 = HEAP32[$0>>2]|0;
    $85 = HEAP32[$84>>2]|0;
    $86 = HEAP32[$fwidth>>2]|0;
    $87 = HEAP32[$1>>2]|0;
    _outxx($83,$85,$86,$87);
    $88 = HEAP32[$k>>2]|0;
    $89 = (($88) + 1)|0;
    HEAP32[$k>>2] = $89;
   }
   $90 = HEAP32[$fwidth>>2]|0;
   $91 = ($90|0)<(15);
   if ($91) {
    $92 = HEAP32[$1>>2]|0;
    (_pputc($92,32)|0);
   }
   $93 = HEAP32[$j>>2]|0;
   $94 = HEAP32[$0>>2]|0;
   $95 = (($94) + 20|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + ($93<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (_strlen(($98|0))|0);
   HEAP32[$n>>2] = $99;
   $100 = HEAP32[$n>>2]|0;
   $101 = HEAP32[$fwidth>>2]|0;
   $102 = (($101) - 1)|0;
   $103 = ($100|0)>($102|0);
   $104 = HEAP32[$1>>2]|0;
   if ($103) {
    $105 = HEAP32[$fwidth>>2]|0;
    $106 = (($105) - 2)|0;
    $107 = HEAP32[$j>>2]|0;
    $108 = HEAP32[$0>>2]|0;
    $109 = (($108) + 20|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + ($107<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    HEAP32[$vararg_buffer13>>2] = $106;
    $vararg_ptr5 = (($vararg_buffer13) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $112;
    (_pprintf($104,51944,$vararg_buffer13)|0);
   } else {
    $113 = HEAP32[$j>>2]|0;
    $114 = HEAP32[$0>>2]|0;
    $115 = (($114) + 20|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($116) + ($113<<2)|0);
    $118 = HEAP32[$117>>2]|0;
    HEAP32[$vararg_buffer13>>2] = $118;
    (_pprintf($104,51952,$vararg_buffer13)|0);
   }
   $119 = HEAP32[$j>>2]|0;
   $120 = (($119) + 1)|0;
   HEAP32[$j>>2] = $120;
  }
  HEAP32[$j>>2] = 0;
  while(1) {
   $121 = HEAP32[$j>>2]|0;
   $122 = HEAP32[$p>>2]|0;
   $123 = ($121|0)<($122|0);
   if (!($123)) {
    break;
   }
   $124 = HEAP32[$nf>>2]|0;
   $125 = HEAP32[$j>>2]|0;
   $126 = (($124) + ($125))|0;
   HEAP32[$ij2>>2] = $126;
   $127 = HEAP32[$fwidth>>2]|0;
   $128 = HEAP32[$j>>2]|0;
   $129 = Math_imul($127, $128)|0;
   $130 = HEAP32[$1>>2]|0;
   _bufspace($129,$130);
   $131 = HEAP32[$j>>2]|0;
   HEAP32[$k>>2] = $131;
   while(1) {
    $132 = HEAP32[$k>>2]|0;
    $133 = HEAP32[$p>>2]|0;
    $134 = ($132|0)<($133|0);
    if (!($134)) {
     break;
    }
    $135 = HEAP32[$ij2>>2]|0;
    $136 = HEAP32[$nf>>2]|0;
    $137 = HEAP32[$k>>2]|0;
    $138 = (($136) + ($137))|0;
    $139 = HEAP32[$0>>2]|0;
    $140 = (($139) + 4|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (_ijton($135,$138,$141)|0);
    HEAP32[$idx>>2] = $142;
    $143 = HEAP32[$idx>>2]|0;
    $144 = HEAP32[$0>>2]|0;
    $145 = (($144) + 24|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (($146) + ($143<<3)|0);
    $148 = +HEAPF64[$147>>3];
    $149 = HEAP32[$0>>2]|0;
    $150 = HEAP32[$149>>2]|0;
    $151 = HEAP32[$fwidth>>2]|0;
    $152 = HEAP32[$1>>2]|0;
    _outxx($148,$150,$151,$152);
    $153 = HEAP32[$k>>2]|0;
    $154 = (($153) + 1)|0;
    HEAP32[$k>>2] = $154;
   }
   $155 = HEAP32[$fwidth>>2]|0;
   $156 = ($155|0)<(15);
   if ($156) {
    $157 = HEAP32[$1>>2]|0;
    (_pputc($157,32)|0);
   }
   $158 = HEAP32[$ij2>>2]|0;
   $159 = HEAP32[$0>>2]|0;
   $160 = (($159) + 20|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + ($158<<2)|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (_strlen(($163|0))|0);
   HEAP32[$n>>2] = $164;
   $165 = HEAP32[$n>>2]|0;
   $166 = HEAP32[$fwidth>>2]|0;
   $167 = (($166) - 1)|0;
   $168 = ($165|0)>($167|0);
   $169 = HEAP32[$1>>2]|0;
   if ($168) {
    $170 = HEAP32[$fwidth>>2]|0;
    $171 = (($170) - 2)|0;
    $172 = HEAP32[$ij2>>2]|0;
    $173 = HEAP32[$0>>2]|0;
    $174 = (($173) + 20|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (($175) + ($172<<2)|0);
    $177 = HEAP32[$176>>2]|0;
    HEAP32[$vararg_buffer13>>2] = $171;
    $vararg_ptr12 = (($vararg_buffer13) + 4|0);
    HEAP32[$vararg_ptr12>>2] = $177;
    (_pprintf($169,51944,$vararg_buffer13)|0);
   } else {
    $178 = HEAP32[$ij2>>2]|0;
    $179 = HEAP32[$0>>2]|0;
    $180 = (($179) + 20|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = (($181) + ($178<<2)|0);
    $183 = HEAP32[$182>>2]|0;
    HEAP32[$vararg_buffer13>>2] = $183;
    (_pprintf($169,51952,$vararg_buffer13)|0);
   }
   $184 = HEAP32[$j>>2]|0;
   $185 = (($184) + 1)|0;
   HEAP32[$j>>2] = $185;
  }
  $186 = HEAP32[$1>>2]|0;
  (_pputc($186,10)|0);
  $187 = HEAP32[$i>>2]|0;
  $188 = (($187) + 1)|0;
  HEAP32[$i>>2] = $188;
 }
 if ((label|0) == 37) {
  STACKTOP = sp;return;
 }
}
function _covhdr($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = 52040;
 (_pprintf($1,52032,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _vmat_maxlen($vmat) {
 $vmat = $vmat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $len = 0, $maxlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $i = sp + 8|0;
 $len = sp + 4|0;
 $maxlen = sp;
 HEAP32[$0>>2] = $vmat;
 HEAP32[$maxlen>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $1 = HEAP32[$i>>2]|0;
  $2 = HEAP32[$0>>2]|0;
  $3 = (($2) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$i>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($6<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strlen(($11|0))|0);
  HEAP32[$len>>2] = $12;
  $13 = HEAP32[$len>>2]|0;
  $14 = HEAP32[$maxlen>>2]|0;
  $15 = ($13|0)>($14|0);
  if ($15) {
   $16 = HEAP32[$len>>2]|0;
   HEAP32[$maxlen>>2] = $16;
  }
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[$maxlen>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _outxx($x,$ci,$wid,$prn) {
 $x = +$x;
 $ci = $ci|0;
 $wid = $wid|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $numstr = 0;
 var $or$cond = 0, $or$cond3 = 0, $vararg_buffer15 = 0, $vararg_ptr18 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer15 = sp + 8|0;
 $0 = sp;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $numstr = sp + 32|0;
 HEAPF64[$0>>3] = $x;
 HEAP32[$1>>2] = $ci;
 HEAP32[$2>>2] = $wid;
 HEAP32[$3>>2] = $prn;
 $4 = +HEAPF64[$0>>3];
 $5 = (___DOUBLE_BITS8053($4)|0);
 $6 = tempRet0;
 $7 = $6 & 2147483647;
 $8 = ($7>>>0)>(2146435072);
 $9 = ($7|0)==(2146435072);
 $10 = ($5>>>0)>(0);
 $11 = $9 & $10;
 $12 = $8 | $11;
 if (!($12)) {
  $13 = +HEAPF64[$0>>3];
  $14 = $13 == 1.79769313486231570815E+308;
  if (!($14)) {
   $22 = HEAP32[$1>>2]|0;
   $23 = ($22|0)==(18);
   if ($23) {
    $24 = HEAP32[$3>>2]|0;
    $25 = HEAP32[$2>>2]|0;
    $26 = (($25) - 1)|0;
    $27 = +HEAPF64[$0>>3];
    HEAP32[$vararg_buffer15>>2] = $26;
    $vararg_ptr8 = (($vararg_buffer15) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$27;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($24,52008,$vararg_buffer15)|0);
    STACKTOP = sp;return;
   }
   $28 = +HEAPF64[$0>>3];
   $29 = $28 == 0.0;
   if ($29) {
    HEAPF64[$0>>3] = 0.0;
   }
   $30 = +HEAPF64[$0>>3];
   $31 = $30 != 0.0;
   $32 = +HEAPF64[$0>>3];
   $33 = $32 > -0.00100000000000000002082;
   $or$cond = $31 & $33;
   $34 = +HEAPF64[$0>>3];
   $35 = $34 < 0.00100000000000000002082;
   $or$cond3 = $or$cond & $35;
   $36 = +HEAPF64[$0>>3];
   if ($or$cond3) {
    HEAPF64[tempDoublePtr>>3]=$36;HEAP32[$vararg_buffer15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer15+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($numstr,52016,$vararg_buffer15)|0);
   } else {
    HEAPF64[tempDoublePtr>>3]=$36;HEAP32[$vararg_buffer15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer15+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($numstr,52024,$vararg_buffer15)|0);
   }
   (_gretl_fix_exponent($numstr)|0);
   $37 = HEAP32[$3>>2]|0;
   $38 = HEAP32[$2>>2]|0;
   HEAP32[$vararg_buffer15>>2] = $38;
   $vararg_ptr18 = (($vararg_buffer15) + 4|0);
   HEAP32[$vararg_ptr18>>2] = $numstr;
   (_pprintf($37,51880,$vararg_buffer15)|0);
   STACKTOP = sp;return;
  }
 }
 $15 = HEAP32[$1>>2]|0;
 $16 = ($15|0)==(18);
 if ($16) {
  $17 = HEAP32[$3>>2]|0;
  $18 = HEAP32[$2>>2]|0;
  $19 = (_get_utf_width(51904,$18)|0);
  HEAP32[$vararg_buffer15>>2] = $19;
  $vararg_ptr4 = (($vararg_buffer15) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 51904;
  (_pprintf($17,51880,$vararg_buffer15)|0);
  STACKTOP = sp;return;
 } else {
  $20 = HEAP32[$2>>2]|0;
  $21 = HEAP32[$3>>2]|0;
  _bufspace($20,$21);
  STACKTOP = sp;return;
 }
}
function _maybe_trim_varname($targ,$src) {
 $targ = $targ|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fore = 0, $p = 0, $snip = 0, $srclen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $srclen = sp + 12|0;
 $p = sp + 8|0;
 $snip = sp + 4|0;
 $fore = sp;
 HEAP32[$0>>2] = $targ;
 HEAP32[$1>>2] = $src;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strlen(($2|0))|0);
 HEAP32[$srclen>>2] = $3;
 $4 = HEAP32[$srclen>>2]|0;
 $5 = ($4|0)<(18);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  (_strcpy(($6|0),($7|0))|0);
  $43 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($43|0);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = (_strrchr($8,95)|0);
 HEAP32[$p>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 HEAP8[$10>>0] = 0;
 $11 = HEAP32[$p>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = HEAP32[$p>>2]|0;
  $14 = (($13) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = (_isdigit($16)|0);
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = HEAP32[$p>>2]|0;
   $20 = (_strlen(($19|0))|0);
   $21 = ($20>>>0)<(4);
   if ($21) {
    $22 = HEAP32[$srclen>>2]|0;
    $23 = (($22) - 18)|0;
    $24 = (($23) + 2)|0;
    HEAP32[$snip>>2] = $24;
    $25 = HEAP32[$p>>2]|0;
    $26 = HEAP32[$1>>2]|0;
    $27 = $25;
    $28 = $26;
    $29 = (($27) - ($28))|0;
    HEAP32[$fore>>2] = $29;
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$1>>2]|0;
    $32 = HEAP32[$fore>>2]|0;
    $33 = HEAP32[$snip>>2]|0;
    $34 = (($32) - ($33))|0;
    (_strncat($30,$31,$34)|0);
    $35 = HEAP32[$0>>2]|0;
    (_strncat($35,51960,1)|0);
    $36 = HEAP32[$0>>2]|0;
    $37 = HEAP32[$p>>2]|0;
    $38 = HEAP32[$p>>2]|0;
    $39 = (_strlen(($38|0))|0);
    (_strncat($36,$37,$39)|0);
    $43 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($43|0);
   }
  }
 }
 $40 = HEAP32[$0>>2]|0;
 $41 = HEAP32[$1>>2]|0;
 (_strncat($40,$41,16)|0);
 $42 = HEAP32[$0>>2]|0;
 (_strncat($42,51960,1)|0);
 $43 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($43|0);
}
function _in_usa() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $t = 0, $test = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $test = sp + 44|0;
 $t = sp;
 $0 = HEAP32[51968>>2]|0;
 $1 = ($0|0)<(0);
 do {
  if ($1) {
   dest=$t+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $2 = (($t) + 20|0);
   HEAP32[$2>>2] = 100;
   $3 = (($t) + 16|0);
   HEAP32[$3>>2] = 0;
   $4 = (($t) + 12|0);
   HEAP32[$4>>2] = 31;
   (_strftime(($test|0),12,(51976|0),($t|0))|0);
   $5 = (_strncmp($test,51984,5)|0);
   $6 = ($5|0)!=(0);
   if ($6) {
    HEAP32[51968>>2] = 0;
    break;
   } else {
    HEAP32[51968>>2] = 1;
    break;
   }
  }
 } while(0);
 $7 = HEAP32[51968>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _matching_buffer($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $s;
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = HEAP32[51992>>2]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[52000>>2]|0;
  $7 = (($6) + ($5<<3)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = ($8|0)==($9|0);
  $11 = HEAP32[$i>>2]|0;
  if ($10) {
   label = 4;
   break;
  }
  $14 = (($11) + 1)|0;
  HEAP32[$i>>2] = $14;
 }
 if ((label|0) == 4) {
  $12 = HEAP32[52000>>2]|0;
  $13 = (($12) + ($11<<3)|0);
  HEAP32[$0>>2] = $13;
  $15 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 6) {
  HEAP32[$0>>2] = 0;
  $15 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($15|0);
 }
 return 0|0;
}
function _bufgets_finalize($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $rbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $rbuf = sp;
 HEAP32[$0>>2] = $buf;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_matching_buffer($1)|0);
 HEAP32[$rbuf>>2] = $2;
 $3 = HEAP32[$rbuf>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$rbuf>>2]|0;
 $6 = (($5) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$rbuf>>2]|0;
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function _bufgets_cleanup() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[51992>>2]|0;
 $1 = ($0|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[52000>>2]|0;
 _free($2);
 HEAP32[52000>>2] = 0;
 HEAP32[51992>>2] = 0;
 STACKTOP = sp;return;
}
function ___FLOAT_BITS8052($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $__u = sp;
 HEAPF32[$0>>2] = $__f;
 $1 = +HEAPF32[$0>>2];
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS8053($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $__u = sp;
 HEAPF64[$0>>3] = $__f;
 $1 = +HEAPF64[$0>>3];
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _normal_pvalue_2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $p = sp;
 HEAPF64[$0>>3] = $x;
 $1 = +HEAPF64[$0>>3];
 $2 = $1 < 0.0;
 $3 = +HEAPF64[$0>>3];
 if ($2) {
  $4 = (+_ndtr($3));
  $7 = $4;
 } else {
  $5 = -$3;
  $6 = (+_ndtr($5));
  $7 = $6;
 }
 HEAPF64[$p>>3] = $7;
 $8 = +HEAPF64[$p>>3];
 $9 = 2.0 * $8;
 STACKTOP = sp;return (+$9);
}
function _normal_pvalue_1($x) {
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $p = sp;
 HEAPF64[$0>>3] = $x;
 $1 = +HEAPF64[$0>>3];
 $2 = (+_ndtr($1));
 HEAPF64[$p>>3] = $2;
 $3 = (_get_cephes_errno()|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  HEAPF64[$p>>3] = 1.79769313486231570815E+308;
  $7 = +HEAPF64[$p>>3];
  STACKTOP = sp;return (+$7);
 } else {
  $5 = +HEAPF64[$p>>3];
  $6 = 1.0 - $5;
  HEAPF64[$p>>3] = $6;
  $7 = +HEAPF64[$p>>3];
  STACKTOP = sp;return (+$7);
 }
 return +0;
}
function _student_pvalue_1($df,$x) {
 $df = +$df;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 8|0;
 $p = sp;
 HEAPF64[$0>>3] = $df;
 HEAPF64[$1>>3] = $x;
 HEAPF64[$p>>3] = 1.79769313486231570815E+308;
 $2 = +HEAPF64[$0>>3];
 $3 = $2 > 0.0;
 do {
  if ($3) {
   $4 = +HEAPF64[$0>>3];
   $5 = +HEAPF64[$1>>3];
   $6 = (+_stdtr($4,$5));
   HEAPF64[$p>>3] = $6;
   $7 = (_get_cephes_errno()|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    HEAPF64[$p>>3] = 1.79769313486231570815E+308;
    break;
   } else {
    $9 = +HEAPF64[$p>>3];
    $10 = 1.0 - $9;
    HEAPF64[$p>>3] = $10;
    break;
   }
  }
 } while(0);
 $11 = +HEAPF64[$p>>3];
 STACKTOP = sp;return (+$11);
}
function _student_pvalue_2($df,$x) {
 $df = +$df;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 8|0;
 $p = sp;
 HEAPF64[$0>>3] = $df;
 HEAPF64[$1>>3] = $x;
 HEAPF64[$p>>3] = 1.79769313486231570815E+308;
 $2 = +HEAPF64[$0>>3];
 $3 = $2 > 0.0;
 if (!($3)) {
  $15 = +HEAPF64[$p>>3];
  STACKTOP = sp;return (+$15);
 }
 $4 = +HEAPF64[$1>>3];
 $5 = $4 < 0.0;
 $6 = +HEAPF64[$0>>3];
 $7 = +HEAPF64[$1>>3];
 if ($5) {
  $8 = (+_stdtr($6,$7));
  HEAPF64[$p>>3] = $8;
 } else {
  $9 = -$7;
  $10 = (+_stdtr($6,$9));
  HEAPF64[$p>>3] = $10;
 }
 $11 = (_get_cephes_errno()|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  HEAPF64[$p>>3] = 1.79769313486231570815E+308;
  $15 = +HEAPF64[$p>>3];
  STACKTOP = sp;return (+$15);
 } else {
  $13 = +HEAPF64[$p>>3];
  $14 = $13 * 2.0;
  HEAPF64[$p>>3] = $14;
  $15 = +HEAPF64[$p>>3];
  STACKTOP = sp;return (+$15);
 }
 return +0;
}
function _chisq_cdf_comp($df,$x) {
 $df = +$df;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 8|0;
 $p = sp;
 HEAPF64[$0>>3] = $df;
 HEAPF64[$1>>3] = $x;
 HEAPF64[$p>>3] = 1.79769313486231570815E+308;
 $2 = +HEAPF64[$0>>3];
 $3 = $2 > 0.0;
 if ($3) {
  $4 = +HEAPF64[$1>>3];
  $5 = $4 >= 0.0;
  if ($5) {
   $6 = +HEAPF64[$0>>3];
   $7 = +HEAPF64[$1>>3];
   $8 = (+_chdtrc($6,$7));
   HEAPF64[$p>>3] = $8;
   $9 = (_get_cephes_errno()|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    HEAPF64[$p>>3] = 1.79769313486231570815E+308;
   }
  }
 }
 $11 = +HEAPF64[$p>>3];
 STACKTOP = sp;return (+$11);
}
function _snedecor_cdf_comp($dfn,$dfd,$x) {
 $dfn = $dfn|0;
 $dfd = $dfd|0;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $p = sp;
 HEAP32[$0>>2] = $dfn;
 HEAP32[$1>>2] = $dfd;
 HEAPF64[$2>>3] = $x;
 HEAPF64[$p>>3] = 1.79769313486231570815E+308;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)>(0);
  if ($6) {
   $7 = +HEAPF64[$2>>3];
   $8 = $7 >= 0.0;
   if ($8) {
    $9 = HEAP32[$0>>2]|0;
    $10 = HEAP32[$1>>2]|0;
    $11 = +HEAPF64[$2>>3];
    $12 = (+_fdtrc($9,$10,$11));
    HEAPF64[$p>>3] = $12;
    $13 = (_get_cephes_errno()|0);
    $14 = ($13|0)!=(0);
    if ($14) {
     HEAPF64[$p>>3] = 1.79769313486231570815E+308;
    }
   }
  }
 }
 $15 = +HEAPF64[$p>>3];
 STACKTOP = sp;return (+$15);
}
function _normal_cdf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $y = sp;
 HEAPF64[$0>>3] = $x;
 $1 = +HEAPF64[$0>>3];
 $2 = (+_ndtr($1));
 HEAPF64[$y>>3] = $2;
 $3 = (_get_cephes_errno()|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  HEAPF64[$y>>3] = 1.79769313486231570815E+308;
 } else {
  $5 = +HEAPF64[$y>>3];
  $6 = $5 == 1.0;
  if ($6) {
   HEAPF64[$y>>3] = 0.999999999999999888977;
  }
 }
 $7 = +HEAPF64[$y>>3];
 STACKTOP = sp;return (+$7);
}
function _normal_cdf_inverse($x) {
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $y = sp;
 HEAPF64[$0>>3] = $x;
 $1 = +HEAPF64[$0>>3];
 $2 = (+_ndtri($1));
 HEAPF64[$y>>3] = $2;
 $3 = (_get_cephes_errno()|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $5 = +HEAPF64[$y>>3];
  STACKTOP = sp;return (+$5);
 }
 HEAPF64[$y>>3] = 1.79769313486231570815E+308;
 $5 = +HEAPF64[$y>>3];
 STACKTOP = sp;return (+$5);
}
function _qs_hac_weight($bt,$i) {
 $bt = +$bt;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $di = 0, $mi = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 24|0;
 $1 = sp + 32|0;
 $di = sp + 16|0;
 $mi = sp + 8|0;
 $w = sp;
 HEAPF64[$0>>3] = $bt;
 HEAP32[$1>>2] = $i;
 $2 = HEAP32[$1>>2]|0;
 $3 = (+($2|0));
 $4 = +HEAPF64[$0>>3];
 $5 = $3 / $4;
 HEAPF64[$di>>3] = $5;
 $6 = +HEAPF64[$di>>3];
 $7 = 18.849555921538758696 * $6;
 $8 = $7 / 5.0;
 HEAPF64[$mi>>3] = $8;
 $9 = +HEAPF64[$di>>3];
 $10 = 118.435252813072295908 * $9;
 $11 = +HEAPF64[$di>>3];
 $12 = $10 * $11;
 $13 = 25.0 / $12;
 HEAPF64[$w>>3] = $13;
 $14 = +HEAPF64[$mi>>3];
 $15 = (+Math_sin((+$14)));
 $16 = +HEAPF64[$mi>>3];
 $17 = $15 / $16;
 $18 = +HEAPF64[$mi>>3];
 $19 = (+Math_cos((+$18)));
 $20 = $17 - $19;
 $21 = +HEAPF64[$w>>3];
 $22 = $21 * $20;
 HEAPF64[$w>>3] = $22;
 $23 = +HEAPF64[$w>>3];
 STACKTOP = sp;return (+$23);
}
function _hac_weight($kern,$h,$i) {
 $kern = $kern|0;
 $h = $h|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ai = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $ai = sp + 8|0;
 $w = sp;
 HEAP32[$0>>2] = $kern;
 HEAP32[$1>>2] = $h;
 HEAP32[$2>>2] = $i;
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3|0));
 $5 = (+Math_abs((+$4)));
 $6 = HEAP32[$1>>2]|0;
 $7 = (+($6|0));
 $8 = $7 + 1.0;
 $9 = $5 / $8;
 HEAPF64[$ai>>3] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(1);
 $12 = +HEAPF64[$ai>>3];
 if (!($11)) {
  $26 = 1.0 - $12;
  HEAPF64[$w>>3] = $26;
  $27 = +HEAPF64[$w>>3];
  STACKTOP = sp;return (+$27);
 }
 $13 = $12 <= 0.5;
 $14 = +HEAPF64[$ai>>3];
 if ($13) {
  $15 = 6.0 * $14;
  $16 = +HEAPF64[$ai>>3];
  $17 = $15 * $16;
  $18 = 1.0 - $17;
  $19 = +HEAPF64[$ai>>3];
  $20 = (+Math_pow((+$19),3.0));
  $21 = 6.0 * $20;
  $22 = $18 + $21;
  HEAPF64[$w>>3] = $22;
  $27 = +HEAPF64[$w>>3];
  STACKTOP = sp;return (+$27);
 } else {
  $23 = 1.0 - $14;
  $24 = (+Math_pow((+$23),3.0));
  $25 = 2.0 * $24;
  HEAPF64[$w>>3] = $25;
  $27 = +HEAPF64[$w>>3];
  STACKTOP = sp;return (+$27);
 }
 return +0;
}
function _newey_west_bandwidth($f,$kern,$h,$bt) {
 $f = $f|0;
 $kern = $kern|0;
 $h = $h|0;
 $bt = $bt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $T = 0, $c = 0, $err = 0, $g = 0, $i = 0, $j = 0, $n = 0, $p = 0;
 var $q = 0, $s = 0, $s0 = 0, $sv = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = sp + 84|0;
 $1 = sp + 80|0;
 $2 = sp + 76|0;
 $3 = sp + 72|0;
 $4 = sp + 68|0;
 $g = sp + 24|0;
 $p = sp + 16|0;
 $s0 = sp + 8|0;
 $sv = sp;
 $s = sp + 64|0;
 $c = sp + 60|0;
 $n = sp + 56|0;
 $T = sp + 52|0;
 $q = sp + 48|0;
 $i = sp + 44|0;
 $j = sp + 40|0;
 $t = sp + 36|0;
 $err = sp + 32|0;
 HEAP32[$1>>2] = $f;
 HEAP32[$2>>2] = $kern;
 HEAP32[$3>>2] = $h;
 HEAP32[$4>>2] = $bt;
 HEAP32[$s>>2] = 0;
 HEAP32[$c>>2] = 0;
 HEAP32[$err>>2] = 0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  HEAP32[$0>>2] = 12;
  $171 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($171|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$T>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$q>>2] = $11;
 $12 = HEAP32[$2>>2]|0;
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $14 = HEAP32[$T>>2]|0;
   $15 = (+($14|0));
   $16 = (+Math_pow((+$15),0.222222222222222209886));
   $17 = (~~(($16)));
   HEAP32[$n>>2] = $17;
  } else {
   $18 = HEAP32[$2>>2]|0;
   $19 = ($18|0)==(1);
   $20 = HEAP32[$T>>2]|0;
   $21 = (+($20|0));
   if ($19) {
    $22 = (+Math_pow((+$21),0.160000000000000003331));
    $23 = (~~(($22)));
    HEAP32[$n>>2] = $23;
    break;
   } else {
    $24 = (+Math_pow((+$21),0.0800000000000000016653));
    $25 = (~~(($24)));
    HEAP32[$n>>2] = $25;
    break;
   }
  }
 } while(0);
 $26 = HEAP32[$n>>2]|0;
 $27 = (($26) + 1)|0;
 $28 = $27<<3;
 $29 = (_malloc($28)|0);
 HEAP32[$s>>2] = $29;
 $30 = HEAP32[$T>>2]|0;
 $31 = $30<<3;
 $32 = (_malloc($31)|0);
 HEAP32[$c>>2] = $32;
 $33 = HEAP32[$s>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  label = 10;
 } else {
  $35 = HEAP32[$c>>2]|0;
  $36 = ($35|0)==(0|0);
  if ($36) {
   label = 10;
  } else {
   HEAP32[$t>>2] = 0;
   while(1) {
    $37 = HEAP32[$t>>2]|0;
    $38 = HEAP32[$T>>2]|0;
    $39 = ($37|0)<($38|0);
    if (!($39)) {
     break;
    }
    $40 = HEAP32[$t>>2]|0;
    $41 = HEAP32[$c>>2]|0;
    $42 = (($41) + ($40<<3)|0);
    HEAPF64[$42>>3] = 0.0;
    HEAP32[$i>>2] = 0;
    while(1) {
     $43 = HEAP32[$i>>2]|0;
     $44 = HEAP32[$q>>2]|0;
     $45 = ($43|0)<($44|0);
     if (!($45)) {
      break;
     }
     $46 = HEAP32[$i>>2]|0;
     $47 = HEAP32[$1>>2]|0;
     $48 = HEAP32[$47>>2]|0;
     $49 = Math_imul($46, $48)|0;
     $50 = HEAP32[$t>>2]|0;
     $51 = (($49) + ($50))|0;
     $52 = HEAP32[$1>>2]|0;
     $53 = (($52) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($54) + ($51<<3)|0);
     $56 = +HEAPF64[$55>>3];
     $57 = HEAP32[$t>>2]|0;
     $58 = HEAP32[$c>>2]|0;
     $59 = (($58) + ($57<<3)|0);
     $60 = +HEAPF64[$59>>3];
     $61 = $60 + $56;
     HEAPF64[$59>>3] = $61;
     $62 = HEAP32[$i>>2]|0;
     $63 = (($62) + 1)|0;
     HEAP32[$i>>2] = $63;
    }
    $64 = HEAP32[$t>>2]|0;
    $65 = (($64) + 1)|0;
    HEAP32[$t>>2] = $65;
   }
   HEAP32[$j>>2] = 0;
   while(1) {
    $66 = HEAP32[$j>>2]|0;
    $67 = HEAP32[$n>>2]|0;
    $68 = ($66|0)<=($67|0);
    if (!($68)) {
     break;
    }
    $69 = HEAP32[$j>>2]|0;
    $70 = HEAP32[$s>>2]|0;
    $71 = (($70) + ($69<<3)|0);
    HEAPF64[$71>>3] = 0.0;
    $72 = HEAP32[$j>>2]|0;
    HEAP32[$t>>2] = $72;
    while(1) {
     $73 = HEAP32[$t>>2]|0;
     $74 = HEAP32[$T>>2]|0;
     $75 = ($73|0)<($74|0);
     if (!($75)) {
      break;
     }
     $76 = HEAP32[$t>>2]|0;
     $77 = HEAP32[$c>>2]|0;
     $78 = (($77) + ($76<<3)|0);
     $79 = +HEAPF64[$78>>3];
     $80 = HEAP32[$t>>2]|0;
     $81 = HEAP32[$j>>2]|0;
     $82 = (($80) - ($81))|0;
     $83 = HEAP32[$c>>2]|0;
     $84 = (($83) + ($82<<3)|0);
     $85 = +HEAPF64[$84>>3];
     $86 = $79 * $85;
     $87 = HEAP32[$j>>2]|0;
     $88 = HEAP32[$s>>2]|0;
     $89 = (($88) + ($87<<3)|0);
     $90 = +HEAPF64[$89>>3];
     $91 = $90 + $86;
     HEAPF64[$89>>3] = $91;
     $92 = HEAP32[$t>>2]|0;
     $93 = (($92) + 1)|0;
     HEAP32[$t>>2] = $93;
    }
    $94 = HEAP32[$T>>2]|0;
    $95 = (+($94|0));
    $96 = HEAP32[$j>>2]|0;
    $97 = HEAP32[$s>>2]|0;
    $98 = (($97) + ($96<<3)|0);
    $99 = +HEAPF64[$98>>3];
    $100 = $99 / $95;
    HEAPF64[$98>>3] = $100;
    $101 = HEAP32[$j>>2]|0;
    $102 = (($101) + 1)|0;
    HEAP32[$j>>2] = $102;
   }
   $103 = HEAP32[$s>>2]|0;
   $104 = +HEAPF64[$103>>3];
   HEAPF64[$s0>>3] = $104;
   HEAPF64[$sv>>3] = 0.0;
   HEAP32[$j>>2] = 1;
   while(1) {
    $105 = HEAP32[$j>>2]|0;
    $106 = HEAP32[$n>>2]|0;
    $107 = ($105|0)<=($106|0);
    $108 = HEAP32[$2>>2]|0;
    if (!($107)) {
     break;
    }
    $109 = ($108|0)==(0);
    $110 = HEAP32[$j>>2]|0;
    $111 = (+($110|0));
    $112 = 2.0 * $111;
    $113 = HEAP32[$j>>2]|0;
    if ($109) {
     $114 = HEAP32[$s>>2]|0;
     $115 = (($114) + ($113<<3)|0);
     $116 = +HEAPF64[$115>>3];
     $117 = $112 * $116;
     $118 = +HEAPF64[$sv>>3];
     $119 = $118 + $117;
     HEAPF64[$sv>>3] = $119;
    } else {
     $120 = (+($113|0));
     $121 = $112 * $120;
     $122 = HEAP32[$j>>2]|0;
     $123 = HEAP32[$s>>2]|0;
     $124 = (($123) + ($122<<3)|0);
     $125 = +HEAPF64[$124>>3];
     $126 = $121 * $125;
     $127 = +HEAPF64[$sv>>3];
     $128 = $127 + $126;
     HEAPF64[$sv>>3] = $128;
    }
    $129 = HEAP32[$j>>2]|0;
    $130 = HEAP32[$s>>2]|0;
    $131 = (($130) + ($129<<3)|0);
    $132 = +HEAPF64[$131>>3];
    $133 = 2.0 * $132;
    $134 = +HEAPF64[$s0>>3];
    $135 = $134 + $133;
    HEAPF64[$s0>>3] = $135;
    $136 = HEAP32[$j>>2]|0;
    $137 = (($136) + 1)|0;
    HEAP32[$j>>2] = $137;
   }
   $138 = (52120 + ($108<<3)|0);
   $139 = +HEAPF64[$138>>3];
   $140 = 2.0 * $139;
   $141 = $140 + 1.0;
   $142 = 1.0 / $141;
   HEAPF64[$p>>3] = $142;
   $143 = HEAP32[$2>>2]|0;
   $144 = (52096 + ($143<<3)|0);
   $145 = +HEAPF64[$144>>3];
   $146 = +HEAPF64[$sv>>3];
   $147 = +HEAPF64[$s0>>3];
   $148 = $146 / $147;
   $149 = +HEAPF64[$sv>>3];
   $150 = +HEAPF64[$s0>>3];
   $151 = $149 / $150;
   $152 = $148 * $151;
   $153 = +HEAPF64[$p>>3];
   $154 = (+Math_pow((+$152),(+$153)));
   $155 = $145 * $154;
   HEAPF64[$g>>3] = $155;
   $156 = +HEAPF64[$g>>3];
   $157 = HEAP32[$T>>2]|0;
   $158 = (+($157|0));
   $159 = +HEAPF64[$p>>3];
   $160 = (+Math_pow((+$158),(+$159)));
   $161 = $156 * $160;
   $162 = HEAP32[$4>>2]|0;
   HEAPF64[$162>>3] = $161;
   $163 = HEAP32[$4>>2]|0;
   $164 = +HEAPF64[$163>>3];
   $165 = (+Math_floor((+$164)));
   $166 = (~~(($165)));
   $167 = HEAP32[$3>>2]|0;
   HEAP32[$167>>2] = $166;
  }
 }
 if ((label|0) == 10) {
  HEAP32[$err>>2] = 12;
 }
 $168 = HEAP32[$s>>2]|0;
 _free($168);
 $169 = HEAP32[$c>>2]|0;
 _free($169);
 $170 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $170;
 $171 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($171|0);
}
function _HAC_XOX($uhat,$X,$vi,$err) {
 $uhat = $uhat|0;
 $X = $X|0;
 $vi = $vi|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $Gj = 0, $T = 0, $Wtj = 0, $XOX = 0, $a = 0, $bt = 0, $j = 0, $k = 0, $kern = 0, $p = 0, $prewhiten = 0, $t = 0;
 var $u = 0, $umat = 0, $uu = 0, $wj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 108|0;
 $1 = sp + 104|0;
 $2 = sp + 100|0;
 $3 = sp + 96|0;
 $4 = sp + 92|0;
 $XOX = sp + 88|0;
 $Wtj = sp + 84|0;
 $Gj = sp + 80|0;
 $prewhiten = sp + 76|0;
 $kern = sp + 72|0;
 $T = sp + 68|0;
 $k = sp + 64|0;
 $p = sp + 60|0;
 $j = sp + 56|0;
 $t = sp + 52|0;
 $wj = sp + 24|0;
 $uu = sp + 16|0;
 $a = sp + 8|0;
 $bt = sp;
 $u = sp + 48|0;
 $umat = sp + 32|0;
 HEAP32[$1>>2] = $uhat;
 HEAP32[$2>>2] = $X;
 HEAP32[$3>>2] = $vi;
 HEAP32[$4>>2] = $err;
 HEAP32[$XOX>>2] = 0;
 HEAP32[$Wtj>>2] = 0;
 HEAP32[$Gj>>2] = 0;
 $5 = (_libset_get_bool(52144)|0);
 HEAP32[$prewhiten>>2] = $5;
 $6 = (_libset_get_int(52160)|0);
 HEAP32[$kern>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$T>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$k>>2] = $11;
 HEAPF64[$a>>3] = 0.0;
 HEAPF64[$bt>>3] = 0.0;
 HEAP32[$u>>2] = 0;
 $12 = HEAP32[$prewhiten>>2]|0;
 $13 = ($12|0)!=(0);
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 if ($13) {
  $17 = HEAP32[$T>>2]|0;
  $18 = (_prewhiten_uhat($16,$17,$a)|0);
  HEAP32[$u>>2] = $18;
  $19 = HEAP32[$u>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   $21 = HEAP32[$4>>2]|0;
   HEAP32[$21>>2] = 12;
   HEAP32[$0>>2] = 0;
   $147 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($147|0);
  }
 } else {
  HEAP32[$u>>2] = $16;
 }
 $22 = HEAP32[$k>>2]|0;
 $23 = HEAP32[$k>>2]|0;
 $24 = (_gretl_zero_matrix_new($22,$23)|0);
 HEAP32[$XOX>>2] = $24;
 $25 = HEAP32[$k>>2]|0;
 $26 = HEAP32[$k>>2]|0;
 $27 = (_gretl_matrix_alloc($25,$26)|0);
 HEAP32[$Wtj>>2] = $27;
 $28 = HEAP32[$k>>2]|0;
 $29 = HEAP32[$k>>2]|0;
 $30 = (_gretl_matrix_alloc($28,$29)|0);
 HEAP32[$Gj>>2] = $30;
 $31 = HEAP32[$XOX>>2]|0;
 $32 = ($31|0)==(0|0);
 L7: do {
  if ($32) {
   label = 8;
  } else {
   $33 = HEAP32[$Wtj>>2]|0;
   $34 = ($33|0)==(0|0);
   if ($34) {
    label = 8;
   } else {
    $35 = HEAP32[$Gj>>2]|0;
    $36 = ($35|0)==(0|0);
    if ($36) {
     label = 8;
    } else {
     $38 = (_data_based_hac_bandwidth()|0);
     $39 = ($38|0)!=(0);
     do {
      if ($39) {
       _gretl_matrix_init($umat);
       $40 = HEAP32[$T>>2]|0;
       HEAP32[$umat>>2] = $40;
       $41 = (($umat) + 4|0);
       HEAP32[$41>>2] = 1;
       $42 = HEAP32[$u>>2]|0;
       $43 = (($umat) + 8|0);
       HEAP32[$43>>2] = $42;
       $44 = HEAP32[$kern>>2]|0;
       $45 = (_newey_west_bandwidth($umat,$44,$p,$bt)|0);
       $46 = HEAP32[$4>>2]|0;
       HEAP32[$46>>2] = $45;
       $47 = HEAP32[$4>>2]|0;
       $48 = HEAP32[$47>>2]|0;
       $49 = ($48|0)!=(0);
       if ($49) {
        break L7;
       }
      } else {
       $50 = HEAP32[$kern>>2]|0;
       $51 = ($50|0)==(2);
       if ($51) {
        $52 = (+_libset_get_double(52176));
        HEAPF64[$bt>>3] = $52;
        $53 = HEAP32[$T>>2]|0;
        $54 = (($53) - 1)|0;
        HEAP32[$p>>2] = $54;
        break;
       } else {
        $55 = HEAP32[$T>>2]|0;
        $56 = (_get_hac_lag($55)|0);
        HEAP32[$p>>2] = $56;
        break;
       }
      }
     } while(0);
     HEAP32[$j>>2] = 0;
     while(1) {
      $57 = HEAP32[$j>>2]|0;
      $58 = HEAP32[$p>>2]|0;
      $59 = ($57|0)<=($58|0);
      if (!($59)) {
       break;
      }
      $60 = HEAP32[$Gj>>2]|0;
      _gretl_matrix_zero($60);
      $61 = HEAP32[$j>>2]|0;
      HEAP32[$t>>2] = $61;
      while(1) {
       $62 = HEAP32[$t>>2]|0;
       $63 = HEAP32[$T>>2]|0;
       $64 = ($62|0)<($63|0);
       if (!($64)) {
        break;
       }
       $65 = HEAP32[$Wtj>>2]|0;
       $66 = HEAP32[$2>>2]|0;
       $67 = HEAP32[$k>>2]|0;
       $68 = HEAP32[$t>>2]|0;
       $69 = HEAP32[$j>>2]|0;
       _wtw($65,$66,$67,$68,$69);
       $70 = HEAP32[$t>>2]|0;
       $71 = HEAP32[$u>>2]|0;
       $72 = (($71) + ($70<<3)|0);
       $73 = +HEAPF64[$72>>3];
       $74 = HEAP32[$t>>2]|0;
       $75 = HEAP32[$j>>2]|0;
       $76 = (($74) - ($75))|0;
       $77 = HEAP32[$u>>2]|0;
       $78 = (($77) + ($76<<3)|0);
       $79 = +HEAPF64[$78>>3];
       $80 = $73 * $79;
       HEAPF64[$uu>>3] = $80;
       $81 = HEAP32[$Wtj>>2]|0;
       $82 = +HEAPF64[$uu>>3];
       _gretl_matrix_multiply_by_scalar($81,$82);
       $83 = HEAP32[$Gj>>2]|0;
       $84 = HEAP32[$Wtj>>2]|0;
       (_gretl_matrix_add_to($83,$84)|0);
       $85 = HEAP32[$t>>2]|0;
       $86 = (($85) + 1)|0;
       HEAP32[$t>>2] = $86;
      }
      $87 = HEAP32[$j>>2]|0;
      $88 = ($87|0)>(0);
      if ($88) {
       $89 = HEAP32[$Gj>>2]|0;
       (_gretl_matrix_add_self_transpose($89)|0);
       $90 = HEAP32[$kern>>2]|0;
       $91 = ($90|0)==(2);
       if ($91) {
        $92 = +HEAPF64[$bt>>3];
        $93 = HEAP32[$j>>2]|0;
        $94 = (+_qs_hac_weight($92,$93));
        HEAPF64[$wj>>3] = $94;
       } else {
        $95 = HEAP32[$kern>>2]|0;
        $96 = HEAP32[$p>>2]|0;
        $97 = HEAP32[$j>>2]|0;
        $98 = (+_hac_weight($95,$96,$97));
        HEAPF64[$wj>>3] = $98;
       }
       $99 = HEAP32[$Gj>>2]|0;
       $100 = +HEAPF64[$wj>>3];
       _gretl_matrix_multiply_by_scalar($99,$100);
      }
      $101 = HEAP32[$XOX>>2]|0;
      $102 = HEAP32[$Gj>>2]|0;
      (_gretl_matrix_add_to($101,$102)|0);
      $103 = HEAP32[$j>>2]|0;
      $104 = (($103) + 1)|0;
      HEAP32[$j>>2] = $104;
     }
     $105 = HEAP32[$prewhiten>>2]|0;
     $106 = ($105|0)!=(0);
     if ($106) {
      $107 = HEAP32[$XOX>>2]|0;
      $108 = +HEAPF64[$a>>3];
      $109 = 1.0 - $108;
      $110 = +HEAPF64[$a>>3];
      $111 = 1.0 - $110;
      $112 = $109 * $111;
      (_gretl_matrix_divide_by_scalar($107,$112)|0);
     }
     $113 = HEAP32[$3>>2]|0;
     HEAP32[$113>>2] = 2;
     $114 = HEAP32[$kern>>2]|0;
     $115 = HEAP32[$3>>2]|0;
     $116 = (($115) + 4|0);
     HEAP32[$116>>2] = $114;
     $117 = HEAP32[$prewhiten>>2]|0;
     $118 = HEAP32[$3>>2]|0;
     $119 = (($118) + 12|0);
     HEAP32[$119>>2] = $117;
     $120 = HEAP32[$kern>>2]|0;
     $121 = ($120|0)==(2);
     if ($121) {
      $122 = HEAP32[$3>>2]|0;
      $123 = (($122) + 8|0);
      HEAP32[$123>>2] = 0;
      $124 = +HEAPF64[$bt>>3];
      $125 = HEAP32[$3>>2]|0;
      $126 = (($125) + 16|0);
      HEAPF64[$126>>3] = $124;
      break;
     } else {
      $127 = HEAP32[$p>>2]|0;
      $128 = HEAP32[$3>>2]|0;
      $129 = (($128) + 8|0);
      HEAP32[$129>>2] = $127;
      $130 = HEAP32[$3>>2]|0;
      $131 = (($130) + 16|0);
      HEAPF64[$131>>3] = 1.79769313486231570815E+308;
      break;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $37 = HEAP32[$4>>2]|0;
  HEAP32[$37>>2] = 12;
 }
 $132 = HEAP32[$Wtj>>2]|0;
 _gretl_matrix_free($132);
 $133 = HEAP32[$Gj>>2]|0;
 _gretl_matrix_free($133);
 $134 = HEAP32[$u>>2]|0;
 $135 = HEAP32[$1>>2]|0;
 $136 = (($135) + 8|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($134|0)!=($137|0);
 if ($138) {
  $139 = HEAP32[$u>>2]|0;
  _free($139);
 }
 $140 = HEAP32[$4>>2]|0;
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)!=(0);
 if ($142) {
  $143 = HEAP32[$XOX>>2]|0;
  $144 = ($143|0)!=(0|0);
  if ($144) {
   $145 = HEAP32[$XOX>>2]|0;
   _gretl_matrix_free($145);
   HEAP32[$XOX>>2] = 0;
  }
 }
 $146 = HEAP32[$XOX>>2]|0;
 HEAP32[$0>>2] = $146;
 $147 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($147|0);
}
function _prewhiten_uhat($u,$T,$pa) {
 $u = $u|0;
 $T = $T|0;
 $pa = $pa|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $a = 0, $den = 0, $num = 0, $sgn = 0, $t = 0;
 var $uw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $a = sp + 16|0;
 $num = sp + 8|0;
 $den = sp;
 $uw = sp + 32|0;
 $sgn = sp + 28|0;
 $t = sp + 24|0;
 HEAP32[$1>>2] = $u;
 HEAP32[$2>>2] = $T;
 HEAP32[$3>>2] = $pa;
 HEAPF64[$num>>3] = 0.0;
 HEAPF64[$den>>3] = 0.0;
 $4 = HEAP32[$2>>2]|0;
 $5 = $4<<3;
 $6 = (_malloc($5)|0);
 HEAP32[$uw>>2] = $6;
 $7 = HEAP32[$uw>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$0>>2] = 0;
  $74 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($74|0);
 }
 HEAP32[$t>>2] = 1;
 while(1) {
  $9 = HEAP32[$t>>2]|0;
  $10 = HEAP32[$2>>2]|0;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$t>>2]|0;
  $13 = (($12) - 1)|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + ($13<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = HEAP32[$t>>2]|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + ($17<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $16 * $20;
  $22 = +HEAPF64[$num>>3];
  $23 = $22 + $21;
  HEAPF64[$num>>3] = $23;
  $24 = HEAP32[$t>>2]|0;
  $25 = (($24) - 1)|0;
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + ($25<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = HEAP32[$t>>2]|0;
  $30 = (($29) - 1)|0;
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + ($30<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $28 * $33;
  $35 = +HEAPF64[$den>>3];
  $36 = $35 + $34;
  HEAPF64[$den>>3] = $36;
  $37 = HEAP32[$t>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$t>>2] = $38;
 }
 $39 = +HEAPF64[$num>>3];
 $40 = +HEAPF64[$den>>3];
 $41 = $39 / $40;
 HEAPF64[$a>>3] = $41;
 $42 = +HEAPF64[$a>>3];
 $43 = $42 < 0.0;
 $44 = $43 ? -1 : 1;
 HEAP32[$sgn>>2] = $44;
 $45 = +HEAPF64[$a>>3];
 $46 = (+Math_abs((+$45)));
 $47 = $46 > 0.969999999999999973354;
 if ($47) {
  $48 = HEAP32[$sgn>>2]|0;
  $49 = (+($48|0));
  $50 = $49 * 0.969999999999999973354;
  HEAPF64[$a>>3] = $50;
 }
 HEAP32[$t>>2] = 1;
 while(1) {
  $51 = HEAP32[$t>>2]|0;
  $52 = HEAP32[$2>>2]|0;
  $53 = ($51|0)<($52|0);
  if (!($53)) {
   break;
  }
  $54 = HEAP32[$t>>2]|0;
  $55 = HEAP32[$1>>2]|0;
  $56 = (($55) + ($54<<3)|0);
  $57 = +HEAPF64[$56>>3];
  $58 = +HEAPF64[$a>>3];
  $59 = HEAP32[$t>>2]|0;
  $60 = (($59) - 1)|0;
  $61 = HEAP32[$1>>2]|0;
  $62 = (($61) + ($60<<3)|0);
  $63 = +HEAPF64[$62>>3];
  $64 = $58 * $63;
  $65 = $57 - $64;
  $66 = HEAP32[$t>>2]|0;
  $67 = HEAP32[$uw>>2]|0;
  $68 = (($67) + ($66<<3)|0);
  HEAPF64[$68>>3] = $65;
  $69 = HEAP32[$t>>2]|0;
  $70 = (($69) + 1)|0;
  HEAP32[$t>>2] = $70;
 }
 $71 = +HEAPF64[$a>>3];
 $72 = HEAP32[$3>>2]|0;
 HEAPF64[$72>>3] = $71;
 $73 = HEAP32[$uw>>2]|0;
 HEAP32[$0>>2] = $73;
 $74 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($74|0);
}
function _wtw($wt,$X,$n,$t,$lag) {
 $wt = $wt|0;
 $X = $X|0;
 $n = $n|0;
 $t = $t|0;
 $lag = $lag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $xi = 0, $xj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $i = sp + 20|0;
 $j = sp + 16|0;
 $xi = sp + 8|0;
 $xj = sp;
 HEAP32[$0>>2] = $wt;
 HEAP32[$1>>2] = $X;
 HEAP32[$2>>2] = $n;
 HEAP32[$3>>2] = $t;
 HEAP32[$4>>2] = $lag;
 HEAP32[$i>>2] = 0;
 while(1) {
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = HEAP32[$i>>2]|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = Math_imul($8, $10)|0;
  $12 = HEAP32[$3>>2]|0;
  $13 = (($11) + ($12))|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($13<<3)|0);
  $18 = +HEAPF64[$17>>3];
  HEAPF64[$xi>>3] = $18;
  HEAP32[$j>>2] = 0;
  while(1) {
   $19 = HEAP32[$j>>2]|0;
   $20 = HEAP32[$2>>2]|0;
   $21 = ($19|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = HEAP32[$j>>2]|0;
   $23 = HEAP32[$1>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = Math_imul($22, $24)|0;
   $26 = HEAP32[$3>>2]|0;
   $27 = HEAP32[$4>>2]|0;
   $28 = (($26) - ($27))|0;
   $29 = (($25) + ($28))|0;
   $30 = HEAP32[$1>>2]|0;
   $31 = (($30) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($29<<3)|0);
   $34 = +HEAPF64[$33>>3];
   HEAPF64[$xj>>3] = $34;
   $35 = +HEAPF64[$xi>>3];
   $36 = +HEAPF64[$xj>>3];
   $37 = $35 * $36;
   $38 = HEAP32[$j>>2]|0;
   $39 = HEAP32[$0>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = Math_imul($38, $40)|0;
   $42 = HEAP32[$i>>2]|0;
   $43 = (($41) + ($42))|0;
   $44 = HEAP32[$0>>2]|0;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($43<<3)|0);
   HEAPF64[$47>>3] = $37;
   $48 = HEAP32[$j>>2]|0;
   $49 = (($48) + 1)|0;
   HEAP32[$j>>2] = $49;
  }
  $50 = HEAP32[$i>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$i>>2] = $51;
 }
 STACKTOP = sp;return;
}
function _gretl_qr_regress($pmod,$dset,$opt) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $Q = 0, $R = 0, $T = 0, $V = 0, $b = 0, $err = 0, $g = 0, $k = 0, $rank = 0, $warn = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $2 = sp + 44|0;
 $T = sp + 40|0;
 $k = sp + 36|0;
 $Q = sp + 32|0;
 $y = sp + 28|0;
 $R = sp + 24|0;
 $g = sp + 20|0;
 $b = sp + 16|0;
 $V = sp + 12|0;
 $rank = sp + 8|0;
 $warn = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $opt;
 HEAP32[$Q>>2] = 0;
 HEAP32[$y>>2] = 0;
 HEAP32[$R>>2] = 0;
 HEAP32[$g>>2] = 0;
 HEAP32[$b>>2] = 0;
 HEAP32[$V>>2] = 0;
 HEAP32[$warn>>2] = 0;
 HEAP32[$err>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$T>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - 1)|0;
 HEAP32[$k>>2] = $10;
 $11 = HEAP32[$T>>2]|0;
 $12 = HEAP32[$k>>2]|0;
 $13 = (_gretl_matrix_alloc($11,$12)|0);
 HEAP32[$Q>>2] = $13;
 $14 = HEAP32[$k>>2]|0;
 $15 = HEAP32[$k>>2]|0;
 $16 = (_gretl_matrix_alloc($14,$15)|0);
 HEAP32[$R>>2] = $16;
 $17 = HEAP32[$k>>2]|0;
 $18 = HEAP32[$k>>2]|0;
 $19 = (_gretl_matrix_alloc($17,$18)|0);
 HEAP32[$V>>2] = $19;
 $20 = HEAP32[$y>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = HEAP32[$T>>2]|0;
  $23 = (_gretl_matrix_alloc($22,1)|0);
  HEAP32[$y>>2] = $23;
 }
 $24 = HEAP32[$Q>>2]|0;
 $25 = ($24|0)==(0|0);
 do {
  if ($25) {
   label = 7;
  } else {
   $26 = HEAP32[$R>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    label = 7;
   } else {
    $28 = HEAP32[$V>>2]|0;
    $29 = ($28|0)==(0|0);
    if ($29) {
     label = 7;
    } else {
     $30 = HEAP32[$y>>2]|0;
     $31 = ($30|0)==(0|0);
     if ($31) {
      label = 7;
     } else {
      $32 = HEAP32[$0>>2]|0;
      $33 = HEAP32[$1>>2]|0;
      $34 = HEAP32[$Q>>2]|0;
      $35 = HEAP32[$y>>2]|0;
      _get_model_data($32,$33,$34,$35);
      $36 = HEAP32[$Q>>2]|0;
      $37 = HEAP32[$R>>2]|0;
      $38 = (_QR_decomp_plus($36,$37,$rank,$warn)|0);
      HEAP32[$err>>2] = $38;
      $39 = HEAP32[$err>>2]|0;
      $40 = ($39|0)==(3);
      if ($40) {
       $41 = HEAP32[$2>>2]|0;
       $42 = $41 & 16777216;
       $43 = ($42|0)!=(0);
       if (!($43)) {
        $44 = HEAP32[$0>>2]|0;
        $45 = HEAP32[$1>>2]|0;
        $46 = HEAP32[$R>>2]|0;
        $47 = HEAP32[$rank>>2]|0;
        $48 = HEAP32[$2>>2]|0;
        _drop_redundant_vars($44,$45,$46,$47,$48);
        $49 = HEAP32[$0>>2]|0;
        $50 = (($49) + 60|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = HEAP32[$51>>2]|0;
        $53 = (($52) - 1)|0;
        HEAP32[$k>>2] = $53;
        $54 = HEAP32[$Q>>2]|0;
        $55 = HEAP32[$T>>2]|0;
        $56 = HEAP32[$k>>2]|0;
        (_gretl_matrix_reuse($54,$55,$56)|0);
        $57 = HEAP32[$R>>2]|0;
        $58 = HEAP32[$k>>2]|0;
        $59 = HEAP32[$k>>2]|0;
        (_gretl_matrix_reuse($57,$58,$59)|0);
        $60 = HEAP32[$V>>2]|0;
        $61 = HEAP32[$k>>2]|0;
        $62 = HEAP32[$k>>2]|0;
        (_gretl_matrix_reuse($60,$61,$62)|0);
        $63 = HEAP32[$0>>2]|0;
        $64 = HEAP32[$1>>2]|0;
        $65 = HEAP32[$Q>>2]|0;
        $66 = HEAP32[$y>>2]|0;
        _get_model_data($63,$64,$65,$66);
        $67 = HEAP32[$Q>>2]|0;
        $68 = HEAP32[$R>>2]|0;
        $69 = (_QR_decomp_plus($67,$68,0,$warn)|0);
        HEAP32[$err>>2] = $69;
        $70 = HEAP32[$err>>2]|0;
        $71 = ($70|0)!=(0);
        if (!($71)) {
         $72 = HEAP32[$0>>2]|0;
         $73 = HEAP32[$1>>2]|0;
         _maybe_shift_ldepvar($72,$73);
        }
       }
      }
      $74 = HEAP32[$err>>2]|0;
      $75 = ($74|0)!=(0);
      if (!($75)) {
       $76 = HEAP32[$k>>2]|0;
       $77 = (_gretl_matrix_alloc($76,1)|0);
       HEAP32[$g>>2] = $77;
       $78 = HEAP32[$k>>2]|0;
       $79 = (_gretl_matrix_alloc($78,1)|0);
       HEAP32[$b>>2] = $79;
       $80 = HEAP32[$g>>2]|0;
       $81 = ($80|0)==(0|0);
       if (!($81)) {
        $82 = HEAP32[$b>>2]|0;
        $83 = ($82|0)==(0|0);
        if (!($83)) {
         $84 = HEAP32[$0>>2]|0;
         $85 = HEAP32[$k>>2]|0;
         $86 = HEAP32[$1>>2]|0;
         $87 = (($86) + 4|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = (_allocate_model_arrays($84,$85,$88)|0);
         $90 = ($89|0)!=(0);
         if ($90) {
          HEAP32[$err>>2] = 12;
          break;
         }
         $91 = HEAP32[$Q>>2]|0;
         $92 = HEAP32[$y>>2]|0;
         $93 = HEAP32[$g>>2]|0;
         (_gretl_matrix_multiply_mod($91,1,$92,0,$93,0)|0);
         $94 = HEAP32[$R>>2]|0;
         $95 = HEAP32[$g>>2]|0;
         $96 = HEAP32[$b>>2]|0;
         (_gretl_matrix_multiply($94,$95,$96)|0);
         $97 = HEAP32[$b>>2]|0;
         $98 = (_gretl_matrix_steal_data($97)|0);
         $99 = HEAP32[$0>>2]|0;
         $100 = (($99) + 76|0);
         HEAP32[$100>>2] = $98;
         $101 = HEAP32[$Q>>2]|0;
         $102 = HEAP32[$g>>2]|0;
         $103 = HEAP32[$y>>2]|0;
         (_gretl_matrix_multiply($101,$102,$103)|0);
         $104 = HEAP32[$0>>2]|0;
         $105 = HEAP32[$1>>2]|0;
         $106 = HEAP32[$y>>2]|0;
         $107 = HEAP32[$1>>2]|0;
         $108 = (($107) + 4|0);
         $109 = HEAP32[$108>>2]|0;
         _get_resids_and_SSR($104,$105,$106,$109);
         $110 = HEAP32[$T>>2]|0;
         $111 = HEAP32[$k>>2]|0;
         $112 = (($110) - ($111))|0;
         $113 = ($112|0)>(0);
         $114 = HEAP32[$0>>2]|0;
         do {
          if ($113) {
           $115 = (($114) + 12|0);
           $116 = HEAP32[$115>>2]|0;
           $117 = $116 & 8192;
           $118 = ($117|0)!=(0);
           $119 = HEAP32[$0>>2]|0;
           $120 = (($119) + 104|0);
           $121 = +HEAPF64[$120>>3];
           $122 = HEAP32[$T>>2]|0;
           if ($118) {
            $123 = (+($122|0));
            $124 = $121 / $123;
            $125 = (+Math_sqrt((+$124)));
            $126 = HEAP32[$0>>2]|0;
            $127 = (($126) + 120|0);
            HEAPF64[$127>>3] = $125;
            break;
           } else {
            $128 = HEAP32[$k>>2]|0;
            $129 = (($122) - ($128))|0;
            $130 = (+($129|0));
            $131 = $121 / $130;
            $132 = (+Math_sqrt((+$131)));
            $133 = HEAP32[$0>>2]|0;
            $134 = (($133) + 120|0);
            HEAPF64[$134>>3] = $132;
            break;
           }
          } else {
           $135 = (($114) + 120|0);
           HEAPF64[$135>>3] = 0.0;
          }
         } while(0);
         $136 = HEAP32[$R>>2]|0;
         $137 = HEAP32[$R>>2]|0;
         $138 = HEAP32[$V>>2]|0;
         (_gretl_matrix_multiply_mod($136,0,$137,1,$138,0)|0);
         $139 = HEAP32[$2>>2]|0;
         $140 = $139 & 131072;
         $141 = ($140|0)!=(0);
         $142 = HEAP32[$0>>2]|0;
         do {
          if ($141) {
           $143 = (($142) + 12|0);
           $144 = HEAP32[$143>>2]|0;
           $145 = $144 | 131072;
           HEAP32[$143>>2] = $145;
           $146 = HEAP32[$2>>2]|0;
           $147 = $146 & 4;
           $148 = ($147|0)!=(0);
           if ($148) {
            $149 = HEAP32[$0>>2]|0;
            $150 = HEAP32[$1>>2]|0;
            $151 = HEAP32[$V>>2]|0;
            $152 = HEAP32[$2>>2]|0;
            $153 = (_qr_make_cluster_vcv($149,86,$150,$151,$152)|0);
            HEAP32[$err>>2] = $153;
            break;
           }
           $154 = HEAP32[$2>>2]|0;
           $155 = $154 & 524288;
           $156 = ($155|0)!=(0);
           if ($156) {
            $157 = (_libset_get_bool(52192)|0);
            $158 = ($157|0)!=(0);
            if (!($158)) {
             $159 = HEAP32[$0>>2]|0;
             $160 = HEAP32[$1>>2]|0;
             $161 = HEAP32[$V>>2]|0;
             $162 = (_qr_make_hac($159,$160,$161)|0);
             HEAP32[$err>>2] = $162;
             break;
            }
           }
           $163 = HEAP32[$0>>2]|0;
           $164 = HEAP32[$1>>2]|0;
           $165 = HEAP32[$Q>>2]|0;
           $166 = HEAP32[$V>>2]|0;
           $167 = (_qr_make_hccme($163,$164,$165,$166)|0);
           HEAP32[$err>>2] = $167;
          } else {
           $168 = HEAP32[$V>>2]|0;
           $169 = HEAP32[$2>>2]|0;
           $170 = (_qr_make_regular_vcv($142,$168,$169)|0);
           HEAP32[$err>>2] = $170;
          }
         } while(0);
         $171 = HEAP32[$err>>2]|0;
         $172 = ($171|0)!=(0);
         if ($172) {
          break;
         }
         $173 = HEAP32[$0>>2]|0;
         $174 = HEAP32[$1>>2]|0;
         $175 = HEAP32[$T>>2]|0;
         $176 = HEAP32[$2>>2]|0;
         _qr_compute_stats($173,$174,$175,$176);
         $177 = HEAP32[$2>>2]|0;
         $178 = $177 & 256;
         $179 = ($178|0)!=(0);
         if ($179) {
          $180 = HEAP32[$0>>2]|0;
          $181 = (($180) + 32|0);
          $182 = HEAP32[$181>>2]|0;
          $183 = ($182|0)==(0|0);
          if ($183) {
           $184 = HEAP32[$0>>2]|0;
           $185 = HEAP32[$1>>2]|0;
           $186 = HEAP32[$Q>>2]|0;
           $187 = HEAP32[$y>>2]|0;
           (_qr_dw_stats($184,$185,$186,$187)|0);
          }
         }
         $188 = HEAP32[$warn>>2]|0;
         $189 = ($188|0)!=(0);
         if (!($189)) {
          break;
         }
         $190 = HEAP32[$0>>2]|0;
         (_gretl_model_set_int($190,52208,1)|0);
         break;
        }
       }
       HEAP32[$err>>2] = 12;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  HEAP32[$err>>2] = 12;
 }
 $191 = HEAP32[$Q>>2]|0;
 _gretl_matrix_free($191);
 $192 = HEAP32[$R>>2]|0;
 _gretl_matrix_free($192);
 $193 = HEAP32[$y>>2]|0;
 _gretl_matrix_free($193);
 $194 = HEAP32[$g>>2]|0;
 _gretl_matrix_free($194);
 $195 = HEAP32[$b>>2]|0;
 _gretl_matrix_free($195);
 $196 = HEAP32[$V>>2]|0;
 _gretl_matrix_free($196);
 $197 = HEAP32[$err>>2]|0;
 $198 = HEAP32[$0>>2]|0;
 $199 = (($198) + 228|0);
 HEAP32[$199>>2] = $197;
 $200 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($200|0);
}
function _get_model_data($pmod,$dset,$Q,$y) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $Q = $Q|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0;
 var $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0;
 var $T = 0, $dwt = 0, $i = 0, $pw1 = 0, $pwe = 0, $qdiff = 0, $s = 0, $sz = 0, $t = 0, $vi = 0, $vy = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = sp + 56|0;
 $dwt = sp + 52|0;
 $qdiff = sp + 48|0;
 $pwe = sp + 44|0;
 $x = sp + 8|0;
 $pw1 = sp;
 $i = sp + 40|0;
 $s = sp + 36|0;
 $t = sp + 32|0;
 $T = sp + 28|0;
 $sz = sp + 24|0;
 $vi = sp + 20|0;
 $vy = sp + 16|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $Q;
 HEAP32[$3>>2] = $y;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_gretl_model_get_int($4,52336)|0);
 HEAP32[$dwt>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 216|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $8 != 0.0;
 $10 = $9&1;
 HEAP32[$qdiff>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 32768;
 HEAP32[$pwe>>2] = $14;
 HEAPF64[$pw1>>3] = 0.0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = HEAP32[$pwe>>2]|0;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   $21 = HEAP32[$qdiff>>2]|0;
   $22 = ($21|0)!=(0);
   if (!($22)) {
    $23 = HEAP32[$dwt>>2]|0;
    $24 = ($23|0)!=(0);
    if (!($24)) {
     $25 = HEAP32[$0>>2]|0;
     $26 = (($25) + 68|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)!=(0);
     if (!($28)) {
      $29 = HEAP32[$0>>2]|0;
      $30 = (($29) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = HEAP32[$0>>2]|0;
      $33 = (($32) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (($31) - ($34))|0;
      $36 = (($35) + 1)|0;
      HEAP32[$T>>2] = $36;
      $37 = HEAP32[$T>>2]|0;
      $38 = $37<<3;
      HEAP32[$sz>>2] = $38;
      HEAP32[$s>>2] = 0;
      HEAP32[$i>>2] = 2;
      while(1) {
       $39 = HEAP32[$i>>2]|0;
       $40 = HEAP32[$0>>2]|0;
       $41 = (($40) + 60|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = HEAP32[$42>>2]|0;
       $44 = ($39|0)<=($43|0);
       if (!($44)) {
        break;
       }
       $45 = HEAP32[$2>>2]|0;
       $46 = (($45) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = HEAP32[$s>>2]|0;
       $49 = (($47) + ($48<<3)|0);
       $50 = HEAP32[$i>>2]|0;
       $51 = HEAP32[$0>>2]|0;
       $52 = (($51) + 60|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (($53) + ($50<<2)|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = HEAP32[$1>>2]|0;
       $57 = (($56) + 64|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = (($58) + ($55<<2)|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = HEAP32[$0>>2]|0;
       $62 = (($61) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = (($60) + ($63<<3)|0);
       $65 = HEAP32[$sz>>2]|0;
       _memcpy(($49|0),($64|0),($65|0))|0;
       $66 = HEAP32[$T>>2]|0;
       $67 = HEAP32[$s>>2]|0;
       $68 = (($67) + ($66))|0;
       HEAP32[$s>>2] = $68;
       $69 = HEAP32[$i>>2]|0;
       $70 = (($69) + 1)|0;
       HEAP32[$i>>2] = $70;
      }
      $71 = HEAP32[$3>>2]|0;
      $72 = ($71|0)!=(0|0);
      if (!($72)) {
       STACKTOP = sp;return;
      }
      $73 = HEAP32[$3>>2]|0;
      $74 = (($73) + 8|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = HEAP32[$0>>2]|0;
      $77 = (($76) + 60|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (($78) + 4|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = HEAP32[$1>>2]|0;
      $82 = (($81) + 64|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (($83) + ($80<<2)|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = HEAP32[$0>>2]|0;
      $87 = (($86) + 16|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (($85) + ($88<<3)|0);
      $90 = HEAP32[$sz>>2]|0;
      _memcpy(($75|0),($89|0),($90|0))|0;
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $91 = HEAP32[$pwe>>2]|0;
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = HEAP32[$0>>2]|0;
  $94 = (($93) + 216|0);
  $95 = +HEAPF64[$94>>3];
  $96 = HEAP32[$0>>2]|0;
  $97 = (($96) + 216|0);
  $98 = +HEAPF64[$97>>3];
  $99 = $95 * $98;
  $100 = 1.0 - $99;
  $101 = (+Math_sqrt((+$100)));
  HEAPF64[$pw1>>3] = $101;
 }
 $102 = HEAP32[$dwt>>2]|0;
 $103 = ($102|0)!=(0);
 if ($103) {
  $104 = HEAP32[$0>>2]|0;
  $105 = (($104) + 68|0);
  $106 = HEAP32[$105>>2]|0;
  HEAP32[$dwt>>2] = $106;
 }
 HEAP32[$s>>2] = 0;
 HEAP32[$i>>2] = 2;
 while(1) {
  $107 = HEAP32[$i>>2]|0;
  $108 = HEAP32[$0>>2]|0;
  $109 = (($108) + 60|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = HEAP32[$110>>2]|0;
  $112 = ($107|0)<=($111|0);
  if (!($112)) {
   break;
  }
  $113 = HEAP32[$i>>2]|0;
  $114 = HEAP32[$0>>2]|0;
  $115 = (($114) + 60|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + ($113<<2)|0);
  $118 = HEAP32[$117>>2]|0;
  HEAP32[$vi>>2] = $118;
  $119 = HEAP32[$0>>2]|0;
  $120 = (($119) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  HEAP32[$t>>2] = $121;
  while(1) {
   $122 = HEAP32[$t>>2]|0;
   $123 = HEAP32[$0>>2]|0;
   $124 = (($123) + 20|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($122|0)<=($125|0);
   if (!($126)) {
    break;
   }
   $127 = HEAP32[$0>>2]|0;
   $128 = (($127) + 32|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($129|0)!=(0|0);
   if ($130) {
    $131 = HEAP32[$t>>2]|0;
    $132 = HEAP32[$0>>2]|0;
    $133 = (($132) + 32|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($134) + ($131)|0);
    $136 = HEAP8[$135>>0]|0;
    $137 = $136 << 24 >> 24;
    $138 = ($137|0)==(49);
    if (!($138)) {
     label = 21;
    }
   } else {
    label = 21;
   }
   L30: do {
    if ((label|0) == 21) {
     label = 0;
     $139 = HEAP32[$t>>2]|0;
     $140 = HEAP32[$vi>>2]|0;
     $141 = HEAP32[$1>>2]|0;
     $142 = (($141) + 64|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = (($143) + ($140<<2)|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($145) + ($139<<3)|0);
     $147 = +HEAPF64[$146>>3];
     HEAPF64[$x>>3] = $147;
     $148 = HEAP32[$dwt>>2]|0;
     $149 = ($148|0)!=(0);
     do {
      if ($149) {
       $150 = HEAP32[$t>>2]|0;
       $151 = HEAP32[$dwt>>2]|0;
       $152 = HEAP32[$1>>2]|0;
       $153 = (($152) + 64|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = (($154) + ($151<<2)|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = (($156) + ($150<<3)|0);
       $158 = +HEAPF64[$157>>3];
       $159 = $158 == 0.0;
       if ($159) {
        break L30;
       }
      } else {
       $160 = HEAP32[$0>>2]|0;
       $161 = (($160) + 68|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)!=(0);
       if ($163) {
        $164 = HEAP32[$t>>2]|0;
        $165 = HEAP32[$0>>2]|0;
        $166 = (($165) + 68|0);
        $167 = HEAP32[$166>>2]|0;
        $168 = HEAP32[$1>>2]|0;
        $169 = (($168) + 64|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (($170) + ($167<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (($172) + ($164<<3)|0);
        $174 = +HEAPF64[$173>>3];
        $175 = (+Math_sqrt((+$174)));
        $176 = +HEAPF64[$x>>3];
        $177 = $176 * $175;
        HEAPF64[$x>>3] = $177;
        break;
       }
       $178 = HEAP32[$qdiff>>2]|0;
       $179 = ($178|0)!=(0);
       if ($179) {
        $180 = HEAP32[$pwe>>2]|0;
        $181 = ($180|0)!=(0);
        if ($181) {
         $182 = HEAP32[$t>>2]|0;
         $183 = HEAP32[$0>>2]|0;
         $184 = (($183) + 16|0);
         $185 = HEAP32[$184>>2]|0;
         $186 = ($182|0)==($185|0);
         if ($186) {
          $187 = +HEAPF64[$pw1>>3];
          $188 = +HEAPF64[$x>>3];
          $189 = $188 * $187;
          HEAPF64[$x>>3] = $189;
          break;
         }
        }
        $190 = HEAP32[$0>>2]|0;
        $191 = (($190) + 216|0);
        $192 = +HEAPF64[$191>>3];
        $193 = HEAP32[$t>>2]|0;
        $194 = (($193) - 1)|0;
        $195 = HEAP32[$vi>>2]|0;
        $196 = HEAP32[$1>>2]|0;
        $197 = (($196) + 64|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = (($198) + ($195<<2)|0);
        $200 = HEAP32[$199>>2]|0;
        $201 = (($200) + ($194<<3)|0);
        $202 = +HEAPF64[$201>>3];
        $203 = $192 * $202;
        $204 = +HEAPF64[$x>>3];
        $205 = $204 - $203;
        HEAPF64[$x>>3] = $205;
       }
      }
     } while(0);
     $206 = +HEAPF64[$x>>3];
     $207 = HEAP32[$s>>2]|0;
     $208 = (($207) + 1)|0;
     HEAP32[$s>>2] = $208;
     $209 = HEAP32[$2>>2]|0;
     $210 = (($209) + 8|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = (($211) + ($207<<3)|0);
     HEAPF64[$212>>3] = $206;
    }
   } while(0);
   $213 = HEAP32[$t>>2]|0;
   $214 = (($213) + 1)|0;
   HEAP32[$t>>2] = $214;
  }
  $215 = HEAP32[$i>>2]|0;
  $216 = (($215) + 1)|0;
  HEAP32[$i>>2] = $216;
 }
 $217 = HEAP32[$3>>2]|0;
 $218 = ($217|0)!=(0|0);
 if (!($218)) {
  STACKTOP = sp;return;
 }
 $219 = HEAP32[$0>>2]|0;
 $220 = (($219) + 60|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (($221) + 4|0);
 $223 = HEAP32[$222>>2]|0;
 HEAP32[$vy>>2] = $223;
 HEAP32[$s>>2] = 0;
 $224 = HEAP32[$0>>2]|0;
 $225 = (($224) + 16|0);
 $226 = HEAP32[$225>>2]|0;
 HEAP32[$t>>2] = $226;
 while(1) {
  $227 = HEAP32[$t>>2]|0;
  $228 = HEAP32[$0>>2]|0;
  $229 = (($228) + 20|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = ($227|0)<=($230|0);
  if (!($231)) {
   break;
  }
  $232 = HEAP32[$0>>2]|0;
  $233 = (($232) + 32|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = ($234|0)!=(0|0);
  if ($235) {
   $236 = HEAP32[$t>>2]|0;
   $237 = HEAP32[$0>>2]|0;
   $238 = (($237) + 32|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = (($239) + ($236)|0);
   $241 = HEAP8[$240>>0]|0;
   $242 = $241 << 24 >> 24;
   $243 = ($242|0)==(49);
   if (!($243)) {
    label = 38;
   }
  } else {
   label = 38;
  }
  L55: do {
   if ((label|0) == 38) {
    label = 0;
    $244 = HEAP32[$t>>2]|0;
    $245 = HEAP32[$vy>>2]|0;
    $246 = HEAP32[$1>>2]|0;
    $247 = (($246) + 64|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = (($248) + ($245<<2)|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = (($250) + ($244<<3)|0);
    $252 = +HEAPF64[$251>>3];
    HEAPF64[$x>>3] = $252;
    $253 = HEAP32[$dwt>>2]|0;
    $254 = ($253|0)!=(0);
    do {
     if ($254) {
      $255 = HEAP32[$t>>2]|0;
      $256 = HEAP32[$dwt>>2]|0;
      $257 = HEAP32[$1>>2]|0;
      $258 = (($257) + 64|0);
      $259 = HEAP32[$258>>2]|0;
      $260 = (($259) + ($256<<2)|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = (($261) + ($255<<3)|0);
      $263 = +HEAPF64[$262>>3];
      $264 = $263 == 0.0;
      if ($264) {
       break L55;
      }
     } else {
      $265 = HEAP32[$0>>2]|0;
      $266 = (($265) + 68|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = ($267|0)!=(0);
      if ($268) {
       $269 = HEAP32[$t>>2]|0;
       $270 = HEAP32[$0>>2]|0;
       $271 = (($270) + 68|0);
       $272 = HEAP32[$271>>2]|0;
       $273 = HEAP32[$1>>2]|0;
       $274 = (($273) + 64|0);
       $275 = HEAP32[$274>>2]|0;
       $276 = (($275) + ($272<<2)|0);
       $277 = HEAP32[$276>>2]|0;
       $278 = (($277) + ($269<<3)|0);
       $279 = +HEAPF64[$278>>3];
       $280 = (+Math_sqrt((+$279)));
       $281 = +HEAPF64[$x>>3];
       $282 = $281 * $280;
       HEAPF64[$x>>3] = $282;
       break;
      }
      $283 = HEAP32[$qdiff>>2]|0;
      $284 = ($283|0)!=(0);
      if ($284) {
       $285 = HEAP32[$pwe>>2]|0;
       $286 = ($285|0)!=(0);
       if ($286) {
        $287 = HEAP32[$t>>2]|0;
        $288 = HEAP32[$0>>2]|0;
        $289 = (($288) + 16|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = ($287|0)==($290|0);
        if ($291) {
         $292 = +HEAPF64[$pw1>>3];
         $293 = +HEAPF64[$x>>3];
         $294 = $293 * $292;
         HEAPF64[$x>>3] = $294;
         break;
        }
       }
       $295 = HEAP32[$0>>2]|0;
       $296 = (($295) + 216|0);
       $297 = +HEAPF64[$296>>3];
       $298 = HEAP32[$t>>2]|0;
       $299 = (($298) - 1)|0;
       $300 = HEAP32[$vy>>2]|0;
       $301 = HEAP32[$1>>2]|0;
       $302 = (($301) + 64|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = (($303) + ($300<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $306 = (($305) + ($299<<3)|0);
       $307 = +HEAPF64[$306>>3];
       $308 = $297 * $307;
       $309 = +HEAPF64[$x>>3];
       $310 = $309 - $308;
       HEAPF64[$x>>3] = $310;
      }
     }
    } while(0);
    $311 = +HEAPF64[$x>>3];
    $312 = HEAP32[$s>>2]|0;
    $313 = (($312) + 1)|0;
    HEAP32[$s>>2] = $313;
    $314 = HEAP32[$3>>2]|0;
    $315 = (($314) + 8|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (($316) + ($312<<3)|0);
    HEAPF64[$317>>3] = $311;
   }
  } while(0);
  $318 = HEAP32[$t>>2]|0;
  $319 = (($318) + 1)|0;
  HEAP32[$t>>2] = $319;
 }
 STACKTOP = sp;return;
}
function _QR_decomp_plus($Q,$R,$rank,$warn) {
 $Q = $Q|0;
 $R = $R|0;
 $rank = $rank|0;
 $warn = $warn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $diag = 0, $err = 0, $info = 0, $k = 0, $r = 0, $rcond = 0, $uplo = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp + 8|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $k = sp + 24|0;
 $rcond = sp;
 $r = sp + 20|0;
 $err = sp + 16|0;
 $uplo = sp + 49|0;
 $diag = sp + 48|0;
 $info = sp + 12|0;
 HEAP32[$1>>2] = $Q;
 HEAP32[$2>>2] = $R;
 HEAP32[$3>>2] = $rank;
 HEAP32[$4>>2] = $warn;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $9 = 0;
 } else {
  $7 = HEAP32[$2>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8;
 }
 HEAP32[$k>>2] = $9;
 HEAPF64[$rcond>>3] = 0.0;
 $10 = HEAP32[$4>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[$4>>2]|0;
  HEAP32[$12>>2] = 0;
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = (_gretl_matrix_QR_decomp($13,$14)|0);
 HEAP32[$err>>2] = $15;
 $16 = HEAP32[$err>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = HEAP32[$err>>2]|0;
  HEAP32[$0>>2] = $18;
  $44 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($44|0);
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = (_gretl_check_QR_rank($19,$err,$rcond)|0);
 HEAP32[$r>>2] = $20;
 $21 = HEAP32[$err>>2]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = HEAP32[$err>>2]|0;
  HEAP32[$0>>2] = $23;
  $44 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($44|0);
 }
 $24 = HEAP32[$r>>2]|0;
 $25 = HEAP32[$k>>2]|0;
 $26 = ($24|0)<($25|0);
 do {
  if ($26) {
   HEAP32[$err>>2] = 3;
  } else {
   HEAP8[$uplo>>0] = 85;
   HEAP8[$diag>>0] = 78;
   HEAP32[$info>>2] = 0;
   $27 = HEAP32[$2>>2]|0;
   $28 = (($27) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   (_dtrtri_(($uplo|0),($diag|0),($k|0),($29|0),($k|0),($info|0))|0);
   $30 = HEAP32[$info>>2]|0;
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = HEAP32[_stderr>>2]|0;
    $33 = HEAP32[$info>>2]|0;
    HEAP32[$vararg_buffer>>2] = $33;
    (_fprintf(($32|0),(52408|0),($vararg_buffer|0))|0);
    HEAP32[$err>>2] = 1;
    break;
   }
   $34 = +HEAPF64[$rcond>>3];
   $35 = $34 < 9.99999999999999954748E-8;
   if ($35) {
    $36 = HEAP32[$4>>2]|0;
    $37 = ($36|0)!=(0|0);
    if ($37) {
     $38 = HEAP32[$4>>2]|0;
     HEAP32[$38>>2] = 1;
    }
   }
  }
 } while(0);
 $39 = HEAP32[$3>>2]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = HEAP32[$r>>2]|0;
  $42 = HEAP32[$3>>2]|0;
  HEAP32[$42>>2] = $41;
 }
 $43 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $43;
 $44 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($44|0);
}
function _drop_redundant_vars($pmod,$dset,$R,$rank,$opt) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $R = $R|0;
 $rank = $rank|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $d = 0, $droplist = 0, $i = 0, $nd = 0;
 var $pos = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp + 8|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $droplist = sp + 32|0;
 $i = sp + 28|0;
 $vi = sp + 24|0;
 $pos = sp + 20|0;
 $nd = sp + 16|0;
 $d = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $R;
 HEAP32[$3>>2] = $rank;
 HEAP32[$4>>2] = $opt;
 HEAP32[$droplist>>2] = 0;
 HEAP32[$pos>>2] = 2;
 HEAP32[$nd>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = HEAP32[$i>>2]|0;
  $10 = HEAP32[$2>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = Math_imul($9, $11)|0;
  $13 = HEAP32[$i>>2]|0;
  $14 = (($12) + ($13))|0;
  $15 = HEAP32[$2>>2]|0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14<<3)|0);
  $19 = +HEAPF64[$18>>3];
  HEAPF64[$d>>3] = $19;
  $20 = +HEAPF64[$d>>3];
  $21 = (+Math_abs((+$20)));
  $22 = $21 < 1.00000000000000002092E-8;
  if ($22) {
   $23 = HEAP32[$pos>>2]|0;
   $24 = HEAP32[$0>>2]|0;
   $25 = (($24) + 60|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + ($23<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$vi>>2] = $28;
   $29 = HEAP32[$vi>>2]|0;
   (_gretl_list_append_term($droplist,$29)|0);
   $30 = HEAP32[_stderr>>2]|0;
   $31 = HEAP32[$vi>>2]|0;
   $32 = HEAP32[$vi>>2]|0;
   $33 = HEAP32[$1>>2]|0;
   $34 = (($33) + 68|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($32<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$vararg_buffer>>2] = $31;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $37;
   (_fprintf(($30|0),(52352|0),($vararg_buffer|0))|0);
   $38 = HEAP32[$0>>2]|0;
   $39 = (($38) + 60|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = HEAP32[$pos>>2]|0;
   $42 = (($41) + -1)|0;
   HEAP32[$pos>>2] = $42;
   (_gretl_list_delete_at_pos($40,$41)|0);
   $43 = HEAP32[$nd>>2]|0;
   $44 = (($43) + 1)|0;
   HEAP32[$nd>>2] = $44;
  }
  $45 = HEAP32[$pos>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$pos>>2] = $46;
  $47 = HEAP32[$i>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$i>>2] = $48;
 }
 $49 = HEAP32[$nd>>2]|0;
 $50 = HEAP32[$0>>2]|0;
 $51 = (($50) + 48|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) - ($49))|0;
 HEAP32[$51>>2] = $53;
 $54 = HEAP32[$0>>2]|0;
 $55 = (($54) + 24|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$0>>2]|0;
 $58 = (($57) + 48|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($56) - ($59))|0;
 $61 = HEAP32[$0>>2]|0;
 $62 = (($61) + 56|0);
 HEAP32[$62>>2] = $60;
 $63 = HEAP32[$0>>2]|0;
 $64 = (($63) + 48|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$0>>2]|0;
 $67 = (($66) + 64|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($65) - ($68))|0;
 $70 = HEAP32[$0>>2]|0;
 $71 = (($70) + 52|0);
 HEAP32[$71>>2] = $69;
 $72 = HEAP32[$droplist>>2]|0;
 $73 = ($72|0)!=(0|0);
 if (!($73)) {
  STACKTOP = sp;return;
 }
 $74 = HEAP32[$0>>2]|0;
 $75 = HEAP32[$droplist>>2]|0;
 (_gretl_model_set_list_as_data($74,52392,$75)|0);
 STACKTOP = sp;return;
}
function _allocate_model_arrays($pmod,$k,$T) {
 $pmod = $pmod|0;
 $k = $k|0;
 $T = $T|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $k;
 HEAP32[$3>>2] = $T;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  $9 = $8<<3;
  $10 = (_malloc($9)|0);
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + 80|0);
  HEAP32[$12>>2] = $10;
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 88|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = HEAP32[$3>>2]|0;
  $18 = $17<<3;
  $19 = (_malloc($18)|0);
  $20 = HEAP32[$1>>2]|0;
  $21 = (($20) + 88|0);
  HEAP32[$21>>2] = $19;
 }
 $22 = HEAP32[$1>>2]|0;
 $23 = (($22) + 84|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $26 = HEAP32[$3>>2]|0;
  $27 = $26<<3;
  $28 = (_malloc($27)|0);
  $29 = HEAP32[$1>>2]|0;
  $30 = (($29) + 84|0);
  HEAP32[$30>>2] = $28;
 }
 $31 = HEAP32[$1>>2]|0;
 $32 = (($31) + 80|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  $35 = HEAP32[$1>>2]|0;
  $36 = (($35) + 88|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0|0);
  if (!($38)) {
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + 84|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   if (!($42)) {
    HEAP32[$0>>2] = 0;
    $43 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($43|0);
   }
  }
 }
 HEAP32[$0>>2] = 1;
 $43 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($43|0);
}
function _get_resids_and_SSR($pmod,$dset,$yhat,$fulln) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $yhat = $yhat|0;
 $fulln = $fulln|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $dwt = 0, $i = 0, $pwe = 0, $qdiff = 0, $t = 0, $u = 0, $y = 0, $yvar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $dwt = sp + 32|0;
 $qdiff = sp + 28|0;
 $pwe = sp + 24|0;
 $yvar = sp + 20|0;
 $u = sp + 16|0;
 $y = sp;
 $t = sp + 12|0;
 $i = sp + 8|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $yhat;
 HEAP32[$3>>2] = $fulln;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_gretl_model_get_int($4,52336)|0);
 HEAP32[$dwt>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 216|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $8 != 0.0;
 $10 = $9&1;
 HEAP32[$qdiff>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 32768;
 HEAP32[$pwe>>2] = $14;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$yvar>>2] = $19;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 84|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$u>>2] = $22;
 HEAP32[$i>>2] = 0;
 $23 = HEAP32[$dwt>>2]|0;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = HEAP32[$0>>2]|0;
  $26 = (($25) + 68|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$dwt>>2] = $27;
 }
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + 104|0);
 HEAPF64[$29>>3] = 0.0;
 $30 = HEAP32[$qdiff>>2]|0;
 $31 = ($30|0)!=(0);
 L4: do {
  if ($31) {
   HEAP32[$t>>2] = 0;
   while(1) {
    $32 = HEAP32[$t>>2]|0;
    $33 = HEAP32[$3>>2]|0;
    $34 = ($32|0)<($33|0);
    if (!($34)) {
     break L4;
    }
    $35 = HEAP32[$t>>2]|0;
    $36 = HEAP32[$0>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($35|0)<($38|0);
    if ($39) {
     label = 8;
    } else {
     $40 = HEAP32[$t>>2]|0;
     $41 = HEAP32[$0>>2]|0;
     $42 = (($41) + 20|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($40|0)>($43|0);
     if ($44) {
      label = 8;
     } else {
      $53 = HEAP32[$t>>2]|0;
      $54 = HEAP32[$yvar>>2]|0;
      $55 = HEAP32[$1>>2]|0;
      $56 = (($55) + 64|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = (($57) + ($54<<2)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (($59) + ($53<<3)|0);
      $61 = +HEAPF64[$60>>3];
      HEAPF64[$y>>3] = $61;
      $62 = HEAP32[$t>>2]|0;
      $63 = HEAP32[$0>>2]|0;
      $64 = (($63) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($62|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$pwe>>2]|0;
       $68 = ($67|0)!=(0);
       if ($68) {
        $69 = HEAP32[$0>>2]|0;
        $70 = (($69) + 216|0);
        $71 = +HEAPF64[$70>>3];
        $72 = HEAP32[$0>>2]|0;
        $73 = (($72) + 216|0);
        $74 = +HEAPF64[$73>>3];
        $75 = $71 * $74;
        $76 = 1.0 - $75;
        $77 = (+Math_sqrt((+$76)));
        $78 = +HEAPF64[$y>>3];
        $79 = $78 * $77;
        HEAPF64[$y>>3] = $79;
       } else {
        label = 12;
       }
      } else {
       label = 12;
      }
      if ((label|0) == 12) {
       label = 0;
       $80 = HEAP32[$0>>2]|0;
       $81 = (($80) + 216|0);
       $82 = +HEAPF64[$81>>3];
       $83 = HEAP32[$t>>2]|0;
       $84 = (($83) - 1)|0;
       $85 = HEAP32[$yvar>>2]|0;
       $86 = HEAP32[$1>>2]|0;
       $87 = (($86) + 64|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = (($88) + ($85<<2)|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (($90) + ($84<<3)|0);
       $92 = +HEAPF64[$91>>3];
       $93 = $82 * $92;
       $94 = +HEAPF64[$y>>3];
       $95 = $94 - $93;
       HEAPF64[$y>>3] = $95;
      }
      $96 = HEAP32[$i>>2]|0;
      $97 = HEAP32[$2>>2]|0;
      $98 = (($97) + 8|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (($99) + ($96<<3)|0);
      $101 = +HEAPF64[$100>>3];
      $102 = HEAP32[$t>>2]|0;
      $103 = HEAP32[$0>>2]|0;
      $104 = (($103) + 88|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($105) + ($102<<3)|0);
      HEAPF64[$106>>3] = $101;
      $107 = +HEAPF64[$y>>3];
      $108 = HEAP32[$i>>2]|0;
      $109 = HEAP32[$2>>2]|0;
      $110 = (($109) + 8|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (($111) + ($108<<3)|0);
      $113 = +HEAPF64[$112>>3];
      $114 = $107 - $113;
      $115 = HEAP32[$t>>2]|0;
      $116 = HEAP32[$u>>2]|0;
      $117 = (($116) + ($115<<3)|0);
      HEAPF64[$117>>3] = $114;
      $118 = HEAP32[$t>>2]|0;
      $119 = HEAP32[$u>>2]|0;
      $120 = (($119) + ($118<<3)|0);
      $121 = +HEAPF64[$120>>3];
      $122 = HEAP32[$t>>2]|0;
      $123 = HEAP32[$u>>2]|0;
      $124 = (($123) + ($122<<3)|0);
      $125 = +HEAPF64[$124>>3];
      $126 = $121 * $125;
      $127 = HEAP32[$0>>2]|0;
      $128 = (($127) + 104|0);
      $129 = +HEAPF64[$128>>3];
      $130 = $129 + $126;
      HEAPF64[$128>>3] = $130;
      $131 = HEAP32[$i>>2]|0;
      $132 = (($131) + 1)|0;
      HEAP32[$i>>2] = $132;
     }
    }
    if ((label|0) == 8) {
     label = 0;
     $45 = HEAP32[$t>>2]|0;
     $46 = HEAP32[$u>>2]|0;
     $47 = (($46) + ($45<<3)|0);
     HEAPF64[$47>>3] = 1.79769313486231570815E+308;
     $48 = HEAP32[$t>>2]|0;
     $49 = HEAP32[$0>>2]|0;
     $50 = (($49) + 88|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = (($51) + ($48<<3)|0);
     HEAPF64[$52>>3] = 1.79769313486231570815E+308;
    }
    $133 = HEAP32[$t>>2]|0;
    $134 = (($133) + 1)|0;
    HEAP32[$t>>2] = $134;
   }
  } else {
   $135 = HEAP32[$0>>2]|0;
   $136 = (($135) + 68|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($137|0)!=(0);
   HEAP32[$t>>2] = 0;
   if (!($138)) {
    while(1) {
     $253 = HEAP32[$t>>2]|0;
     $254 = HEAP32[$3>>2]|0;
     $255 = ($253|0)<($254|0);
     if (!($255)) {
      break L4;
     }
     $256 = HEAP32[$t>>2]|0;
     $257 = HEAP32[$0>>2]|0;
     $258 = (($257) + 16|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = ($256|0)<($259|0);
     do {
      if ($260) {
       label = 34;
      } else {
       $261 = HEAP32[$t>>2]|0;
       $262 = HEAP32[$0>>2]|0;
       $263 = (($262) + 20|0);
       $264 = HEAP32[$263>>2]|0;
       $265 = ($261|0)>($264|0);
       if ($265) {
        label = 34;
       } else {
        $266 = HEAP32[$0>>2]|0;
        $267 = (($266) + 32|0);
        $268 = HEAP32[$267>>2]|0;
        $269 = ($268|0)!=(0|0);
        if ($269) {
         $270 = HEAP32[$t>>2]|0;
         $271 = HEAP32[$0>>2]|0;
         $272 = (($271) + 32|0);
         $273 = HEAP32[$272>>2]|0;
         $274 = (($273) + ($270)|0);
         $275 = HEAP8[$274>>0]|0;
         $276 = $275 << 24 >> 24;
         $277 = ($276|0)==(49);
         if ($277) {
          label = 34;
          break;
         }
        }
        $286 = HEAP32[$i>>2]|0;
        $287 = HEAP32[$2>>2]|0;
        $288 = (($287) + 8|0);
        $289 = HEAP32[$288>>2]|0;
        $290 = (($289) + ($286<<3)|0);
        $291 = +HEAPF64[$290>>3];
        $292 = HEAP32[$t>>2]|0;
        $293 = HEAP32[$0>>2]|0;
        $294 = (($293) + 88|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = (($295) + ($292<<3)|0);
        HEAPF64[$296>>3] = $291;
        $297 = HEAP32[$t>>2]|0;
        $298 = HEAP32[$yvar>>2]|0;
        $299 = HEAP32[$1>>2]|0;
        $300 = (($299) + 64|0);
        $301 = HEAP32[$300>>2]|0;
        $302 = (($301) + ($298<<2)|0);
        $303 = HEAP32[$302>>2]|0;
        $304 = (($303) + ($297<<3)|0);
        $305 = +HEAPF64[$304>>3];
        $306 = HEAP32[$i>>2]|0;
        $307 = HEAP32[$2>>2]|0;
        $308 = (($307) + 8|0);
        $309 = HEAP32[$308>>2]|0;
        $310 = (($309) + ($306<<3)|0);
        $311 = +HEAPF64[$310>>3];
        $312 = $305 - $311;
        $313 = HEAP32[$t>>2]|0;
        $314 = HEAP32[$u>>2]|0;
        $315 = (($314) + ($313<<3)|0);
        HEAPF64[$315>>3] = $312;
        $316 = HEAP32[$t>>2]|0;
        $317 = HEAP32[$u>>2]|0;
        $318 = (($317) + ($316<<3)|0);
        $319 = +HEAPF64[$318>>3];
        $320 = HEAP32[$t>>2]|0;
        $321 = HEAP32[$u>>2]|0;
        $322 = (($321) + ($320<<3)|0);
        $323 = +HEAPF64[$322>>3];
        $324 = $319 * $323;
        $325 = HEAP32[$0>>2]|0;
        $326 = (($325) + 104|0);
        $327 = +HEAPF64[$326>>3];
        $328 = $327 + $324;
        HEAPF64[$326>>3] = $328;
        $329 = HEAP32[$i>>2]|0;
        $330 = (($329) + 1)|0;
        HEAP32[$i>>2] = $330;
       }
      }
     } while(0);
     if ((label|0) == 34) {
      label = 0;
      $278 = HEAP32[$t>>2]|0;
      $279 = HEAP32[$u>>2]|0;
      $280 = (($279) + ($278<<3)|0);
      HEAPF64[$280>>3] = 1.79769313486231570815E+308;
      $281 = HEAP32[$t>>2]|0;
      $282 = HEAP32[$0>>2]|0;
      $283 = (($282) + 88|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = (($284) + ($281<<3)|0);
      HEAPF64[$285>>3] = 1.79769313486231570815E+308;
     }
     $331 = HEAP32[$t>>2]|0;
     $332 = (($331) + 1)|0;
     HEAP32[$t>>2] = $332;
    }
   }
   while(1) {
    $139 = HEAP32[$t>>2]|0;
    $140 = HEAP32[$3>>2]|0;
    $141 = ($139|0)<($140|0);
    if (!($141)) {
     break L4;
    }
    $142 = HEAP32[$t>>2]|0;
    $143 = HEAP32[$0>>2]|0;
    $144 = (($143) + 16|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($142|0)<($145|0);
    do {
     if ($146) {
      label = 21;
     } else {
      $147 = HEAP32[$t>>2]|0;
      $148 = HEAP32[$0>>2]|0;
      $149 = (($148) + 20|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($147|0)>($150|0);
      if ($151) {
       label = 21;
      } else {
       $152 = HEAP32[$0>>2]|0;
       $153 = (($152) + 32|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($154|0)!=(0|0);
       if ($155) {
        $156 = HEAP32[$t>>2]|0;
        $157 = HEAP32[$0>>2]|0;
        $158 = (($157) + 32|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = (($159) + ($156)|0);
        $161 = HEAP8[$160>>0]|0;
        $162 = $161 << 24 >> 24;
        $163 = ($162|0)==(49);
        if ($163) {
         label = 21;
         break;
        }
       }
       $172 = HEAP32[$t>>2]|0;
       $173 = HEAP32[$yvar>>2]|0;
       $174 = HEAP32[$1>>2]|0;
       $175 = (($174) + 64|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = (($176) + ($173<<2)|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = (($178) + ($172<<3)|0);
       $180 = +HEAPF64[$179>>3];
       HEAPF64[$y>>3] = $180;
       $181 = HEAP32[$dwt>>2]|0;
       $182 = ($181|0)!=(0);
       if ($182) {
        $183 = HEAP32[$t>>2]|0;
        $184 = HEAP32[$dwt>>2]|0;
        $185 = HEAP32[$1>>2]|0;
        $186 = (($185) + 64|0);
        $187 = HEAP32[$186>>2]|0;
        $188 = (($187) + ($184<<2)|0);
        $189 = HEAP32[$188>>2]|0;
        $190 = (($189) + ($183<<3)|0);
        $191 = +HEAPF64[$190>>3];
        $192 = $191 == 0.0;
        if ($192) {
         $193 = HEAP32[$t>>2]|0;
         $194 = HEAP32[$0>>2]|0;
         $195 = (($194) + 88|0);
         $196 = HEAP32[$195>>2]|0;
         $197 = (($196) + ($193<<3)|0);
         HEAPF64[$197>>3] = 1.79769313486231570815E+308;
         break;
        }
       }
       $198 = HEAP32[$dwt>>2]|0;
       $199 = ($198|0)!=(0);
       if (!($199)) {
        $200 = HEAP32[$t>>2]|0;
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + 68|0);
        $203 = HEAP32[$202>>2]|0;
        $204 = HEAP32[$1>>2]|0;
        $205 = (($204) + 64|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = (($206) + ($203<<2)|0);
        $208 = HEAP32[$207>>2]|0;
        $209 = (($208) + ($200<<3)|0);
        $210 = +HEAPF64[$209>>3];
        $211 = (+Math_sqrt((+$210)));
        $212 = +HEAPF64[$y>>3];
        $213 = $212 * $211;
        HEAPF64[$y>>3] = $213;
       }
       $214 = HEAP32[$i>>2]|0;
       $215 = HEAP32[$2>>2]|0;
       $216 = (($215) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = (($217) + ($214<<3)|0);
       $219 = +HEAPF64[$218>>3];
       $220 = HEAP32[$t>>2]|0;
       $221 = HEAP32[$0>>2]|0;
       $222 = (($221) + 88|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (($223) + ($220<<3)|0);
       HEAPF64[$224>>3] = $219;
       $225 = +HEAPF64[$y>>3];
       $226 = HEAP32[$i>>2]|0;
       $227 = HEAP32[$2>>2]|0;
       $228 = (($227) + 8|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = (($229) + ($226<<3)|0);
       $231 = +HEAPF64[$230>>3];
       $232 = $225 - $231;
       $233 = HEAP32[$t>>2]|0;
       $234 = HEAP32[$u>>2]|0;
       $235 = (($234) + ($233<<3)|0);
       HEAPF64[$235>>3] = $232;
       $236 = HEAP32[$t>>2]|0;
       $237 = HEAP32[$u>>2]|0;
       $238 = (($237) + ($236<<3)|0);
       $239 = +HEAPF64[$238>>3];
       $240 = HEAP32[$t>>2]|0;
       $241 = HEAP32[$u>>2]|0;
       $242 = (($241) + ($240<<3)|0);
       $243 = +HEAPF64[$242>>3];
       $244 = $239 * $243;
       $245 = HEAP32[$0>>2]|0;
       $246 = (($245) + 104|0);
       $247 = +HEAPF64[$246>>3];
       $248 = $247 + $244;
       HEAPF64[$246>>3] = $248;
       $249 = HEAP32[$i>>2]|0;
       $250 = (($249) + 1)|0;
       HEAP32[$i>>2] = $250;
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     $164 = HEAP32[$t>>2]|0;
     $165 = HEAP32[$u>>2]|0;
     $166 = (($165) + ($164<<3)|0);
     HEAPF64[$166>>3] = 1.79769313486231570815E+308;
     $167 = HEAP32[$t>>2]|0;
     $168 = HEAP32[$0>>2]|0;
     $169 = (($168) + 88|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = (($170) + ($167<<3)|0);
     HEAPF64[$171>>3] = 1.79769313486231570815E+308;
    }
    $251 = HEAP32[$t>>2]|0;
    $252 = (($251) + 1)|0;
    HEAP32[$t>>2] = $252;
   }
  }
 } while(0);
 $333 = HEAP32[$0>>2]|0;
 $334 = (($333) + 104|0);
 $335 = +HEAPF64[$334>>3];
 $336 = (+Math_abs((+$335)));
 $337 = $336 < 1.0000000000000000486E-22;
 if (!($337)) {
  STACKTOP = sp;return;
 }
 $338 = HEAP32[$0>>2]|0;
 $339 = (($338) + 104|0);
 HEAPF64[$339>>3] = 0.0;
 STACKTOP = sp;return;
}
function _qr_make_cluster_vcv($pmod,$ci,$dset,$XX,$opt) {
 $pmod = $pmod|0;
 $ci = $ci|0;
 $dset = $dset|0;
 $XX = $XX|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $V = 0, $cname = 0, $cvals = 0;
 var $cvar = 0, $err = 0, $n_c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $cvals = sp + 20|0;
 $V = sp + 16|0;
 $cname = sp + 12|0;
 $cvar = sp + 8|0;
 $n_c = sp + 4|0;
 $err = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $ci;
 HEAP32[$3>>2] = $dset;
 HEAP32[$4>>2] = $XX;
 HEAP32[$5>>2] = $opt;
 HEAP32[$cvals>>2] = 0;
 HEAP32[$V>>2] = 0;
 HEAP32[$n_c>>2] = 0;
 HEAP32[$err>>2] = 0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(86);
 if ($9) {
  $10 = HEAP32[$1>>2]|0;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(127);
  if ($13) {
   HEAP32[$0>>2] = 8;
   $76 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($76|0);
  }
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = (_get_optval_string($14,4)|0);
 HEAP32[$cname>>2] = $15;
 $16 = HEAP32[$cname>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  HEAP32[$0>>2] = 18;
  $76 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($76|0);
 }
 $18 = HEAP32[$3>>2]|0;
 $19 = HEAP32[$cname>>2]|0;
 $20 = (_current_series_index($18,$19)|0);
 HEAP32[$cvar>>2] = $20;
 $21 = HEAP32[$cvar>>2]|0;
 $22 = ($21|0)<(1);
 if ($22) {
  label = 8;
 } else {
  $23 = HEAP32[$cvar>>2]|0;
  $24 = HEAP32[$3>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)>=($25|0);
  if ($26) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  HEAP32[$err>>2] = 14;
 }
 $27 = HEAP32[$err>>2]|0;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $29 = HEAP32[$cvar>>2]|0;
  $30 = HEAP32[$3>>2]|0;
  $31 = (($30) + 64|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$1>>2]|0;
  $36 = (_cluster_var_values($34,$35,$err)|0);
  HEAP32[$cvals>>2] = $36;
  $37 = HEAP32[$err>>2]|0;
  $38 = ($37|0)!=(0);
  if (!($38)) {
   $39 = HEAP32[$cvals>>2]|0;
   $40 = ($39|0)==(0|0);
   if ($40) {
    $51 = 0;
   } else {
    $41 = HEAP32[$cvals>>2]|0;
    $42 = (($41) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(1);
    $45 = HEAP32[$cvals>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    if ($44) {
     $51 = $46;
    } else {
     $47 = ($46|0)==(1);
     if ($47) {
      $48 = HEAP32[$cvals>>2]|0;
      $49 = (($48) + 4|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = $50;
     } else {
      $51 = 0;
     }
    }
   }
   HEAP32[$n_c>>2] = $51;
   $52 = HEAP32[$n_c>>2]|0;
   $53 = ($52|0)<(2);
   if ($53) {
    HEAP32[$err>>2] = 2;
   }
  }
 }
 $54 = HEAP32[$err>>2]|0;
 $55 = ($54|0)!=(0);
 if (!($55)) {
  $56 = HEAP32[$1>>2]|0;
  $57 = HEAP32[$cvar>>2]|0;
  $58 = HEAP32[$cvals>>2]|0;
  $59 = HEAP32[$4>>2]|0;
  $60 = HEAP32[$3>>2]|0;
  $61 = (_cluster_vcv_calc($56,$57,$58,$59,$60,$err)|0);
  HEAP32[$V>>2] = $61;
 }
 $62 = HEAP32[$err>>2]|0;
 $63 = ($62|0)!=(0);
 if (!($63)) {
  $64 = HEAP32[$1>>2]|0;
  $65 = HEAP32[$V>>2]|0;
  $66 = (_gretl_model_write_vcv($64,$65)|0);
  HEAP32[$err>>2] = $66;
 }
 $67 = HEAP32[$err>>2]|0;
 $68 = ($67|0)!=(0);
 if (!($68)) {
  $69 = HEAP32[$1>>2]|0;
  $70 = HEAP32[$cvar>>2]|0;
  (_gretl_model_set_vcv_info($69,6,$70)|0);
  $71 = HEAP32[$1>>2]|0;
  $72 = HEAP32[$n_c>>2]|0;
  (_gretl_model_set_int($71,52224,$72)|0);
 }
 $73 = HEAP32[$V>>2]|0;
 _gretl_matrix_free($73);
 $74 = HEAP32[$cvals>>2]|0;
 _gretl_matrix_free($74);
 $75 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $75;
 $76 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($76|0);
}
function _qr_make_hac($pmod,$dset,$XTXi) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $XTXi = $XTXi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $T = 0, $V = 0;
 var $X = 0, $XOX = 0, $err = 0, $umat = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 72|0;
 $1 = sp + 68|0;
 $2 = sp + 64|0;
 $3 = sp + 60|0;
 $X = sp + 56|0;
 $XOX = sp + 52|0;
 $V = sp + 48|0;
 $umat = sp + 32|0;
 $vi = sp;
 $T = sp + 28|0;
 $err = sp + 24|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $XTXi;
 HEAP32[$V>>2] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$T>>2] = $6;
 HEAP32[$err>>2] = 0;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (_make_data_X($7,$8)|0);
 HEAP32[$X>>2] = $9;
 $10 = HEAP32[$X>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  HEAP32[$0>>2] = 12;
  $57 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($57|0);
 }
 _gretl_matrix_init($umat);
 $12 = HEAP32[$T>>2]|0;
 HEAP32[$umat>>2] = $12;
 $13 = (($umat) + 4|0);
 HEAP32[$13>>2] = 1;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 84|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = (($17) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($16) + ($19<<3)|0);
 $21 = (($umat) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$X>>2]|0;
 $23 = (_HAC_XOX($umat,$22,$vi,$err)|0);
 HEAP32[$XOX>>2] = $23;
 $24 = HEAP32[$err>>2]|0;
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $26 = HEAP32[$XOX>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$XOX>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = (_gretl_matrix_alloc($27,$29)|0);
  HEAP32[$V>>2] = $30;
  $31 = HEAP32[$V>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   HEAP32[$err>>2] = 12;
  }
 }
 $33 = HEAP32[$err>>2]|0;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $35 = HEAP32[$3>>2]|0;
  $36 = HEAP32[$XOX>>2]|0;
  $37 = HEAP32[$V>>2]|0;
  (_gretl_matrix_qform($35,1,$36,$37,0)|0);
  $38 = HEAP32[$1>>2]|0;
  $39 = HEAP32[$V>>2]|0;
  $40 = (_qr_make_vcv($38,$39,1)|0);
  HEAP32[$err>>2] = $40;
 }
 $41 = HEAP32[$err>>2]|0;
 $42 = ($41|0)!=(0);
 if (!($42)) {
  $43 = HEAP32[$1>>2]|0;
  $44 = HEAP32[$vi>>2]|0;
  $45 = (($vi) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($vi) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($vi) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($vi) + 16|0);
  $52 = +HEAPF64[$51>>3];
  (_gretl_model_set_full_vcv_info($43,$44,$46,$48,$50,$52)|0);
 }
 $53 = HEAP32[$X>>2]|0;
 _gretl_matrix_free($53);
 $54 = HEAP32[$XOX>>2]|0;
 _gretl_matrix_free($54);
 $55 = HEAP32[$V>>2]|0;
 _gretl_matrix_free($55);
 $56 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $56;
 $57 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($57|0);
}
function _qr_make_hccme($pmod,$dset,$Q,$XTXi) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $Q = $Q|0;
 $XTXi = $XTXi|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $T = 0, $X = 0, $diag = 0, $err = 0;
 var $hc_version = 0, $ht = 0, $i = 0, $k = 0, $q = 0, $t = 0, $tmp1 = 0, $tmp2 = 0, $vcv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 76|0;
 $1 = sp + 72|0;
 $2 = sp + 68|0;
 $3 = sp + 64|0;
 $4 = sp + 60|0;
 $X = sp + 56|0;
 $diag = sp + 52|0;
 $tmp1 = sp + 48|0;
 $tmp2 = sp + 44|0;
 $vcv = sp + 40|0;
 $T = sp + 36|0;
 $k = sp + 32|0;
 $hc_version = sp + 28|0;
 $i = sp + 24|0;
 $t = sp + 20|0;
 $err = sp + 16|0;
 $q = sp + 8|0;
 $ht = sp;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $Q;
 HEAP32[$4>>2] = $XTXi;
 HEAP32[$diag>>2] = 0;
 HEAP32[$tmp1>>2] = 0;
 HEAP32[$tmp2>>2] = 0;
 HEAP32[$vcv>>2] = 0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$T>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - 1)|0;
 HEAP32[$k>>2] = $12;
 HEAP32[$err>>2] = 0;
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = (_make_data_X($13,$14)|0);
 HEAP32[$X>>2] = $15;
 $16 = HEAP32[$X>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  HEAP32[$0>>2] = 1;
  $135 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($135|0);
 }
 $18 = HEAP32[$1>>2]|0;
 $19 = (($18) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$1>>2]|0;
 $22 = (($21) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20) + ($23<<3)|0);
 $25 = HEAP32[$T>>2]|0;
 $26 = (_gretl_vector_from_array($24,$25,2)|0);
 HEAP32[$diag>>2] = $26;
 $27 = HEAP32[$diag>>2]|0;
 $28 = ($27|0)==(0|0);
 do {
  if ($28) {
   HEAP32[$err>>2] = 1;
  } else {
   $29 = HEAP32[$k>>2]|0;
   $30 = HEAP32[$T>>2]|0;
   $31 = (_gretl_matrix_alloc($29,$30)|0);
   HEAP32[$tmp1>>2] = $31;
   $32 = HEAP32[$k>>2]|0;
   $33 = HEAP32[$k>>2]|0;
   $34 = (_gretl_matrix_alloc($32,$33)|0);
   HEAP32[$tmp2>>2] = $34;
   $35 = HEAP32[$k>>2]|0;
   $36 = HEAP32[$k>>2]|0;
   $37 = (_gretl_matrix_alloc($35,$36)|0);
   HEAP32[$vcv>>2] = $37;
   $38 = HEAP32[$tmp1>>2]|0;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    $40 = HEAP32[$tmp2>>2]|0;
    $41 = ($40|0)==(0|0);
    if (!($41)) {
     $42 = HEAP32[$vcv>>2]|0;
     $43 = ($42|0)==(0|0);
     if (!($43)) {
      $44 = (_libset_get_int(52320)|0);
      HEAP32[$hc_version>>2] = $44;
      $45 = HEAP32[$1>>2]|0;
      $46 = HEAP32[$hc_version>>2]|0;
      (_gretl_model_set_vcv_info($45,1,$46)|0);
      $47 = HEAP32[$hc_version>>2]|0;
      $48 = ($47|0)==(1);
      L12: do {
       if ($48) {
        HEAP32[$t>>2] = 0;
        while(1) {
         $49 = HEAP32[$t>>2]|0;
         $50 = HEAP32[$T>>2]|0;
         $51 = ($49|0)<($50|0);
         if (!($51)) {
          break L12;
         }
         $52 = HEAP32[$T>>2]|0;
         $53 = (+($52|0));
         $54 = HEAP32[$T>>2]|0;
         $55 = HEAP32[$k>>2]|0;
         $56 = (($54) - ($55))|0;
         $57 = (+($56|0));
         $58 = $53 / $57;
         $59 = HEAP32[$t>>2]|0;
         $60 = HEAP32[$diag>>2]|0;
         $61 = (($60) + 8|0);
         $62 = HEAP32[$61>>2]|0;
         $63 = (($62) + ($59<<3)|0);
         $64 = +HEAPF64[$63>>3];
         $65 = $64 * $58;
         HEAPF64[$63>>3] = $65;
         $66 = HEAP32[$t>>2]|0;
         $67 = (($66) + 1)|0;
         HEAP32[$t>>2] = $67;
        }
       } else {
        $68 = HEAP32[$hc_version>>2]|0;
        $69 = ($68|0)>(1);
        if ($69) {
         HEAP32[$t>>2] = 0;
         while(1) {
          $70 = HEAP32[$t>>2]|0;
          $71 = HEAP32[$T>>2]|0;
          $72 = ($70|0)<($71|0);
          if (!($72)) {
           break L12;
          }
          HEAPF64[$ht>>3] = 0.0;
          HEAP32[$i>>2] = 0;
          while(1) {
           $73 = HEAP32[$i>>2]|0;
           $74 = HEAP32[$k>>2]|0;
           $75 = ($73|0)<($74|0);
           if (!($75)) {
            break;
           }
           $76 = HEAP32[$i>>2]|0;
           $77 = HEAP32[$3>>2]|0;
           $78 = HEAP32[$77>>2]|0;
           $79 = Math_imul($76, $78)|0;
           $80 = HEAP32[$t>>2]|0;
           $81 = (($79) + ($80))|0;
           $82 = HEAP32[$3>>2]|0;
           $83 = (($82) + 8|0);
           $84 = HEAP32[$83>>2]|0;
           $85 = (($84) + ($81<<3)|0);
           $86 = +HEAPF64[$85>>3];
           HEAPF64[$q>>3] = $86;
           $87 = +HEAPF64[$q>>3];
           $88 = +HEAPF64[$q>>3];
           $89 = $87 * $88;
           $90 = +HEAPF64[$ht>>3];
           $91 = $90 + $89;
           HEAPF64[$ht>>3] = $91;
           $92 = HEAP32[$i>>2]|0;
           $93 = (($92) + 1)|0;
           HEAP32[$i>>2] = $93;
          }
          $94 = HEAP32[$hc_version>>2]|0;
          $95 = ($94|0)==(2);
          $96 = +HEAPF64[$ht>>3];
          $97 = 1.0 - $96;
          if ($95) {
           $98 = HEAP32[$t>>2]|0;
           $99 = HEAP32[$diag>>2]|0;
           $100 = (($99) + 8|0);
           $101 = HEAP32[$100>>2]|0;
           $102 = (($101) + ($98<<3)|0);
           $103 = +HEAPF64[$102>>3];
           $104 = $103 / $97;
           HEAPF64[$102>>3] = $104;
          } else {
           $105 = +HEAPF64[$ht>>3];
           $106 = 1.0 - $105;
           $107 = $97 * $106;
           $108 = HEAP32[$t>>2]|0;
           $109 = HEAP32[$diag>>2]|0;
           $110 = (($109) + 8|0);
           $111 = HEAP32[$110>>2]|0;
           $112 = (($111) + ($108<<3)|0);
           $113 = +HEAPF64[$112>>3];
           $114 = $113 / $107;
           HEAPF64[$112>>3] = $114;
          }
          $115 = HEAP32[$t>>2]|0;
          $116 = (($115) + 1)|0;
          HEAP32[$t>>2] = $116;
         }
        }
       }
      } while(0);
      $117 = HEAP32[$X>>2]|0;
      $118 = HEAP32[$diag>>2]|0;
      $119 = HEAP32[$tmp1>>2]|0;
      _do_X_prime_diag($117,$118,$119);
      $120 = HEAP32[$tmp1>>2]|0;
      $121 = HEAP32[$X>>2]|0;
      $122 = HEAP32[$tmp2>>2]|0;
      (_gretl_matrix_multiply($120,$121,$122)|0);
      $123 = HEAP32[$4>>2]|0;
      $124 = HEAP32[$tmp2>>2]|0;
      $125 = HEAP32[$vcv>>2]|0;
      (_gretl_matrix_qform($123,0,$124,$125,0)|0);
      $126 = HEAP32[$1>>2]|0;
      $127 = HEAP32[$vcv>>2]|0;
      $128 = (_qr_make_vcv($126,$127,1)|0);
      HEAP32[$err>>2] = $128;
      break;
     }
    }
   }
   HEAP32[$err>>2] = 1;
  }
 } while(0);
 $129 = HEAP32[$X>>2]|0;
 _gretl_matrix_free($129);
 $130 = HEAP32[$diag>>2]|0;
 _gretl_matrix_free($130);
 $131 = HEAP32[$tmp1>>2]|0;
 _gretl_matrix_free($131);
 $132 = HEAP32[$tmp2>>2]|0;
 _gretl_matrix_free($132);
 $133 = HEAP32[$vcv>>2]|0;
 _gretl_matrix_free($133);
 $134 = HEAP32[$err>>2]|0;
 HEAP32[$0>>2] = $134;
 $135 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($135|0);
}
function _qr_make_regular_vcv($pmod,$v,$opt) {
 $pmod = $pmod|0;
 $v = $v|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $flag = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $v;
 HEAP32[$2>>2] = $opt;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 8388608;
 $5 = ($4|0)!=(0);
 $6 = $5 ? 2 : 0;
 HEAP32[$flag>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$flag>>2]|0;
 $10 = (_qr_make_vcv($7,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _qr_compute_stats($pmod,$dset,$n,$opt) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $n = $n|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $den = 0, $ifc = 0, $tss = 0, $y0 = 0, $yconst = 0, $yno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $yconst = sp + 32|0;
 $ifc = sp + 28|0;
 $yno = sp + 24|0;
 $y0 = sp + 16|0;
 $tss = sp + 8|0;
 $den = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $n;
 HEAP32[$3>>2] = $opt;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$ifc>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$yno>>2] = $11;
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$1>>2]|0;
 $14 = (+_qr_get_tss($12,$13,$ifc,$yconst));
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 112|0);
 HEAPF64[$16>>3] = $14;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 152|0);
 HEAPF64[$18>>3] = 1.79769313486231570815E+308;
 $19 = HEAP32[$yconst>>2]|0;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = HEAP32[$0>>2]|0;
  $22 = (($21) + 56|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)>(0);
  if ($24) {
   $25 = HEAP32[$0>>2]|0;
   $26 = (($25) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$yno>>2]|0;
   $29 = HEAP32[$1>>2]|0;
   $30 = (($29) + 64|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + ($28<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($27<<3)|0);
   $35 = +HEAPF64[$34>>3];
   HEAPF64[$y0>>3] = $35;
   $36 = +HEAPF64[$y0>>3];
   $37 = $36 > 0.0;
   if ($37) {
    $38 = HEAP32[$0>>2]|0;
    $39 = (($38) + 24|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (+($40|0));
    $42 = +HEAPF64[$y0>>3];
    $43 = $41 * $42;
    $44 = +HEAPF64[$y0>>3];
    $45 = $43 * $44;
    HEAPF64[$tss>>3] = $45;
    $46 = HEAP32[$0>>2]|0;
    $47 = (($46) + 104|0);
    $48 = +HEAPF64[$47>>3];
    $49 = +HEAPF64[$tss>>3];
    $50 = $48 / $49;
    $51 = 1.0 - $50;
    $52 = HEAP32[$0>>2]|0;
    $53 = (($52) + 128|0);
    HEAPF64[$53>>3] = $51;
    $54 = HEAP32[$0>>2]|0;
    (_gretl_model_set_int($54,52280,1)|0);
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 do {
  if ((label|0) == 5) {
   $55 = HEAP32[$0>>2]|0;
   $56 = (($55) + 56|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)>(0);
   $59 = HEAP32[$0>>2]|0;
   if ($58) {
    $60 = (($59) + 112|0);
    $61 = +HEAPF64[$60>>3];
    $62 = HEAP32[$0>>2]|0;
    $63 = (($62) + 56|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (+($64|0));
    $66 = $61 * $65;
    HEAPF64[$den>>3] = $66;
    $67 = HEAP32[$0>>2]|0;
    $68 = (($67) + 104|0);
    $69 = +HEAPF64[$68>>3];
    $70 = HEAP32[$0>>2]|0;
    $71 = (($70) + 112|0);
    $72 = +HEAPF64[$71>>3];
    $73 = $69 / $72;
    $74 = 1.0 - $73;
    $75 = HEAP32[$0>>2]|0;
    $76 = (($75) + 128|0);
    HEAPF64[$76>>3] = $74;
    $77 = HEAP32[$0>>2]|0;
    $78 = (($77) + 104|0);
    $79 = +HEAPF64[$78>>3];
    $80 = HEAP32[$2>>2]|0;
    $81 = (($80) - 1)|0;
    $82 = (+($81|0));
    $83 = $79 * $82;
    $84 = +HEAPF64[$den>>3];
    $85 = $83 / $84;
    $86 = 1.0 - $85;
    $87 = HEAP32[$0>>2]|0;
    $88 = (($87) + 136|0);
    HEAPF64[$88>>3] = $86;
    break;
   } else {
    $89 = (($59) + 128|0);
    HEAPF64[$89>>3] = 1.0;
    break;
   }
  }
 } while(0);
 $90 = HEAP32[$0>>2]|0;
 $91 = (($90) + 48|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(1);
 if ($93) {
  $94 = HEAP32[$0>>2]|0;
  $95 = (($94) + 64|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96|0)!=(0);
  if ($97) {
   $98 = HEAP32[$0>>2]|0;
   $99 = (($98) + 144|0);
   HEAPF64[$99>>3] = 1.79769313486231570815E+308;
   STACKTOP = sp;return;
  }
 }
 $100 = HEAP32[$0>>2]|0;
 $101 = (($100) + 56|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)>(0);
 if ($103) {
  $104 = HEAP32[$0>>2]|0;
  $105 = (($104) + 52|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106|0)>(0);
  if ($107) {
   $108 = HEAP32[$3>>2]|0;
   $109 = $108 & 131072;
   $110 = ($109|0)!=(0);
   $111 = HEAP32[$0>>2]|0;
   if ($110) {
    $112 = (+_wald_omit_F(0,$111));
    $113 = HEAP32[$0>>2]|0;
    $114 = (($113) + 144|0);
    HEAPF64[$114>>3] = $112;
    STACKTOP = sp;return;
   }
   $115 = (($111) + 128|0);
   $116 = +HEAPF64[$115>>3];
   $117 = $116 == 1.0;
   $118 = HEAP32[$0>>2]|0;
   if ($117) {
    $119 = (($118) + 144|0);
    HEAPF64[$119>>3] = 1.79769313486231570815E+308;
    STACKTOP = sp;return;
   } else {
    $120 = (($118) + 112|0);
    $121 = +HEAPF64[$120>>3];
    $122 = HEAP32[$0>>2]|0;
    $123 = (($122) + 104|0);
    $124 = +HEAPF64[$123>>3];
    $125 = $121 - $124;
    $126 = HEAP32[$0>>2]|0;
    $127 = (($126) + 56|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (+($128|0));
    $130 = $125 * $129;
    $131 = HEAP32[$0>>2]|0;
    $132 = (($131) + 104|0);
    $133 = +HEAPF64[$132>>3];
    $134 = HEAP32[$0>>2]|0;
    $135 = (($134) + 52|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (+($136|0));
    $138 = $133 * $137;
    $139 = $130 / $138;
    $140 = HEAP32[$0>>2]|0;
    $141 = (($140) + 144|0);
    HEAPF64[$141>>3] = $139;
    STACKTOP = sp;return;
   }
  }
 }
 $142 = HEAP32[$0>>2]|0;
 $143 = (($142) + 144|0);
 HEAPF64[$143>>3] = 1.79769313486231570815E+308;
 STACKTOP = sp;return;
}
function _qr_dw_stats($pmod,$dset,$X,$u) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $X = $X|0;
 $u = $u|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $DW = 0, $err = 0, $pv = 0, $s = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $DW = sp + 8|0;
 $pv = sp;
 $t = sp + 24|0;
 $s = sp + 20|0;
 $err = sp + 16|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $X;
 HEAP32[$3>>2] = $u;
 HEAP32[$err>>2] = 0;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 _get_data_X($4,$5,$6);
 HEAP32[$s>>2] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$t>>2] = $9;
 while(1) {
  $10 = HEAP32[$t>>2]|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<=($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$t>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 84|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = HEAP32[$s>>2]|0;
  $22 = HEAP32[$3>>2]|0;
  $23 = (($22) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<3)|0);
  HEAPF64[$25>>3] = $20;
  $26 = HEAP32[$s>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$s>>2] = $27;
  $28 = HEAP32[$t>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$t>>2] = $29;
 }
 $30 = HEAP32[$3>>2]|0;
 $31 = HEAP32[$2>>2]|0;
 $32 = (+_dw_pval($30,$31,$DW,$err));
 HEAPF64[$pv>>3] = $32;
 $33 = HEAP32[$err>>2]|0;
 $34 = ($33|0)!=(0);
 if ($34) {
  $40 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($40|0);
 }
 $35 = +HEAPF64[$DW>>3];
 $36 = HEAP32[$0>>2]|0;
 $37 = (($36) + 208|0);
 HEAPF64[$37>>3] = $35;
 $38 = HEAP32[$0>>2]|0;
 $39 = +HEAPF64[$pv>>3];
 (_gretl_model_set_double($38,52272,$39)|0);
 $40 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function _make_data_X($pmod,$dset) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $X = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $X = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_gretl_matrix_alloc($4,$7)|0);
 HEAP32[$X>>2] = $8;
 $9 = HEAP32[$X>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $14 = HEAP32[$X>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 $11 = HEAP32[$X>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$1>>2]|0;
 _get_data_X($11,$12,$13);
 $14 = HEAP32[$X>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _cluster_var_values($cvar,$pmod,$err) {
 $cvar = $cvar|0;
 $pmod = $pmod|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ctmp = 0, $cvals = 0, $i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $cvals = sp + 12|0;
 $t = sp + 8|0;
 $ctmp = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $cvar;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $err;
 HEAP32[$cvals>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = HEAP32[$1>>2]|0;
 if (!($6)) {
  $61 = (($7) + 16|0);
  $62 = HEAP32[$61>>2]|0;
  HEAP32[$t>>2] = $62;
  while(1) {
   $63 = HEAP32[$t>>2]|0;
   $64 = HEAP32[$1>>2]|0;
   $65 = (($64) + 20|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($63|0)<=($66|0);
   if (!($67)) {
    break;
   }
   $68 = HEAP32[$2>>2]|0;
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)!=(0);
   $71 = $70 ^ 1;
   if (!($71)) {
    break;
   }
   $72 = HEAP32[$t>>2]|0;
   $73 = HEAP32[$0>>2]|0;
   $74 = (($73) + ($72<<3)|0);
   $75 = +HEAPF64[$74>>3];
   $76 = $75 == 1.79769313486231570815E+308;
   if ($76) {
    $77 = HEAP32[$2>>2]|0;
    HEAP32[$77>>2] = 34;
   }
   $78 = HEAP32[$t>>2]|0;
   $79 = (($78) + 1)|0;
   HEAP32[$t>>2] = $79;
  }
  $80 = HEAP32[$2>>2]|0;
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)!=(0);
  if ($82) {
   $93 = HEAP32[$cvals>>2]|0;
   STACKTOP = sp;return ($93|0);
  }
  $83 = HEAP32[$0>>2]|0;
  $84 = HEAP32[$1>>2]|0;
  $85 = (($84) + 16|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($83) + ($86<<3)|0);
  $88 = HEAP32[$1>>2]|0;
  $89 = (($88) + 24|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = HEAP32[$2>>2]|0;
  $92 = (_gretl_matrix_values($87,$90,262144,$91)|0);
  HEAP32[$cvals>>2] = $92;
  $93 = HEAP32[$cvals>>2]|0;
  STACKTOP = sp;return ($93|0);
 }
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<3;
 $11 = (_malloc($10)|0);
 HEAP32[$ctmp>>2] = $11;
 $12 = HEAP32[$ctmp>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = HEAP32[$2>>2]|0;
  HEAP32[$14>>2] = 12;
  $93 = HEAP32[$cvals>>2]|0;
  STACKTOP = sp;return ($93|0);
 }
 HEAP32[$i>>2] = 0;
 $15 = HEAP32[$1>>2]|0;
 $16 = (($15) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$t>>2] = $17;
 while(1) {
  $18 = HEAP32[$t>>2]|0;
  $19 = HEAP32[$1>>2]|0;
  $20 = (($19) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<=($21|0);
  if (!($22)) {
   break;
  }
  $23 = HEAP32[$2>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0);
  $26 = $25 ^ 1;
  if (!($26)) {
   break;
  }
  $27 = HEAP32[$t>>2]|0;
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($27)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = ($33|0)!=(49);
  do {
   if ($34) {
    $35 = HEAP32[$t>>2]|0;
    $36 = HEAP32[$0>>2]|0;
    $37 = (($36) + ($35<<3)|0);
    $38 = +HEAPF64[$37>>3];
    $39 = $38 == 1.79769313486231570815E+308;
    if ($39) {
     $40 = HEAP32[$2>>2]|0;
     HEAP32[$40>>2] = 34;
     break;
    } else {
     $41 = HEAP32[$t>>2]|0;
     $42 = HEAP32[$0>>2]|0;
     $43 = (($42) + ($41<<3)|0);
     $44 = +HEAPF64[$43>>3];
     $45 = HEAP32[$i>>2]|0;
     $46 = (($45) + 1)|0;
     HEAP32[$i>>2] = $46;
     $47 = HEAP32[$ctmp>>2]|0;
     $48 = (($47) + ($45<<3)|0);
     HEAPF64[$48>>3] = $44;
     break;
    }
   }
  } while(0);
  $49 = HEAP32[$t>>2]|0;
  $50 = (($49) + 1)|0;
  HEAP32[$t>>2] = $50;
 }
 $51 = HEAP32[$2>>2]|0;
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0);
 if (!($53)) {
  $54 = HEAP32[$ctmp>>2]|0;
  $55 = HEAP32[$1>>2]|0;
  $56 = (($55) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$2>>2]|0;
  $59 = (_gretl_matrix_values($54,$57,262144,$58)|0);
  HEAP32[$cvals>>2] = $59;
 }
 $60 = HEAP32[$ctmp>>2]|0;
 _free($60);
 $93 = HEAP32[$cvals>>2]|0;
 STACKTOP = sp;return ($93|0);
}
function _cluster_vcv_calc($pmod,$cvar,$cvals,$XX,$dset,$err) {
 $pmod = $pmod|0;
 $cvar = $cvar|0;
 $cvals = $cvals|0;
 $XX = $XX|0;
 $dset = $dset|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $M = 0, $N = 0, $Ni = 0, $V = 0;
 var $W = 0, $XXW = 0, $Xi = 0, $cZ = 0, $cvi = 0, $dfadj = 0, $eXi = 0, $ei = 0, $i = 0, $j = 0, $k = 0, $n_c = 0, $s = 0, $t = 0, $total_obs = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 108|0;
 $1 = sp + 104|0;
 $2 = sp + 100|0;
 $3 = sp + 96|0;
 $4 = sp + 92|0;
 $5 = sp + 88|0;
 $V = sp + 84|0;
 $W = sp + 80|0;
 $XXW = sp + 76|0;
 $ei = sp + 72|0;
 $Xi = sp + 68|0;
 $eXi = sp + 64|0;
 $cZ = sp + 60|0;
 $n_c = sp + 56|0;
 $M = sp + 52|0;
 $N = sp + 48|0;
 $k = sp + 44|0;
 $total_obs = sp + 40|0;
 $i = sp + 36|0;
 $j = sp + 32|0;
 $v = sp + 28|0;
 $t = sp + 24|0;
 $cvi = sp + 8|0;
 $Ni = sp + 20|0;
 $s = sp + 16|0;
 $dfadj = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $cvar;
 HEAP32[$2>>2] = $cvals;
 HEAP32[$3>>2] = $XX;
 HEAP32[$4>>2] = $dset;
 HEAP32[$5>>2] = $err;
 HEAP32[$V>>2] = 0;
 HEAP32[$W>>2] = 0;
 HEAP32[$XXW>>2] = 0;
 HEAP32[$ei>>2] = 0;
 HEAP32[$Xi>>2] = 0;
 HEAP32[$eXi>>2] = 0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$k>>2] = $8;
 HEAP32[$total_obs>>2] = 0;
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$4>>2]|0;
 $11 = (($10) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$cZ>>2] = $14;
 $15 = HEAP32[$0>>2]|0;
 $16 = HEAP32[$2>>2]|0;
 $17 = HEAP32[$cZ>>2]|0;
 $18 = (_cval_count_max($15,$16,$17)|0);
 HEAP32[$N>>2] = $18;
 $19 = HEAP32[$k>>2]|0;
 $20 = HEAP32[$k>>2]|0;
 $21 = (_gretl_matrix_alloc($19,$20)|0);
 HEAP32[$V>>2] = $21;
 $22 = HEAP32[$k>>2]|0;
 $23 = HEAP32[$k>>2]|0;
 $24 = (_gretl_zero_matrix_new($22,$23)|0);
 HEAP32[$W>>2] = $24;
 $25 = HEAP32[$k>>2]|0;
 $26 = HEAP32[$k>>2]|0;
 $27 = (_gretl_zero_matrix_new($25,$26)|0);
 HEAP32[$XXW>>2] = $27;
 $28 = HEAP32[$N>>2]|0;
 $29 = (_gretl_matrix_alloc($28,1)|0);
 HEAP32[$ei>>2] = $29;
 $30 = HEAP32[$N>>2]|0;
 $31 = HEAP32[$k>>2]|0;
 $32 = (_gretl_matrix_alloc($30,$31)|0);
 HEAP32[$Xi>>2] = $32;
 $33 = HEAP32[$k>>2]|0;
 $34 = (_gretl_matrix_alloc(1,$33)|0);
 HEAP32[$eXi>>2] = $34;
 $35 = HEAP32[$V>>2]|0;
 $36 = ($35|0)==(0|0);
 do {
  if ($36) {
   label = 7;
  } else {
   $37 = HEAP32[$W>>2]|0;
   $38 = ($37|0)==(0|0);
   if ($38) {
    label = 7;
   } else {
    $39 = HEAP32[$XXW>>2]|0;
    $40 = ($39|0)==(0|0);
    if ($40) {
     label = 7;
    } else {
     $41 = HEAP32[$ei>>2]|0;
     $42 = ($41|0)==(0|0);
     if ($42) {
      label = 7;
     } else {
      $43 = HEAP32[$Xi>>2]|0;
      $44 = ($43|0)==(0|0);
      if ($44) {
       label = 7;
      } else {
       $45 = HEAP32[$eXi>>2]|0;
       $46 = ($45|0)==(0|0);
       if ($46) {
        label = 7;
       } else {
        $48 = HEAP32[$2>>2]|0;
        $49 = ($48|0)==(0|0);
        if ($49) {
         $60 = 0;
        } else {
         $50 = HEAP32[$2>>2]|0;
         $51 = (($50) + 4|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($52|0)==(1);
         $54 = HEAP32[$2>>2]|0;
         $55 = HEAP32[$54>>2]|0;
         if ($53) {
          $60 = $55;
         } else {
          $56 = ($55|0)==(1);
          if ($56) {
           $57 = HEAP32[$2>>2]|0;
           $58 = (($57) + 4|0);
           $59 = HEAP32[$58>>2]|0;
           $60 = $59;
          } else {
           $60 = 0;
          }
         }
        }
        HEAP32[$M>>2] = $60;
        HEAP32[$n_c>>2] = 0;
        HEAP32[$i>>2] = 0;
        while(1) {
         $61 = HEAP32[$i>>2]|0;
         $62 = HEAP32[$M>>2]|0;
         $63 = ($61|0)<($62|0);
         if (!($63)) {
          break;
         }
         $64 = HEAP32[$i>>2]|0;
         $65 = HEAP32[$2>>2]|0;
         $66 = (($65) + 8|0);
         $67 = HEAP32[$66>>2]|0;
         $68 = (($67) + ($64<<3)|0);
         $69 = +HEAPF64[$68>>3];
         HEAPF64[$cvi>>3] = $69;
         $70 = HEAP32[$0>>2]|0;
         $71 = +HEAPF64[$cvi>>3];
         $72 = HEAP32[$cZ>>2]|0;
         $73 = (_cval_count($70,$71,$72)|0);
         HEAP32[$Ni>>2] = $73;
         HEAP32[$s>>2] = 0;
         $74 = HEAP32[$Ni>>2]|0;
         $75 = ($74|0)==(0);
         if (!($75)) {
          $76 = HEAP32[$ei>>2]|0;
          $77 = HEAP32[$Ni>>2]|0;
          $78 = (_gretl_matrix_reuse($76,$77,-1)|0);
          HEAP32[$ei>>2] = $78;
          $79 = HEAP32[$Xi>>2]|0;
          $80 = HEAP32[$Ni>>2]|0;
          $81 = (_gretl_matrix_reuse($79,$80,-1)|0);
          HEAP32[$Xi>>2] = $81;
          $82 = HEAP32[$0>>2]|0;
          $83 = (($82) + 16|0);
          $84 = HEAP32[$83>>2]|0;
          HEAP32[$t>>2] = $84;
          while(1) {
           $85 = HEAP32[$t>>2]|0;
           $86 = HEAP32[$0>>2]|0;
           $87 = (($86) + 20|0);
           $88 = HEAP32[$87>>2]|0;
           $89 = ($85|0)<=($88|0);
           if (!($89)) {
            break;
           }
           $90 = HEAP32[$t>>2]|0;
           $91 = HEAP32[$0>>2]|0;
           $92 = (($91) + 84|0);
           $93 = HEAP32[$92>>2]|0;
           $94 = (($93) + ($90<<3)|0);
           $95 = +HEAPF64[$94>>3];
           $96 = $95 == 1.79769313486231570815E+308;
           if (!($96)) {
            $97 = HEAP32[$t>>2]|0;
            $98 = HEAP32[$cZ>>2]|0;
            $99 = (($98) + ($97<<3)|0);
            $100 = +HEAPF64[$99>>3];
            $101 = +HEAPF64[$cvi>>3];
            $102 = $100 == $101;
            if ($102) {
             $103 = HEAP32[$t>>2]|0;
             $104 = HEAP32[$0>>2]|0;
             $105 = (($104) + 84|0);
             $106 = HEAP32[$105>>2]|0;
             $107 = (($106) + ($103<<3)|0);
             $108 = +HEAPF64[$107>>3];
             $109 = HEAP32[$s>>2]|0;
             $110 = HEAP32[$ei>>2]|0;
             $111 = (($110) + 8|0);
             $112 = HEAP32[$111>>2]|0;
             $113 = (($112) + ($109<<3)|0);
             HEAPF64[$113>>3] = $108;
             HEAP32[$j>>2] = 0;
             while(1) {
              $114 = HEAP32[$j>>2]|0;
              $115 = HEAP32[$k>>2]|0;
              $116 = ($114|0)<($115|0);
              if (!($116)) {
               break;
              }
              $117 = HEAP32[$j>>2]|0;
              $118 = (($117) + 2)|0;
              $119 = HEAP32[$0>>2]|0;
              $120 = (($119) + 60|0);
              $121 = HEAP32[$120>>2]|0;
              $122 = (($121) + ($118<<2)|0);
              $123 = HEAP32[$122>>2]|0;
              HEAP32[$v>>2] = $123;
              $124 = HEAP32[$t>>2]|0;
              $125 = HEAP32[$v>>2]|0;
              $126 = HEAP32[$4>>2]|0;
              $127 = (($126) + 64|0);
              $128 = HEAP32[$127>>2]|0;
              $129 = (($128) + ($125<<2)|0);
              $130 = HEAP32[$129>>2]|0;
              $131 = (($130) + ($124<<3)|0);
              $132 = +HEAPF64[$131>>3];
              $133 = HEAP32[$j>>2]|0;
              $134 = HEAP32[$Xi>>2]|0;
              $135 = HEAP32[$134>>2]|0;
              $136 = Math_imul($133, $135)|0;
              $137 = HEAP32[$s>>2]|0;
              $138 = (($136) + ($137))|0;
              $139 = HEAP32[$Xi>>2]|0;
              $140 = (($139) + 8|0);
              $141 = HEAP32[$140>>2]|0;
              $142 = (($141) + ($138<<3)|0);
              HEAPF64[$142>>3] = $132;
              $143 = HEAP32[$j>>2]|0;
              $144 = (($143) + 1)|0;
              HEAP32[$j>>2] = $144;
             }
             $145 = HEAP32[$s>>2]|0;
             $146 = (($145) + 1)|0;
             HEAP32[$s>>2] = $146;
            }
           }
           $147 = HEAP32[$s>>2]|0;
           $148 = HEAP32[$Ni>>2]|0;
           $149 = ($147|0)==($148|0);
           if ($149) {
            break;
           }
           $150 = HEAP32[$t>>2]|0;
           $151 = (($150) + 1)|0;
           HEAP32[$t>>2] = $151;
          }
          $152 = HEAP32[$ei>>2]|0;
          $153 = HEAP32[$Xi>>2]|0;
          $154 = HEAP32[$eXi>>2]|0;
          (_gretl_matrix_multiply_mod($152,1,$153,0,$154,0)|0);
          $155 = HEAP32[$eXi>>2]|0;
          $156 = HEAP32[$eXi>>2]|0;
          $157 = HEAP32[$W>>2]|0;
          (_gretl_matrix_multiply_mod($155,1,$156,0,$157,3)|0);
          $158 = HEAP32[$n_c>>2]|0;
          $159 = (($158) + 1)|0;
          HEAP32[$n_c>>2] = $159;
          $160 = HEAP32[$s>>2]|0;
          $161 = HEAP32[$total_obs>>2]|0;
          $162 = (($161) + ($160))|0;
          HEAP32[$total_obs>>2] = $162;
         }
         $163 = HEAP32[$i>>2]|0;
         $164 = (($163) + 1)|0;
         HEAP32[$i>>2] = $164;
        }
        $165 = HEAP32[$n_c>>2]|0;
        $166 = ($165|0)<(2);
        if ($166) {
         _gretl_errmsg_set(52240);
         $167 = HEAP32[$5>>2]|0;
         HEAP32[$167>>2] = 2;
         break;
        }
        $168 = HEAP32[$total_obs>>2]|0;
        $169 = HEAP32[$0>>2]|0;
        $170 = (($169) + 24|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($168|0)<($171|0);
        if ($172) {
         $173 = HEAP32[$5>>2]|0;
         HEAP32[$173>>2] = 34;
         break;
        }
        $174 = HEAP32[$3>>2]|0;
        $175 = HEAP32[$W>>2]|0;
        $176 = HEAP32[$XXW>>2]|0;
        (_gretl_matrix_multiply($174,$175,$176)|0);
        $177 = HEAP32[$XXW>>2]|0;
        $178 = HEAP32[$3>>2]|0;
        $179 = HEAP32[$V>>2]|0;
        (_gretl_matrix_multiply($177,$178,$179)|0);
        $180 = HEAP32[$V>>2]|0;
        _gretl_matrix_xtr_symmetric($180);
        $181 = HEAP32[$0>>2]|0;
        $182 = (($181) + 12|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = $183 & 8192;
        $185 = ($184|0)!=(0);
        if (!($185)) {
         $186 = HEAP32[$0>>2]|0;
         $187 = (($186) + 24|0);
         $188 = HEAP32[$187>>2]|0;
         HEAP32[$N>>2] = $188;
         $189 = HEAP32[$M>>2]|0;
         $190 = (+($189|0));
         $191 = HEAP32[$M>>2]|0;
         $192 = (+($191|0));
         $193 = $192 - 1.0;
         $194 = $190 / $193;
         $195 = HEAP32[$N>>2]|0;
         $196 = (+($195|0));
         $197 = $196 - 1.0;
         $198 = $194 * $197;
         $199 = HEAP32[$N>>2]|0;
         $200 = HEAP32[$k>>2]|0;
         $201 = (($199) - ($200))|0;
         $202 = (+($201|0));
         $203 = $198 / $202;
         HEAPF64[$dfadj>>3] = $203;
         $204 = HEAP32[$V>>2]|0;
         $205 = +HEAPF64[$dfadj>>3];
         _gretl_matrix_multiply_by_scalar($204,$205);
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $47 = HEAP32[$5>>2]|0;
  HEAP32[$47>>2] = 12;
 }
 $206 = HEAP32[$W>>2]|0;
 _gretl_matrix_free($206);
 $207 = HEAP32[$XXW>>2]|0;
 _gretl_matrix_free($207);
 $208 = HEAP32[$ei>>2]|0;
 _gretl_matrix_free($208);
 $209 = HEAP32[$Xi>>2]|0;
 _gretl_matrix_free($209);
 $210 = HEAP32[$eXi>>2]|0;
 _gretl_matrix_free($210);
 $211 = HEAP32[$5>>2]|0;
 $212 = HEAP32[$211>>2]|0;
 $213 = ($212|0)!=(0);
 if (!($213)) {
  $215 = HEAP32[$V>>2]|0;
  STACKTOP = sp;return ($215|0);
 }
 $214 = HEAP32[$V>>2]|0;
 _gretl_matrix_free($214);
 HEAP32[$V>>2] = 0;
 $215 = HEAP32[$V>>2]|0;
 STACKTOP = sp;return ($215|0);
}
function _cval_count_max($pmod,$cvals,$cZ) {
 $pmod = $pmod|0;
 $cvals = $cvals|0;
 $cZ = $cZ|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cc = 0, $cmax = 0, $i = 0, $n = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $n = sp + 12|0;
 $i = sp + 8|0;
 $cc = sp + 4|0;
 $cmax = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $cvals;
 HEAP32[$2>>2] = $cZ;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $15 = 0;
 } else {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  $9 = HEAP32[$1>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  if ($8) {
   $15 = $10;
  } else {
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = HEAP32[$1>>2]|0;
    $13 = (($12) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
   } else {
    $15 = 0;
   }
  }
 }
 HEAP32[$n>>2] = $15;
 HEAP32[$cmax>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $16 = HEAP32[$i>>2]|0;
  $17 = HEAP32[$n>>2]|0;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = HEAP32[$0>>2]|0;
  $20 = HEAP32[$i>>2]|0;
  $21 = HEAP32[$1>>2]|0;
  $22 = (($21) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = HEAP32[$2>>2]|0;
  $27 = (_cval_count($19,$25,$26)|0);
  HEAP32[$cc>>2] = $27;
  $28 = HEAP32[$cc>>2]|0;
  $29 = HEAP32[$cmax>>2]|0;
  $30 = ($28|0)>($29|0);
  if ($30) {
   $31 = HEAP32[$cc>>2]|0;
   HEAP32[$cmax>>2] = $31;
  }
  $32 = HEAP32[$i>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$i>>2] = $33;
 }
 $34 = HEAP32[$cmax>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _cval_count($pmod,$cvi,$cZ) {
 $pmod = $pmod|0;
 $cvi = +$cvi;
 $cZ = $cZ|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cc = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp;
 $2 = sp + 16|0;
 $t = sp + 12|0;
 $cc = sp + 8|0;
 HEAP32[$0>>2] = $pmod;
 HEAPF64[$1>>3] = $cvi;
 HEAP32[$2>>2] = $cZ;
 HEAP32[$cc>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$t>>2] = $5;
 while(1) {
  $6 = HEAP32[$t>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<=($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$t>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 84|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<3)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $16 == 1.79769313486231570815E+308;
  if (!($17)) {
   $18 = HEAP32[$t>>2]|0;
   $19 = HEAP32[$2>>2]|0;
   $20 = (($19) + ($18<<3)|0);
   $21 = +HEAPF64[$20>>3];
   $22 = +HEAPF64[$1>>3];
   $23 = $21 == $22;
   if ($23) {
    $24 = HEAP32[$cc>>2]|0;
    $25 = (($24) + 1)|0;
    HEAP32[$cc>>2] = $25;
   }
  }
  $26 = HEAP32[$t>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$t>>2] = $27;
 }
 $28 = HEAP32[$cc>>2]|0;
 STACKTOP = sp;return ($28|0);
}
function _get_data_X($X,$pmod,$dset) {
 $X = $X|0;
 $pmod = $pmod|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $T = 0, $i = 0, $s = 0, $sz = 0, $t = 0, $vi = 0, $wt = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $wt = sp + 24|0;
 $i = sp + 20|0;
 $t = sp + 16|0;
 $vi = sp + 12|0;
 $s = sp + 8|0;
 $T = sp + 4|0;
 $sz = sp;
 HEAP32[$0>>2] = $X;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$wt>>2] = $5;
 HEAP32[$s>>2] = 0;
 $6 = HEAP32[$wt>>2]|0;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = (($12) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$1>>2]|0;
   $16 = (($15) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) - ($17))|0;
   $19 = (($18) + 1)|0;
   HEAP32[$T>>2] = $19;
   $20 = HEAP32[$T>>2]|0;
   $21 = $20<<3;
   HEAP32[$sz>>2] = $21;
   HEAP32[$i>>2] = 2;
   while(1) {
    $22 = HEAP32[$i>>2]|0;
    $23 = HEAP32[$1>>2]|0;
    $24 = (($23) + 60|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($22|0)<=($26|0);
    if (!($27)) {
     break;
    }
    $28 = HEAP32[$i>>2]|0;
    $29 = HEAP32[$1>>2]|0;
    $30 = (($29) + 60|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + ($28<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    HEAP32[$vi>>2] = $33;
    $34 = HEAP32[$0>>2]|0;
    $35 = (($34) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$s>>2]|0;
    $38 = (($36) + ($37<<3)|0);
    $39 = HEAP32[$vi>>2]|0;
    $40 = HEAP32[$2>>2]|0;
    $41 = (($40) + 64|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + ($39<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$1>>2]|0;
    $46 = (($45) + 16|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($44) + ($47<<3)|0);
    $49 = HEAP32[$sz>>2]|0;
    _memcpy(($38|0),($48|0),($49|0))|0;
    $50 = HEAP32[$T>>2]|0;
    $51 = HEAP32[$s>>2]|0;
    $52 = (($51) + ($50))|0;
    HEAP32[$s>>2] = $52;
    $53 = HEAP32[$i>>2]|0;
    $54 = (($53) + 1)|0;
    HEAP32[$i>>2] = $54;
   }
   STACKTOP = sp;return;
  }
 }
 HEAP32[$i>>2] = 2;
 while(1) {
  $55 = HEAP32[$i>>2]|0;
  $56 = HEAP32[$1>>2]|0;
  $57 = (($56) + 60|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP32[$58>>2]|0;
  $60 = ($55|0)<=($59|0);
  if (!($60)) {
   break;
  }
  $61 = HEAP32[$i>>2]|0;
  $62 = HEAP32[$1>>2]|0;
  $63 = (($62) + 60|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($61<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  HEAP32[$vi>>2] = $66;
  $67 = HEAP32[$1>>2]|0;
  $68 = (($67) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  HEAP32[$t>>2] = $69;
  while(1) {
   $70 = HEAP32[$t>>2]|0;
   $71 = HEAP32[$1>>2]|0;
   $72 = (($71) + 20|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($70|0)<=($73|0);
   if (!($74)) {
    break;
   }
   $75 = HEAP32[$1>>2]|0;
   $76 = (($75) + 32|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)!=(0|0);
   if ($78) {
    $79 = HEAP32[$t>>2]|0;
    $80 = HEAP32[$1>>2]|0;
    $81 = (($80) + 32|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($82) + ($79)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84 << 24 >> 24;
    $86 = ($85|0)==(49);
    if (!($86)) {
     label = 12;
    }
   } else {
    label = 12;
   }
   do {
    if ((label|0) == 12) {
     label = 0;
     $87 = HEAP32[$wt>>2]|0;
     $88 = ($87|0)!=(0);
     $89 = HEAP32[$t>>2]|0;
     if ($88) {
      $90 = HEAP32[$wt>>2]|0;
      $91 = HEAP32[$2>>2]|0;
      $92 = (($91) + 64|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($93) + ($90<<2)|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (($95) + ($89<<3)|0);
      $97 = +HEAPF64[$96>>3];
      $98 = (+Math_sqrt((+$97)));
      $99 = HEAP32[$t>>2]|0;
      $100 = HEAP32[$vi>>2]|0;
      $101 = HEAP32[$2>>2]|0;
      $102 = (($101) + 64|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (($103) + ($100<<2)|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($105) + ($99<<3)|0);
      $107 = +HEAPF64[$106>>3];
      $108 = $98 * $107;
      $109 = HEAP32[$s>>2]|0;
      $110 = (($109) + 1)|0;
      HEAP32[$s>>2] = $110;
      $111 = HEAP32[$0>>2]|0;
      $112 = (($111) + 8|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = (($113) + ($109<<3)|0);
      HEAPF64[$114>>3] = $108;
      break;
     } else {
      $115 = HEAP32[$vi>>2]|0;
      $116 = HEAP32[$2>>2]|0;
      $117 = (($116) + 64|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = (($118) + ($115<<2)|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (($120) + ($89<<3)|0);
      $122 = +HEAPF64[$121>>3];
      $123 = HEAP32[$s>>2]|0;
      $124 = (($123) + 1)|0;
      HEAP32[$s>>2] = $124;
      $125 = HEAP32[$0>>2]|0;
      $126 = (($125) + 8|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = (($127) + ($123<<3)|0);
      HEAPF64[$128>>3] = $122;
      break;
     }
    }
   } while(0);
   $129 = HEAP32[$t>>2]|0;
   $130 = (($129) + 1)|0;
   HEAP32[$t>>2] = $130;
  }
  $131 = HEAP32[$i>>2]|0;
  $132 = (($131) + 1)|0;
  HEAP32[$i>>2] = $132;
 }
 STACKTOP = sp;return;
}
function _qr_get_tss($pmod,$dset,$ifc,$yconst) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $ifc = $ifc|0;
 $yconst = $yconst|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cR2 = 0, $ctss = 0, $d = 0, $pwe = 0, $ry = 0, $t = 0, $tss = 0;
 var $x = 0, $y0 = 0, $ymean = 0, $yno = 0, $yt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 96|0;
 $1 = sp + 92|0;
 $2 = sp + 88|0;
 $3 = sp + 84|0;
 $yno = sp + 80|0;
 $pwe = sp + 76|0;
 $yt = sp + 64|0;
 $y0 = sp + 56|0;
 $ymean = sp + 48|0;
 $x = sp + 40|0;
 $tss = sp + 32|0;
 $ctss = sp + 24|0;
 $t = sp + 72|0;
 $ry = sp + 16|0;
 $d = sp + 8|0;
 $cR2 = sp;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $ifc;
 HEAP32[$3>>2] = $yconst;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$yno>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 32768;
 HEAP32[$pwe>>2] = $12;
 HEAPF64[$y0>>3] = 0.0;
 HEAPF64[$ymean>>3] = 0.0;
 HEAPF64[$tss>>3] = 0.0;
 HEAPF64[$ctss>>3] = 0.0;
 $13 = HEAP32[$2>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = HEAP32[$0>>2]|0;
  $17 = HEAP32[$1>>2]|0;
  $18 = (_check_for_effective_const($16,$17)|0);
  $19 = HEAP32[$2>>2]|0;
  HEAP32[$19>>2] = $18;
 }
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$20>>2] = 1;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 216|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 != 0.0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$t>>2] = $27;
 L4: do {
  if ($24) {
   while(1) {
    $28 = HEAP32[$t>>2]|0;
    $29 = HEAP32[$0>>2]|0;
    $30 = (($29) + 20|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($28|0)<=($31|0);
    if (!($32)) {
     break;
    }
    $33 = HEAP32[$t>>2]|0;
    $34 = HEAP32[$yno>>2]|0;
    $35 = HEAP32[$1>>2]|0;
    $36 = (($35) + 64|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($34<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + ($33<<3)|0);
    $41 = +HEAPF64[$40>>3];
    HEAPF64[$ry>>3] = $41;
    $42 = HEAP32[$t>>2]|0;
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + 16|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($42|0)==($45|0);
    if ($46) {
     $47 = HEAP32[$pwe>>2]|0;
     $48 = ($47|0)!=(0);
     if ($48) {
      $49 = HEAP32[$0>>2]|0;
      $50 = (($49) + 216|0);
      $51 = +HEAPF64[$50>>3];
      $52 = HEAP32[$0>>2]|0;
      $53 = (($52) + 216|0);
      $54 = +HEAPF64[$53>>3];
      $55 = $51 * $54;
      $56 = 1.0 - $55;
      $57 = (+Math_sqrt((+$56)));
      $58 = +HEAPF64[$ry>>3];
      $59 = $58 * $57;
      HEAPF64[$ry>>3] = $59;
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
    if ((label|0) == 8) {
     label = 0;
     $60 = HEAP32[$0>>2]|0;
     $61 = (($60) + 216|0);
     $62 = +HEAPF64[$61>>3];
     $63 = HEAP32[$t>>2]|0;
     $64 = (($63) - 1)|0;
     $65 = HEAP32[$yno>>2]|0;
     $66 = HEAP32[$1>>2]|0;
     $67 = (($66) + 64|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + ($65<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + ($64<<3)|0);
     $72 = +HEAPF64[$71>>3];
     $73 = $62 * $72;
     $74 = +HEAPF64[$ry>>3];
     $75 = $74 - $73;
     HEAPF64[$ry>>3] = $75;
    }
    $76 = +HEAPF64[$ry>>3];
    $77 = +HEAPF64[$ymean>>3];
    $78 = $77 + $76;
    HEAPF64[$ymean>>3] = $78;
    $79 = HEAP32[$t>>2]|0;
    $80 = (($79) + 1)|0;
    HEAP32[$t>>2] = $80;
   }
   $81 = HEAP32[$0>>2]|0;
   $82 = (($81) + 24|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (+($83|0));
   $85 = +HEAPF64[$ymean>>3];
   $86 = $85 / $84;
   HEAPF64[$ymean>>3] = $86;
   $87 = HEAP32[$0>>2]|0;
   $88 = (($87) + 16|0);
   $89 = HEAP32[$88>>2]|0;
   HEAP32[$t>>2] = $89;
   while(1) {
    $90 = HEAP32[$t>>2]|0;
    $91 = HEAP32[$0>>2]|0;
    $92 = (($91) + 20|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($90|0)<=($93|0);
    if (!($94)) {
     break L4;
    }
    $95 = HEAP32[$t>>2]|0;
    $96 = HEAP32[$yno>>2]|0;
    $97 = HEAP32[$1>>2]|0;
    $98 = (($97) + 64|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($99) + ($96<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + ($95<<3)|0);
    $103 = +HEAPF64[$102>>3];
    HEAPF64[$ry>>3] = $103;
    $104 = HEAP32[$t>>2]|0;
    $105 = HEAP32[$0>>2]|0;
    $106 = (($105) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($104|0)==($107|0);
    if ($108) {
     $109 = HEAP32[$pwe>>2]|0;
     $110 = ($109|0)!=(0);
     if ($110) {
      $111 = HEAP32[$0>>2]|0;
      $112 = (($111) + 216|0);
      $113 = +HEAPF64[$112>>3];
      $114 = HEAP32[$0>>2]|0;
      $115 = (($114) + 216|0);
      $116 = +HEAPF64[$115>>3];
      $117 = $113 * $116;
      $118 = 1.0 - $117;
      $119 = (+Math_sqrt((+$118)));
      $120 = +HEAPF64[$ry>>3];
      $121 = $120 * $119;
      HEAPF64[$ry>>3] = $121;
     } else {
      label = 15;
     }
    } else {
     label = 15;
    }
    if ((label|0) == 15) {
     label = 0;
     $122 = HEAP32[$0>>2]|0;
     $123 = (($122) + 216|0);
     $124 = +HEAPF64[$123>>3];
     $125 = HEAP32[$t>>2]|0;
     $126 = (($125) - 1)|0;
     $127 = HEAP32[$yno>>2]|0;
     $128 = HEAP32[$1>>2]|0;
     $129 = (($128) + 64|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($130) + ($127<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + ($126<<3)|0);
     $134 = +HEAPF64[$133>>3];
     $135 = $124 * $134;
     $136 = +HEAPF64[$ry>>3];
     $137 = $136 - $135;
     HEAPF64[$ry>>3] = $137;
    }
    $138 = HEAP32[$t>>2]|0;
    $139 = HEAP32[$0>>2]|0;
    $140 = (($139) + 16|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ($138|0)==($141|0);
    $143 = +HEAPF64[$ry>>3];
    if ($142) {
     HEAPF64[$y0>>3] = $143;
    } else {
     $144 = +HEAPF64[$y0>>3];
     $145 = $143 != $144;
     if ($145) {
      $146 = HEAP32[$3>>2]|0;
      HEAP32[$146>>2] = 0;
     }
    }
    $147 = +HEAPF64[$ry>>3];
    $148 = +HEAPF64[$ymean>>3];
    $149 = $147 - $148;
    HEAPF64[$d>>3] = $149;
    $150 = HEAP32[$2>>2]|0;
    $151 = HEAP32[$150>>2]|0;
    $152 = ($151|0)!=(0);
    if ($152) {
     $153 = +HEAPF64[$d>>3];
     $154 = +HEAPF64[$d>>3];
     $155 = $153 * $154;
     $156 = +HEAPF64[$tss>>3];
     $157 = $156 + $155;
     HEAPF64[$tss>>3] = $157;
    } else {
     $158 = +HEAPF64[$ry>>3];
     $159 = +HEAPF64[$ry>>3];
     $160 = $158 * $159;
     $161 = +HEAPF64[$tss>>3];
     $162 = $161 + $160;
     HEAPF64[$tss>>3] = $162;
     $163 = +HEAPF64[$d>>3];
     $164 = +HEAPF64[$d>>3];
     $165 = $163 * $164;
     $166 = +HEAPF64[$ctss>>3];
     $167 = $166 + $165;
     HEAPF64[$ctss>>3] = $167;
    }
    $168 = HEAP32[$t>>2]|0;
    $169 = (($168) + 1)|0;
    HEAP32[$t>>2] = $169;
   }
  } else {
   while(1) {
    $170 = HEAP32[$t>>2]|0;
    $171 = HEAP32[$0>>2]|0;
    $172 = (($171) + 20|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ($170|0)<=($173|0);
    if (!($174)) {
     break;
    }
    $175 = HEAP32[$t>>2]|0;
    $176 = HEAP32[$0>>2]|0;
    $177 = (($176) + 88|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($178) + ($175<<3)|0);
    $180 = +HEAPF64[$179>>3];
    $181 = $180 == 1.79769313486231570815E+308;
    if (!($181)) {
     $182 = HEAP32[$t>>2]|0;
     $183 = HEAP32[$yno>>2]|0;
     $184 = HEAP32[$1>>2]|0;
     $185 = (($184) + 64|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = (($186) + ($183<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (($188) + ($182<<3)|0);
     $190 = +HEAPF64[$189>>3];
     $191 = +HEAPF64[$ymean>>3];
     $192 = $191 + $190;
     HEAPF64[$ymean>>3] = $192;
    }
    $193 = HEAP32[$t>>2]|0;
    $194 = (($193) + 1)|0;
    HEAP32[$t>>2] = $194;
   }
   $195 = HEAP32[$0>>2]|0;
   $196 = (($195) + 24|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = (+($197|0));
   $199 = +HEAPF64[$ymean>>3];
   $200 = $199 / $198;
   HEAPF64[$ymean>>3] = $200;
   $201 = HEAP32[$0>>2]|0;
   $202 = (($201) + 16|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = HEAP32[$yno>>2]|0;
   $205 = HEAP32[$1>>2]|0;
   $206 = (($205) + 64|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = (($207) + ($204<<2)|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = (($209) + ($203<<3)|0);
   $211 = +HEAPF64[$210>>3];
   HEAPF64[$y0>>3] = $211;
   $212 = HEAP32[$0>>2]|0;
   $213 = (($212) + 16|0);
   $214 = HEAP32[$213>>2]|0;
   HEAP32[$t>>2] = $214;
   while(1) {
    $215 = HEAP32[$t>>2]|0;
    $216 = HEAP32[$0>>2]|0;
    $217 = (($216) + 20|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($215|0)<=($218|0);
    if (!($219)) {
     break L4;
    }
    $220 = HEAP32[$t>>2]|0;
    $221 = HEAP32[$0>>2]|0;
    $222 = (($221) + 88|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = (($223) + ($220<<3)|0);
    $225 = +HEAPF64[$224>>3];
    $226 = $225 == 1.79769313486231570815E+308;
    do {
     if (!($226)) {
      $227 = HEAP32[$t>>2]|0;
      $228 = HEAP32[$yno>>2]|0;
      $229 = HEAP32[$1>>2]|0;
      $230 = (($229) + 64|0);
      $231 = HEAP32[$230>>2]|0;
      $232 = (($231) + ($228<<2)|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = (($233) + ($227<<3)|0);
      $235 = +HEAPF64[$234>>3];
      $236 = +HEAPF64[$y0>>3];
      $237 = $235 != $236;
      if ($237) {
       $238 = HEAP32[$3>>2]|0;
       HEAP32[$238>>2] = 0;
      }
      $239 = HEAP32[$t>>2]|0;
      $240 = HEAP32[$yno>>2]|0;
      $241 = HEAP32[$1>>2]|0;
      $242 = (($241) + 64|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = (($243) + ($240<<2)|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = (($245) + ($239<<3)|0);
      $247 = +HEAPF64[$246>>3];
      $248 = +HEAPF64[$ymean>>3];
      $249 = $247 - $248;
      HEAPF64[$x>>3] = $249;
      $250 = HEAP32[$2>>2]|0;
      $251 = HEAP32[$250>>2]|0;
      $252 = ($251|0)!=(0);
      if ($252) {
       $253 = +HEAPF64[$x>>3];
       $254 = +HEAPF64[$x>>3];
       $255 = $253 * $254;
       $256 = +HEAPF64[$tss>>3];
       $257 = $256 + $255;
       HEAPF64[$tss>>3] = $257;
       break;
      } else {
       $258 = HEAP32[$t>>2]|0;
       $259 = HEAP32[$yno>>2]|0;
       $260 = HEAP32[$1>>2]|0;
       $261 = (($260) + 64|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = (($262) + ($259<<2)|0);
       $264 = HEAP32[$263>>2]|0;
       $265 = (($264) + ($258<<3)|0);
       $266 = +HEAPF64[$265>>3];
       HEAPF64[$yt>>3] = $266;
       $267 = +HEAPF64[$yt>>3];
       $268 = +HEAPF64[$yt>>3];
       $269 = $267 * $268;
       $270 = +HEAPF64[$tss>>3];
       $271 = $270 + $269;
       HEAPF64[$tss>>3] = $271;
       $272 = +HEAPF64[$x>>3];
       $273 = +HEAPF64[$x>>3];
       $274 = $272 * $273;
       $275 = +HEAPF64[$ctss>>3];
       $276 = $275 + $274;
       HEAPF64[$ctss>>3] = $276;
       break;
      }
     }
    } while(0);
    $277 = HEAP32[$t>>2]|0;
    $278 = (($277) + 1)|0;
    HEAP32[$t>>2] = $278;
   }
  }
 } while(0);
 $279 = HEAP32[$2>>2]|0;
 $280 = HEAP32[$279>>2]|0;
 $281 = ($280|0)!=(0);
 if ($281) {
  $292 = +HEAPF64[$tss>>3];
  STACKTOP = sp;return (+$292);
 }
 $282 = +HEAPF64[$ctss>>3];
 $283 = $282 > 0.0;
 if (!($283)) {
  $292 = +HEAPF64[$tss>>3];
  STACKTOP = sp;return (+$292);
 }
 $284 = HEAP32[$0>>2]|0;
 $285 = (($284) + 104|0);
 $286 = +HEAPF64[$285>>3];
 $287 = +HEAPF64[$ctss>>3];
 $288 = $286 / $287;
 $289 = 1.0 - $288;
 HEAPF64[$cR2>>3] = $289;
 $290 = HEAP32[$0>>2]|0;
 $291 = +HEAPF64[$cR2>>3];
 (_gretl_model_set_double($290,52296,$291)|0);
 $292 = +HEAPF64[$tss>>3];
 STACKTOP = sp;return (+$292);
}
function _qr_make_vcv($pmod,$v,$flag) {
 $pmod = $pmod|0;
 $v = $v|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $i = 0, $idx = 0, $j = 0, $k = 0, $m = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $k = sp + 24|0;
 $m = sp + 20|0;
 $x = sp;
 $i = sp + 16|0;
 $j = sp + 12|0;
 $idx = sp + 8|0;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $v;
 HEAP32[$3>>2] = $flag;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$k>>2] = $6;
 $7 = HEAP32[$k>>2]|0;
 $8 = HEAP32[$k>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = Math_imul($7, $9)|0;
 $11 = (($10|0) / 2)&-1;
 HEAP32[$m>>2] = $11;
 $12 = HEAP32[$m>>2]|0;
 $13 = $12<<3;
 $14 = (_malloc($13)|0);
 $15 = HEAP32[$1>>2]|0;
 $16 = (($15) + 96|0);
 HEAP32[$16>>2] = $14;
 $17 = HEAP32[$1>>2]|0;
 $18 = (($17) + 96|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  HEAP32[$0>>2] = 12;
  $87 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($87|0);
 }
 $21 = HEAP32[$3>>2]|0;
 $22 = ($21|0)==(2);
 if ($22) {
  $23 = HEAP32[$1>>2]|0;
  (_gretl_model_set_int($23,52312,1)|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $24 = HEAP32[$i>>2]|0;
  $25 = HEAP32[$k>>2]|0;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  HEAP32[$j>>2] = 0;
  while(1) {
   $27 = HEAP32[$j>>2]|0;
   $28 = HEAP32[$i>>2]|0;
   $29 = ($27|0)<=($28|0);
   $30 = HEAP32[$i>>2]|0;
   if (!($29)) {
    break;
   }
   $31 = HEAP32[$j>>2]|0;
   $32 = HEAP32[$k>>2]|0;
   $33 = (_ijton($30,$31,$32)|0);
   HEAP32[$idx>>2] = $33;
   $34 = HEAP32[$j>>2]|0;
   $35 = HEAP32[$2>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $37 = Math_imul($34, $36)|0;
   $38 = HEAP32[$i>>2]|0;
   $39 = (($37) + ($38))|0;
   $40 = HEAP32[$2>>2]|0;
   $41 = (($40) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39<<3)|0);
   $44 = +HEAPF64[$43>>3];
   HEAPF64[$x>>3] = $44;
   $45 = HEAP32[$3>>2]|0;
   $46 = ($45|0)==(0);
   if ($46) {
    $47 = HEAP32[$1>>2]|0;
    $48 = (($47) + 120|0);
    $49 = +HEAPF64[$48>>3];
    $50 = HEAP32[$1>>2]|0;
    $51 = (($50) + 120|0);
    $52 = +HEAPF64[$51>>3];
    $53 = $49 * $52;
    $54 = +HEAPF64[$x>>3];
    $55 = $54 * $53;
    HEAPF64[$x>>3] = $55;
   }
   $56 = +HEAPF64[$x>>3];
   $57 = HEAP32[$idx>>2]|0;
   $58 = HEAP32[$1>>2]|0;
   $59 = (($58) + 96|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($57<<3)|0);
   HEAPF64[$61>>3] = $56;
   $62 = HEAP32[$i>>2]|0;
   $63 = HEAP32[$j>>2]|0;
   $64 = ($62|0)==($63|0);
   if ($64) {
    $65 = +HEAPF64[$x>>3];
    $66 = (+Math_sqrt((+$65)));
    $67 = HEAP32[$i>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = (($68) + 80|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($67<<3)|0);
    HEAPF64[$71>>3] = $66;
    $72 = HEAP32[$3>>2]|0;
    $73 = ($72|0)==(2);
    if ($73) {
     $74 = HEAP32[$1>>2]|0;
     $75 = (($74) + 120|0);
     $76 = +HEAPF64[$75>>3];
     $77 = HEAP32[$i>>2]|0;
     $78 = HEAP32[$1>>2]|0;
     $79 = (($78) + 80|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (($80) + ($77<<3)|0);
     $82 = +HEAPF64[$81>>3];
     $83 = $82 * $76;
     HEAPF64[$81>>3] = $83;
    }
   }
   $84 = HEAP32[$j>>2]|0;
   $85 = (($84) + 1)|0;
   HEAP32[$j>>2] = $85;
  }
  $86 = (($30) + 1)|0;
  HEAP32[$i>>2] = $86;
 }
 HEAP32[$0>>2] = 0;
 $87 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($87|0);
}
function _do_X_prime_diag($X,$D,$R) {
 $X = $X|0;
 $D = $D|0;
 $R = $R|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $x = sp;
 $i = sp + 12|0;
 $j = sp + 8|0;
 HEAP32[$0>>2] = $X;
 HEAP32[$1>>2] = $D;
 HEAP32[$2>>2] = $R;
 HEAP32[$i>>2] = 0;
 while(1) {
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)<($5|0);
  if (!($6)) {
   break;
  }
  HEAP32[$j>>2] = 0;
  while(1) {
   $7 = HEAP32[$j>>2]|0;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($7|0)<($10|0);
   $12 = HEAP32[$i>>2]|0;
   if (!($11)) {
    break;
   }
   $13 = HEAP32[$0>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = Math_imul($12, $14)|0;
   $16 = HEAP32[$j>>2]|0;
   $17 = (($15) + ($16))|0;
   $18 = HEAP32[$0>>2]|0;
   $19 = (($18) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + ($17<<3)|0);
   $22 = +HEAPF64[$21>>3];
   HEAPF64[$x>>3] = $22;
   $23 = +HEAPF64[$x>>3];
   $24 = HEAP32[$j>>2]|0;
   $25 = HEAP32[$1>>2]|0;
   $26 = (($25) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($24<<3)|0);
   $29 = +HEAPF64[$28>>3];
   $30 = $23 * $29;
   $31 = HEAP32[$j>>2]|0;
   $32 = HEAP32[$2>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $34 = Math_imul($31, $33)|0;
   $35 = HEAP32[$i>>2]|0;
   $36 = (($34) + ($35))|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = (($37) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($36<<3)|0);
   HEAPF64[$40>>3] = $30;
   $41 = HEAP32[$j>>2]|0;
   $42 = (($41) + 1)|0;
   HEAP32[$j>>2] = $42;
  }
  $43 = (($12) + 1)|0;
  HEAP32[$i>>2] = $43;
 }
 STACKTOP = sp;return;
}
function _fill_array32($array,$size) {
 $array = $array|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $array;
 HEAP32[$1>>2] = $size;
 $2 = HEAP32[52432>>2]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  ___assert_fail((52440|0),(52456|0),486,(52504|0));
  // unreachable;
 }
 $4 = HEAP32[52488>>2]|0;
 $5 = ($4|0)==(624);
 if (!($5)) {
  ___assert_fail((52520|0),(52456|0),487,(52504|0));
  // unreachable;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6|0) % 4)&-1;
 $8 = ($7|0)==(0);
 if (!($8)) {
  ___assert_fail((52536|0),(52456|0),488,(52504|0));
  // unreachable;
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)>=(624);
 if ($10) {
  $11 = HEAP32[$0>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12|0) / 4)&-1;
  _gen_rand_array($11,$13);
  HEAP32[52488>>2] = 624;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((52552|0),(52456|0),489,(52504|0));
  // unreachable;
 }
}
function _gen_rand_array($array,$size) {
 $array = $array|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $r1 = 0, $r2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $i = sp + 12|0;
 $j = sp + 8|0;
 $r1 = sp + 4|0;
 $r2 = sp;
 HEAP32[$0>>2] = $array;
 HEAP32[$1>>2] = $size;
 HEAP32[$r1>>2] = ((52568 + 2464|0));
 HEAP32[$r2>>2] = ((52568 + 2480|0));
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = ($2|0)<(34);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$i>>2]|0;
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + ($4<<4)|0);
  $7 = HEAP32[$i>>2]|0;
  $8 = (52568 + ($7<<4)|0);
  $9 = HEAP32[$i>>2]|0;
  $10 = (($9) + 122)|0;
  $11 = (52568 + ($10<<4)|0);
  $12 = HEAP32[$r1>>2]|0;
  $13 = HEAP32[$r2>>2]|0;
  _do_recursion($6,$8,$11,$12,$13);
  $14 = HEAP32[$r2>>2]|0;
  HEAP32[$r1>>2] = $14;
  $15 = HEAP32[$i>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + ($15<<4)|0);
  HEAP32[$r2>>2] = $17;
  $18 = HEAP32[$i>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$i>>2] = $19;
 }
 while(1) {
  $20 = HEAP32[$i>>2]|0;
  $21 = ($20|0)<(156);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[$i>>2]|0;
  $23 = HEAP32[$0>>2]|0;
  $24 = (($23) + ($22<<4)|0);
  $25 = HEAP32[$i>>2]|0;
  $26 = (52568 + ($25<<4)|0);
  $27 = HEAP32[$i>>2]|0;
  $28 = (($27) + 122)|0;
  $29 = (($28) - 156)|0;
  $30 = HEAP32[$0>>2]|0;
  $31 = (($30) + ($29<<4)|0);
  $32 = HEAP32[$r1>>2]|0;
  $33 = HEAP32[$r2>>2]|0;
  _do_recursion($24,$26,$31,$32,$33);
  $34 = HEAP32[$r2>>2]|0;
  HEAP32[$r1>>2] = $34;
  $35 = HEAP32[$i>>2]|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = (($36) + ($35<<4)|0);
  HEAP32[$r2>>2] = $37;
  $38 = HEAP32[$i>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[$i>>2] = $39;
 }
 while(1) {
  $40 = HEAP32[$i>>2]|0;
  $41 = HEAP32[$1>>2]|0;
  $42 = (($41) - 156)|0;
  $43 = ($40|0)<($42|0);
  if (!($43)) {
   break;
  }
  $44 = HEAP32[$i>>2]|0;
  $45 = HEAP32[$0>>2]|0;
  $46 = (($45) + ($44<<4)|0);
  $47 = HEAP32[$i>>2]|0;
  $48 = (($47) - 156)|0;
  $49 = HEAP32[$0>>2]|0;
  $50 = (($49) + ($48<<4)|0);
  $51 = HEAP32[$i>>2]|0;
  $52 = (($51) + 122)|0;
  $53 = (($52) - 156)|0;
  $54 = HEAP32[$0>>2]|0;
  $55 = (($54) + ($53<<4)|0);
  $56 = HEAP32[$r1>>2]|0;
  $57 = HEAP32[$r2>>2]|0;
  _do_recursion($46,$50,$55,$56,$57);
  $58 = HEAP32[$r2>>2]|0;
  HEAP32[$r1>>2] = $58;
  $59 = HEAP32[$i>>2]|0;
  $60 = HEAP32[$0>>2]|0;
  $61 = (($60) + ($59<<4)|0);
  HEAP32[$r2>>2] = $61;
  $62 = HEAP32[$i>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$i>>2] = $63;
 }
 HEAP32[$j>>2] = 0;
 while(1) {
  $64 = HEAP32[$j>>2]|0;
  $65 = HEAP32[$1>>2]|0;
  $66 = (312 - ($65))|0;
  $67 = ($64|0)<($66|0);
  if (!($67)) {
   break;
  }
  $68 = HEAP32[$j>>2]|0;
  $69 = (52568 + ($68<<4)|0);
  $70 = HEAP32[$j>>2]|0;
  $71 = HEAP32[$1>>2]|0;
  $72 = (($70) + ($71))|0;
  $73 = (($72) - 156)|0;
  $74 = HEAP32[$0>>2]|0;
  $75 = (($74) + ($73<<4)|0);
  ;HEAP32[$69+0>>2]=HEAP32[$75+0>>2]|0;HEAP32[$69+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$69+8>>2]=HEAP32[$75+8>>2]|0;HEAP32[$69+12>>2]=HEAP32[$75+12>>2]|0;
  $76 = HEAP32[$j>>2]|0;
  $77 = (($76) + 1)|0;
  HEAP32[$j>>2] = $77;
 }
 while(1) {
  $78 = HEAP32[$i>>2]|0;
  $79 = HEAP32[$1>>2]|0;
  $80 = ($78|0)<($79|0);
  if (!($80)) {
   break;
  }
  $81 = HEAP32[$i>>2]|0;
  $82 = HEAP32[$0>>2]|0;
  $83 = (($82) + ($81<<4)|0);
  $84 = HEAP32[$i>>2]|0;
  $85 = (($84) - 156)|0;
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + ($85<<4)|0);
  $88 = HEAP32[$i>>2]|0;
  $89 = (($88) + 122)|0;
  $90 = (($89) - 156)|0;
  $91 = HEAP32[$0>>2]|0;
  $92 = (($91) + ($90<<4)|0);
  $93 = HEAP32[$r1>>2]|0;
  $94 = HEAP32[$r2>>2]|0;
  _do_recursion($83,$87,$92,$93,$94);
  $95 = HEAP32[$r2>>2]|0;
  HEAP32[$r1>>2] = $95;
  $96 = HEAP32[$i>>2]|0;
  $97 = HEAP32[$0>>2]|0;
  $98 = (($97) + ($96<<4)|0);
  HEAP32[$r2>>2] = $98;
  $99 = HEAP32[$j>>2]|0;
  $100 = (52568 + ($99<<4)|0);
  $101 = HEAP32[$i>>2]|0;
  $102 = HEAP32[$0>>2]|0;
  $103 = (($102) + ($101<<4)|0);
  ;HEAP32[$100+0>>2]=HEAP32[$103+0>>2]|0;HEAP32[$100+4>>2]=HEAP32[$103+4>>2]|0;HEAP32[$100+8>>2]=HEAP32[$103+8>>2]|0;HEAP32[$100+12>>2]=HEAP32[$103+12>>2]|0;
  $104 = HEAP32[$i>>2]|0;
  $105 = (($104) + 1)|0;
  HEAP32[$i>>2] = $105;
  $106 = HEAP32[$j>>2]|0;
  $107 = (($106) + 1)|0;
  HEAP32[$j>>2] = $107;
 }
 STACKTOP = sp;return;
}
function _init_gen_rand($seed) {
 $seed = $seed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $seed;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_idxof(0)|0);
 $3 = HEAP32[52496>>2]|0;
 $4 = (($3) + ($2<<2)|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$i>>2] = 1;
 while(1) {
  $5 = HEAP32[$i>>2]|0;
  $6 = ($5|0)<(624);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$i>>2]|0;
  $8 = (($7) - 1)|0;
  $9 = (_idxof($8)|0);
  $10 = HEAP32[52496>>2]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$i>>2]|0;
  $14 = (($13) - 1)|0;
  $15 = (_idxof($14)|0);
  $16 = HEAP32[52496>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 >>> 30;
  $20 = $12 ^ $19;
  $21 = Math_imul(1812433253, $20)|0;
  $22 = HEAP32[$i>>2]|0;
  $23 = (($21) + ($22))|0;
  $24 = HEAP32[$i>>2]|0;
  $25 = (_idxof($24)|0);
  $26 = HEAP32[52496>>2]|0;
  $27 = (($26) + ($25<<2)|0);
  HEAP32[$27>>2] = $23;
  $28 = HEAP32[$i>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$i>>2] = $29;
 }
 HEAP32[52488>>2] = 624;
 _period_certification();
 HEAP32[52432>>2] = 1;
 STACKTOP = sp;return;
}
function _idxof($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $i;
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _period_certification() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $inner = 0, $j = 0, $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $inner = sp + 12|0;
 $i = sp + 8|0;
 $j = sp + 4|0;
 $work = sp;
 HEAP32[$inner>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $0 = HEAP32[$i>>2]|0;
  $1 = ($0|0)<(4);
  if (!($1)) {
   break;
  }
  $2 = HEAP32[$i>>2]|0;
  $3 = (_idxof($2)|0);
  $4 = HEAP32[52496>>2]|0;
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$i>>2]|0;
  $8 = (55152 + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $6 & $9;
  $11 = HEAP32[$inner>>2]|0;
  $12 = $11 ^ $10;
  HEAP32[$inner>>2] = $12;
  $13 = HEAP32[$i>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$i>>2] = $14;
 }
 HEAP32[$i>>2] = 16;
 while(1) {
  $15 = HEAP32[$i>>2]|0;
  $16 = ($15|0)>(0);
  $17 = HEAP32[$inner>>2]|0;
  if (!($16)) {
   break;
  }
  $18 = HEAP32[$i>>2]|0;
  $19 = $17 >> $18;
  $20 = HEAP32[$inner>>2]|0;
  $21 = $20 ^ $19;
  HEAP32[$inner>>2] = $21;
  $22 = HEAP32[$i>>2]|0;
  $23 = $22 >> 1;
  HEAP32[$i>>2] = $23;
 }
 $24 = $17 & 1;
 HEAP32[$inner>>2] = $24;
 $25 = HEAP32[$inner>>2]|0;
 $26 = ($25|0)==(1);
 if ($26) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 0;
 L12: while(1) {
  $27 = HEAP32[$i>>2]|0;
  $28 = ($27|0)<(4);
  if (!($28)) {
   label = 16;
   break;
  }
  HEAP32[$work>>2] = 1;
  HEAP32[$j>>2] = 0;
  while(1) {
   $29 = HEAP32[$j>>2]|0;
   $30 = ($29|0)<(32);
   if (!($30)) {
    break;
   }
   $31 = HEAP32[$work>>2]|0;
   $32 = HEAP32[$i>>2]|0;
   $33 = (55152 + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $31 & $34;
   $36 = ($35|0)!=(0);
   $37 = HEAP32[$work>>2]|0;
   if ($36) {
    break L12;
   }
   $44 = $37 << 1;
   HEAP32[$work>>2] = $44;
   $45 = HEAP32[$j>>2]|0;
   $46 = (($45) + 1)|0;
   HEAP32[$j>>2] = $46;
  }
  $47 = HEAP32[$i>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$i>>2] = $48;
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$i>>2]|0;
 $39 = (_idxof($38)|0);
 $40 = HEAP32[52496>>2]|0;
 $41 = (($40) + ($39<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 ^ $37;
 HEAP32[$41>>2] = $43;
 STACKTOP = sp;return;
}
function _gretl_rand_octet($sign) {
 $sign = $sign|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $sign;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[55088>>2] = 0;
  HEAP32[$0>>2] = 0;
  $22 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($22|0);
 }
 $4 = HEAP32[55088>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[55064>>2]|0;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = (_dcmt_rand32()|0);
   HEAP32[55096>>2] = $8;
  } else {
   $9 = (_sfmt_rand32()|0);
   HEAP32[55096>>2] = $9;
  }
  HEAP32[55088>>2] = 4;
 }
 $10 = HEAP32[55088>>2]|0;
 $11 = (($10) + -1)|0;
 HEAP32[55088>>2] = $11;
 $12 = (55096 + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = $14 & 128;
 $16 = HEAP32[$1>>2]|0;
 HEAP32[$16>>2] = $15;
 $17 = HEAP32[55088>>2]|0;
 $18 = (55096 + ($17)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = $20 & 127;
 HEAP32[$0>>2] = $21;
 $22 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($22|0);
}
function _gretl_rand_init() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_time((0|0))|0);
 HEAP32[55080>>2] = $0;
 $1 = HEAP32[55080>>2]|0;
 _init_gen_rand($1);
 (_sfmt_array_setup()|0);
 (_gretl_rand_octet(0)|0);
 STACKTOP = sp;return;
}
function _gretl_rand_get_dcmt() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[55064>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _sfmt_array_setup() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $err = sp;
 HEAP32[$err>>2] = 0;
 $0 = HEAP32[55112>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_simd_malloc(9984,$err)|0);
  HEAP32[55112>>2] = $2;
 }
 $3 = HEAP32[55112>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $6 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($6|0);
 }
 $5 = HEAP32[55112>>2]|0;
 _fill_array32($5,2496);
 HEAP32[55104>>2] = 0;
 $6 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _gretl_rand_free() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sfmt_array_cleanup();
 $0 = HEAP32[55072>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[55072>>2]|0;
 _free_mt_struct(($2|0));
 HEAP32[55072>>2] = 0;
 STACKTOP = sp;return;
}
function _sfmt_array_cleanup() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[55112>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[55112>>2]|0;
 _free($2);
 HEAP32[55112>>2] = 0;
 STACKTOP = sp;return;
}
function _dcmt_rand32() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[55072>>2]|0;
 $1 = (_genrand_mt(($0|0))|0);
 STACKTOP = sp;return ($1|0);
}
function _sfmt_rand32() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[55104>>2]|0;
 $1 = ($0|0)==(2496);
 if ($1) {
  $2 = HEAP32[55112>>2]|0;
  _fill_array32($2,2496);
  HEAP32[55104>>2] = 0;
 }
 $3 = HEAP32[55104>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[55104>>2] = $4;
 $5 = HEAP32[55112>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _simd_malloc($size,$err) {
 $size = $size|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $mem = sp + 4|0;
 HEAP32[$1>>2] = $size;
 HEAP32[$2>>2] = $err;
 HEAP32[$mem>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_posix_memalign($mem,16,$3)|0);
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[_stderr>>2]|0;
  $10 = HEAP32[$2>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  (_fprintf(($9|0),(55120|0),($vararg_buffer|0))|0);
  HEAP32[$0>>2] = 0;
  $13 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($13|0);
 } else {
  $12 = HEAP32[$mem>>2]|0;
  HEAP32[$0>>2] = $12;
  $13 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($13|0);
 }
 return 0|0;
}
function _do_recursion($r,$a,$b,$c,$d) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $x = sp + 16|0;
 $y = sp;
 HEAP32[$0>>2] = $r;
 HEAP32[$1>>2] = $a;
 HEAP32[$2>>2] = $b;
 HEAP32[$3>>2] = $c;
 HEAP32[$4>>2] = $d;
 $5 = HEAP32[$1>>2]|0;
 _lshift128($x,$5,1);
 $6 = HEAP32[$3>>2]|0;
 _rshift128($y,$6,1);
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$x>>2]|0;
 $10 = $8 ^ $9;
 $11 = HEAP32[$2>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 11;
 $14 = $13 & -536870929;
 $15 = $10 ^ $14;
 $16 = HEAP32[$y>>2]|0;
 $17 = $15 ^ $16;
 $18 = HEAP32[$4>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 << 18;
 $21 = $17 ^ $20;
 $22 = HEAP32[$0>>2]|0;
 HEAP32[$22>>2] = $21;
 $23 = HEAP32[$1>>2]|0;
 $24 = (($23) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($x) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $25 ^ $27;
 $29 = HEAP32[$2>>2]|0;
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 11;
 $33 = $32 & -570504321;
 $34 = $28 ^ $33;
 $35 = (($y) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $34 ^ $36;
 $38 = HEAP32[$4>>2]|0;
 $39 = (($38) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 << 18;
 $42 = $37 ^ $41;
 $43 = HEAP32[$0>>2]|0;
 $44 = (($43) + 4|0);
 HEAP32[$44>>2] = $42;
 $45 = HEAP32[$1>>2]|0;
 $46 = (($45) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($x) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $47 ^ $49;
 $51 = HEAP32[$2>>2]|0;
 $52 = (($51) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 >>> 11;
 $55 = $54 & -1074069505;
 $56 = $50 ^ $55;
 $57 = (($y) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $56 ^ $58;
 $60 = HEAP32[$4>>2]|0;
 $61 = (($60) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 << 18;
 $64 = $59 ^ $63;
 $65 = HEAP32[$0>>2]|0;
 $66 = (($65) + 8|0);
 HEAP32[$66>>2] = $64;
 $67 = HEAP32[$1>>2]|0;
 $68 = (($67) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($x) + 12|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $69 ^ $71;
 $73 = HEAP32[$2>>2]|0;
 $74 = (($73) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $75 >>> 11;
 $77 = $76 & -1073741834;
 $78 = $72 ^ $77;
 $79 = (($y) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $78 ^ $80;
 $82 = HEAP32[$4>>2]|0;
 $83 = (($82) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 << 18;
 $86 = $81 ^ $85;
 $87 = HEAP32[$0>>2]|0;
 $88 = (($87) + 12|0);
 HEAP32[$88>>2] = $86;
 STACKTOP = sp;return;
}
function _lshift128($out,$in,$shift) {
 $out = $out|0;
 $in = $in|0;
 $shift = $shift|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $oh = 0, $ol = 0, $th = 0, $tl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $th = sp + 24|0;
 $tl = sp + 16|0;
 $oh = sp + 8|0;
 $ol = sp;
 HEAP32[$0>>2] = $out;
 HEAP32[$1>>2] = $in;
 HEAP32[$2>>2] = $shift;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $th;
 $10 = $9;
 HEAP32[$10>>2] = $8;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $5;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $tl;
 $19 = $18;
 HEAP32[$19>>2] = $17;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $15;
 $22 = $th;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$2>>2]|0;
 $29 = $28<<3;
 $30 = (_bitshift64Shl(($24|0),($27|0),($29|0))|0);
 $31 = tempRet0;
 $32 = $oh;
 $33 = $32;
 HEAP32[$33>>2] = $30;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 $36 = $tl;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$2>>2]|0;
 $43 = $42<<3;
 $44 = (_bitshift64Shl(($38|0),($41|0),($43|0))|0);
 $45 = tempRet0;
 $46 = $ol;
 $47 = $46;
 HEAP32[$47>>2] = $44;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $45;
 $50 = $tl;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 4)|0;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP32[$2>>2]|0;
 $57 = $56<<3;
 $58 = (64 - ($57))|0;
 $59 = (_bitshift64Lshr(($52|0),($55|0),($58|0))|0);
 $60 = tempRet0;
 $61 = $oh;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $63 | $59;
 $68 = $66 | $60;
 $69 = $oh;
 $70 = $69;
 HEAP32[$70>>2] = $67;
 $71 = (($69) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = $68;
 $73 = $ol;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($73) + 4)|0;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = HEAP32[$0>>2]|0;
 $80 = (($79) + 4|0);
 HEAP32[$80>>2] = $78;
 $81 = $ol;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (($81) + 4)|0;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$0>>2]|0;
 HEAP32[$87>>2] = $83;
 $88 = $oh;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[$0>>2]|0;
 $95 = (($94) + 12|0);
 HEAP32[$95>>2] = $93;
 $96 = $oh;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = HEAP32[$0>>2]|0;
 $103 = (($102) + 8|0);
 HEAP32[$103>>2] = $98;
 STACKTOP = sp;return;
}
function _rshift128($out,$in,$shift) {
 $out = $out|0;
 $in = $in|0;
 $shift = $shift|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $oh = 0, $ol = 0, $th = 0, $tl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $th = sp + 24|0;
 $tl = sp + 16|0;
 $oh = sp + 8|0;
 $ol = sp;
 HEAP32[$0>>2] = $out;
 HEAP32[$1>>2] = $in;
 HEAP32[$2>>2] = $shift;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $th;
 $10 = $9;
 HEAP32[$10>>2] = $8;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $5;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $tl;
 $19 = $18;
 HEAP32[$19>>2] = $17;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $15;
 $22 = $th;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$2>>2]|0;
 $29 = $28<<3;
 $30 = (_bitshift64Lshr(($24|0),($27|0),($29|0))|0);
 $31 = tempRet0;
 $32 = $oh;
 $33 = $32;
 HEAP32[$33>>2] = $30;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 $36 = $tl;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$2>>2]|0;
 $43 = $42<<3;
 $44 = (_bitshift64Lshr(($38|0),($41|0),($43|0))|0);
 $45 = tempRet0;
 $46 = $ol;
 $47 = $46;
 HEAP32[$47>>2] = $44;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $45;
 $50 = $th;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 4)|0;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP32[$2>>2]|0;
 $57 = $56<<3;
 $58 = (64 - ($57))|0;
 $59 = (_bitshift64Shl(($52|0),($55|0),($58|0))|0);
 $60 = tempRet0;
 $61 = $ol;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $63 | $59;
 $68 = $66 | $60;
 $69 = $ol;
 $70 = $69;
 HEAP32[$70>>2] = $67;
 $71 = (($69) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = $68;
 $73 = $ol;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($73) + 4)|0;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = HEAP32[$0>>2]|0;
 $80 = (($79) + 4|0);
 HEAP32[$80>>2] = $78;
 $81 = $ol;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (($81) + 4)|0;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$0>>2]|0;
 HEAP32[$87>>2] = $83;
 $88 = $oh;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[$0>>2]|0;
 $95 = (($94) + 12|0);
 HEAP32[$95>>2] = $93;
 $96 = $oh;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = HEAP32[$0>>2]|0;
 $103 = (($102) + 8|0);
 HEAP32[$103>>2] = $98;
 STACKTOP = sp;return;
}
function _stdtr($rk,$t) {
 $rk = +$rk;
 $t = +$t;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0;
 var $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $f = 0, $is_int = 0, $j = 0, $k = 0, $p = 0, $tz = 0, $x = 0, $xsqk = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = sp + 64|0;
 $1 = sp + 56|0;
 $2 = sp + 48|0;
 $x = sp + 40|0;
 $z = sp + 32|0;
 $f = sp + 24|0;
 $tz = sp + 16|0;
 $p = sp + 8|0;
 $xsqk = sp;
 $k = sp + 80|0;
 $j = sp + 76|0;
 $is_int = sp + 72|0;
 HEAPF64[$1>>3] = $rk;
 HEAPF64[$2>>3] = $t;
 $3 = +HEAPF64[$1>>3];
 $4 = $3 <= 0.0;
 if ($4) {
  (_mtherr(55168,1)|0);
  HEAPF64[$0>>3] = 0.0;
  $144 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$144);
 }
 $5 = +HEAPF64[$1>>3];
 $6 = (~~(($5)));
 HEAP32[$k>>2] = $6;
 $7 = +HEAPF64[$1>>3];
 $8 = HEAP32[$k>>2]|0;
 $9 = (+($8|0));
 $10 = $7 - $9;
 $11 = $10 == 0.0;
 $12 = $11&1;
 HEAP32[$is_int>>2] = $12;
 $13 = +HEAPF64[$2>>3];
 $14 = $13 == 0.0;
 if ($14) {
  HEAPF64[$0>>3] = 0.5;
  $144 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$144);
 }
 $15 = +HEAPF64[$2>>3];
 $16 = $15 < -2.0;
 if ($16) {
  $17 = +HEAPF64[$1>>3];
  $18 = +HEAPF64[$1>>3];
  $19 = +HEAPF64[$2>>3];
  $20 = +HEAPF64[$2>>3];
  $21 = $19 * $20;
  $22 = $18 + $21;
  $23 = $17 / $22;
  HEAPF64[$z>>3] = $23;
  $24 = +HEAPF64[$1>>3];
  $25 = 0.5 * $24;
  $26 = +HEAPF64[$z>>3];
  $27 = (+_incbet($25,0.5,$26));
  $28 = 0.5 * $27;
  HEAPF64[$p>>3] = $28;
  $29 = +HEAPF64[$p>>3];
  HEAPF64[$0>>3] = $29;
  $144 = +HEAPF64[$0>>3];
  STACKTOP = sp;return (+$144);
 }
 $30 = HEAP32[$is_int>>2]|0;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = +HEAPF64[$2>>3];
  $33 = $32 < 0.0;
  $34 = +HEAPF64[$2>>3];
  if ($33) {
   $35 = -$34;
   HEAPF64[$x>>3] = $35;
  } else {
   HEAPF64[$x>>3] = $34;
  }
  $36 = +HEAPF64[$x>>3];
  $37 = +HEAPF64[$x>>3];
  $38 = $36 * $37;
  $39 = +HEAPF64[$1>>3];
  $40 = $38 / $39;
  $41 = 1.0 + $40;
  HEAPF64[$z>>3] = $41;
  $42 = HEAP32[$k>>2]|0;
  $43 = $42 & 1;
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = +HEAPF64[$x>>3];
   $46 = +HEAPF64[$1>>3];
   $47 = (+Math_sqrt((+$46)));
   $48 = $45 / $47;
   HEAPF64[$xsqk>>3] = $48;
   $49 = +HEAPF64[$xsqk>>3];
   $50 = (+Math_atan((+$49)));
   HEAPF64[$p>>3] = $50;
   $51 = HEAP32[$k>>2]|0;
   $52 = ($51|0)>(1);
   if ($52) {
    HEAPF64[$f>>3] = 1.0;
    HEAPF64[$tz>>3] = 1.0;
    HEAP32[$j>>2] = 3;
    while(1) {
     $53 = HEAP32[$j>>2]|0;
     $54 = HEAP32[$k>>2]|0;
     $55 = (($54) - 2)|0;
     $56 = ($53|0)<=($55|0);
     if (!($56)) {
      break;
     }
     $57 = +HEAPF64[$tz>>3];
     $58 = +HEAPF64[$f>>3];
     $59 = $57 / $58;
     $60 = +HEAPF64[1984>>3];
     $61 = $59 > $60;
     if (!($61)) {
      break;
     }
     $62 = HEAP32[$j>>2]|0;
     $63 = (($62) - 1)|0;
     $64 = (+($63|0));
     $65 = +HEAPF64[$z>>3];
     $66 = HEAP32[$j>>2]|0;
     $67 = (+($66|0));
     $68 = $65 * $67;
     $69 = $64 / $68;
     $70 = +HEAPF64[$tz>>3];
     $71 = $70 * $69;
     HEAPF64[$tz>>3] = $71;
     $72 = +HEAPF64[$tz>>3];
     $73 = +HEAPF64[$f>>3];
     $74 = $73 + $72;
     HEAPF64[$f>>3] = $74;
     $75 = HEAP32[$j>>2]|0;
     $76 = (($75) + 2)|0;
     HEAP32[$j>>2] = $76;
    }
    $77 = +HEAPF64[$f>>3];
    $78 = +HEAPF64[$xsqk>>3];
    $79 = $77 * $78;
    $80 = +HEAPF64[$z>>3];
    $81 = $79 / $80;
    $82 = +HEAPF64[$p>>3];
    $83 = $82 + $81;
    HEAPF64[$p>>3] = $83;
   }
   $84 = +HEAPF64[2016>>3];
   $85 = 2.0 / $84;
   $86 = +HEAPF64[$p>>3];
   $87 = $86 * $85;
   HEAPF64[$p>>3] = $87;
  } else {
   HEAPF64[$f>>3] = 1.0;
   HEAPF64[$tz>>3] = 1.0;
   HEAP32[$j>>2] = 2;
   while(1) {
    $88 = HEAP32[$j>>2]|0;
    $89 = HEAP32[$k>>2]|0;
    $90 = (($89) - 2)|0;
    $91 = ($88|0)<=($90|0);
    if (!($91)) {
     break;
    }
    $92 = +HEAPF64[$tz>>3];
    $93 = +HEAPF64[$f>>3];
    $94 = $92 / $93;
    $95 = +HEAPF64[1984>>3];
    $96 = $94 > $95;
    if (!($96)) {
     break;
    }
    $97 = HEAP32[$j>>2]|0;
    $98 = (($97) - 1)|0;
    $99 = (+($98|0));
    $100 = +HEAPF64[$z>>3];
    $101 = HEAP32[$j>>2]|0;
    $102 = (+($101|0));
    $103 = $100 * $102;
    $104 = $99 / $103;
    $105 = +HEAPF64[$tz>>3];
    $106 = $105 * $104;
    HEAPF64[$tz>>3] = $106;
    $107 = +HEAPF64[$tz>>3];
    $108 = +HEAPF64[$f>>3];
    $109 = $108 + $107;
    HEAPF64[$f>>3] = $109;
    $110 = HEAP32[$j>>2]|0;
    $111 = (($110) + 2)|0;
    HEAP32[$j>>2] = $111;
   }
   $112 = +HEAPF64[$f>>3];
   $113 = +HEAPF64[$x>>3];
   $114 = $112 * $113;
   $115 = +HEAPF64[$z>>3];
   $116 = +HEAPF64[$1>>3];
   $117 = $115 * $116;
   $118 = (+Math_sqrt((+$117)));
   $119 = $114 / $118;
   HEAPF64[$p>>3] = $119;
  }
  $120 = +HEAPF64[$2>>3];
  $121 = $120 < 0.0;
  if ($121) {
   $122 = +HEAPF64[$p>>3];
   $123 = -$122;
   HEAPF64[$p>>3] = $123;
  }
  $124 = +HEAPF64[$p>>3];
  $125 = 0.5 * $124;
  $126 = 0.5 + $125;
  HEAPF64[$p>>3] = $126;
 } else {
  $127 = +HEAPF64[$1>>3];
  $128 = +HEAPF64[$1>>3];
  $129 = +HEAPF64[$2>>3];
  $130 = +HEAPF64[$2>>3];
  $131 = $129 * $130;
  $132 = $128 + $131;
  $133 = $127 / $132;
  HEAPF64[$z>>3] = $133;
  $134 = +HEAPF64[$1>>3];
  $135 = 0.5 * $134;
  $136 = +HEAPF64[$z>>3];
  $137 = (+_incbet($135,0.5,$136));
  $138 = 0.5 * $137;
  HEAPF64[$p>>3] = $138;
  $139 = +HEAPF64[$2>>3];
  $140 = $139 > 0.0;
  if ($140) {
   $141 = +HEAPF64[$p>>3];
   $142 = 1.0 - $141;
   HEAPF64[$p>>3] = $142;
  }
 }
 $143 = +HEAPF64[$p>>3];
 HEAPF64[$0>>3] = $143;
 $144 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$144);
}
function _string_is_blank($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $ret = sp;
 HEAP32[$0>>2] = $s;
 HEAP32[$ret>>2] = 1;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $21 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($21|0);
 }
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)!=(0);
  if (!($5)) {
   label = 8;
   break;
  }
  $6 = HEAP32[$0>>2]|0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = (_isspace($8)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 << 24 >> 24;
   $14 = ($13|0)!=(13);
   if ($14) {
    $15 = HEAP32[$0>>2]|0;
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = ($17|0)!=(26);
    if ($18) {
     break;
    }
   }
  }
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 1|0);
  HEAP32[$0>>2] = $20;
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($21|0);
 }
 HEAP32[$ret>>2] = 0;
 $21 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($21|0);
}
function _gretl_lower($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $p = sp;
 HEAP32[$0>>2] = $str;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$p>>2] = $1;
 while(1) {
  $2 = HEAP32[$p>>2]|0;
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$p>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (_isupper($7)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = HEAP32[$p>>2]|0;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = (_tolower($12)|0);
   $14 = $13&255;
   $15 = HEAP32[$p>>2]|0;
   HEAP8[$15>>0] = $14;
  }
  $16 = HEAP32[$p>>2]|0;
  $17 = (($16) + 1|0);
  HEAP32[$p>>2] = $17;
 }
 $18 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($18|0);
}
function _gretl_strdup($src) {
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $targ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $targ = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $src;
 HEAP32[$targ>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (_strlen(($3|0))|0);
  $5 = (($4) + 1)|0;
  HEAP32[$n>>2] = $5;
  $6 = HEAP32[$n>>2]|0;
  $7 = (_malloc($6)|0);
  HEAP32[$targ>>2] = $7;
  $8 = HEAP32[$targ>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = HEAP32[$targ>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = HEAP32[$n>>2]|0;
   _memcpy(($10|0),($11|0),($12|0))|0;
  }
 }
 $13 = HEAP32[$targ>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _strings_array_new($nstrs) {
 $nstrs = $nstrs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $s = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $nstrs;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<=(0);
 if ($3) {
  HEAP32[$0>>2] = 0;
  $18 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($18|0);
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = $4<<2;
 $6 = (_malloc($5)|0);
 HEAP32[$s>>2] = $6;
 $7 = HEAP32[$s>>2]|0;
 $8 = ($7|0)!=(0|0);
 L5: do {
  if ($8) {
   HEAP32[$i>>2] = 0;
   while(1) {
    $9 = HEAP32[$i>>2]|0;
    $10 = HEAP32[$1>>2]|0;
    $11 = ($9|0)<($10|0);
    if (!($11)) {
     break L5;
    }
    $12 = HEAP32[$i>>2]|0;
    $13 = HEAP32[$s>>2]|0;
    $14 = (($13) + ($12<<2)|0);
    HEAP32[$14>>2] = 0;
    $15 = HEAP32[$i>>2]|0;
    $16 = (($15) + 1)|0;
    HEAP32[$i>>2] = $16;
   }
  }
 } while(0);
 $17 = HEAP32[$s>>2]|0;
 HEAP32[$0>>2] = $17;
 $18 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($18|0);
}
function _strings_array_free($strs,$nstrs) {
 $strs = $strs|0;
 $nstrs = $nstrs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $strs;
 HEAP32[$1>>2] = $nstrs;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $4 = HEAP32[$i>>2]|0;
  $5 = HEAP32[$1>>2]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $11 = HEAP32[$i>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$i>>2] = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 _free($13);
 STACKTOP = sp;return;
}
function _gretl_namechar_spn($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ok = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $ok = sp + 4|0;
 $ret = sp;
 HEAP32[$0>>2] = $s;
 HEAP32[$ok>>2] = 55176;
 HEAP32[$ret>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isalpha($3)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $9 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$ok>>2]|0;
 $8 = (_strspn($6,$7)|0);
 HEAP32[$ret>>2] = $8;
 $9 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function _strings_array_new_with_length($nstrs,$len) {
 $nstrs = $nstrs|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $S = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $S = sp + 8|0;
 $i = sp + 4|0;
 $j = sp;
 HEAP32[$1>>2] = $nstrs;
 HEAP32[$2>>2] = $len;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  HEAP32[$0>>2] = 0;
  $40 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($40|0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = $5<<2;
 $7 = (_malloc($6)|0);
 HEAP32[$S>>2] = $7;
 $8 = HEAP32[$S>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  HEAP32[$0>>2] = 0;
  $40 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($40|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   label = 13;
   break;
  }
  $13 = HEAP32[$2>>2]|0;
  $14 = (_malloc($13)|0);
  $15 = HEAP32[$i>>2]|0;
  $16 = HEAP32[$S>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  HEAP32[$17>>2] = $14;
  $18 = HEAP32[$i>>2]|0;
  $19 = HEAP32[$S>>2]|0;
  $20 = (($19) + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   break;
  }
  $33 = HEAP32[$i>>2]|0;
  $34 = HEAP32[$S>>2]|0;
  $35 = (($34) + ($33<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP8[$36>>0] = 0;
  $37 = HEAP32[$i>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$i>>2] = $38;
 }
 if ((label|0) == 13) {
  $39 = HEAP32[$S>>2]|0;
  HEAP32[$0>>2] = $39;
  $40 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($40|0);
 }
 HEAP32[$j>>2] = 0;
 while(1) {
  $23 = HEAP32[$j>>2]|0;
  $24 = HEAP32[$i>>2]|0;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = HEAP32[$j>>2]|0;
  $27 = HEAP32[$S>>2]|0;
  $28 = (($27) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  _free($29);
  $30 = HEAP32[$j>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$j>>2] = $31;
 }
 $32 = HEAP32[$S>>2]|0;
 _free($32);
 HEAP32[$0>>2] = 0;
 $40 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function _strings_array_dup($strs,$n) {
 $strs = $strs|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $S = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $S = sp + 8|0;
 $i = sp + 4|0;
 $j = sp;
 HEAP32[$1>>2] = $strs;
 HEAP32[$2>>2] = $n;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = HEAP32[$2>>2]|0;
   $8 = $7<<2;
   $9 = (_malloc($8)|0);
   HEAP32[$S>>2] = $9;
   $10 = HEAP32[$S>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    HEAP32[$0>>2] = 0;
    $48 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($48|0);
   }
   HEAP32[$i>>2] = 0;
   while(1) {
    $12 = HEAP32[$i>>2]|0;
    $13 = HEAP32[$2>>2]|0;
    $14 = ($12|0)<($13|0);
    if (!($14)) {
     label = 16;
     break;
    }
    $15 = HEAP32[$i>>2]|0;
    $16 = HEAP32[$1>>2]|0;
    $17 = (($16) + ($15<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0|0);
    $20 = HEAP32[$i>>2]|0;
    if ($19) {
     $21 = HEAP32[$S>>2]|0;
     $22 = (($21) + ($20<<2)|0);
     HEAP32[$22>>2] = 0;
    } else {
     $23 = HEAP32[$1>>2]|0;
     $24 = (($23) + ($20<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (_gretl_strdup($25)|0);
     $27 = HEAP32[$i>>2]|0;
     $28 = HEAP32[$S>>2]|0;
     $29 = (($28) + ($27<<2)|0);
     HEAP32[$29>>2] = $26;
     $30 = HEAP32[$i>>2]|0;
     $31 = HEAP32[$S>>2]|0;
     $32 = (($31) + ($30<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      break;
     }
    }
    $45 = HEAP32[$i>>2]|0;
    $46 = (($45) + 1)|0;
    HEAP32[$i>>2] = $46;
   }
   if ((label|0) == 16) {
    $47 = HEAP32[$S>>2]|0;
    HEAP32[$0>>2] = $47;
    $48 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($48|0);
   }
   HEAP32[$j>>2] = 0;
   while(1) {
    $35 = HEAP32[$j>>2]|0;
    $36 = HEAP32[$i>>2]|0;
    $37 = ($35|0)<($36|0);
    if (!($37)) {
     break;
    }
    $38 = HEAP32[$j>>2]|0;
    $39 = HEAP32[$S>>2]|0;
    $40 = (($39) + ($38<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    _free($41);
    $42 = HEAP32[$j>>2]|0;
    $43 = (($42) + 1)|0;
    HEAP32[$j>>2] = $43;
   }
   $44 = HEAP32[$S>>2]|0;
   _free($44);
   HEAP32[$0>>2] = 0;
   $48 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($48|0);
  }
 }
 HEAP32[$0>>2] = 0;
 $48 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($48|0);
}
function _colonize_obs($obs) {
 $obs = $obs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $p = sp;
 HEAP32[$0>>2] = $obs;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$p>>2] = $1;
 while(1) {
  $2 = HEAP32[$p>>2]|0;
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$p>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)==(46);
  if ($8) {
   label = 5;
  } else {
   $9 = HEAP32[$p>>2]|0;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($11|0)==(44);
   if ($12) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $13 = HEAP32[$p>>2]|0;
   HEAP8[$13>>0] = 58;
  }
  $14 = HEAP32[$p>>2]|0;
  $15 = (($14) + 1|0);
  HEAP32[$p>>2] = $15;
 }
 $16 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _make_varname_unique($vname,$v,$dset) {
 $vname = $vname|0;
 $v = $v|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $conflict = 0, $i = 0, $k = 0, $n = 0, $nmax = 0, $tmp = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $n = sp + 20|0;
 $nmax = sp + 16|0;
 $tmp = sp + 40|0;
 $i = sp + 12|0;
 $k = sp + 8|0;
 $conflict = sp + 4|0;
 HEAP32[$0>>2] = $vname;
 HEAP32[$1>>2] = $v;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_strlen(($3|0))|0);
 HEAP32[$n>>2] = $4;
 HEAP32[$nmax>>2] = 24;
 $5 = HEAP32[$n>>2]|0;
 $6 = HEAP32[$nmax>>2]|0;
 $7 = ($5>>>0)>($6>>>0);
 if ($7) {
  $8 = HEAP32[$nmax>>2]|0;
  HEAP32[$n>>2] = $8;
 }
 HEAP32[$k>>2] = 1;
 while(1) {
  $9 = HEAP32[$k>>2]|0;
  $10 = ($9|0)<(999999);
  if (!($10)) {
   break;
  }
  HEAP32[$conflict>>2] = 0;
  HEAP32[$i>>2] = 1;
  while(1) {
   $11 = HEAP32[$i>>2]|0;
   $12 = HEAP32[$2>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = HEAP32[$i>>2]|0;
   $16 = HEAP32[$1>>2]|0;
   $17 = ($15|0)!=($16|0);
   if ($17) {
    $18 = HEAP32[$0>>2]|0;
    $19 = HEAP32[$i>>2]|0;
    $20 = HEAP32[$2>>2]|0;
    $21 = (($20) + 68|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + ($19<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_strcmp($18,$24)|0);
    $26 = ($25|0)!=(0);
    if (!($26)) {
     label = 9;
     break;
    }
   }
   $27 = HEAP32[$i>>2]|0;
   $28 = (($27) + 1)|0;
   HEAP32[$i>>2] = $28;
  }
  if ((label|0) == 9) {
   label = 0;
   HEAP32[$conflict>>2] = 1;
  }
  $29 = HEAP32[$conflict>>2]|0;
  $30 = ($29|0)!=(0);
  if (!($30)) {
   break;
  }
  $31 = HEAP32[$k>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $31;
  (_sprintf($tmp,55240,$vararg_buffer1)|0);
  $32 = HEAP32[$n>>2]|0;
  $33 = HEAP32[$0>>2]|0;
  $34 = (($33) + ($32)|0);
  HEAP8[$34>>0] = 0;
  $35 = HEAP32[$0>>2]|0;
  $36 = (_strlen(($tmp|0))|0);
  (_strncat($35,$tmp,$36)|0);
  $37 = HEAP32[$k>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$k>>2] = $38;
 }
 $39 = HEAP32[$conflict>>2]|0;
 $40 = ($39|0)!=(0);
 if (!($40)) {
  $42 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($42|0);
 }
 $41 = HEAP32[_stderr>>2]|0;
 (_fprintf(($41|0),(55248|0),($vararg_buffer1|0))|0);
 $42 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($42|0);
}
function _fetch_full_dataset() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[55296>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _free_subsample_mask($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $s;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=((-559038737)|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)!=(0|0);
 $or$cond = $2 & $4;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 _free($5);
 STACKTOP = sp;return;
}
function _complex_subsampled() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[55296>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[55296>>2]|0;
  $3 = (($2) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  $7 = $5;
 } else {
  $7 = 0;
 }
 $6 = $7&1;
 STACKTOP = sp;return ($6|0);
}
function _maybe_free_full_dataset($dset) {
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $dset;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[55304>>2]|0;
 $3 = ($1|0)==($2|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[55296>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[55296>>2]|0;
  $7 = (($6) + 64|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = HEAP32[55296>>2]|0;
   _free_Z($10);
  }
  $11 = HEAP32[55296>>2]|0;
  _clear_datainfo($11,1);
  $12 = HEAP32[55296>>2]|0;
  _free($12);
  HEAP32[55296>>2] = 0;
 }
 HEAP32[55304>>2] = 0;
 STACKTOP = sp;return;
}
function _equation_system_destroy($sys) {
 $sys = $sys|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $sys;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 112|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - 1)|0;
 HEAP32[$8>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $15 = HEAP32[$i>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$i>>2]|0;
  $21 = HEAP32[$0>>2]|0;
  $22 = (($21) + 112|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  _free($25);
  $26 = HEAP32[$i>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$i>>2] = $27;
 }
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + 112|0);
 $30 = HEAP32[$29>>2]|0;
 _free($30);
 $31 = HEAP32[$0>>2]|0;
 $32 = (($31) + 112|0);
 HEAP32[$32>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $33 = HEAP32[$i>>2]|0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = HEAP32[$i>>2]|0;
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 140|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  _destroy_ident($43);
  $44 = HEAP32[$i>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$i>>2] = $45;
 }
 $46 = HEAP32[$0>>2]|0;
 $47 = (($46) + 140|0);
 $48 = HEAP32[$47>>2]|0;
 _free($48);
 $49 = HEAP32[$0>>2]|0;
 $50 = (($49) + 116|0);
 $51 = HEAP32[$50>>2]|0;
 _free($51);
 $52 = HEAP32[$0>>2]|0;
 $53 = (($52) + 120|0);
 $54 = HEAP32[$53>>2]|0;
 _free($54);
 $55 = HEAP32[$0>>2]|0;
 $56 = (($55) + 124|0);
 $57 = HEAP32[$56>>2]|0;
 _free($57);
 $58 = HEAP32[$0>>2]|0;
 $59 = (($58) + 128|0);
 $60 = HEAP32[$59>>2]|0;
 _free($60);
 $61 = HEAP32[$0>>2]|0;
 $62 = (($61) + 132|0);
 $63 = HEAP32[$62>>2]|0;
 _free($63);
 $64 = HEAP32[$0>>2]|0;
 $65 = (($64) + 136|0);
 $66 = HEAP32[$65>>2]|0;
 _free($66);
 $67 = HEAP32[$0>>2]|0;
 $68 = HEAP32[$67>>2]|0;
 _free($68);
 $69 = HEAP32[$0>>2]|0;
 $70 = (($69) + 156|0);
 $71 = HEAP32[$70>>2]|0;
 _gretl_matrix_free($71);
 $72 = HEAP32[$0>>2]|0;
 $73 = (($72) + 160|0);
 $74 = HEAP32[$73>>2]|0;
 _gretl_matrix_free($74);
 $75 = HEAP32[$0>>2]|0;
 _system_clear_results($75);
 $76 = HEAP32[$0>>2]|0;
 _free($76);
 STACKTOP = sp;return;
}
function _destroy_ident($ident) {
 $ident = $ident|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $ident;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = HEAP32[$0>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function _system_clear_results($sys) {
 $sys = $sys|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $sys;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 24|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 20|0);
 HEAP32[$10>>2] = 0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 56|0);
 HEAPF64[$12>>3] = 1.79769313486231570815E+308;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 64|0);
 HEAPF64[$14>>3] = 1.79769313486231570815E+308;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 104|0);
 HEAPF64[$16>>3] = 1.79769313486231570815E+308;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 72|0);
 HEAPF64[$18>>3] = 1.79769313486231570815E+308;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 80|0);
 HEAPF64[$20>>3] = 1.79769313486231570815E+308;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 88|0);
 HEAPF64[$22>>3] = 0.0;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 96|0);
 HEAPF64[$24>>3] = 0.0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 144|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = HEAP32[$0>>2]|0;
  $30 = (($29) + 144|0);
  (_gretl_matrix_replace($30,0)|0);
 }
 $31 = HEAP32[$0>>2]|0;
 $32 = (($31) + 148|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 148|0);
  (_gretl_matrix_replace($36,0)|0);
 }
 $37 = HEAP32[$0>>2]|0;
 $38 = (($37) + 152|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + 152|0);
  (_gretl_matrix_replace($42,0)|0);
 }
 $43 = HEAP32[$0>>2]|0;
 $44 = (($43) + 164|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = HEAP32[$0>>2]|0;
  $48 = (($47) + 164|0);
  (_gretl_matrix_replace($48,0)|0);
 }
 $49 = HEAP32[$0>>2]|0;
 $50 = (($49) + 168|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)!=(0|0);
 if ($52) {
  $53 = HEAP32[$0>>2]|0;
  $54 = (($53) + 168|0);
  (_gretl_matrix_replace($54,0)|0);
 }
 $55 = HEAP32[$0>>2]|0;
 $56 = (($55) + 172|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0|0);
 if ($58) {
  $59 = HEAP32[$0>>2]|0;
  $60 = (($59) + 172|0);
  (_gretl_matrix_replace($60,0)|0);
 }
 $61 = HEAP32[$0>>2]|0;
 $62 = (($61) + 176|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0|0);
 if ($64) {
  $65 = HEAP32[$0>>2]|0;
  $66 = (($65) + 176|0);
  (_gretl_matrix_replace($66,0)|0);
 }
 $67 = HEAP32[$0>>2]|0;
 $68 = (($67) + 180|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)!=(0|0);
 if ($70) {
  $71 = HEAP32[$0>>2]|0;
  $72 = (($71) + 180|0);
  (_gretl_matrix_replace($72,0)|0);
 }
 $73 = HEAP32[$0>>2]|0;
 $74 = (($73) + 188|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)!=(0|0);
 if ($76) {
  $77 = HEAP32[$0>>2]|0;
  $78 = (($77) + 188|0);
  (_gretl_matrix_replace($78,0)|0);
 }
 $79 = HEAP32[$0>>2]|0;
 $80 = (($79) + 184|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)!=(0|0);
 if ($82) {
  $83 = HEAP32[$0>>2]|0;
  $84 = (($83) + 184|0);
  (_gretl_matrix_replace($84,0)|0);
 }
 $85 = HEAP32[$0>>2]|0;
 $86 = (($85) + 196|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)!=(0|0);
 if (!($88)) {
  STACKTOP = sp;return;
 }
 $89 = HEAP32[$0>>2]|0;
 $90 = (($89) + 196|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = HEAP32[$91>>2]|0;
 _free($92);
 $93 = HEAP32[$0>>2]|0;
 $94 = (($93) + 196|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 _free($97);
 $98 = HEAP32[$0>>2]|0;
 $99 = (($98) + 196|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 _free($102);
 $103 = HEAP32[$0>>2]|0;
 $104 = (($103) + 196|0);
 $105 = HEAP32[$104>>2]|0;
 _free($105);
 $106 = HEAP32[$0>>2]|0;
 $107 = (($106) + 196|0);
 HEAP32[$107>>2] = 0;
 STACKTOP = sp;return;
}
function _system_short_string($pmod) {
 $pmod = $pmod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $pmod;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_gretl_model_get_int($1,55400)|0);
 HEAP32[$i>>2] = $2;
 $3 = HEAP32[$i>>2]|0;
 $4 = (55368 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _tex_escape($targ,$src) {
 $targ = $targ|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $p = sp + 4|0;
 HEAP32[$1>>2] = $targ;
 HEAP32[$2>>2] = $src;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$p>>2] = $3;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP32[_stderr>>2]|0;
  (_fprintf(($6|0),(55464|0),($vararg_buffer|0))|0);
  $7 = HEAP32[$p>>2]|0;
  HEAP8[$7>>0] = 0;
  $8 = HEAP32[$p>>2]|0;
  HEAP32[$0>>2] = $8;
  $41 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 while(1) {
  $9 = HEAP32[$2>>2]|0;
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)!=(0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(36);
  if ($15) {
   label = 9;
  } else {
   $16 = HEAP32[$2>>2]|0;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)==(38);
   if ($19) {
    label = 9;
   } else {
    $20 = HEAP32[$2>>2]|0;
    $21 = HEAP8[$20>>0]|0;
    $22 = $21 << 24 >> 24;
    $23 = ($22|0)==(95);
    if ($23) {
     label = 9;
    } else {
     $24 = HEAP32[$2>>2]|0;
     $25 = HEAP8[$24>>0]|0;
     $26 = $25 << 24 >> 24;
     $27 = ($26|0)==(37);
     if ($27) {
      label = 9;
     } else {
      $28 = HEAP32[$2>>2]|0;
      $29 = HEAP8[$28>>0]|0;
      $30 = $29 << 24 >> 24;
      $31 = ($30|0)==(35);
      if ($31) {
       label = 9;
      }
     }
    }
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $32 = HEAP32[$1>>2]|0;
   $33 = (($32) + 1|0);
   HEAP32[$1>>2] = $33;
   HEAP8[$32>>0] = 92;
  }
  $34 = HEAP32[$2>>2]|0;
  $35 = (($34) + 1|0);
  HEAP32[$2>>2] = $35;
  $36 = HEAP8[$34>>0]|0;
  $37 = HEAP32[$1>>2]|0;
  $38 = (($37) + 1|0);
  HEAP32[$1>>2] = $38;
  HEAP8[$37>>0] = $36;
 }
 $39 = HEAP32[$1>>2]|0;
 HEAP8[$39>>0] = 0;
 $40 = HEAP32[$p>>2]|0;
 HEAP32[$0>>2] = $40;
 $41 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function _tex_greek_var($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $s;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strcmp($2,57432)|0);
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $5 = HEAP32[$1>>2]|0;
   $6 = (_strcmp($5,57448)|0);
   $7 = ($6|0)!=(0);
   if (!($7)) {
    HEAP32[$0>>2] = 57456;
    break;
   }
   $8 = HEAP32[$1>>2]|0;
   $9 = (_strcmp($8,57464)|0);
   $10 = ($9|0)!=(0);
   if (!($10)) {
    HEAP32[$0>>2] = 57472;
    break;
   }
   $11 = HEAP32[$1>>2]|0;
   $12 = (_strcmp($11,57480)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    HEAP32[$0>>2] = 57488;
    break;
   }
   $14 = HEAP32[$1>>2]|0;
   $15 = (_strcmp($14,57496)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    HEAP32[$0>>2] = 57504;
    break;
   }
   $17 = HEAP32[$1>>2]|0;
   $18 = (_strcmp($17,57520)|0);
   $19 = ($18|0)!=(0);
   if (!($19)) {
    HEAP32[$0>>2] = 57528;
    break;
   }
   $20 = HEAP32[$1>>2]|0;
   $21 = (_strcmp($20,57536)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    HEAP32[$0>>2] = 57544;
    break;
   }
   $23 = HEAP32[$1>>2]|0;
   $24 = (_strcmp($23,57552)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    HEAP32[$0>>2] = 57560;
    break;
   }
   $26 = HEAP32[$1>>2]|0;
   $27 = (_strcmp($26,57568)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    HEAP32[$0>>2] = 57576;
    break;
   }
   $29 = HEAP32[$1>>2]|0;
   $30 = (_strcmp($29,57584)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    HEAP32[$0>>2] = 0;
    break;
   } else {
    HEAP32[$0>>2] = 57592;
    break;
   }
  } else {
   HEAP32[$0>>2] = 57440;
  }
 } while(0);
 $32 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _tex_rl_float($x,$s,$dig) {
 $x = +$x;
 $s = $s|0;
 $dig = $dig|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $p = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer2 = sp + 8|0;
 $0 = sp + 32|0;
 $1 = sp;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $p = sp + 20|0;
 HEAPF64[$1>>3] = $x;
 HEAP32[$2>>2] = $s;
 HEAP32[$3>>2] = $dig;
 $4 = +HEAPF64[$1>>3];
 $5 = $4 == 1.79769313486231570815E+308;
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = (_strcpy(($6|0),(55504|0))|0);
  HEAP32[$0>>2] = $7;
  $30 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($30|0);
 }
 $8 = +HEAPF64[$1>>3];
 $9 = (+Math_abs((+$8)));
 $10 = $9 > 1.00000000000000003037E-13;
 $11 = +HEAPF64[$1>>3];
 $12 = $10 ? $11 : 0.0;
 HEAPF64[$1>>3] = $12;
 $13 = +HEAPF64[$1>>3];
 $14 = $13 < 0.0;
 $15 = HEAP32[$2>>2]|0;
 $16 = HEAP32[$3>>2]|0;
 $17 = +HEAPF64[$1>>3];
 if ($14) {
  $18 = -$17;
  HEAP32[$vararg_buffer2>>2] = $16;
  $vararg_ptr1 = (($vararg_buffer2) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$18;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($15,55528,$vararg_buffer2)|0);
 } else {
  HEAP32[$vararg_buffer2>>2] = $16;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($15,55536,$vararg_buffer2)|0);
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = (_strchr($19,46)|0);
 HEAP32[$p>>2] = $20;
 $21 = HEAP32[$p>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = HEAP32[$2>>2]|0;
  $24 = (_strchr($23,44)|0);
  HEAP32[$p>>2] = $24;
 }
 $25 = HEAP32[$p>>2]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = HEAP32[$p>>2]|0;
  HEAP8[$27>>0] = 38;
 } else {
  $28 = HEAP32[$2>>2]|0;
  (_strcat(($28|0),(55544|0))|0);
 }
 $29 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $29;
 $30 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($30|0);
}
function _tex_modify_exponent($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $minus = 0, $p = 0;
 var $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $p = sp + 12|0;
 $minus = sp + 8|0;
 $tmp = sp + 24|0;
 HEAP32[$0>>2] = $s;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strchr($1,101)|0);
 HEAP32[$p>>2] = $2;
 $3 = HEAP32[$p>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $17 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 $5 = HEAP32[$p>>2]|0;
 $6 = (($5) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = ($8|0)==(45);
 $10 = $9&1;
 HEAP32[$minus>>2] = $10;
 $11 = HEAP32[$minus>>2]|0;
 $12 = ($11|0)!=(0);
 $13 = $12 ? 55568 : 55576;
 $14 = HEAP32[$p>>2]|0;
 $15 = (($14) + 2|0);
 HEAP32[$vararg_buffer>>2] = $13;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 (_sprintf($tmp,55552,$vararg_buffer)|0);
 $16 = HEAP32[$p>>2]|0;
 (_strcpy(($16|0),($tmp|0))|0);
 $17 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _tex_rl_double($x,$s) {
 $x = +$x;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $p = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $0 = sp + 28|0;
 $1 = sp;
 $2 = sp + 24|0;
 $p = sp + 20|0;
 HEAPF64[$1>>3] = $x;
 HEAP32[$2>>2] = $s;
 $3 = +HEAPF64[$1>>3];
 $4 = $3 == 1.79769313486231570815E+308;
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = (_strcpy(($5|0),(55504|0))|0);
  HEAP32[$0>>2] = $6;
  $32 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $7 = +HEAPF64[$1>>3];
 $8 = (+Math_abs((+$7)));
 $9 = $8 > 1.00000000000000003037E-13;
 $10 = +HEAPF64[$1>>3];
 $11 = $9 ? $10 : 0.0;
 HEAPF64[$1>>3] = $11;
 $12 = +HEAPF64[$1>>3];
 $13 = $12 < 0.0;
 $14 = HEAP32[$2>>2]|0;
 $15 = +HEAPF64[$1>>3];
 if ($13) {
  $16 = -$15;
  HEAP32[$vararg_buffer2>>2] = 6;
  $vararg_ptr1 = (($vararg_buffer2) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$16;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($14,55584,$vararg_buffer2)|0);
 } else {
  HEAP32[$vararg_buffer2>>2] = 6;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$15;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($14,55600,$vararg_buffer2)|0);
 }
 $17 = HEAP32[$2>>2]|0;
 $18 = (_strchr($17,101)|0);
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  (_tex_modify_exponent($20)|0);
 }
 $21 = HEAP32[$2>>2]|0;
 $22 = (_strchr($21,46)|0);
 HEAP32[$p>>2] = $22;
 $23 = HEAP32[$p>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $25 = HEAP32[$2>>2]|0;
  $26 = (_strchr($25,44)|0);
  HEAP32[$p>>2] = $26;
 }
 $27 = HEAP32[$p>>2]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = HEAP32[$p>>2]|0;
  HEAP8[$29>>0] = 38;
 } else {
  $30 = HEAP32[$2>>2]|0;
  (_strcat(($30|0),(55544|0))|0);
 }
 $31 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $31;
 $32 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _tex_sprint_double_digits($x,$s,$dig) {
 $x = +$x;
 $s = $s|0;
 $dig = $dig|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $0 = sp + 28|0;
 $1 = sp;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 HEAPF64[$1>>3] = $x;
 HEAP32[$2>>2] = $s;
 HEAP32[$3>>2] = $dig;
 $4 = +HEAPF64[$1>>3];
 $5 = $4 == 1.79769313486231570815E+308;
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = (_strcpy(($6|0),(55608|0))|0);
  HEAP32[$0>>2] = $7;
  $24 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 $8 = +HEAPF64[$1>>3];
 $9 = (+Math_abs((+$8)));
 $10 = $9 > 1.00000000000000003037E-13;
 $11 = +HEAPF64[$1>>3];
 $12 = $10 ? $11 : 0.0;
 HEAPF64[$1>>3] = $12;
 $13 = +HEAPF64[$1>>3];
 $14 = $13 < 0.0;
 $15 = HEAP32[$2>>2]|0;
 $16 = HEAP32[$3>>2]|0;
 $17 = +HEAPF64[$1>>3];
 if ($14) {
  $18 = -$17;
  HEAP32[$vararg_buffer2>>2] = $16;
  $vararg_ptr1 = (($vararg_buffer2) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$18;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($15,55584,$vararg_buffer2)|0);
 } else {
  HEAP32[$vararg_buffer2>>2] = $16;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($15,55600,$vararg_buffer2)|0);
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = (_strchr($19,101)|0);
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = HEAP32[$2>>2]|0;
  (_tex_modify_exponent($22)|0);
 }
 $23 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $23;
 $24 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($24|0);
}
function _tex_sprint_double($x,$s) {
 $x = +$x;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0.0, $9 = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $0 = sp + 24|0;
 $1 = sp;
 $2 = sp + 20|0;
 HEAPF64[$1>>3] = $x;
 HEAP32[$2>>2] = $s;
 $3 = +HEAPF64[$1>>3];
 $4 = $3 == 1.79769313486231570815E+308;
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = (_strcpy(($5|0),(55608|0))|0);
  HEAP32[$0>>2] = $6;
  $22 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($22|0);
 }
 $7 = +HEAPF64[$1>>3];
 $8 = (+Math_abs((+$7)));
 $9 = $8 > 1.00000000000000003037E-13;
 $10 = +HEAPF64[$1>>3];
 $11 = $9 ? $10 : 0.0;
 HEAPF64[$1>>3] = $11;
 $12 = +HEAPF64[$1>>3];
 $13 = $12 < 0.0;
 $14 = HEAP32[$2>>2]|0;
 $15 = +HEAPF64[$1>>3];
 if ($13) {
  $16 = -$15;
  HEAP32[$vararg_buffer2>>2] = 6;
  $vararg_ptr1 = (($vararg_buffer2) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$16;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($14,55584,$vararg_buffer2)|0);
 } else {
  HEAP32[$vararg_buffer2>>2] = 6;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$15;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sprintf($14,55600,$vararg_buffer2)|0);
 }
 $17 = HEAP32[$2>>2]|0;
 $18 = (_strchr($17,101)|0);
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  (_tex_modify_exponent($20)|0);
 }
 $21 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $21;
 $22 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($22|0);
}
function _make_tex_coeff_name($pmod,$dset,$i,$name) {
 $pmod = $pmod|0;
 $dset = $dset|0;
 $i = $i|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $pname = sp + 16|0;
 HEAP32[$0>>2] = $pmod;
 HEAP32[$1>>2] = $dset;
 HEAP32[$2>>2] = $i;
 HEAP32[$3>>2] = $name;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 (_gretl_model_get_param_name($4,$5,$6,$pname)|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 72|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(6);
 if ($10) {
  $11 = HEAP32[$3>>2]|0;
  _tex_make_cname($11,$pname);
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(83);
 if ($15) {
  $16 = HEAP32[$3>>2]|0;
  $17 = (_tex_greek_param($16,$pname)|0);
  $18 = ($17|0)!=(0);
  if ($18) {
   STACKTOP = sp;return;
  }
  $19 = HEAP32[$3>>2]|0;
  (_tex_escape($19,$pname)|0);
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(9);
 if ($23) {
  $24 = HEAP32[$3>>2]|0;
  _tex_arma_coeff_name($24,$pname,0);
  STACKTOP = sp;return;
 }
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(45);
 if ($28) {
  $29 = HEAP32[$3>>2]|0;
  _tex_garch_coeff_name($29,$pname,0);
  STACKTOP = sp;return;
 }
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(128);
 if ($33) {
  $34 = HEAP32[$3>>2]|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$1>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  _tex_VAR_varname($34,$35,$36,$37);
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$0>>2]|0;
 $39 = (($38) + 72|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(16);
 if ($41) {
  $42 = HEAP32[$3>>2]|0;
  $43 = HEAP32[$0>>2]|0;
  $44 = HEAP32[$1>>2]|0;
  $45 = HEAP32[$2>>2]|0;
  _tex_VECM_varname($42,$43,$44,$45);
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$0>>2]|0;
 $47 = (($46) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(81);
 $50 = HEAP32[$3>>2]|0;
 if ($49) {
  _tex_mp_coeff_name($50,$pname,0);
  STACKTOP = sp;return;
 } else {
  (_tex_escape($50,$pname)|0);
  STACKTOP = sp;return;
 }
}
function _tex_make_cname($cname,$src) {
 $cname = $cname|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $lag = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $p = sp + 8|0;
 $c = sp + 20|0;
 $lag = sp + 4|0;
 HEAP32[$0>>2] = $cname;
 HEAP32[$1>>2] = $src;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = (_strrchr($8,95)|0);
 HEAP32[$p>>2] = $9;
 $10 = HEAP32[$p>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  (_tex_escape($12,$13)|0);
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$p>>2]|0;
 $15 = (($14) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 HEAP8[$c>>0] = $16;
 $17 = HEAP8[$c>>0]|0;
 $18 = $17&255;
 $19 = (_isdigit($18)|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = HEAP32[$p>>2]|0;
  $22 = (($21) + 1|0);
  HEAP32[$p>>2] = $22;
  $23 = (_atoi($22)|0);
  HEAP32[$lag>>2] = $23;
  $24 = HEAP32[$0>>2]|0;
  $25 = HEAP32[$lag>>2]|0;
  HEAP32[$vararg_buffer>>2] = $25;
  (_sprintf($24,57416,$vararg_buffer)|0);
  STACKTOP = sp;return;
 } else {
  $26 = HEAP32[$0>>2]|0;
  $27 = HEAP32[$1>>2]|0;
  (_tex_escape($26,$27)|0);
  STACKTOP = sp;return;
 }
}
function _tex_greek_param($targ,$src) {
 $targ = $targ|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tgreek = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $tgreek = sp + 4|0;
 HEAP32[$1>>2] = $targ;
 HEAP32[$2>>2] = $src;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_tex_greek_var($3)|0);
 HEAP32[$tgreek>>2] = $4;
 $5 = HEAP32[$tgreek>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = HEAP32[$1>>2]|0;
 if ($6) {
  $8 = HEAP32[$tgreek>>2]|0;
  HEAP32[$vararg_buffer>>2] = $8;
  (_sprintf($7,55496,$vararg_buffer)|0);
  HEAP32[$0>>2] = 1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP8[$7>>0] = 0;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _tex_arma_coeff_name($targ,$src,$inmath) {
 $targ = $targ|0;
 $src = $src|0;
 $inmath = $inmath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, $i = 0, $texname = 0, $vararg_buffer48 = 0, $vararg_ptr40 = 0, $vararg_ptr47 = 0, $vararg_ptr51 = 0, $vname = 0, $vnesc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer48 = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $vname = sp + 104|0;
 $vnesc = sp + 72|0;
 $texname = sp + 40|0;
 $i = sp + 8|0;
 $fmt = sp + 24|0;
 HEAP32[$0>>2] = $targ;
 HEAP32[$1>>2] = $src;
 HEAP32[$2>>2] = $inmath;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer48>>2] = $i;
 $4 = (_sscanf($3,57192,$vararg_buffer48)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = ($6|0)!=(0);
  $8 = HEAP32[$0>>2]|0;
  $9 = HEAP32[$i>>2]|0;
  if ($7) {
   HEAP32[$vararg_buffer48>>2] = $9;
   (_sprintf($8,57216,$vararg_buffer48)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer48>>2] = $9;
   (_sprintf($8,57200,$vararg_buffer48)|0);
   STACKTOP = sp;return;
  }
 }
 $10 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer48>>2] = $i;
 $11 = (_sscanf($10,57232,$vararg_buffer48)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = HEAP32[$2>>2]|0;
  $14 = ($13|0)!=(0);
  $15 = HEAP32[$0>>2]|0;
  $16 = HEAP32[$i>>2]|0;
  if ($14) {
   HEAP32[$vararg_buffer48>>2] = $16;
   (_sprintf($15,57256,$vararg_buffer48)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer48>>2] = $16;
   (_sprintf($15,57240,$vararg_buffer48)|0);
   STACKTOP = sp;return;
  }
 }
 $17 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer48>>2] = $i;
 $18 = (_sscanf($17,57272,$vararg_buffer48)|0);
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)!=(0);
  $22 = HEAP32[$0>>2]|0;
  $23 = HEAP32[$i>>2]|0;
  if ($21) {
   HEAP32[$vararg_buffer48>>2] = $23;
   (_sprintf($22,57304,$vararg_buffer48)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer48>>2] = $23;
   (_sprintf($22,57288,$vararg_buffer48)|0);
   STACKTOP = sp;return;
  }
 }
 $24 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer48>>2] = $i;
 $25 = (_sscanf($24,57320,$vararg_buffer48)|0);
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = HEAP32[$2>>2]|0;
  $28 = ($27|0)!=(0);
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$i>>2]|0;
  if ($28) {
   HEAP32[$vararg_buffer48>>2] = $30;
   (_sprintf($29,57352,$vararg_buffer48)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer48>>2] = $30;
   (_sprintf($29,57336,$vararg_buffer48)|0);
   STACKTOP = sp;return;
  }
 }
 $31 = HEAP32[$1>>2]|0;
 $32 = (_strstr($31,57368)|0);
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $47 = HEAP32[$1>>2]|0;
  (_tex_escape($vnesc,$47)|0);
  $48 = HEAP32[$0>>2]|0;
  (_strcpy(($48|0),($vnesc|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer48>>2] = 31;
 (_sprintf($fmt,57376,$vararg_buffer48)|0);
 $34 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer48>>2] = $vname;
 $vararg_ptr40 = (($vararg_buffer48) + 4|0);
 HEAP32[$vararg_ptr40>>2] = $i;
 $35 = (_sscanf($34,$fmt,$vararg_buffer48)|0);
 $36 = ($35|0)==(2);
 if (!($36)) {
  $45 = HEAP32[$1>>2]|0;
  (_tex_escape($vnesc,$45)|0);
  $46 = HEAP32[$0>>2]|0;
  (_strcpy(($46|0),($vnesc|0))|0);
  STACKTOP = sp;return;
 }
 $37 = (_strcmp($vname,57392)|0);
 $38 = ($37|0)!=(0);
 do {
  if ($38) {
   (_tex_escape($vnesc,$vname)|0);
   $39 = HEAP32[$2>>2]|0;
   $40 = ($39|0)!=(0);
   if ($40) {
    HEAP32[$vararg_buffer48>>2] = $vnesc;
    (_sprintf($texname,56784,$vararg_buffer48)|0);
    break;
   } else {
    (_strcpy(($texname|0),($vnesc|0))|0);
    break;
   }
  } else {
   (_strcpy(($texname|0),(57392|0))|0);
  }
 } while(0);
 $41 = HEAP32[$2>>2]|0;
 $42 = ($41|0)!=(0);
 $43 = HEAP32[$0>>2]|0;
 $44 = HEAP32[$i>>2]|0;
 if ($42) {
  HEAP32[$vararg_buffer48>>2] = $texname;
  $vararg_ptr51 = (($vararg_buffer48) + 4|0);
  HEAP32[$vararg_ptr51>>2] = $44;
  (_sprintf($43,57400,$vararg_buffer48)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer48>>2] = $texname;
  $vararg_ptr47 = (($vararg_buffer48) + 4|0);
  HEAP32[$vararg_ptr47>>2] = $44;
  (_sprintf($43,57128,$vararg_buffer48)|0);
  STACKTOP = sp;return;
 }
}
function _tex_garch_coeff_name($targ,$src,$inmath) {
 $targ = $targ|0;
 $src = $src|0;
 $inmath = $inmath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, $lag = 0, $vararg_buffer13 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0;
 var $vname = 0, $vnesc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer13 = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $fmt = sp + 72|0;
 $vname = sp + 40|0;
 $vnesc = sp + 24|0;
 $lag = sp + 8|0;
 HEAP32[$0>>2] = $targ;
 HEAP32[$1>>2] = $src;
 HEAP32[$2>>2] = $inmath;
 HEAP32[$vararg_buffer13>>2] = 31;
 (_sprintf($fmt,57144,$vararg_buffer13)|0);
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer13>>2] = $vname;
 $vararg_ptr4 = (($vararg_buffer13) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $lag;
 $4 = (_sscanf($3,$fmt,$vararg_buffer13)|0);
 $5 = ($4|0)==(2);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = ($6|0)!=(0);
  $8 = HEAP32[$0>>2]|0;
  $9 = HEAP32[$lag>>2]|0;
  if ($7) {
   HEAP32[$vararg_buffer13>>2] = $vname;
   $vararg_ptr12 = (($vararg_buffer13) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $9;
   (_sprintf($8,57176,$vararg_buffer13)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer13>>2] = $vname;
   $vararg_ptr8 = (($vararg_buffer13) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $9;
   (_sprintf($8,57160,$vararg_buffer13)|0);
   STACKTOP = sp;return;
  }
 } else {
  $10 = HEAP32[$1>>2]|0;
  (_tex_escape($vnesc,$10)|0);
  $11 = HEAP32[$2>>2]|0;
  $12 = ($11|0)!=(0);
  $13 = HEAP32[$0>>2]|0;
  if ($12) {
   HEAP32[$vararg_buffer13>>2] = $vnesc;
   (_sprintf($13,56784,$vararg_buffer13)|0);
   STACKTOP = sp;return;
  } else {
   (_strcpy(($13|0),($vnesc|0))|0);
   STACKTOP = sp;return;
  }
 }
}
function _tex_VAR_varname($s,$pmod,$dset,$v) {
 $s = $s|0;
 $pmod = $pmod|0;
 $dset = $dset|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base = 0, $lag = 0, $tmp = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer2 = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $tmp = sp + 40|0;
 $base = sp + 28|0;
 $lag = sp + 8|0;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $v;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 (_gretl_model_get_param_name($4,$5,$6,$tmp)|0);
 HEAP32[$vararg_buffer2>>2] = $base;
 $vararg_ptr1 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $lag;
 $7 = (_sscanf($tmp,57112,$vararg_buffer2)|0);
 $8 = ($7|0)==(2);
 $9 = HEAP32[$0>>2]|0;
 if ($8) {
  $10 = HEAP32[$lag>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $base;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $10;
  (_sprintf($9,57128,$vararg_buffer2)|0);
  STACKTOP = sp;return;
 } else {
  (_tex_escape($9,$tmp)|0);
  STACKTOP = sp;return;
 }
}
function _tex_VECM_varname($s,$pmod,$dset,$v) {
 $s = $s|0;
 $pmod = $pmod|0;
 $dset = $dset|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base = 0, $lag = 0, $tmp = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer2 = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $tmp = sp + 40|0;
 $base = sp + 28|0;
 $lag = sp + 8|0;
 HEAP32[$0>>2] = $s;
 HEAP32[$1>>2] = $pmod;
 HEAP32[$2>>2] = $dset;
 HEAP32[$3>>2] = $v;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 (_gretl_model_get_param_name($4,$5,$6,$tmp)|0);
 HEAP32[$vararg_buffer2>>2] = $base;
 $vararg_ptr1 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $lag;
 $7 = (_sscanf($tmp,57072,$vararg_buffer2)|0);
 $8 = ($7|0)==(2);
 $9 = HEAP32[$0>>2]|0;
 if ($8) {
  $10 = HEAP32[$lag>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $base;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $10;
  (_sprintf($9,57088,$vararg_buffer2)|0);
  STACKTOP = sp;return;
 } else {
  (_tex_escape($9,$tmp)|0);
  STACKTOP = sp;return;
 }
}
function _tex_mp_coeff_name($targ,$src,$inmath) {
 $targ = $targ|0;
 $src = $src|0;
 $inmath = $inmath|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, $power = 0, $vararg_buffer13 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vname = 0, $vnesc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer13 = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $fmt = sp + 80|0;
 $vname = sp + 48|0;
 $vnesc = sp + 24|0;
 $power = sp + 8|0;
 HEAP32[$0>>2] = $targ;
 HEAP32[$1>>2] = $src;
 HEAP32[$2>>2] = $inmath;
 $3 = HEAP32[$1>>2]|0;
 (_tex_escape($vnesc,$3)|0);
 HEAP32[$vararg_buffer13>>2] = 31;
 (_sprintf($fmt,57024,$vararg_buffer13)|0);
 HEAP32[$vararg_buffer13>>2] = $vname;
 $vararg_ptr4 = (($vararg_buffer13) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $power;
 $4 = (_sscanf($vnesc,$fmt,$vararg_buffer13)|0);
 $5 = ($4|0)==(2);
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = HEAP32[$0>>2]|0;
 if ($5) {
  $9 = HEAP32[$power>>2]|0;
  if ($7) {
   HEAP32[$vararg_buffer13>>2] = $vname;
   $vararg_ptr12 = (($vararg_buffer13) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $9;
   (_sprintf($8,57056,$vararg_buffer13)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer13>>2] = $vname;
   $vararg_ptr8 = (($vararg_buffer13) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $9;
   (_sprintf($8,57040,$vararg_buffer13)|0);
   STACKTOP = sp;return;
  }
 } else {
  if ($7) {
   HEAP32[$vararg_buffer13>>2] = $vnesc;
   (_sprintf($8,56784,$vararg_buffer13)|0);
   STACKTOP = sp;return;
  } else {
   (_strcpy(($8|0),($vnesc|0))|0);
   STACKTOP = sp;return;
  }
 }
}
function _tex_print_coeff($mc,$prn) {
 $mc = $mc|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $col1 = 0, $col2 = 0, $col3 = 0, $col4 = 0, $ncols = 0, $vararg_buffer21 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $vararg_buffer21 = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $col1 = sp + 216|0;
 $col2 = sp + 152|0;
 $col3 = sp + 88|0;
 $col4 = sp + 24|0;
 $ncols = sp + 12|0;
 HEAP32[$0>>2] = $mc;
 HEAP32[$1>>2] = $prn;
 HEAP32[$ncols>>2] = 4;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = +HEAPF64[$6>>3];
  (_tex_multi_double($7,$col1)|0);
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 8|0);
  $10 = +HEAPF64[$9>>3];
  (_tex_multi_double($10,$col2)|0);
  $11 = HEAP32[$1>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 68|0);
  HEAP32[$vararg_buffer21>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer21) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $col1;
  $vararg_ptr2 = (($vararg_buffer21) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $col2;
  (_pprintf($11,55616,$vararg_buffer21)|0);
  STACKTOP = sp;return;
 }
 $14 = HEAP32[55408>>2]|0;
 $15 = ($14|0)!=(0);
 $16 = HEAP32[$0>>2]|0;
 if ($15) {
  $17 = HEAP32[$1>>2]|0;
  (_tex_print_coeff_custom($16,$17)|0);
  STACKTOP = sp;return;
 }
 $18 = +HEAPF64[$16>>3];
 $19 = $18 == 1.79769313486231570815E+308;
 if ($19) {
  HEAP32[$vararg_buffer21>>2] = 55672;
  (_sprintf($col1,55640,$vararg_buffer21)|0);
 } else {
  $20 = HEAP32[$0>>2]|0;
  $21 = +HEAPF64[$20>>3];
  (_tex_rl_double($21,$col1)|0);
 }
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 40|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $24 == 1.79769313486231570815E+308;
 if ($25) {
  label = 11;
 } else {
  $26 = HEAP32[$0>>2]|0;
  $27 = (($26) + 48|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $28 == 1.79769313486231570815E+308;
  if ($29) {
   label = 11;
  } else {
   $30 = HEAP32[$0>>2]|0;
   $31 = (($30) + 40|0);
   $32 = +HEAPF64[$31>>3];
   (_tex_rl_double($32,$col2)|0);
   $33 = HEAP32[$0>>2]|0;
   $34 = (($33) + 48|0);
   $35 = +HEAPF64[$34>>3];
   (_tex_rl_double($35,$col3)|0);
   HEAP32[$ncols>>2] = 3;
  }
 }
 do {
  if ((label|0) == 11) {
   $36 = HEAP32[$0>>2]|0;
   $37 = (($36) + 8|0);
   $38 = +HEAPF64[$37>>3];
   $39 = $38 == 1.79769313486231570815E+308;
   if ($39) {
    HEAP32[$vararg_buffer21>>2] = 55672;
    (_sprintf($col2,55640,$vararg_buffer21)|0);
   } else {
    $40 = HEAP32[$0>>2]|0;
    $41 = (($40) + 8|0);
    $42 = +HEAPF64[$41>>3];
    (_tex_rl_double($42,$col2)|0);
   }
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + 16|0);
   $45 = +HEAPF64[$44>>3];
   $46 = $45 == 1.79769313486231570815E+308;
   if ($46) {
    HEAP32[$vararg_buffer21>>2] = 55672;
    (_sprintf($col3,55640,$vararg_buffer21)|0);
    break;
   } else {
    $47 = HEAP32[$0>>2]|0;
    $48 = (($47) + 16|0);
    $49 = +HEAPF64[$48>>3];
    (_tex_rl_float($49,$col3,4)|0);
    break;
   }
  }
 } while(0);
 HEAP8[$col4>>0] = 0;
 $50 = HEAP32[$0>>2]|0;
 $51 = (($50) + 56|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0);
 if ($53) {
  label = 20;
 } else {
  $54 = HEAP32[$0>>2]|0;
  $55 = (($54) + 32|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $56 == 1.79769313486231570815E+308;
  if ($57) {
   (_strcpy(($col4|0),(55504|0))|0);
  } else {
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   $58 = HEAP32[$0>>2]|0;
   $59 = (($58) + 32|0);
   $60 = +HEAPF64[$59>>3];
   $61 = $60 == 1.79769313486231570815E+308;
   $62 = HEAP32[$0>>2]|0;
   if (!($61)) {
    $63 = (($62) + 32|0);
    $64 = +HEAPF64[$63>>3];
    (_tex_rl_double($64,$col4)|0);
    break;
   }
   $65 = (($62) + 56|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)!=(0);
   if ($67) {
    $68 = HEAP32[$0>>2]|0;
    $69 = (($68) + 24|0);
    $70 = +HEAPF64[$69>>3];
    $71 = $70 == 1.79769313486231570815E+308;
    if (!($71)) {
     $72 = HEAP32[$0>>2]|0;
     $73 = (($72) + 24|0);
     $74 = +HEAPF64[$73>>3];
     (_tex_rl_float($74,$col4,4)|0);
    }
   }
  }
 } while(0);
 $75 = HEAP32[$1>>2]|0;
 $76 = HEAP32[$0>>2]|0;
 $77 = (($76) + 68|0);
 HEAP32[$vararg_buffer21>>2] = $77;
 $vararg_ptr15 = (($vararg_buffer21) + 4|0);
 HEAP32[$vararg_ptr15>>2] = $col1;
 $vararg_ptr16 = (($vararg_buffer21) + 8|0);
 HEAP32[$vararg_ptr16>>2] = $col2;
 (_pprintf($75,55688,$vararg_buffer21)|0);
 $78 = HEAP32[$ncols>>2]|0;
 $79 = ($78|0)==(4);
 $80 = HEAP32[$1>>2]|0;
 if ($79) {
  HEAP32[$vararg_buffer21>>2] = $col3;
  $vararg_ptr20 = (($vararg_buffer21) + 4|0);
  HEAP32[$vararg_ptr20>>2] = $col4;
  (_pprintf($80,55712,$vararg_buffer21)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer21>>2] = $col3;
  (_pprintf($80,55744,$vararg_buffer21)|0);
  STACKTOP = sp;return;
 }
}
function _tex_multi_double($x,$numstr) {
 $x = +$x;
 $numstr = $numstr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $p = 0, $tmp = 0, $vararg_buffer4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 8|0;
 $0 = sp;
 $1 = sp + 20|0;
 $p = sp + 16|0;
 $tmp = sp + 24|0;
 HEAPF64[$0>>3] = $x;
 HEAP32[$1>>2] = $numstr;
 $2 = +HEAPF64[$0>>3];
 $3 = $2 == 1.79769313486231570815E+308;
 do {
  if ($3) {
   $4 = HEAP32[$1>>2]|0;
   (_strcpy(($4|0),(55608|0))|0);
  } else {
   $5 = +HEAPF64[$0>>3];
   $6 = $5 < 0.0;
   $7 = HEAP32[$1>>2]|0;
   $8 = +HEAPF64[$0>>3];
   if ($6) {
    $9 = -$8;
    HEAPF64[tempDoublePtr>>3]=$9;HEAP32[$vararg_buffer4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer4+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($7,56984,$vararg_buffer4)|0);
    break;
   } else {
    HEAPF64[tempDoublePtr>>3]=$8;HEAP32[$vararg_buffer4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer4+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($7,57000,$vararg_buffer4)|0);
    break;
   }
  }
 } while(0);
 $10 = HEAP32[$1>>2]|0;
 $11 = (_strstr($10,57008)|0);
 HEAP32[$p>>2] = $11;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $16 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($16|0);
 }
 $13 = HEAP32[$p>>2]|0;
 $14 = (($13) + 2|0);
 HEAP32[$vararg_buffer4>>2] = $14;
 (_sprintf($tmp,57016,$vararg_buffer4)|0);
 $15 = HEAP32[$p>>2]|0;
 (_strcpy(($15|0),($tmp|0))|0);
 $16 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _tex_print_coeff_custom($mc,$prn) {
 $mc = $mc|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $fmt = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer39 = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $fmt = sp + 20|0;
 HEAP32[$1>>2] = $mc;
 HEAP32[$2>>2] = $prn;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 68|0);
 HEAP32[$vararg_buffer39>>2] = $5;
 (_pprintf($3,56848,$vararg_buffer39)|0);
 $6 = HEAP8[55416>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 do {
  if ($7) {
   $8 = HEAP32[$1>>2]|0;
   $9 = +HEAPF64[$8>>3];
   $10 = $9 == 1.79769313486231570815E+308;
   if ($10) {
    $11 = HEAP32[$2>>2]|0;
    HEAP32[$vararg_buffer39>>2] = 55672;
    (_pprintf($11,56928,$vararg_buffer39)|0);
    break;
   } else {
    HEAP32[$vararg_buffer39>>2] = 55416;
    (_sprintf($fmt,55496,$vararg_buffer39)|0);
    $12 = HEAP32[$2>>2]|0;
    $13 = HEAP32[$1>>2]|0;
    $14 = +HEAPF64[$13>>3];
    HEAPF64[tempDoublePtr>>3]=$14;HEAP32[$vararg_buffer39>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer39+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($12,$fmt,$vararg_buffer39)|0);
    break;
   }
  }
 } while(0);
 $15 = HEAP8[((55416 + 8|0))>>0]|0;
 $16 = ($15<<24>>24)!=(0);
 $17 = HEAP8[((55416 + 16|0))>>0]|0;
 $18 = ($17<<24>>24)!=(0);
 $or$cond = $16 | $18;
 $19 = HEAP8[((55416 + 24|0))>>0]|0;
 $20 = ($19<<24>>24)!=(0);
 $or$cond3 = $or$cond | $20;
 if (!($or$cond3)) {
  $21 = HEAP32[$2>>2]|0;
  (_pputs($21,56912)|0);
  HEAP32[$0>>2] = 0;
  $90 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($90|0);
 }
 $22 = HEAP8[((55416 + 8|0))>>0]|0;
 $23 = ($22<<24>>24)!=(0);
 do {
  if ($23) {
   $24 = HEAP8[55416>>0]|0;
   $25 = ($24<<24>>24)!=(0);
   if ($25) {
    $26 = HEAP32[$2>>2]|0;
    (_pputs($26,55888)|0);
   }
   $27 = HEAP32[$1>>2]|0;
   $28 = (($27) + 8|0);
   $29 = +HEAPF64[$28>>3];
   $30 = $29 == 1.79769313486231570815E+308;
   $31 = HEAP32[$2>>2]|0;
   if ($30) {
    HEAP32[$vararg_buffer39>>2] = 55672;
    (_pprintf($31,56928,$vararg_buffer39)|0);
    break;
   } else {
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + 8|0);
    $34 = +HEAPF64[$33>>3];
    HEAPF64[tempDoublePtr>>3]=$34;HEAP32[$vararg_buffer39>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer39+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($31,((55416 + 8|0)),$vararg_buffer39)|0);
    break;
   }
  }
 } while(0);
 $35 = HEAP8[((55416 + 16|0))>>0]|0;
 $36 = ($35<<24>>24)!=(0);
 $37 = HEAP8[((55416 + 24|0))>>0]|0;
 $38 = ($37<<24>>24)!=(0);
 $or$cond5 = $36 | $38;
 if (!($or$cond5)) {
  $39 = HEAP32[$2>>2]|0;
  (_pputs($39,56912)|0);
  HEAP32[$0>>2] = 0;
  $90 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($90|0);
 }
 $40 = HEAP8[((55416 + 16|0))>>0]|0;
 $41 = ($40<<24>>24)!=(0);
 do {
  if ($41) {
   $42 = HEAP8[55416>>0]|0;
   $43 = $42 << 24 >> 24;
   $44 = ($43|0)!=(0);
   if ($44) {
    label = 18;
   } else {
    $45 = HEAP8[((55416 + 8|0))>>0]|0;
    $46 = $45 << 24 >> 24;
    $47 = ($46|0)!=(0);
    if ($47) {
     label = 18;
    }
   }
   if ((label|0) == 18) {
    $48 = HEAP32[$2>>2]|0;
    (_pputs($48,55888)|0);
   }
   $49 = HEAP32[$1>>2]|0;
   $50 = (($49) + 16|0);
   $51 = +HEAPF64[$50>>3];
   $52 = $51 == 1.79769313486231570815E+308;
   if ($52) {
    $53 = HEAP32[$2>>2]|0;
    HEAP32[$vararg_buffer39>>2] = 55672;
    (_pprintf($53,56928,$vararg_buffer39)|0);
    break;
   } else {
    HEAP32[$vararg_buffer39>>2] = ((55416 + 16|0));
    (_sprintf($fmt,55496,$vararg_buffer39)|0);
    $54 = HEAP32[$2>>2]|0;
    $55 = HEAP32[$1>>2]|0;
    $56 = (($55) + 16|0);
    $57 = +HEAPF64[$56>>3];
    HEAPF64[tempDoublePtr>>3]=$57;HEAP32[$vararg_buffer39>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer39+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_pprintf($54,$fmt,$vararg_buffer39)|0);
    break;
   }
  }
 } while(0);
 $58 = HEAP8[((55416 + 24|0))>>0]|0;
 $59 = ($58<<24>>24)!=(0);
 do {
  if ($59) {
   $60 = HEAP8[55416>>0]|0;
   $61 = $60 << 24 >> 24;
   $62 = ($61|0)!=(0);
   if ($62) {
    label = 26;
   } else {
    $63 = HEAP8[((55416 + 8|0))>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = ($64|0)!=(0);
    if ($65) {
     label = 26;
    } else {
     $66 = HEAP8[((55416 + 16|0))>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = ($67|0)!=(0);
     if ($68) {
      label = 26;
     }
    }
   }
   if ((label|0) == 26) {
    $69 = HEAP32[$2>>2]|0;
    (_pputs($69,55888)|0);
   }
   $70 = HEAP32[$1>>2]|0;
   $71 = (($70) + 56|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)!=(0);
   $74 = HEAP32[$1>>2]|0;
   if ($73) {
    $75 = (($74) + 24|0);
    $76 = +HEAPF64[$75>>3];
    $77 = $76 == 1.79769313486231570815E+308;
    $78 = HEAP32[$2>>2]|0;
    if ($77) {
     HEAP32[$vararg_buffer39>>2] = 55672;
     (_pprintf($78,56928,$vararg_buffer39)|0);
     break;
    } else {
     $79 = HEAP32[$1>>2]|0;
     $80 = (($79) + 24|0);
     $81 = +HEAPF64[$80>>3];
     HEAPF64[tempDoublePtr>>3]=$81;HEAP32[$vararg_buffer39>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer39+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($78,((55416 + 24|0)),$vararg_buffer39)|0);
     break;
    }
   } else {
    $82 = (($74) + 32|0);
    $83 = +HEAPF64[$82>>3];
    $84 = $83 == 1.79769313486231570815E+308;
    $85 = HEAP32[$2>>2]|0;
    if ($84) {
     (_pprintf($85,56960,$vararg_buffer39)|0);
     break;
    } else {
     $86 = HEAP32[$1>>2]|0;
     $87 = (($86) + 32|0);
     $88 = +HEAPF64[$87>>3];
     HEAPF64[tempDoublePtr>>3]=$88;HEAP32[$vararg_buffer39>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer39+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_pprintf($85,((55416 + 24|0)),$vararg_buffer39)|0);
     break;
    }
   }
  }
 } while(0);
 $89 = HEAP32[$2>>2]|0;
 (_pputs($89,56912)|0);
 HEAP32[$0>>2] = 0;
 $90 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($90|0);
}
function _tex_coeff_table_start($cols,$opt,$prn) {
 $cols = $cols|0;
 $opt = $opt|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $binary = 0, $i = 0, $mcols = 0, $ncols = 0, $pt = 0;
 var $vararg_buffer4 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer4 = sp;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $pt = sp + 48|0;
 $i = sp + 28|0;
 $mcols = sp + 24|0;
 $binary = sp + 20|0;
 $ncols = sp + 16|0;
 HEAP32[$1>>2] = $cols;
 HEAP32[$2>>2] = $opt;
 HEAP32[$3>>2] = $prn;
 $4 = (_get_local_decpoint()|0);
 $5 = $4&255;
 HEAP8[$pt>>0] = $5;
 $6 = HEAP32[$2>>2]|0;
 $7 = $6 & 2;
 HEAP32[$binary>>2] = $7;
 HEAP32[$ncols>>2] = 1;
 $8 = HEAP32[55408>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$1>>2]|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = HEAP32[$3>>2]|0;
  $13 = (_tex_custom_coeff_table_start($10,$11,$12)|0);
  HEAP32[$0>>2] = $13;
  $74 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($74|0);
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = $14 & 1048576;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $17 = HEAP32[$3>>2]|0;
  (_pputs($17,55760)|0);
 }
 $18 = HEAP32[$3>>2]|0;
 (_pputs($18,55776)|0);
 HEAP32[$i>>2] = 1;
 while(1) {
  $19 = HEAP32[$i>>2]|0;
  $20 = HEAP32[$1>>2]|0;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   break;
  }
  $24 = HEAP32[$2>>2]|0;
  $25 = $24 & 4096;
  $26 = ($25|0)!=(0);
  $27 = HEAP32[$3>>2]|0;
  if ($26) {
   (_pputc($27,114)|0);
  } else {
   $28 = HEAP8[$pt>>0]|0;
   $29 = $28 << 24 >> 24;
   HEAP32[$vararg_buffer4>>2] = $29;
   (_pprintf($27,55800,$vararg_buffer4)|0);
  }
  $30 = HEAP32[$ncols>>2]|0;
  $31 = (($30) + 2)|0;
  HEAP32[$ncols>>2] = $31;
  $32 = HEAP32[$i>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$i>>2] = $33;
 }
 $34 = HEAP32[$3>>2]|0;
 $35 = HEAP32[$1>>2]|0;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $36;
 (_pprintf($34,55808,$vararg_buffer4)|0);
 $37 = HEAP32[$2>>2]|0;
 $38 = $37 & 4096;
 $39 = ($38|0)!=(0);
 $40 = $39 ? 1 : 2;
 HEAP32[$mcols>>2] = $40;
 HEAP32[$i>>2] = 1;
 while(1) {
  $41 = HEAP32[$i>>2]|0;
  $42 = HEAP32[$1>>2]|0;
  $43 = (($42) + ($41<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0|0);
  if (!($45)) {
   break;
  }
  $46 = HEAP32[$i>>2]|0;
  $47 = HEAP32[$3>>2]|0;
  _bufspace($46,$47);
  $48 = HEAP32[$3>>2]|0;
  $49 = HEAP32[$mcols>>2]|0;
  $50 = HEAP32[$i>>2]|0;
  $51 = HEAP32[$1>>2]|0;
  $52 = (($51) + ($50<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$i>>2]|0;
  $55 = (($54) + 1)|0;
  $56 = HEAP32[$1>>2]|0;
  $57 = (($56) + ($55<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0|0);
  if ($59) {
   $60 = HEAP32[$binary>>2]|0;
   $61 = ($60|0)!=(0);
   $62 = $61;
  } else {
   $62 = 0;
  }
  $63 = $62 ? 55848 : 55448;
  $64 = HEAP32[$i>>2]|0;
  $65 = (($64) + 1)|0;
  $66 = HEAP32[$1>>2]|0;
  $67 = (($66) + ($65<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)==(0|0);
  $70 = $69 ? 55856 : 55544;
  HEAP32[$vararg_buffer4>>2] = $49;
  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $53;
  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $63;
  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $70;
  (_pprintf($48,55816,$vararg_buffer4)|0);
  $71 = HEAP32[$i>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$i>>2] = $72;
 }
 $73 = HEAP32[$ncols>>2]|0;
 HEAP32[$0>>2] = $73;
 $74 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($74|0);
}
function _tex_custom_coeff_table_start($cols,$opt,$prn) {
 $cols = $cols|0;
 $opt = $opt|0;
 $prn = $prn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $i = 0, $ncols = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer15 = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $i = sp + 8|0;
 $ncols = sp + 4|0;
 HEAP32[$1>>2] = $cols;
 HEAP32[$2>>2] = $opt;
 HEAP32[$3>>2] = $prn;
 HEAP32[$ncols>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $4 = HEAP32[$i>>2]|0;
  $5 = ($4|0)<(4);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$i>>2]|0;
  $7 = (55416 + ($6<<3)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)!=(0);
  if ($9) {
   $10 = HEAP32[$ncols>>2]|0;
   $11 = (($10) + 1)|0;
   HEAP32[$ncols>>2] = $11;
  }
  $12 = HEAP32[$i>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$i>>2] = $13;
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = $14 & 1048576;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $17 = HEAP32[$3>>2]|0;
  (_pputs($17,55760)|0);
 }
 $18 = HEAP32[$3>>2]|0;
 (_pputs($18,55776)|0);
 HEAP32[$i>>2] = 0;
 while(1) {
  $19 = HEAP32[$i>>2]|0;
  $20 = HEAP32[$ncols>>2]|0;
  $21 = ($19|0)<($20|0);
  $22 = HEAP32[$3>>2]|0;
  if (!($21)) {
   break;
  }
  (_pputc($22,114)|0);
  $23 = HEAP32[$i>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$i>>2] = $24;
 }
 (_pputs($22,55896)|0);
 $25 = HEAP32[$3>>2]|0;
 $26 = HEAP32[$1>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$vararg_buffer15>>2] = $27;
 (_pprintf($25,56856,$vararg_buffer15)|0);
 $28 = HEAP8[55416>>0]|0;
 $29 = ($28<<24>>24)!=(0);
 if ($29) {
  $30 = HEAP32[$3>>2]|0;
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$vararg_buffer15>>2] = $33;
  (_pprintf($30,56888,$vararg_buffer15)|0);
 }
 $34 = HEAP8[((55416 + 8|0))>>0]|0;
 $35 = ($34<<24>>24)!=(0);
 $36 = HEAP8[((55416 + 16|0))>>0]|0;
 $37 = ($36<<24>>24)!=(0);
 $or$cond = $35 | $37;
 $38 = HEAP8[((55416 + 24|0))>>0]|0;
 $39 = ($38<<24>>24)!=(0);
 $or$cond3 = $or$cond | $39;
 if (!($or$cond3)) {
  $40 = HEAP32[$3>>2]|0;
  (_pputs($40,56912)|0);
  $41 = HEAP32[$ncols>>2]|0;
  HEAP32[$0>>2] = $41;
  $88 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($88|0);
 }
 $42 = HEAP8[((55416 + 8|0))>>0]|0;
 $43 = ($42<<24>>24)!=(0);
 if ($43) {
  $44 = HEAP8[55416>>0]|0;
  $45 = ($44<<24>>24)!=(0);
  if ($45) {
   $46 = HEAP32[$3>>2]|0;
   (_pputs($46,56920)|0);
  }
  $47 = HEAP32[$3>>2]|0;
  $48 = HEAP32[$1>>2]|0;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  HEAP32[$vararg_buffer15>>2] = $50;
  (_pprintf($47,56888,$vararg_buffer15)|0);
 }
 $51 = HEAP8[((55416 + 16|0))>>0]|0;
 $52 = ($51<<24>>24)!=(0);
 $53 = HEAP8[((55416 + 24|0))>>0]|0;
 $54 = ($53<<24>>24)!=(0);
 $or$cond5 = $52 | $54;
 if (!($or$cond5)) {
  $55 = HEAP32[$3>>2]|0;
  (_pputs($55,56912)|0);
  $56 = HEAP32[$ncols>>2]|0;
  HEAP32[$0>>2] = $56;
  $88 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($88|0);
 }
 $57 = HEAP8[((55416 + 16|0))>>0]|0;
 $58 = ($57<<24>>24)!=(0);
 if ($58) {
  $59 = HEAP8[55416>>0]|0;
  $60 = $59 << 24 >> 24;
  $61 = ($60|0)!=(0);
  if ($61) {
   label = 24;
  } else {
   $62 = HEAP8[((55416 + 8|0))>>0]|0;
   $63 = $62 << 24 >> 24;
   $64 = ($63|0)!=(0);
   if ($64) {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   $65 = HEAP32[$3>>2]|0;
   (_pputs($65,56920)|0);
  }
  $66 = HEAP32[$3>>2]|0;
  $67 = HEAP32[$1>>2]|0;
  $68 = (($67) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  HEAP32[$vararg_buffer15>>2] = $69;
  (_pprintf($66,56888,$vararg_buffer15)|0);
 }
 $70 = HEAP8[((55416 + 24|0))>>0]|0;
 $71 = ($70<<24>>24)!=(0);
 if ($71) {
  $72 = HEAP8[55416>>0]|0;
  $73 = $72 << 24 >> 24;
  $74 = ($73|0)!=(0);
  if ($74) {
   label = 30;
  } else {
   $75 = HEAP8[((55416 + 8|0))>>0]|0;
   $76 = $75 << 24 >> 24;
   $77 = ($76|0)!=(0);
   if ($77) {
    label = 30;
   } else {
    $78 = HEAP8[((55416 + 16|0))>>0]|0;
    $79 = $78 << 24 >> 24;
    $80 = ($79|0)!=(0);
    if ($80) {
     label = 30;
    }
   }
  }
  if ((label|0) == 30) {
   $81 = HEAP32[$3>>2]|0;
   (_pputs($81,56920)|0);
  }
  $82 = HEAP32[$3>>2]|0;
  $83 = HEAP32[$1>>2]|0;
  $84 = (($83) + 16|0);
  $85 = HEAP32[$84>>2]|0;
  HEAP32[$vararg_buffer15>>2] = $85;
  (_pprintf($82,56888,$vararg_buffer15)|0);
 }
 $86 = HEAP32[$3>>2]|0;
 (_pputs($86,56912)|0);
 $87 = HEAP32[$ncols>>2]|0;
 HEAP32[$0>>2] = $87;
 $88 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($88|0);
}
function _tex_coeff_table_end($prn) {
 $prn = $prn|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $prn;
 $1 = HEAP32[$0>>2]|0;
 (_pputs($1,55864)|0);
 STACKTOP = sp;return;
}
function _gretl_tex_preamble($prn,$fmt) {
 $prn = $prn|0;
 $fmt = $fmt|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $driver = 0, $fp = 0, $lang = 0;
 var $line = 0, $margin = 0, $paper = 0, $userfile = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $vararg_buffer1 = sp;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $lang = sp + 32|0;
 $fp = sp + 28|0;
 $userfile = sp + 24|0;
 $line = sp + 48|0;
 $paper = sp + 20|0;
 $driver = sp + 16|0;
 $margin = sp + 12|0;
 HEAP32[$0>>2] = $prn;
 HEAP32[$1>>2] = $fmt;
 $2 = (_getenv((55904|0))|0);
 HEAP32[$lang>>2] = $2;
 HEAP32[$fp>>2] = 0;
 HEAP32[$userfile>>2] = 0;
 $3 = HEAP8[55912>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = (_gretl_fopen(55912,55880)|0);
  HEAP32[$fp>>2] = $6;
  $7 = HEAP32[$fp>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   while(1) {
    $9 = HEAP32[$fp>>2]|0;
    $10 = (_fgets(($line|0),256,($9|0))|0);
    $11 = ($10|0)!=(0|0);
    if (!($11)) {
     break;
    }
    $12 = (_strstr($line,56424)|0);
    $13 = ($12|0)!=(0|0);
    if ($13) {
     $14 = HEAP32[$1>>2]|0;
     $15 = $14 & 1024;
     $16 = ($15|0)!=(0);
     if ($16) {
      _landscape_modify_line($line);
     }
    }
    $17 = HEAP32[$0>>2]|0;
    (_pputs($17,$line)|0);
   }
   HEAP32[$userfile>>2] = 1;
   $18 = HEAP32[$fp>>2]|0;
   (_fclose(($18|0))|0);
   $19 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer1>>2] = 55912;
   (_fprintf(($19|0),(56440|0),($vararg_buffer1|0))|0);
  }
 }
 $20 = HEAP32[$userfile>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = (_in_usa()|0);
 $23 = ($22|0)!=(0);
 $24 = $23 ? 56480 : 56496;
 HEAP32[$paper>>2] = $24;
 $25 = HEAP32[55456>>2]|0;
 $26 = ($25|0)!=(0);
 $27 = $26 ? 56504 : 56512;
 HEAP32[$driver>>2] = $27;
 HEAP32[$margin>>2] = 55448;
 $28 = HEAP32[$1>>2]|0;
 $29 = $28 & 512;
 $30 = ($29|0)!=(0);
 $$ = $30 ? 56520 : 55448;
 HEAP32[$margin>>2] = $$;
 $31 = HEAP32[$0>>2]|0;
 (_pputs($31,56536)|0);
 $32 = HEAP32[$1>>2]|0;
 $33 = $32 & 512;
 $34 = ($33|0)!=(0);
 $35 = HEAP32[$1>>2]|0;
 $36 = $35 & 1024;
 $37 = ($36|0)!=(0);
 do {
  if ($34) {
   if ($37) {
    $38 = HEAP32[$0>>2]|0;
    (_pputs($38,56552)|0);
   }
  } else {
   $39 = HEAP32[$0>>2]|0;
   if ($37) {
    (_pputs($39,56568)|0);
    break;
   } else {
    (_pputs($39,56592)|0);
    break;
   }
  }
 } while(0);
 $40 = HEAP32[$0>>2]|0;
 (_pputs($40,56600)|0);
 $41 = HEAP32[$lang>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = HEAP32[$lang>>2]|0;
  $44 = (_strncmp($43,56616,2)|0);
  $45 = ($44|0)!=(0);
  if (!($45)) {
   $46 = HEAP32[$0>>2]|0;
   (_pputs($46,56624)|0);
  }
 }
 $47 = HEAP32[$0>>2]|0;
 $48 = HEAP32[$paper>>2]|0;
 $49 = HEAP32[$margin>>2]|0;
 $50 = HEAP32[$driver>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $48;
 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $49;
 $vararg_ptr5 = (($vararg_buffer1) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $50;
 (_pprintf($47,56656,$vararg_buffer1)|0);
 $51 = HEAP32[$1>>2]|0;
 $52 = $51 & 32;
 $53 = ($52|0)!=(0);
 $54 = HEAP32[$0>>2]|0;
 if ($53) {
  (_pputs($54,56688)|0);
 } else {
  (_pputs($54,56712)|0);
 }
 $55 = HEAP32[$0>>2]|0;
 (_pputs($55,56736)|0);
 STACKTOP = sp;return;
}
function _landscape_modify_line($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $rem = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = sp + 12|0;
 $p = sp + 8|0;
 $rem = sp + 4|0;
 HEAP32[$0>>2] = $line;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strstr($1,56800)|0);
 $3 = ($2|0)!=(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_strstr($4,56424)|0);
 HEAP32[$p>>2] = $5;
 $6 = HEAP32[$p>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$p>>2]|0;
 $9 = (($8) + 13|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = ($11|0)==(91);
 $13 = HEAP32[$p>>2]|0;
 if (!($12)) {
  $24 = (($13) + 13|0);
  HEAP32[$p>>2] = $24;
  $25 = HEAP32[$p>>2]|0;
  $26 = (_gretl_strdup($25)|0);
  HEAP32[$rem>>2] = $26;
  $27 = HEAP32[$rem>>2]|0;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$p>>2]|0;
  $30 = HEAP32[$rem>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $30;
  (_sprintf($29,56832,$vararg_buffer1)|0);
  $31 = HEAP32[$rem>>2]|0;
  _free($31);
  STACKTOP = sp;return;
 }
 $14 = (_strchr($13,93)|0);
 HEAP32[$p>>2] = $14;
 $15 = HEAP32[$p>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = HEAP32[$p>>2]|0;
 $18 = (_gretl_strdup($17)|0);
 HEAP32[$rem>>2] = $18;
 $19 = HEAP32[$rem>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[$p>>2]|0;
 $22 = HEAP32[$rem>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $22;
 (_sprintf($21,56816,$vararg_buffer1)|0);
 $23 = HEAP32[$rem>>2]|0;
 _free($23);
 STACKTOP = sp;return;
}
function _gretl_transforms_cleanup() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_testvec(0)|0);
 STACKTOP = sp;return;
}
function _testvec($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $t = sp + 4|0;
 $y = sp;
 HEAP32[$1>>2] = $n;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[57928>>2]|0;
  _free($4);
  HEAP32[57928>>2] = 0;
  HEAP32[57936>>2] = 0;
  HEAP32[$0>>2] = 0;
  $26 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($26|0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[57936>>2]|0;
 $7 = ($5|0)>($6|0);
 do {
  if ($7) {
   $8 = HEAP32[57928>>2]|0;
   $9 = HEAP32[$1>>2]|0;
   $10 = $9<<3;
   $11 = (_realloc($8,$10)|0);
   HEAP32[$y>>2] = $11;
   $12 = HEAP32[$y>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $15 = HEAP32[$1>>2]|0;
    HEAP32[57936>>2] = $15;
    $16 = HEAP32[$y>>2]|0;
    HEAP32[57928>>2] = $16;
    break;
   }
   $14 = HEAP32[57928>>2]|0;
   _free($14);
   HEAP32[57928>>2] = 0;
   HEAP32[57936>>2] = 0;
   HEAP32[$0>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($26|0);
  }
 } while(0);
 HEAP32[$t>>2] = 0;
 while(1) {
  $17 = HEAP32[$t>>2]|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$t>>2]|0;
  $21 = HEAP32[57928>>2]|0;
  $22 = (($21) + ($20<<3)|0);
  HEAPF64[$22>>3] = 1.79769313486231570815E+308;
  $23 = HEAP32[$t>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$t>>2] = $24;
 }
 $25 = HEAP32[57928>>2]|0;
 HEAP32[$0>>2] = $25;
 $26 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($26|0);
}
function _get_transform($ci,$v,$aux,$x,$dset,$startlen,$origv) {
 $ci = $ci|0;
 $v = $v|0;
 $aux = $aux|0;
 $x = +$x;
 $dset = $dset|0;
 $startlen = $startlen|0;
 $origv = $origv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $label = 0, $lag = 0, $len = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $s = 0, $srcname = 0, $vararg_buffer17 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr8 = 0, $vname = 0, $vno = 0, $vx = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer17 = sp + 8|0;
 $0 = sp + 72|0;
 $1 = sp + 68|0;
 $2 = sp + 64|0;
 $3 = sp + 60|0;
 $4 = sp;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 48|0;
 $vname = sp + 208|0;
 $label = sp + 80|0;
 $vno = sp + 44|0;
 $err = sp + 40|0;
 $len = sp + 36|0;
 $lag = sp + 32|0;
 $srcname = sp + 28|0;
 $vx = sp + 24|0;
 $s = sp + 20|0;
 HEAP32[$1>>2] = $ci;
 HEAP32[$2>>2] = $v;
 HEAP32[$3>>2] = $aux;
 HEAPF64[$4>>3] = $x;
 HEAP32[$5>>2] = $dset;
 HEAP32[$6>>2] = $startlen;
 HEAP32[$7>>2] = $origv;
 dest=$vname+0|0; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$label+0|0; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$vno>>2] = -1;
 HEAP32[$err>>2] = 0;
 HEAP32[$lag>>2] = 0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_testvec($10)|0);
 HEAP32[$vx>>2] = $11;
 $12 = HEAP32[$vx>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  HEAP32[$0>>2] = -1;
  $231 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($231|0);
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)==(64);
 do {
  if ($15) {
   $16 = HEAP32[$3>>2]|0;
   HEAP32[$lag>>2] = $16;
   $17 = HEAP32[$2>>2]|0;
   $18 = HEAP32[$lag>>2]|0;
   $19 = HEAP32[$vx>>2]|0;
   $20 = HEAP32[$5>>2]|0;
   $21 = (_get_lag($17,$18,$19,$20)|0);
   HEAP32[$err>>2] = $21;
  } else {
   $22 = HEAP32[$1>>2]|0;
   $23 = ($22|0)==(70);
   if ($23) {
    $24 = HEAP32[$2>>2]|0;
    $25 = HEAP32[$vx>>2]|0;
    $26 = HEAP32[$5>>2]|0;
    $27 = (_get_log($24,$25,$26)|0);
    HEAP32[$err>>2] = $27;
    break;
   }
   $28 = HEAP32[$1>>2]|0;
   $29 = ($28|0)==(24);
   $30 = HEAP32[$1>>2]|0;
   $31 = ($30|0)==(65);
   $or$cond = $29 | $31;
   $32 = HEAP32[$1>>2]|0;
   $33 = ($32|0)==(111);
   $or$cond3 = $or$cond | $33;
   if ($or$cond3) {
    $34 = HEAP32[$2>>2]|0;
    $35 = HEAP32[$vx>>2]|0;
    $36 = HEAP32[$1>>2]|0;
    $37 = HEAP32[$5>>2]|0;
    $38 = (_get_diff($34,$35,$36,$37)|0);
    HEAP32[$err>>2] = $38;
    break;
   }
   $39 = HEAP32[$1>>2]|0;
   $40 = ($39|0)==(89);
   if ($40) {
    $41 = HEAP32[$2>>2]|0;
    $42 = HEAP32[$vx>>2]|0;
    $43 = HEAP32[$5>>2]|0;
    $44 = (_get_orthdev($41,$42,$43)|0);
    HEAP32[$err>>2] = $44;
    break;
   }
   $45 = HEAP32[$1>>2]|0;
   $46 = ($45|0)==(120);
   if ($46) {
    $47 = HEAP32[$2>>2]|0;
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$vx>>2]|0;
    $50 = HEAP32[$5>>2]|0;
    $51 = (_get_xpx($47,$48,$49,$50)|0);
    HEAP32[$err>>2] = $51;
    break;
   }
   $52 = HEAP32[$1>>2]|0;
   $53 = ($52|0)==(28);
   if ($53) {
    $54 = HEAP32[$2>>2]|0;
    $55 = +HEAPF64[$4>>3];
    $56 = HEAP32[$vx>>2]|0;
    $57 = HEAP32[$5>>2]|0;
    $58 = (_get_discdum($54,$55,$56,$57)|0);
    HEAP32[$err>>2] = $58;
    break;
   }
   $59 = HEAP32[$1>>2]|0;
   $60 = ($59|0)==(140);
   if ($60) {
    $61 = HEAP32[$2>>2]|0;
    $62 = HEAP32[$vx>>2]|0;
    $63 = HEAP32[$5>>2]|0;
    $64 = (_get_inverse($61,$62,$63)|0);
    HEAP32[$err>>2] = $64;
   }
  }
 } while(0);
 $65 = HEAP32[$err>>2]|0;
 $66 = ($65|0)!=(0);
 if ($66) {
  HEAP32[$0>>2] = -1;
  $231 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($231|0);
 }
 $67 = HEAP32[$1>>2]|0;
 $68 = ($67|0)==(64);
 if ($68) {
  $69 = HEAP32[$2>>2]|0;
  $70 = HEAP32[$3>>2]|0;
  $71 = HEAP32[$5>>2]|0;
  $72 = (_get_lag_ID($69,$70,$71)|0);
  HEAP32[$vno>>2] = $72;
  $73 = ($72|0)>(0);
  if ($73) {
   $74 = HEAP32[$1>>2]|0;
   $75 = HEAP32[$lag>>2]|0;
   $76 = HEAP32[$vno>>2]|0;
   $77 = HEAP32[$vx>>2]|0;
   $78 = HEAP32[$5>>2]|0;
   $79 = HEAP32[$7>>2]|0;
   $80 = (_check_add_transform($74,$75,$76,$77,$vname,$label,$78,$79)|0);
   HEAP32[$err>>2] = $80;
   $81 = HEAP32[$err>>2]|0;
   $82 = ($81|0)!=(1);
   if ($82) {
    HEAP32[$vno>>2] = -1;
   }
   $83 = HEAP32[$vno>>2]|0;
   HEAP32[$0>>2] = $83;
   $231 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($231|0);
  }
 }
 $84 = HEAP32[$1>>2]|0;
 $85 = ($84|0)==(120);
 if ($85) {
  $86 = HEAP32[$2>>2]|0;
  $87 = HEAP32[$3>>2]|0;
  $88 = ($86|0)!=($87|0);
  if ($88) {
   $89 = HEAP32[$2>>2]|0;
   $90 = HEAP32[$5>>2]|0;
   $91 = (($90) + 68|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + ($89<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = HEAP32[$3>>2]|0;
   $96 = HEAP32[$5>>2]|0;
   $97 = (($96) + 68|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($95<<2)|0);
   $100 = HEAP32[$99>>2]|0;
   HEAP32[$vararg_buffer17>>2] = $94;
   $vararg_ptr8 = (($vararg_buffer17) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $100;
   (_sprintf($label,57616,$vararg_buffer17)|0);
  } else {
   label = 27;
  }
 } else {
  label = 27;
 }
 do {
  if ((label|0) == 27) {
   $101 = HEAP32[$1>>2]|0;
   $102 = ($101|0)==(28);
   if (!($102)) {
    $138 = HEAP32[$2>>2]|0;
    $139 = HEAP32[$5>>2]|0;
    $140 = (($139) + 68|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + ($138<<2)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = HEAP32[$1>>2]|0;
    $145 = HEAP32[$3>>2]|0;
    (_make_transform_label($label,$143,$144,$145)|0);
    break;
   }
   $103 = HEAP32[$5>>2]|0;
   $104 = HEAP32[$2>>2]|0;
   $105 = (_is_string_valued($103,$104)|0);
   $106 = ($105|0)!=(0);
   if (!($106)) {
    $131 = HEAP32[$2>>2]|0;
    $132 = HEAP32[$5>>2]|0;
    $133 = (($132) + 68|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($134) + ($131<<2)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = +HEAPF64[$4>>3];
    HEAP32[$vararg_buffer17>>2] = $136;
    $vararg_ptr20 = (($vararg_buffer17) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$137;HEAP32[$vararg_ptr20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr20+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sprintf($label,57656,$vararg_buffer17)|0);
    break;
   }
   $107 = HEAP32[$5>>2]|0;
   $108 = HEAP32[$2>>2]|0;
   $109 = +HEAPF64[$4>>3];
   $110 = (_series_get_string_for_value($107,$108,$109)|0);
   HEAP32[$s>>2] = $110;
   $111 = HEAP32[$s>>2]|0;
   $112 = ($111|0)!=(0|0);
   if ($112) {
    $113 = HEAP32[$s>>2]|0;
    $114 = HEAP8[$113>>0]|0;
    $115 = $114 << 24 >> 24;
    $116 = ($115|0)!=(0);
    if ($116) {
     $117 = HEAP32[$2>>2]|0;
     $118 = HEAP32[$5>>2]|0;
     $119 = (($118) + 68|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (($120) + ($117<<2)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = HEAP32[$s>>2]|0;
     HEAP32[$vararg_buffer17>>2] = $122;
     $vararg_ptr12 = (($vararg_buffer17) + 4|0);
     HEAP32[$vararg_ptr12>>2] = $123;
     (_sprintf($label,57632,$vararg_buffer17)|0);
     break;
    }
   }
   $124 = HEAP32[$2>>2]|0;
   $125 = HEAP32[$5>>2]|0;
   $126 = (($125) + 68|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + ($124<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = +HEAPF64[$4>>3];
   HEAP32[$vararg_buffer17>>2] = $129;
   $vararg_ptr16 = (($vararg_buffer17) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$130;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sprintf($label,57656,$vararg_buffer17)|0);
  }
 } while(0);
 $146 = HEAP32[$2>>2]|0;
 $147 = (_get_mangled_name_by_id($146)|0);
 HEAP32[$srcname>>2] = $147;
 $148 = HEAP32[$srcname>>2]|0;
 $149 = ($148|0)==(0|0);
 if ($149) {
  $150 = HEAP32[$2>>2]|0;
  $151 = HEAP32[$5>>2]|0;
  $152 = (($151) + 68|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + ($150<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  HEAP32[$srcname>>2] = $155;
 }
 $156 = HEAP32[$6>>2]|0;
 HEAP32[$len>>2] = $156;
 while(1) {
  $157 = HEAP32[$len>>2]|0;
  $158 = ($157|0)<=(32);
  if (!($158)) {
   break;
  }
  $159 = HEAP32[$len>>2]|0;
  $160 = ($159|0)==(32);
  do {
   if ($160) {
    $161 = HEAP32[$5>>2]|0;
    (_make_varname_unique($vname,0,$161)|0);
   } else {
    $162 = HEAP32[$1>>2]|0;
    $163 = ($162|0)==(120);
    if ($163) {
     $164 = HEAP32[$2>>2]|0;
     $165 = HEAP32[$3>>2]|0;
     $166 = ($164|0)!=($165|0);
     if ($166) {
      $167 = HEAP32[$2>>2]|0;
      $168 = HEAP32[$3>>2]|0;
      $169 = HEAP32[$5>>2]|0;
      $170 = HEAP32[$len>>2]|0;
      _make_xp_varname($vname,$167,$168,$169,$170);
      break;
     }
    }
    $171 = HEAP32[$srcname>>2]|0;
    $172 = HEAP32[$1>>2]|0;
    $173 = HEAP32[$3>>2]|0;
    $174 = HEAP32[$len>>2]|0;
    (_make_transform_varname($vname,$171,$172,$173,$174)|0);
   }
  } while(0);
  $175 = HEAP32[$5>>2]|0;
  $176 = (_series_index($175,$vname)|0);
  HEAP32[$vno>>2] = $176;
  $177 = HEAP32[$1>>2]|0;
  $178 = HEAP32[$lag>>2]|0;
  $179 = HEAP32[$vno>>2]|0;
  $180 = HEAP32[$vx>>2]|0;
  $181 = HEAP32[$5>>2]|0;
  $182 = HEAP32[$7>>2]|0;
  $183 = (_check_add_transform($177,$178,$179,$180,$vname,$label,$181,$182)|0);
  HEAP32[$err>>2] = $183;
  $184 = HEAP32[$err>>2]|0;
  $185 = ($184|0)!=(1);
  $186 = HEAP32[$err>>2]|0;
  $187 = ($186|0)!=(0);
  $or$cond5 = $185 & $187;
  if ($or$cond5) {
   HEAP32[$vno>>2] = -1;
  }
  $188 = HEAP32[$err>>2]|0;
  $189 = ($188|0)!=(3);
  if ($189) {
   break;
  }
  $190 = HEAP32[$len>>2]|0;
  $191 = (($190) + 1)|0;
  HEAP32[$len>>2] = $191;
 }
 $192 = HEAP32[$err>>2]|0;
 $193 = ($192|0)!=(0);
 do {
  if (!($193)) {
   $194 = HEAP32[$vno>>2]|0;
   $195 = ($194|0)>(0);
   if ($195) {
    $196 = HEAP32[$1>>2]|0;
    $197 = ($196|0)==(28);
    if ($197) {
     $198 = HEAP32[$5>>2]|0;
     $199 = HEAP32[$vno>>2]|0;
     $200 = HEAP32[$2>>2]|0;
     $201 = HEAP32[$5>>2]|0;
     $202 = (($201) + 68|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = (($203) + ($200<<2)|0);
     $205 = HEAP32[$204>>2]|0;
     _series_set_parent($198,$199,$205);
     $206 = HEAP32[$5>>2]|0;
     $207 = HEAP32[$vno>>2]|0;
     _series_set_transform($206,$207,28);
     $208 = HEAP32[$5>>2]|0;
     $209 = HEAP32[$vno>>2]|0;
     _series_set_discrete($208,$209,1);
    } else {
     $210 = HEAP32[$1>>2]|0;
     $211 = ($210|0)==(64);
     $212 = HEAP32[$1>>2]|0;
     $213 = ($212|0)==(24);
     $or$cond7 = $211 | $213;
     if ($or$cond7) {
      $214 = HEAP32[$5>>2]|0;
      $215 = HEAP32[$vno>>2]|0;
      $216 = HEAP32[$2>>2]|0;
      $217 = HEAP32[$5>>2]|0;
      $218 = (($217) + 68|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = (($219) + ($216<<2)|0);
      $221 = HEAP32[$220>>2]|0;
      _series_set_parent($214,$215,$221);
      $222 = HEAP32[$5>>2]|0;
      $223 = HEAP32[$vno>>2]|0;
      $224 = HEAP32[$1>>2]|0;
      _series_set_transform($222,$223,$224);
     }
    }
    $225 = HEAP32[$1>>2]|0;
    $226 = ($225|0)==(64);
    $227 = HEAP32[$5>>2]|0;
    $228 = HEAP32[$vno>>2]|0;
    if ($226) {
     $229 = HEAP32[$3>>2]|0;
     _series_set_lag($227,$228,$229);
     break;
    } else {
     _series_set_lag($227,$228,0);
     break;
    }
   }
  }
 } while(0);
 $230 = HEAP32[$vno>>2]|0;
 HEAP32[$0>>2] = $230;
 $231 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($231|0);
}
function _diffgenr($v,$ci,$dset) {
 $v = $v|0;
 $ci = $ci|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$1>>2] = $v;
 HEAP32[$2>>2] = $ci;
 HEAP32[$3>>2] = $dset;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)!=(24);
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)!=(65);
 $or$cond = $5 & $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = ($8|0)!=(111);
 $or$cond3 = $or$cond & $9;
 if ($or$cond3) {
  HEAP32[$0>>2] = -1;
  $32 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = ($10|0)==(111);
 L5: do {
  if ($11) {
   $12 = HEAP32[$3>>2]|0;
   $13 = ($12|0)!=(0|0);
   do {
    if ($13) {
     $14 = HEAP32[$3>>2]|0;
     $15 = (($14) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(1);
     if (!($17)) {
      $18 = HEAP32[$3>>2]|0;
      $19 = (($18) + 12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(5);
      if (!($21)) {
       break;
      }
     }
     $22 = HEAP32[$3>>2]|0;
     $23 = (($22) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)>(1);
     if ($25) {
      break L5;
     }
    }
   } while(0);
   HEAP32[$0>>2] = -1;
   $32 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $26 = HEAP32[$2>>2]|0;
 $27 = HEAP32[$1>>2]|0;
 $28 = HEAP32[$3>>2]|0;
 $29 = HEAP32[$3>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = (_get_transform($26,$27,0,0.0,$28,29,$30)|0);
 HEAP32[$0>>2] = $31;
 $32 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _get_mangled_name_by_id($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $v;
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = HEAP32[57600>>2]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[57608>>2]|0;
  $7 = (($6) + ($5<<3)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = ($8|0)==($9|0);
  $11 = HEAP32[$i>>2]|0;
  if ($10) {
   label = 4;
   break;
  }
  $16 = (($11) + 1)|0;
  HEAP32[$i>>2] = $16;
 }
 if ((label|0) == 4) {
  $12 = HEAP32[57608>>2]|0;
  $13 = (($12) + ($11<<3)|0);
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$0>>2] = $15;
  $17 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  HEAP32[$0>>2] = 0;
  $17 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 return 0|0;
}
function _get_lag($v,$lag,$xlag,$dset) {
 $v = $v|0;
 $lag = $lag|0;
 $xlag = $xlag|0;
 $dset = $dset|0;
 var $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $miss = 0;
 var $or$cond = 0, $s = 0, $t = 0, $t1 = 0, $t2 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $x = sp + 20|0;
 $t1 = sp + 16|0;
 $t2 = sp + 12|0;
 $t = sp + 8|0;
 $s = sp + 4|0;
 $miss = sp;
 HEAP32[$0>>2] = $v;
 HEAP32[$1>>2] = $lag;
 HEAP32[$2>>2] = $xlag;
 HEAP32[$3>>2] = $dset;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$x>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10|0)>(0);
 $12 = HEAP32[$1>>2]|0;
 $13 = $11 ? $12 : 0;
 HEAP32[$t1>>2] = $13;
 $14 = HEAP32[$3>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) - 1)|0;
 HEAP32[$t2>>2] = $17;
 HEAP32[$t>>2] = 0;
 while(1) {
  $18 = HEAP32[$t>>2]|0;
  $19 = HEAP32[$3>>2]|0;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = HEAP32[$t>>2]|0;
  $24 = HEAP32[$2>>2]|0;
  $25 = (($24) + ($23<<3)|0);
  HEAPF64[$25>>3] = 1.79769313486231570815E+308;
  $26 = HEAP32[$t>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$t>>2] = $27;
 }
 $28 = HEAP32[$3>>2]|0;
 $29 = ($28|0)!=(0|0);
 do {
  if ($29) {
   $30 = HEAP32[$3>>2]|0;
   $31 = (($30) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(1);
   if ($33) {
    $34 = HEAP32[$3>>2]|0;
    $35 = (($34) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(5);
    if (!($37)) {
     $38 = HEAP32[$3>>2]|0;
     $39 = (($38) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(6);
     if (!($41)) {
      $42 = HEAP32[$3>>2]|0;
      $43 = (($42) + 8|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(7);
      if (!($45)) {
       break;
      }
     }
    }
    $46 = HEAP32[$3>>2]|0;
    $47 = (($46) + 16|0);
    $48 = +HEAPF64[$47>>3];
    $49 = $48 > 1.0E+4;
    if ($49) {
     $50 = HEAP32[$t1>>2]|0;
     HEAP32[$t>>2] = $50;
     while(1) {
      $51 = HEAP32[$t>>2]|0;
      $52 = HEAP32[$t2>>2]|0;
      $53 = ($51|0)<=($52|0);
      if (!($53)) {
       break;
      }
      $54 = HEAP32[$t>>2]|0;
      $55 = HEAP32[$1>>2]|0;
      $56 = (($54) - ($55))|0;
      HEAP32[$s>>2] = $56;
      HEAP32[$miss>>2] = 0;
      while(1) {
       $57 = HEAP32[$s>>2]|0;
       $58 = HEAP32[$x>>2]|0;
       $59 = (($58) + ($57<<3)|0);
       $60 = +HEAPF64[$59>>3];
       $61 = $60 == 1.79769313486231570815E+308;
       if ($61) {
        $62 = HEAP32[$s>>2]|0;
        $63 = ($62|0)>(0);
        if ($63) {
         $64 = HEAP32[$miss>>2]|0;
         $65 = ($64|0)<(6);
         $116 = $65;
        } else {
         $116 = 0;
        }
       } else {
        $116 = 0;
       }
       $66 = HEAP32[$s>>2]|0;
       if (!($116)) {
        break;
       }
       $67 = (($66) + -1)|0;
       HEAP32[$s>>2] = $67;
       $68 = HEAP32[$miss>>2]|0;
       $69 = (($68) + 1)|0;
       HEAP32[$miss>>2] = $69;
      }
      $70 = HEAP32[$x>>2]|0;
      $71 = (($70) + ($66<<3)|0);
      $72 = +HEAPF64[$71>>3];
      $73 = HEAP32[$t>>2]|0;
      $74 = HEAP32[$2>>2]|0;
      $75 = (($74) + ($73<<3)|0);
      HEAPF64[$75>>3] = $72;
      $76 = HEAP32[$t>>2]|0;
      $77 = (($76) + 1)|0;
      HEAP32[$t>>2] = $77;
     }
     STACKTOP = sp;return 0;
    }
   }
  }
 } while(0);
 $78 = HEAP32[$t1>>2]|0;
 HEAP32[$t>>2] = $78;
 while(1) {
  $79 = HEAP32[$t>>2]|0;
  $80 = HEAP32[$t2>>2]|0;
  $81 = ($79|0)<=($80|0);
  if (!($81)) {
   break;
  }
  $82 = HEAP32[$t>>2]|0;
  $83 = HEAP32[$1>>2]|0;
  $84 = (($82) - ($83))|0;
  HEAP32[$s>>2] = $84;
  $85 = HEAP32[$3>>2]|0;
  $86 = (($85) + 12|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)==(2);
  if ($88) {
   $89 = HEAP32[$t>>2]|0;
   $90 = HEAP32[$3>>2]|0;
   $91 = (($90) + 8|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($89|0) / ($92|0))&-1;
   $94 = HEAP32[$s>>2]|0;
   $95 = HEAP32[$3>>2]|0;
   $96 = (($95) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($94|0) / ($97|0))&-1;
   $99 = ($93|0)==($98|0);
   $100 = HEAP32[$s>>2]|0;
   $101 = ($100|0)>=(0);
   $or$cond = $99 & $101;
   if ($or$cond) {
    label = 24;
   }
  } else {
   $$old = HEAP32[$s>>2]|0;
   $$old1 = ($$old|0)>=(0);
   if ($$old1) {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $102 = HEAP32[$s>>2]|0;
   $103 = HEAP32[$3>>2]|0;
   $104 = (($103) + 4|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($102|0)<($105|0);
   if ($106) {
    $107 = HEAP32[$s>>2]|0;
    $108 = HEAP32[$x>>2]|0;
    $109 = (($108) + ($107<<3)|0);
    $110 = +HEAPF64[$109>>3];
    $111 = HEAP32[$t>>2]|0;
    $112 = HEAP32[$2>>2]|0;
    $113 = (($112) + ($111<<3)|0);
    HEAPF64[$113>>3] = $110;
   }
  }
  $114 = HEAP32[$t>>2]|0;
  $115 = (($114) + 1)|0;
  HEAP32[$t>>2] = $115;
 }
 STACKTOP = sp;return 0;
}
function _get_log($v,$logvec,$dset) {
 $v = $v|0;
 $logvec = $logvec|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $or$cond = 0;
 var $t = 0, $xx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $xx = sp;
 $t = sp + 12|0;
 $err = sp + 8|0;
 HEAP32[$0>>2] = $v;
 HEAP32[$1>>2] = $logvec;
 HEAP32[$2>>2] = $dset;
 HEAP32[$err>>2] = 0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$t>>2] = $5;
 while(1) {
  $6 = HEAP32[$t>>2]|0;
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<=($9|0);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = HEAP32[$err>>2]|0;
  $12 = ($11|0)!=(0);
  $13 = $12 ^ 1;
  if (!($13)) {
   label = 8;
   break;
  }
  $14 = HEAP32[$t>>2]|0;
  $15 = HEAP32[$0>>2]|0;
  $16 = HEAP32[$2>>2]|0;
  $17 = (($16) + 64|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($14<<3)|0);
  $22 = +HEAPF64[$21>>3];
  HEAPF64[$xx>>3] = $22;
  $23 = +HEAPF64[$xx>>3];
  $24 = $23 == 1.79769313486231570815E+308;
  $25 = +HEAPF64[$xx>>3];
  $26 = $25 <= 0.0;
  $or$cond = $24 | $26;
  if ($or$cond) {
   $27 = HEAP32[$t>>2]|0;
   $28 = HEAP32[$1>>2]|0;
   $29 = (($28) + ($27<<3)|0);
   HEAPF64[$29>>3] = 1.79769313486231570815E+308;
   _set_gretl_warning(2);
  } else {
   $30 = +HEAPF64[$xx>>3];
   $31 = (+Math_log((+$30)));
   $32 = HEAP32[$t>>2]|0;
   $33 = HEAP32[$1>>2]|0;
   $34 = (($33) + ($32<<3)|0);
   HEAPF64[$34>>3] = $31;
  }
  $35 = HEAP32[$t>>2]|0;
  $36 = (($35) + 1)|0;
  HEAP32[$t>>2] = $36;
 }
 if ((label|0) == 8) {
  $37 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 return 0|0;
}
function _get_diff($v,$diffvec,$ci,$dset) {
 $v = $v|0;
 $diffvec = $diffvec|0;
 $ci = $ci|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $t = 0, $t0 = 0, $t1 = 0, $x0 = 0, $x1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $x0 = sp + 8|0;
 $x1 = sp;
 $t = sp + 24|0;
 $t0 = sp + 20|0;
 $t1 = sp + 16|0;
 HEAP32[$0>>2] = $v;
 HEAP32[$1>>2] = $diffvec;
 HEAP32[$2>>2] = $ci;
 HEAP32[$3>>2] = $dset;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(111);
 if ($5) {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8;
 } else {
  $9 = 1;
 }
 HEAP32[$t0>>2] = $9;
 $10 = HEAP32[$3>>2]|0;
 $11 = (($10) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$t0>>2]|0;
 $14 = ($12|0)>($13|0);
 if ($14) {
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $19 = $17;
 } else {
  $18 = HEAP32[$t0>>2]|0;
  $19 = $18;
 }
 HEAP32[$t1>>2] = $19;
 $20 = HEAP32[$t1>>2]|0;
 HEAP32[$t>>2] = $20;
 while(1) {
  $21 = HEAP32[$t>>2]|0;
  $22 = HEAP32[$3>>2]|0;
  $23 = (($22) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)<=($24|0);
  if (!($25)) {
   break;
  }
  $26 = HEAP32[$3>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(2);
  if ($29) {
   $30 = HEAP32[$t>>2]|0;
   $31 = HEAP32[$3>>2]|0;
   $32 = (_panel_unit_first_obs($30,$31)|0);
   $33 = ($32|0)!=(0);
   if (!($33)) {
    label = 10;
   }
  } else {
   label = 10;
  }
  do {
   if ((label|0) == 10) {
    label = 0;
    $34 = HEAP32[$t>>2]|0;
    $35 = HEAP32[$0>>2]|0;
    $36 = HEAP32[$3>>2]|0;
    $37 = (($36) + 64|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) + ($35<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + ($34<<3)|0);
    $42 = +HEAPF64[$41>>3];
    HEAPF64[$x0>>3] = $42;
    $43 = HEAP32[$t>>2]|0;
    $44 = HEAP32[$t0>>2]|0;
    $45 = (($43) - ($44))|0;
    $46 = HEAP32[$0>>2]|0;
    $47 = HEAP32[$3>>2]|0;
    $48 = (($47) + 64|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($49) + ($46<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + ($45<<3)|0);
    $53 = +HEAPF64[$52>>3];
    HEAPF64[$x1>>3] = $53;
    $54 = HEAP32[$2>>2]|0;
    $55 = ($54|0)==(65);
    $56 = +HEAPF64[$x0>>3];
    $57 = $56 == 1.79769313486231570815E+308;
    if (!($55)) {
     if ($57) {
      break;
     }
     $72 = +HEAPF64[$x1>>3];
     $73 = $72 == 1.79769313486231570815E+308;
     if ($73) {
      break;
     }
     $74 = +HEAPF64[$x0>>3];
     $75 = +HEAPF64[$x1>>3];
     $76 = $74 - $75;
     $77 = HEAP32[$t>>2]|0;
     $78 = HEAP32[$1>>2]|0;
     $79 = (($78) + ($77<<3)|0);
     HEAPF64[$79>>3] = $76;
     break;
    }
    if (!($57)) {
     $58 = +HEAPF64[$x1>>3];
     $59 = $58 == 1.79769313486231570815E+308;
     if (!($59)) {
      $60 = +HEAPF64[$x0>>3];
      $61 = $60 > 0.0;
      if ($61) {
       $62 = +HEAPF64[$x1>>3];
       $63 = $62 > 0.0;
       if ($63) {
        $64 = +HEAPF64[$x0>>3];
        $65 = (+Math_log((+$64)));
        $66 = +HEAPF64[$x1>>3];
        $67 = (+Math_log((+$66)));
        $68 = $65 - $67;
        $69 = HEAP32[$t>>2]|0;
        $70 = HEAP32[$1>>2]|0;
        $71 = (($70) + ($69<<3)|0);
        HEAPF64[$71>>3] = $68;
       }
      }
     }
    }
   }
  } while(0);
  $80 = HEAP32[$t>>2]|0;
  $81 = (($80) + 1)|0;
  HEAP32[$t>>2] = $81;
 }
 STACKTOP = sp;return 0;
}
function _get_orthdev($v,$xvec,$dset) {
 $v = $v|0;
 $xvec = $xvec|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = $v;
 HEAP32[$1>>2] = $xvec;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 $11 = (_orthdev_series($8,$9,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function _get_xpx($vi,$vj,$xvec,$dset) {
 $vi = $vi|0;
 $vj = $vj|0;
 $xvec = $xvec|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, $xit = 0, $xjt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $xit = sp + 8|0;
 $xjt = sp;
 $t = sp + 16|0;
 HEAP32[$0>>2] = $vi;
 HEAP32[$1>>2] = $vj;
 HEAP32[$2>>2] = $xvec;
 HEAP32[$3>>2] = $dset;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$t>>2] = $6;
 while(1) {
  $7 = HEAP32[$t>>2]|0;
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<=($10|0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$t>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = (($14) + 64|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($13<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($12<<3)|0);
  $20 = +HEAPF64[$19>>3];
  HEAPF64[$xit>>3] = $20;
  $21 = HEAP32[$t>>2]|0;
  $22 = HEAP32[$1>>2]|0;
  $23 = HEAP32[$3>>2]|0;
  $24 = (($23) + 64|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($21<<3)|0);
  $29 = +HEAPF64[$28>>3];
  HEAPF64[$xjt>>3] = $29;
  $30 = +HEAPF64[$xit>>3];
  $31 = $30 == 1.79769313486231570815E+308;
  if ($31) {
   label = 5;
  } else {
   $32 = +HEAPF64[$xjt>>3];
   $33 = $32 == 1.79769313486231570815E+308;
   if ($33) {
    label = 5;
   } else {
    $37 = +HEAPF64[$xit>>3];
    $38 = +HEAPF64[$xjt>>3];
    $39 = $37 * $38;
    $40 = HEAP32[$t>>2]|0;
    $41 = HEAP32[$2>>2]|0;
    $42 = (($41) + ($40<<3)|0);
    HEAPF64[$42>>3] = $39;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $34 = HEAP32[$t>>2]|0;
   $35 = HEAP32[$2>>2]|0;
   $36 = (($35) + ($34<<3)|0);
   HEAPF64[$36>>3] = 1.79769313486231570815E+308;
  }
  $43 = HEAP32[$t>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$t>>2] = $44;
 }
 STACKTOP = sp;return 0;
}
function _get_discdum($v,$val,$xvec,$dset) {
 $v = $v|0;
 $val = +$val;
 $xvec = $xvec|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, $xt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 8|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $xt = sp;
 $t = sp + 16|0;
 HEAP32[$0>>2] = $v;
 HEAPF64[$1>>3] = $val;
 HEAP32[$2>>2] = $xvec;
 HEAP32[$3>>2] = $dset;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$t>>2] = $6;
 while(1) {
  $7 = HEAP32[$t>>2]|0;
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<=($10|0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$t>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = (($14) + 64|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($13<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($12<<3)|0);
  $20 = +HEAPF64[$19>>3];
  HEAPF64[$xt>>3] = $20;
  $21 = +HEAPF64[$xt>>3];
  $22 = $21 == 1.79769313486231570815E+308;
  if ($22) {
   $23 = HEAP32[$t>>2]|0;
   $24 = HEAP32[$2>>2]|0;
   $25 = (($24) + ($23<<3)|0);
   HEAPF64[$25>>3] = 1.79769313486231570815E+308;
  } else {
   $26 = +HEAPF64[$xt>>3];
   $27 = +HEAPF64[$1>>3];
   $28 = $26 == $27;
   $29 = $28 ? 1.0 : 0.0;
   $30 = HEAP32[$t>>2]|0;
   $31 = HEAP32[$2>>2]|0;
   $32 = (($31) + ($30<<3)|0);
   HEAPF64[$32>>3] = $29;
  }
  $33 = HEAP32[$t>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$t>>2] = $34;
 }
 STACKTOP = sp;return 0;
}
function _get_inverse($v,$xvec,$dset) {
 $v = $v|0;
 $xvec = $xvec|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $t = 0, $xt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $xt = sp;
 $t = sp + 8|0;
 HEAP32[$0>>2] = $v;
 HEAP32[$1>>2] = $xvec;
 HEAP32[$2>>2] = $dset;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$t>>2] = $5;
 while(1) {
  $6 = HEAP32[$t>>2]|0;
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<=($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$t>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = (($13) + 64|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($11<<3)|0);
  $19 = +HEAPF64[$18>>3];
  HEAPF64[$xt>>3] = $19;
  $20 = +HEAPF64[$xt>>3];
  $21 = $20 == 1.79769313486231570815E+308;
  $22 = +HEAPF64[$xt>>3];
  $23 = $22 == 0.0;
  $or$cond = $21 | $23;
  if ($or$cond) {
   $24 = HEAP32[$t>>2]|0;
   $25 = HEAP32[$1>>2]|0;
   $26 = (($25) + ($24<<3)|0);
   HEAPF64[$26>>3] = 1.79769313486231570815E+308;
  } else {
   $27 = +HEAPF64[$xt>>3];
   $28 = 1.0 / $27;
   $29 = HEAP32[$t>>2]|0;
   $30 = HEAP32[$1>>2]|0;
   $31 = (($30) + ($29<<3)|0);
   HEAPF64[$31>>3] = $28;
  }
  $32 = HEAP32[$t>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$t>>2] = $33;
 }
 STACKTOP = sp;return 0;
}
function _get_lag_ID($srcv,$lag,$dset) {
 $srcv = $srcv|0;
 $lag = $lag|0;
 $dset = $dset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $parent = 0, $vname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $parent = sp + 8|0;
 $vname = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $srcv;
 HEAP32[$2>>2] = $lag;
 HEAP32[$3>>2] = $dset;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$vname>>2] = $9;
 HEAP32[$i>>2] = 1;
 while(1) {
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$3>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)<($12|0);
  if (!($13)) {
   label = 8;
   break;
  }
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$3>>2]|0;
  $16 = HEAP32[$i>>2]|0;
  $17 = (_series_get_lag($15,$16)|0);
  $18 = ($14|0)==($17|0);
  if ($18) {
   $19 = HEAP32[$3>>2]|0;
   $20 = HEAP32[$i>>2]|0;
   $21 = (_series_get_parent_name($19,$20)|0);
   HEAP32[$parent>>2] = $21;
   $22 = HEAP32[$parent>>2]|0;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    $24 = HEAP32[$vname>>2]|0;
    $25 = HEAP32[$parent>>2]|0;
    $26 = (_strcmp($24,$25)|0);
    $27 = ($26|0)!=(0);
    if (!($27)) {
     label = 6;
     break;
    }
   }
  }
  $29 = HEAP32[$i>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$i>>2] = $30;
 }
 if ((label|0) == 6) {
  $28 = HEAP32[$i>>2]|0;
  HEAP32[$0>>2] = $28;
  $31 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($31|0);
 }
 else if ((label|0) == 8) {
  HEAP32[$0>>2] = -1;
  $31 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _check_add_transform($ci,$lag,$vnum,$x,$vname,$label,$dset,$origv) {
 $ci = $ci|0;
 $lag = $lag|0;
 $vnum = $vnum|0;
 $x = $x|0;
 $vname = $vname|0;
 $label = $label|0;
 $dset = $dset|0;
 $origv = $origv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $chk = 0, $ret = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $t = sp + 8|0;
 $ret = sp + 4|0;
 $chk = sp;
 HEAP32[$0>>2] = $ci;
 HEAP32[$1>>2] = $lag;
 HEAP32[$2>>2] = $vnum;
 HEAP32[$3>>2] = $x;
 HEAP32[$4>>2] = $vname;
 HEAP32[$5>>2] = $label;
 HEAP32[$6>>2] = $dset;
 HEAP32[$7>>2] = $origv;
 HEAP32[$ret>>2] = 0;
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$6>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)<($10|0);
 if (!($11)) {
  $56 = HEAP32[$6>>2]|0;
  $57 = (_dataset_add_series($56,1)|0);
  $58 = ($57|0)!=(0);
  if ($58) {
   HEAP32[$ret>>2] = 2;
   $88 = HEAP32[$ret>>2]|0;
   STACKTOP = sp;return ($88|0);
  }
  $59 = HEAP32[$2>>2]|0;
  $60 = HEAP32[$6>>2]|0;
  $61 = (($60) + 68|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + ($59<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = HEAP32[$4>>2]|0;
  (_strcpy(($64|0),($65|0))|0);
  $66 = HEAP32[$6>>2]|0;
  $67 = HEAP32[$2>>2]|0;
  $68 = HEAP32[$5>>2]|0;
  _series_set_label($66,$67,$68);
  HEAP32[$t>>2] = 0;
  while(1) {
   $69 = HEAP32[$t>>2]|0;
   $70 = HEAP32[$6>>2]|0;
   $71 = (($70) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($69|0)<($72|0);
   if (!($73)) {
    break;
   }
   $74 = HEAP32[$t>>2]|0;
   $75 = HEAP32[$3>>2]|0;
   $76 = (($75) + ($74<<3)|0);
   $77 = +HEAPF64[$76>>3];
   $78 = HEAP32[$t>>2]|0;
   $79 = HEAP32[$2>>2]|0;
   $80 = HEAP32[$6>>2]|0;
   $81 = (($80) + 64|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + ($79<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($78<<3)|0);
   HEAPF64[$85>>3] = $77;
   $86 = HEAP32[$t>>2]|0;
   $87 = (($86) + 1)|0;
   HEAP32[$t>>2] = $87;
  }
  $88 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($88|0);
 }
 $12 = HEAP32[$3>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = HEAP32[$6>>2]|0;
 $15 = (($14) + 64|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($13<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$6>>2]|0;
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_check_vals($12,$18,$21)|0);
 HEAP32[$chk>>2] = $22;
 $23 = HEAP32[$chk>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  HEAP32[$ret>>2] = 1;
  $88 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($88|0);
 }
 $25 = HEAP32[$chk>>2]|0;
 $26 = ($25|0)==(1);
 if ($26) {
  HEAP32[$ret>>2] = 1;
  $88 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($88|0);
 }
 $27 = HEAP32[$chk>>2]|0;
 $28 = ($27|0)==(2);
 if (!($28)) {
  $48 = HEAP32[$0>>2]|0;
  $49 = HEAP32[$1>>2]|0;
  $50 = HEAP32[$2>>2]|0;
  $51 = HEAP32[$3>>2]|0;
  $52 = HEAP32[$5>>2]|0;
  $53 = HEAP32[$6>>2]|0;
  $54 = HEAP32[$7>>2]|0;
  $55 = (_transform_handle_duplicate($48,$49,$50,$51,$52,$53,$54)|0);
  HEAP32[$ret>>2] = $55;
  $88 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($88|0);
 }
 HEAP32[$t>>2] = 0;
 while(1) {
  $29 = HEAP32[$t>>2]|0;
  $30 = HEAP32[$6>>2]|0;
  $31 = (($30) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = HEAP32[$t>>2]|0;
  $35 = HEAP32[$3>>2]|0;
  $36 = (($35) + ($34<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = HEAP32[$t>>2]|0;
  $39 = HEAP32[$2>>2]|0;
  $40 = HEAP32[$6>>2]|0;
  $41 = (($40) + 64|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($39<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($38<<3)|0);
  HEAPF64[$45>>3] = $37;
  $46 = HEAP32[$t>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$t>>2] = $47;
 }
 HEAP32[$ret>>2] = 1;
 $88 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($88|0);
}
function _make_transform_label($label,$parent,$ci,$lag) {
 $label = $label|0;
 $parent = $parent|0;
 $ci = $ci|0;
 $lag = $lag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $vararg_buffer21 = 0, $vararg_ptr16 = 0;
 var $vararg_ptr20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer21 = sp;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $err = sp + 8|0;
 HEAP32[$0>>2] = $label;
 HEAP32[$1>>2] = $parent;
 HEAP32[$2>>2] = $ci;
 HEAP32[$3>>2] = $lag;
 HEAP32[$err>>2] = 0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(24);
 do {
  if ($5) {
   $6 = HEAP32[$0>>2]|0;
   $7 = HEAP32[$1>>2]|0;
   HEAP32[$vararg_buffer21>>2] = $7;
   (_sprintf($6,57768,$vararg_buffer21)|0);
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = ($8|0)==(65);
   if ($9) {
    $10 = HEAP32[$0>>2]|0;
    $11 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer21>>2] = $11;
    (_sprintf($10,57800,$vararg_buffer21)|0);
    break;
   }
   $12 = HEAP32[$2>>2]|0;
   $13 = ($12|0)==(111);
   if ($13) {
    $14 = HEAP32[$0>>2]|0;
    $15 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer21>>2] = $15;
    (_sprintf($14,57824,$vararg_buffer21)|0);
    break;
   }
   $16 = HEAP32[$2>>2]|0;
   $17 = ($16|0)==(70);
   if ($17) {
    $18 = HEAP32[$0>>2]|0;
    $19 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer21>>2] = $19;
    (_sprintf($18,57856,$vararg_buffer21)|0);
    break;
   }
   $20 = HEAP32[$2>>2]|0;
   $21 = ($20|0)==(120);
   if ($21) {
    $22 = HEAP32[$0>>2]|0;
    $23 = HEAP32[$1>>2]|0;
    HEAP32[$vararg_buffer21>>2] = $23;
    (_sprintf($22,57872,$vararg_buffer21)|0);
    break;
   }
   $24 = HEAP32[$2>>2]|0;
   $25 = ($24|0)==(64);
   if ($25) {
    $26 = HEAP32[$3>>2]|0;
    $27 = ($26|0)>=(0);
    $28 = HEAP32[$0>>2]|0;
    $29 = HEAP32[$1>>2]|0;
    $30 = HEAP32[$3>>2]|0;
    if ($27) {
     HEAP32[$vararg_buffer21>>2] = $29;
     $vararg_ptr16 = (($vararg_buffer21) + 4|0);
     HEAP32[$vararg_ptr16>>2] = $30;
     (_sprintf($28,57888,$vararg_buffer21)|0);
     break;
    } else {
     $31 = (0 - ($30))|0;
     HEAP32[$vararg_buffer21>>2] = $29;
     $vararg_ptr20 = (($vararg_buffer21) + 4|0);
     HEAP32[$vararg_ptr20>>2] = $31;
     (_sprintf($28,57904,$vararg_buffer21)|0);
     break;
    }
   } else {
    $32 = HEAP32[$2>>2]|0;
    $33 = ($32|0)==(140);
    if ($33) {
     $34 = HEAP32[$0>>2]|0;
     $35 = HEAP32[$1>>2]|0;
     HEAP32[$vararg_buffer21>>2] = $35;
     (_sprintf($34,57920,$vararg_buffer21)|0);
     break;
    } else {
     HEAP32[$err>>2] = 1;
     break;
    }
   }
  }
 } while(0);
 $36 = HEAP32[$err>>2]|0;
 STACKTOP = sp;return ($36|0);
}
function _make_xp_varname($vname,$v1,$v2,$dset,$len) {
 $vname = $vname|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 $dset = $dset|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cut = 0, $cut1 = 0, $cut2 = 0, $n1 = 0;
 var $n2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $n1 = sp + 16|0;
 $n2 = sp + 12|0;
 $cut = sp + 8|0;
 $cut1 = sp + 4|0;
 $cut2 = sp;
 HEAP32[$0>>2] = $vname;
 HEAP32[$1>>2] = $v1;
 HEAP32[$2>>2] = $v2;
 HEAP32[$3>>2] = $dset;
 HEAP32[$4>>2] = $len;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = (($6) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($5<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_strlen(($10|0))|0);
 HEAP32[$n1>>2] = $11;
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP32[$3>>2]|0;
 $14 = (($13) + 68|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($12<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_strlen(($17|0))|0);
 HEAP32[$n2>>2] = $18;
 $19 = HEAP32[$n1>>2]|0;
 $20 = HEAP32[$n2>>2]|0;
 $21 = (($19) + ($20))|0;
 $22 = (($21) + 1)|0;
 $23 = HEAP32[$4>>2]|0;
 $24 = (($22) - ($23))|0;
 HEAP32[$cut>>2] = $24;
 HEAP32[$cut1>>2] = 0;
 HEAP32[$cut2>>2] = 0;
 $25 = HEAP32[$cut>>2]|0;
 $26 = ($25|0)>(0);
 if ($26) {
  $27 = HEAP32[$cut>>2]|0;
  $28 = (($27|0) / 2)&-1;
  HEAP32[$cut2>>2] = $28;
  HEAP32[$cut1>>2] = $28;
  $29 = HEAP32[$cut>>2]|0;
  $30 = (($29|0) % 2)&-1;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = HEAP32[$cut2>>2]|0;
   $33 = (($32) + 1)|0;
   HEAP32[$cut2>>2] = $33;
  }
 }
 $34 = HEAP32[$0>>2]|0;
 HEAP8[$34>>0] = 0;
 $35 = HEAP32[$0>>2]|0;
 $36 = HEAP32[$1>>2]|0;
 $37 = HEAP32[$3>>2]|0;
 $38 = (($37) + 68|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($36<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$n1>>2]|0;
 $43 = HEAP32[$cut1>>2]|0;
 $44 = (($42) - ($43))|0;
 (_strncat($35,$41,$44)|0);
 $45 = HEAP32[$0>>2]|0;
 (_strcat(($45|0),(57760|0))|0);
 $46 = HEAP32[$0>>2]|0;
 $47 = HEAP32[$2>>2]|0;
 $48 = HEAP32[$3>>2]|0;
 $49 = (($48) + 68|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + ($47<<2)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$n2>>2]|0;
 $54 = HEAP32[$cut2>>2]|0;
 $55 = (($53) - ($54))|0;
 (_strncat($46,$52,$55)|0);
 STACKTOP = sp;return;
}
function _make_transform_varname($vname,$orig,$ci,$aux,$len) {
 $vname = $vname|0;
 $orig = $orig|0;
 $ci = $ci|0;
 $aux = $aux|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $ext = 0, $ext1 = 0;
 var $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer4 = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $ext = sp + 30|0;
 $ext1 = sp + 24|0;
 HEAP32[$0>>2] = $vname;
 HEAP32[$1>>2] = $orig;
 HEAP32[$2>>2] = $ci;
 HEAP32[$3>>2] = $aux;
 HEAP32[$4>>2] = $len;
 $5 = HEAP32[$0>>2]|0;
 HEAP8[$5>>0] = 0;
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)==(24);
 if ($7) {
  $8 = HEAP32[$0>>2]|0;
  (_strcpy(($8|0),(57680|0))|0);
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$1>>2]|0;
  $11 = HEAP32[$4>>2]|0;
  $12 = (($11) - 2)|0;
  (_strncat($9,$10,$12)|0);
  STACKTOP = sp;return 0;
 }
 $13 = HEAP32[$2>>2]|0;
 $14 = ($13|0)==(65);
 if ($14) {
  $15 = HEAP32[$0>>2]|0;
  (_strcpy(($15|0),(57688|0))|0);
  $16 = HEAP32[$0>>2]|0;
  $17 = HEAP32[$1>>2]|0;
  $18 = HEAP32[$4>>2]|0;
  $19 = (($18) - 3)|0;
  (_strncat($16,$17,$19)|0);
  STACKTOP = sp;return 0;
 }
 $20 = HEAP32[$2>>2]|0;
 $21 = ($20|0)==(111);
 if ($21) {
  $22 = HEAP32[$0>>2]|0;
  (_strcpy(($22|0),(57696|0))|0);
  $23 = HEAP32[$0>>2]|0;
  $24 = HEAP32[$1>>2]|0;
  $25 = HEAP32[$4>>2]|0;
  $26 = (($25) - 3)|0;
  (_strncat($23,$24,$26)|0);
  STACKTOP = sp;return 0;
 }
 $27 = HEAP32[$2>>2]|0;
 $28 = ($27|0)==(89);
 if ($28) {
  $29 = HEAP32[$0>>2]|0;
  (_strcpy(($29|0),(57704|0))|0);
  $30 = HEAP32[$0>>2]|0;
  $31 = HEAP32[$1>>2]|0;
  $32 = HEAP32[$4>>2]|0;
  $33 = (($32) - 2)|0;
  (_strncat($30,$31,$33)|0);
  STACKTOP = sp;return 0;
 }
 $34 = HEAP32[$2>>2]|0;
 $35 = ($34|0)==(70);
 if ($35) {
  $36 = HEAP32[$0>>2]|0;
  (_strcpy(($36|0),(57712|0))|0);
  $37 = HEAP32[$0>>2]|0;
  $38 = HEAP32[$1>>2]|0;
  $39 = HEAP32[$4>>2]|0;
  $40 = (($39) - 2)|0;
  (_strncat($37,$38,$40)|0);
  STACKTOP = sp;return 0;
 }
 $41 = HEAP32[$2>>2]|0;
 $42 = ($41|0)==(120);
 if ($42) {
  $43 = HEAP32[$0>>2]|0;
  (_strcpy(($43|0),(57720|0))|0);
  $44 = HEAP32[$0>>2]|0;
  $45 = HEAP32[$1>>2]|0;
  $46 = HEAP32[$4>>2]|0;
  $47 = (($46) - 3)|0;
  (_strncat($44,$45,$47)|0);
  STACKTOP = sp;return 0;
 }
 $48 = HEAP32[$2>>2]|0;
 $49 = ($48|0)==(64);
 if ($49) {
  $50 = HEAP32[$3>>2]|0;
  $51 = ($50|0)>=(0);
  $52 = HEAP32[$3>>2]|0;
  if ($51) {
   HEAP32[$vararg_buffer4>>2] = $52;
   (_sprintf($ext,57728,$vararg_buffer4)|0);
  } else {
   $53 = (0 - ($52))|0;
   HEAP32[$vararg_buffer4>>2] = $53;
   (_sprintf($ext,57736,$vararg_buffer4)|0);
  }
  $54 = HEAP32[$0>>2]|0;
  $55 = HEAP32[$1>>2]|0;
  $56 = HEAP32[$4>>2]|0;
  $57 = (_strlen(($ext|0))|0);
  $58 = (($56) - ($57))|0;
  (_strncat($54,$55,$58)|0);
  $59 = HEAP32[$0>>2]|0;
  (_strcat(($59|0),($ext|0))|0);
  STACKTOP = sp;return 0;
 }
 $60 = HEAP32[$2>>2]|0;
 $61 = ($60|0)==(28);
 if ($61) {
  $62 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $62;
  (_sprintf($ext1,57728,$vararg_buffer4)|0);
  $63 = HEAP32[$0>>2]|0;
  (_strcpy(($63|0),(57744|0))|0);
  $64 = HEAP32[$0>>2]|0;
  $65 = HEAP32[$1>>2]|0;
  $66 = HEAP32[$4>>2]|0;
  $67 = (_strlen(($ext1|0))|0);
  $68 = (($66) - ($67))|0;
  $69 = (($68) - 1)|0;
  (_strncat($64,$65,$69)|0);
  $70 = HEAP32[$0>>2]|0;
  (_strcat(($70|0),($ext1|0))|0);
  STACKTOP = sp;return 0;
 }
 $71 = HEAP32[$2>>2]|0;
 $72 = ($71|0)==(140);
 if (!($72)) {
  STACKTOP = sp;return 0;
 }
 $73 = HEAP32[$0>>2]|0;
 (_strcpy(($73|0),(57752|0))|0);
 $74 = HEAP32[$0>>2]|0;
 $75 = HEAP32[$1>>2]|0;
 $76 = HEAP32[$4>>2]|0;
 $77 = (($76) - 2)|0;
 (_strncat($74,$75,$77)|0);
 STACKTOP = sp;return 0;
}
function _check_vals($x,$y,$n) {
 $x = $x|0;
 $y = $y|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $ret = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $ret = sp + 4|0;
 $t = sp;
 HEAP32[$0>>2] = $x;
 HEAP32[$1>>2] = $y;
 HEAP32[$2>>2] = $n;
 HEAP32[$ret>>2] = 0;
 HEAP32[$t>>2] = 0;
 while(1) {
  $3 = HEAP32[$t>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 17;
   break;
  }
  $6 = HEAP32[$t>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + ($6<<3)|0);
  $9 = +HEAPF64[$8>>3];
  $10 = HEAP32[$t>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + ($10<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $9 - $13;
  $15 = (+Math_abs((+$14)));
  $16 = $15 > 2.22044604925031308085E-16;
  do {
   if ($16) {
    $17 = HEAP32[$t>>2]|0;
    $18 = HEAP32[$0>>2]|0;
    $19 = (($18) + ($17<<3)|0);
    $20 = +HEAPF64[$19>>3];
    $21 = $20 == 1.79769313486231570815E+308;
    if ($21) {
     $22 = HEAP32[$t>>2]|0;
     $23 = HEAP32[$1>>2]|0;
     $24 = (($23) + ($22<<3)|0);
     $25 = +HEAPF64[$24>>3];
     $26 = $25 == 1.79769313486231570815E+308;
     if (!($26)) {
      $27 = HEAP32[$ret>>2]|0;
      $28 = ($27|0)==(0);
      $29 = HEAP32[$ret>>2]|0;
      $30 = ($29|0)==(1);
      $or$cond = $28 | $30;
      if ($or$cond) {
       HEAP32[$ret>>2] = 1;
       break;
      } else {
       HEAP32[$ret>>2] = 3;
       break;
      }
     }
    }
    $31 = HEAP32[$t>>2]|0;
    $32 = HEAP32[$0>>2]|0;
    $33 = (($32) + ($31<<3)|0);
    $34 = +HEAPF64[$33>>3];
    $35 = $34 == 1.79769313486231570815E+308;
    if (!($35)) {
     $36 = HEAP32[$t>>2]|0;
     $37 = HEAP32[$1>>2]|0;
     $38 = (($37) + ($36<<3)|0);
     $39 = +HEAPF64[$38>>3];
     $40 = $39 == 1.79769313486231570815E+308;
     if ($40) {
      $41 = HEAP32[$ret>>2]|0;
      $42 = ($41|0)==(0);
      $43 = HEAP32[$ret>>2]|0;
      $44 = ($43|0)==(2);
      $or$cond3 = $42 | $44;
      if ($or$cond3) {
       HEAP32[$ret>>2] = 2;
       break;
      } else {
       HEAP32[$ret>>2] = 3;
       break;
      }
     }
    }
    HEAP32[$ret>>2] = 3;
   }
  } while(0);
  $45 = HEAP32[$ret>>2]|0;
  $46 = ($45|0)==(3);
  if ($46) {
   label = 17;
   break;
  }
  $47 = HEAP32[$t>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$t>>2] = $48;
 }
 if ((label|0) == 17) {
  $49 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($49|0);
 }
 return 0|0;
}
function _transform_handle_duplicate($ci,$lag,$v,$x,$label,$dset,$origv) {
 $ci = $ci|0;
 $lag = $lag|0;
 $v = $v|0;
 $x = $x|0;
 $label = $label|0;
 $dset = $dset|0;
 $origv = $origv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ok = 0, $ret = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $ret = sp + 8|0;
 $t = sp + 4|0;
 $ok = sp;
 HEAP32[$0>>2] = $ci;
 HEAP32[$1>>2] = $lag;
 HEAP32[$2>>2] = $v;
 HEAP32[$3>>2] = $x;
 HEAP32[$4>>2] = $label;
 HEAP32[$5>>2] = $dset;
 HEAP32[$6>>2] = $origv;
 HEAP32[$ret>>2] = 3;
 HEAP32[$ok>>2] = 0;
 $7 = HEAP32[$4>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = (_series_get_label($8,$9)|0);
 $11 = (_strcmp($7,$10)|0);
 $12 = ($11|0)!=(0);
 if (!($12)) {
  HEAP32[$ok>>2] = 1;
 }
 $13 = HEAP32[$ok>>2]|0;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $15 = HEAP32[$2>>2]|0;
  $16 = HEAP32[$6>>2]|0;
  $17 = ($15|0)<($16|0);
  if ($17) {
   HEAP32[$ok>>2] = 1;
  }
 }
 $18 = HEAP32[$ok>>2]|0;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $54 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($54|0);
 }
 HEAP32[$t>>2] = 0;
 while(1) {
  $20 = HEAP32[$t>>2]|0;
  $21 = HEAP32[$5>>2]|0;
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = HEAP32[$t>>2]|0;
  $26 = HEAP32[$3>>2]|0;
  $27 = (($26) + ($25<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = HEAP32[$t>>2]|0;
  $30 = HEAP32[$2>>2]|0;
  $31 = HEAP32[$5>>2]|0;
  $32 = (($31) + 64|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($29<<3)|0);
  HEAPF64[$36>>3] = $28;
  $37 = HEAP32[$t>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$t>>2] = $38;
 }
 $39 = HEAP32[$4>>2]|0;
 $40 = HEAP8[$39>>0]|0;
 $41 = $40 << 24 >> 24;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = HEAP32[$5>>2]|0;
  $44 = HEAP32[$2>>2]|0;
  $45 = HEAP32[$4>>2]|0;
  _series_set_label($43,$44,$45);
 }
 $46 = HEAP32[$5>>2]|0;
 $47 = HEAP32[$2>>2]|0;
 $48 = HEAP32[$0>>2]|0;
 _series_set_transform($46,$47,$48);
 $49 = HEAP32[$5>>2]|0;
 $50 = HEAP32[$2>>2]|0;
 $51 = HEAP32[$1>>2]|0;
 _series_set_lag($49,$50,$51);
 $52 = HEAP32[$5>>2]|0;
 $53 = HEAP32[$2>>2]|0;
 _series_zero_flags($52,$53);
 HEAP32[$ret>>2] = 1;
 $54 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($54|0);
}
function _user_var_destroy($u) {
 $u = $u|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $free_val = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $free_val = sp;
 HEAP32[$0>>2] = $u;
 HEAP32[$free_val>>2] = 1;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)!=(0);
 if ($5) {
  HEAP32[$free_val>>2] = 0;
 } else {
  $6 = HEAP32[$0>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(11);
  if ($8) {
   $9 = HEAP32[$0>>2]|0;
   $10 = (($9) + 44|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_data_is_bundled($11,58032)|0);
   $13 = ($12|0)!=(0);
   if ($13) {
    HEAP32[$free_val>>2] = 0;
   }
  }
 }
 $14 = HEAP32[$free_val>>2]|0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $17 = HEAP32[$0>>2]|0;
  _free($17);
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 _uvar_free_value($16);
 $17 = HEAP32[$0>>2]|0;
 _free($17);
 STACKTOP = sp;return;
}
function _set_nvars($n,$caller) {
 $n = $n|0;
 $caller = $caller|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $n;
 HEAP32[$1>>2] = $caller;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[57944>>2] = $2;
 STACKTOP = sp;return;
}
function _get_user_var_of_type_by_name($name,$type) {
 $name = $name|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $i = 0, $imin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $i = sp + 8|0;
 $imin = sp + 4|0;
 $d = sp;
 HEAP32[$1>>2] = $name;
 HEAP32[$2>>2] = $type;
 HEAP32[$imin>>2] = 0;
 $3 = (_gretl_function_depth()|0);
 HEAP32[$d>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = HEAP32[$2>>2]|0;
   $11 = ($10|0)==(5);
   if ($11) {
    $12 = HEAP32[57960>>2]|0;
    HEAP32[$imin>>2] = $12;
   }
   $13 = HEAP32[$imin>>2]|0;
   HEAP32[$i>>2] = $13;
   while(1) {
    $14 = HEAP32[$i>>2]|0;
    $15 = HEAP32[57944>>2]|0;
    $16 = ($14|0)<($15|0);
    if (!($16)) {
     label = 13;
     break;
    }
    $17 = HEAP32[$i>>2]|0;
    $18 = HEAP32[57952>>2]|0;
    $19 = (($18) + ($17<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$d>>2]|0;
    $24 = ($22|0)==($23|0);
    if ($24) {
     $25 = HEAP32[$i>>2]|0;
     $26 = HEAP32[57952>>2]|0;
     $27 = (($26) + ($25<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = HEAP32[$28>>2]|0;
     $30 = HEAP32[$2>>2]|0;
     $31 = ($29|0)==($30|0);
     if ($31) {
      $32 = HEAP32[$i>>2]|0;
      $33 = HEAP32[57952>>2]|0;
      $34 = (($33) + ($32<<2)|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (($35) + 12|0);
      $37 = HEAP32[$1>>2]|0;
      $38 = (_strcmp($36,$37)|0);
      $39 = ($38|0)!=(0);
      if (!($39)) {
       label = 11;
       break;
      }
     }
    }
    $44 = HEAP32[$i>>2]|0;
    $45 = (($44) + 1)|0;
    HEAP32[$i>>2] = $45;
   }
   if ((label|0) == 11) {
    $40 = HEAP32[$i>>2]|0;
    $41 = HEAP32[57952>>2]|0;
    $42 = (($41) + ($40<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP32[$0>>2] = $43;
    $46 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($46|0);
   }
   else if ((label|0) == 13) {
    HEAP32[$0>>2] = 0;
    $46 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($46|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $46 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($46|0);
}
function _user_var_get_value($uvar) {
 $uvar = $uvar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $uvar;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $6 = 0;
  STACKTOP = sp;return ($6|0);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 STACKTOP = sp;return ($6|0);
}
function _data_is_bundled($ptr,$msg) {
 $ptr = $ptr|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $i = sp + 4|0;
 $ret = sp;
 HEAP32[$1>>2] = $ptr;
 HEAP32[$2>>2] = $msg;
 HEAP32[$ret>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$0>>2] = 0;
  $40 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($40|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[57944>>2]|0;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = HEAP32[$ret>>2]|0;
  $9 = ($8|0)!=(0);
  $10 = $9 ^ 1;
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[57952>>2]|0;
  $13 = (($12) + ($11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = HEAP32[$i>>2]|0;
   $17 = HEAP32[57952>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(18);
   if ($21) {
    $22 = HEAP32[$i>>2]|0;
    $23 = HEAP32[57952>>2]|0;
    $24 = (($23) + ($22<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + 44|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)!=(0|0);
    if ($28) {
     $29 = HEAP32[$i>>2]|0;
     $30 = HEAP32[57952>>2]|0;
     $31 = (($30) + ($29<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + 44|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = HEAP32[$1>>2]|0;
     $36 = (_bundle_contains_data($34,$35)|0);
     HEAP32[$ret>>2] = $36;
    }
   }
  }
  $37 = HEAP32[$i>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$i>>2] = $38;
 }
 $39 = HEAP32[$ret>>2]|0;
 HEAP32[$0>>2] = $39;
 $40 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function _uvar_free_value($u) {
 $u = $u|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $u;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(11);
 $4 = HEAP32[$0>>2]|0;
 if ($3) {
  $5 = (($4) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  _gretl_matrix_free($6);
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$4>>2]|0;
 $8 = ($7|0)==(18);
 $9 = HEAP32[$0>>2]|0;
 if ($8) {
  $10 = (($9) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  _gretl_bundle_destroy($11);
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$9>>2]|0;
 $13 = ($12|0)==(8);
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 if ($13) {
  _bufgets_finalize($16);
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  _free($19);
  STACKTOP = sp;return;
 } else {
  _free($16);
  STACKTOP = sp;return;
 }
}
function _destroy_user_vars() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = sp + 4|0;
 $j = sp;
 HEAP32[$i>>2] = 0;
 while(1) {
  $0 = HEAP32[$i>>2]|0;
  $1 = HEAP32[57944>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   label = 8;
   break;
  }
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[57952>>2]|0;
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   label = 8;
   break;
  }
  $8 = HEAP32[$i>>2]|0;
  $9 = HEAP32[57952>>2]|0;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  _user_var_destroy($11);
  $12 = HEAP32[$i>>2]|0;
  HEAP32[$j>>2] = $12;
  while(1) {
   $13 = HEAP32[$j>>2]|0;
   $14 = HEAP32[57944>>2]|0;
   $15 = (($14) - 1)|0;
   $16 = ($13|0)<($15|0);
   if (!($16)) {
    break;
   }
   $17 = HEAP32[$j>>2]|0;
   $18 = (($17) + 1)|0;
   $19 = HEAP32[57952>>2]|0;
   $20 = (($19) + ($18<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$j>>2]|0;
   $23 = HEAP32[57952>>2]|0;
   $24 = (($23) + ($22<<2)|0);
   HEAP32[$24>>2] = $21;
   $25 = HEAP32[$j>>2]|0;
   $26 = (($25) + 1)|0;
   HEAP32[$j>>2] = $26;
  }
  $27 = HEAP32[57944>>2]|0;
  $28 = (($27) - 1)|0;
  $29 = HEAP32[57952>>2]|0;
  $30 = (($29) + ($28<<2)|0);
  HEAP32[$30>>2] = 0;
  $31 = HEAP32[$i>>2]|0;
  $32 = (($31) + -1)|0;
  HEAP32[$i>>2] = $32;
  $33 = HEAP32[$i>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$i>>2] = $34;
 }
 if ((label|0) == 8) {
  _set_nvars(0,57968);
  $35 = HEAP32[57952>>2]|0;
  _free($35);
  HEAP32[57952>>2] = 0;
  HEAP32[57992>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _real_destroy_user_vars_at_level($level,$type,$imin) {
 $level = $level|0;
 $type = $type|0;
 $imin = $imin|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $err = 0, $i = 0, $j = 0, $nv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $i = sp + 12|0;
 $j = sp + 8|0;
 $nv = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $level;
 HEAP32[$1>>2] = $type;
 HEAP32[$2>>2] = $imin;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$nv>>2] = $3;
 HEAP32[$err>>2] = 0;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$i>>2] = $4;
 while(1) {
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[57944>>2]|0;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   label = 14;
   break;
  }
  $8 = HEAP32[$i>>2]|0;
  $9 = HEAP32[57952>>2]|0;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   label = 14;
   break;
  }
  $13 = HEAP32[$1>>2]|0;
  $14 = ($13|0)>(0);
  if ($14) {
   $15 = HEAP32[$i>>2]|0;
   $16 = HEAP32[57952>>2]|0;
   $17 = (($16) + ($15<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$1>>2]|0;
   $21 = ($19|0)!=($20|0);
   if ($21) {
    $22 = HEAP32[$nv>>2]|0;
    $23 = (($22) + 1)|0;
    HEAP32[$nv>>2] = $23;
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  do {
   if ((label|0) == 7) {
    label = 0;
    $24 = HEAP32[$i>>2]|0;
    $25 = HEAP32[57952>>2]|0;
    $26 = (($25) + ($24<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[$0>>2]|0;
    $29 = (_uvar_levels_match($27,$28)|0);
    $30 = ($29|0)!=(0);
    if (!($30)) {
     $56 = HEAP32[$nv>>2]|0;
     $57 = (($56) + 1)|0;
     HEAP32[$nv>>2] = $57;
     break;
    }
    $31 = HEAP32[$i>>2]|0;
    $32 = HEAP32[57952>>2]|0;
    $33 = (($32) + ($31<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    _user_var_destroy($34);
    $35 = HEAP32[$i>>2]|0;
    HEAP32[$j>>2] = $35;
    while(1) {
     $36 = HEAP32[$j>>2]|0;
     $37 = HEAP32[57944>>2]|0;
     $38 = (($37) - 1)|0;
     $39 = ($36|0)<($38|0);
     if (!($39)) {
      break;
     }
     $40 = HEAP32[$j>>2]|0;
     $41 = (($40) + 1)|0;
     $42 = HEAP32[57952>>2]|0;
     $43 = (($42) + ($41<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = HEAP32[$j>>2]|0;
     $46 = HEAP32[57952>>2]|0;
     $47 = (($46) + ($45<<2)|0);
     HEAP32[$47>>2] = $44;
     $48 = HEAP32[$j>>2]|0;
     $49 = (($48) + 1)|0;
     HEAP32[$j>>2] = $49;
    }
    $50 = HEAP32[57944>>2]|0;
    $51 = (($50) - 1)|0;
    $52 = HEAP32[57952>>2]|0;
    $53 = (($52) + ($51<<2)|0);
    HEAP32[$53>>2] = 0;
    $54 = HEAP32[$i>>2]|0;
    $55 = (($54) + -1)|0;
    HEAP32[$i>>2] = $55;
   }
  } while(0);
  $58 = HEAP32[$i>>2]|0;
  $59 = (($58) + 1)|0;
  HEAP32[$i>>2] = $59;
 }
 if ((label|0) == 14) {
  $60 = HEAP32[$nv>>2]|0;
  _set_nvars($60,58000);
  $61 = HEAP32[$err>>2]|0;
  STACKTOP = sp;return ($61|0);
 }
 return 0|0;
}
function _gretl_lists_revise($dlist,$dmin) {
 $dlist = $dlist|0;
 $dmin = $dmin|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $list = 0, $lmax = 0, $maplist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $list = sp + 20|0;
 $maplist = sp + 16|0;
 $lmax = sp + 12|0;
 $i = sp + 8|0;
 $j = sp + 4|0;
 $k = sp;
 HEAP32[$1>>2] = $dlist;
 HEAP32[$2>>2] = $dmin;
 HEAP32[$lmax>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0|0);
 L1: do {
  if ($4) {
   $5 = HEAP32[$1>>2]|0;
   $6 = (($5) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   HEAP32[$2>>2] = $7;
   HEAP32[$i>>2] = 2;
   while(1) {
    $8 = HEAP32[$i>>2]|0;
    $9 = HEAP32[$1>>2]|0;
    $10 = HEAP32[$9>>2]|0;
    $11 = ($8|0)<=($10|0);
    if (!($11)) {
     break L1;
    }
    $12 = HEAP32[$i>>2]|0;
    $13 = HEAP32[$1>>2]|0;
    $14 = (($13) + ($12<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)>(0);
    if ($16) {
     $17 = HEAP32[$i>>2]|0;
     $18 = HEAP32[$1>>2]|0;
     $19 = (($18) + ($17<<2)|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = HEAP32[$2>>2]|0;
     $22 = ($20|0)<($21|0);
     if ($22) {
      $23 = HEAP32[$i>>2]|0;
      $24 = HEAP32[$1>>2]|0;
      $25 = (($24) + ($23<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      HEAP32[$2>>2] = $26;
     }
    }
    $27 = HEAP32[$i>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$i>>2] = $28;
   }
  }
 } while(0);
 HEAP32[$j>>2] = 0;
 while(1) {
  $29 = HEAP32[$j>>2]|0;
  $30 = HEAP32[57944>>2]|0;
  $31 = ($29|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = HEAP32[$j>>2]|0;
  $33 = HEAP32[57952>>2]|0;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(4);
  L14: do {
   if ($37) {
    $38 = HEAP32[$j>>2]|0;
    $39 = HEAP32[57952>>2]|0;
    $40 = (($39) + ($38<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 44|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP32[$list>>2] = $43;
    $44 = HEAP32[$list>>2]|0;
    $45 = ($44|0)!=(0|0);
    if ($45) {
     HEAP32[$i>>2] = 1;
     while(1) {
      $46 = HEAP32[$i>>2]|0;
      $47 = HEAP32[$list>>2]|0;
      $48 = HEAP32[$47>>2]|0;
      $49 = ($46|0)<=($48|0);
      if (!($49)) {
       break L14;
      }
      $50 = HEAP32[$i>>2]|0;
      $51 = HEAP32[$list>>2]|0;
      $52 = (($51) + ($50<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = HEAP32[$lmax>>2]|0;
      $55 = ($53|0)>($54|0);
      if ($55) {
       $56 = HEAP32[$i>>2]|0;
       $57 = HEAP32[$list>>2]|0;
       $58 = (($57) + ($56<<2)|0);
       $59 = HEAP32[$58>>2]|0;
       HEAP32[$lmax>>2] = $59;
      }
      $60 = HEAP32[$i>>2]|0;
      $61 = (($60) + 1)|0;
      HEAP32[$i>>2] = $61;
     }
    }
   }
  } while(0);
  $62 = HEAP32[$j>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$j>>2] = $63;
 }
 $64 = HEAP32[$lmax>>2]|0;
 $65 = HEAP32[$2>>2]|0;
 $66 = ($64|0)<($65|0);
 if ($66) {
  HEAP32[$0>>2] = 0;
  $143 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($143|0);
 }
 $67 = HEAP32[$lmax>>2]|0;
 $68 = HEAP32[$2>>2]|0;
 $69 = (($67) - ($68))|0;
 $70 = (($69) + 1)|0;
 $71 = (_gretl_list_new($70)|0);
 HEAP32[$maplist>>2] = $71;
 $72 = HEAP32[$maplist>>2]|0;
 $73 = ($72|0)==(0|0);
 if ($73) {
  HEAP32[$0>>2] = 12;
  $143 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($143|0);
 }
 $74 = HEAP32[$2>>2]|0;
 HEAP32[$j>>2] = $74;
 HEAP32[$i>>2] = 1;
 while(1) {
  $75 = HEAP32[$i>>2]|0;
  $76 = HEAP32[$maplist>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)<=($77|0);
  if (!($78)) {
   break;
  }
  $79 = HEAP32[$1>>2]|0;
  $80 = HEAP32[$2>>2]|0;
  $81 = HEAP32[$i>>2]|0;
  $82 = (_var_is_deleted($79,$80,$81)|0);
  $83 = ($82|0)!=(0);
  if ($83) {
   $84 = HEAP32[$i>>2]|0;
   $85 = HEAP32[$maplist>>2]|0;
   $86 = (($85) + ($84<<2)|0);
   HEAP32[$86>>2] = -1;
  } else {
   $87 = HEAP32[$j>>2]|0;
   $88 = (($87) + 1)|0;
   HEAP32[$j>>2] = $88;
   $89 = HEAP32[$i>>2]|0;
   $90 = HEAP32[$maplist>>2]|0;
   $91 = (($90) + ($89<<2)|0);
   HEAP32[$91>>2] = $87;
  }
  $92 = HEAP32[$i>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$i>>2] = $93;
 }
 HEAP32[$j>>2] = 0;
 while(1) {
  $94 = HEAP32[$j>>2]|0;
  $95 = HEAP32[57944>>2]|0;
  $96 = ($94|0)<($95|0);
  if (!($96)) {
   break;
  }
  $97 = HEAP32[$j>>2]|0;
  $98 = HEAP32[57952>>2]|0;
  $99 = (($98) + ($97<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(4);
  L44: do {
   if ($102) {
    $103 = HEAP32[$j>>2]|0;
    $104 = HEAP32[57952>>2]|0;
    $105 = (($104) + ($103<<2)|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($106) + 44|0);
    $108 = HEAP32[$107>>2]|0;
    HEAP32[$list>>2] = $108;
    $109 = HEAP32[$list>>2]|0;
    $110 = ($109|0)!=(0|0);
    if ($110) {
     $111 = HEAP32[$list>>2]|0;
     $112 = HEAP32[$111>>2]|0;
     HEAP32[$i>>2] = $112;
     while(1) {
      $113 = HEAP32[$i>>2]|0;
      $114 = ($113|0)>(0);
      if (!($114)) {
       break L44;
      }
      $115 = HEAP32[$i>>2]|0;
      $116 = HEAP32[$list>>2]|0;
      $117 = (($116) + ($115<<2)|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = HEAP32[$2>>2]|0;
      $120 = (($118) - ($119))|0;
      $121 = (($120) + 1)|0;
      HEAP32[$k>>2] = $121;
      $122 = HEAP32[$k>>2]|0;
      $123 = ($122|0)>=(1);
      do {
       if ($123) {
        $124 = HEAP32[$k>>2]|0;
        $125 = HEAP32[$maplist>>2]|0;
        $126 = (($125) + ($124<<2)|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = ($127|0)==(-1);
        if ($128) {
         $129 = HEAP32[$list>>2]|0;
         $130 = HEAP32[$i>>2]|0;
         (_gretl_list_delete_at_pos($129,$130)|0);
         break;
        } else {
         $131 = HEAP32[$k>>2]|0;
         $132 = HEAP32[$maplist>>2]|0;
         $133 = (($132) + ($131<<2)|0);
         $134 = HEAP32[$133>>2]|0;
         $135 = HEAP32[$i>>2]|0;
         $136 = HEAP32[$list>>2]|0;
         $137 = (($136) + ($135<<2)|0);
         HEAP32[$137>>2] = $134;
         break;
        }
       }
      } while(0);
      $138 = HEAP32[$i>>2]|0;
      $139 = (($138) + -1)|0;
      HEAP32[$i>>2] = $139;
     }
    }
   }
  } while(0);
  $140 = HEAP32[$j>>2]|0;
  $141 = (($140) + 1)|0;
  HEAP32[$j>>2] = $141;
 }
 $142 = HEAP32[$maplist>>2]|0;
 _free($142);
 HEAP32[$0>>2] = 0;
 $143 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($143|0);
}
function _var_is_deleted($dlist,$dmin,$i) {
 $dlist = $dlist|0;
 $dmin = $dmin|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $v = sp;
 HEAP32[$1>>2] = $dlist;
 HEAP32[$2>>2] = $dmin;
 HEAP32[$3>>2] = $i;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($4) + ($5))|0;
 $7 = (($6) - 1)|0;
 HEAP32[$v>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[$1>>2]|0;
  $11 = HEAP32[$v>>2]|0;
  $12 = (_in_gretl_list($10,$11)|0);
  HEAP32[$0>>2] = $12;
  $17 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($17|0);
 } else {
  $13 = HEAP32[$v>>2]|0;
  $14 = HEAP32[$2>>2]|0;
  $15 = ($13|0)>=($14|0);
  $16 = $15&1;
  HEAP32[$0>>2] = $16;
  $17 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 return 0|0;
}
function _gretl_lists_cleanup() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_real_destroy_user_vars_at_level(0,4,0)|0);
 STACKTOP = sp;return;
}
function _uvar_levels_match($u,$level) {
 $u = $u|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $ret = sp;
 HEAP32[$0>>2] = $u;
 HEAP32[$1>>2] = $level;
 HEAP32[$ret>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($4|0)==($5|0);
 do {
  if ($6) {
   HEAP32[$ret>>2] = 1;
  } else {
   $7 = HEAP32[$1>>2]|0;
   $8 = ($7|0)==(-1);
   if ($8) {
    $9 = HEAP32[$0>>2]|0;
    $10 = (($9) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $11 & 1;
    $13 = ($12|0)!=(0);
    if (!($13)) {
     $14 = HEAP32[$0>>2]|0;
     $15 = (($14) + 12|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = $16 << 24 >> 24;
     $18 = ($17|0)==(36);
     if (!($18)) {
      break;
     }
    }
    HEAP32[$ret>>2] = 1;
   }
  }
 } while(0);
 $19 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _gretl_VAR_free($var) {
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $var;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 _free($16);
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 _free($19);
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 _free($22);
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 72|0);
 $25 = HEAP32[$24>>2]|0;
 _gretl_matrix_free($25);
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + 76|0);
 $28 = HEAP32[$27>>2]|0;
 _gretl_matrix_free($28);
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + 80|0);
 $31 = HEAP32[$30>>2]|0;
 _gretl_matrix_free($31);
 $32 = HEAP32[$0>>2]|0;
 $33 = (($32) + 84|0);
 $34 = HEAP32[$33>>2]|0;
 _gretl_matrix_free($34);
 $35 = HEAP32[$0>>2]|0;
 $36 = (($35) + 88|0);
 $37 = HEAP32[$36>>2]|0;
 _gretl_matrix_free($37);
 $38 = HEAP32[$0>>2]|0;
 $39 = (($38) + 92|0);
 $40 = HEAP32[$39>>2]|0;
 _gretl_matrix_free($40);
 $41 = HEAP32[$0>>2]|0;
 $42 = (($41) + 96|0);
 $43 = HEAP32[$42>>2]|0;
 _gretl_matrix_free($43);
 $44 = HEAP32[$0>>2]|0;
 $45 = (($44) + 100|0);
 $46 = HEAP32[$45>>2]|0;
 _gretl_matrix_free($46);
 $47 = HEAP32[$0>>2]|0;
 $48 = (($47) + 104|0);
 $49 = HEAP32[$48>>2]|0;
 _gretl_matrix_free($49);
 $50 = HEAP32[$0>>2]|0;
 $51 = (($50) + 108|0);
 $52 = HEAP32[$51>>2]|0;
 _gretl_matrix_free($52);
 $53 = HEAP32[$0>>2]|0;
 $54 = (($53) + 112|0);
 $55 = HEAP32[$54>>2]|0;
 _gretl_matrix_free($55);
 $56 = HEAP32[$0>>2]|0;
 $57 = (($56) + 120|0);
 $58 = HEAP32[$57>>2]|0;
 _free($58);
 $59 = HEAP32[$0>>2]|0;
 $60 = (($59) + 124|0);
 $61 = HEAP32[$60>>2]|0;
 _free($61);
 $62 = HEAP32[$0>>2]|0;
 $63 = (($62) + 192|0);
 $64 = HEAP32[$63>>2]|0;
 _free($64);
 $65 = HEAP32[$0>>2]|0;
 $66 = (($65) + 116|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)!=(0|0);
 if ($68) {
  $69 = HEAP32[$0>>2]|0;
  $70 = (($69) + 116|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = HEAP32[$0>>2]|0;
  $73 = (($72) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  _gretl_model_array_destroy($71,$74);
 }
 $75 = HEAP32[$0>>2]|0;
 $76 = (($75) + 188|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)!=(0|0);
 if ($78) {
  $79 = HEAP32[$0>>2]|0;
  $80 = (($79) + 188|0);
  $81 = HEAP32[$80>>2]|0;
  _johansen_info_free($81);
 }
 $82 = HEAP32[$0>>2]|0;
 _free($82);
 STACKTOP = sp;return;
}
function _johansen_info_free($jv) {
 $jv = $jv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $jv;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 _gretl_matrix_free($3);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _gretl_matrix_free($6);
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 _gretl_matrix_free($9);
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 _gretl_matrix_free($12);
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 _gretl_matrix_free($15);
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 _gretl_matrix_free($18);
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 40|0);
 $21 = HEAP32[$20>>2]|0;
 _gretl_matrix_free($21);
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 _gretl_matrix_free($24);
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 _gretl_matrix_free($27);
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + 52|0);
 $30 = HEAP32[$29>>2]|0;
 _gretl_matrix_free($30);
 $31 = HEAP32[$0>>2]|0;
 $32 = (($31) + 56|0);
 $33 = HEAP32[$32>>2]|0;
 _gretl_matrix_free($33);
 $34 = HEAP32[$0>>2]|0;
 $35 = (($34) + 60|0);
 $36 = HEAP32[$35>>2]|0;
 _gretl_matrix_free($36);
 $37 = HEAP32[$0>>2]|0;
 $38 = (($37) + 64|0);
 $39 = HEAP32[$38>>2]|0;
 _gretl_matrix_free($39);
 $40 = HEAP32[$0>>2]|0;
 $41 = (($40) + 68|0);
 $42 = HEAP32[$41>>2]|0;
 _gretl_matrix_free($42);
 $43 = HEAP32[$0>>2]|0;
 $44 = (($43) + 72|0);
 $45 = HEAP32[$44>>2]|0;
 _gretl_matrix_free($45);
 $46 = HEAP32[$0>>2]|0;
 $47 = (($46) + 76|0);
 $48 = HEAP32[$47>>2]|0;
 _gretl_matrix_free($48);
 $49 = HEAP32[$0>>2]|0;
 $50 = (($49) + 80|0);
 $51 = HEAP32[$50>>2]|0;
 _gretl_matrix_free($51);
 $52 = HEAP32[$0>>2]|0;
 $53 = (($52) + 84|0);
 $54 = HEAP32[$53>>2]|0;
 _gretl_matrix_free($54);
 $55 = HEAP32[$0>>2]|0;
 _free($55);
 STACKTOP = sp;return;
}
function _g_hash_table_new($hash_func,$key_equal_func) {
 $hash_func = $hash_func|0;
 $key_equal_func = $key_equal_func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $hash_func;
 HEAP32[$1>>2] = $key_equal_func;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_g_hash_table_new_full($2,$3,0,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _g_hash_table_new_full($hash_func,$key_equal_func,$key_destroy_func,$value_destroy_func) {
 $hash_func = $hash_func|0;
 $key_equal_func = $key_equal_func|0;
 $key_destroy_func = $key_destroy_func|0;
 $value_destroy_func = $value_destroy_func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash_table = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $hash_table = sp;
 HEAP32[$0>>2] = $hash_func;
 HEAP32[$1>>2] = $key_equal_func;
 HEAP32[$2>>2] = $key_destroy_func;
 HEAP32[$3>>2] = $value_destroy_func;
 $4 = (_g_slice_alloc(56)|0);
 HEAP32[$hash_table>>2] = $4;
 $5 = HEAP32[$hash_table>>2]|0;
 _g_hash_table_set_shift($5,3);
 $6 = HEAP32[$hash_table>>2]|0;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$hash_table>>2]|0;
 $9 = (($8) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = HEAP32[$0>>2]|0;
 $13 = $11 ? $12 : 2;
 $14 = HEAP32[$hash_table>>2]|0;
 $15 = (($14) + 32|0);
 HEAP32[$15>>2] = $13;
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$hash_table>>2]|0;
 $18 = (($17) + 36|0);
 HEAP32[$18>>2] = $16;
 $19 = HEAP32[$hash_table>>2]|0;
 $20 = (($19) + 40|0);
 HEAP32[$20>>2] = 1;
 $21 = HEAP32[$hash_table>>2]|0;
 $22 = (($21) + 44|0);
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[$2>>2]|0;
 $24 = HEAP32[$hash_table>>2]|0;
 $25 = (($24) + 48|0);
 HEAP32[$25>>2] = $23;
 $26 = HEAP32[$3>>2]|0;
 $27 = HEAP32[$hash_table>>2]|0;
 $28 = (($27) + 52|0);
 HEAP32[$28>>2] = $26;
 $29 = HEAP32[$hash_table>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = (_g_malloc0_n(($30|0),4)|0);
 $32 = HEAP32[$hash_table>>2]|0;
 $33 = (($32) + 20|0);
 HEAP32[$33>>2] = $31;
 $34 = HEAP32[$hash_table>>2]|0;
 $35 = (($34) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$hash_table>>2]|0;
 $38 = (($37) + 28|0);
 HEAP32[$38>>2] = $36;
 $39 = HEAP32[$hash_table>>2]|0;
 $40 = HEAP32[$39>>2]|0;
 $41 = (_g_malloc0_n(($40|0),4)|0);
 $42 = HEAP32[$hash_table>>2]|0;
 $43 = (($42) + 24|0);
 HEAP32[$43>>2] = $41;
 $44 = HEAP32[$hash_table>>2]|0;
 STACKTOP = sp;return ($44|0);
}
function _g_hash_table_set_shift($hash_table,$shift) {
 $hash_table = $hash_table|0;
 $shift = $shift|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $i = sp + 4|0;
 $mask = sp;
 HEAP32[$0>>2] = $hash_table;
 HEAP32[$1>>2] = $shift;
 HEAP32[$mask>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = 1 << $2;
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$1>>2]|0;
 $6 = (58296 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 4|0);
 HEAP32[$9>>2] = $7;
 HEAP32[$i>>2] = 0;
 while(1) {
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = ($10|0)<($11|0);
  $13 = HEAP32[$mask>>2]|0;
  if (!($12)) {
   break;
  }
  $14 = $13 << 1;
  HEAP32[$mask>>2] = $14;
  $15 = HEAP32[$mask>>2]|0;
  $16 = $15 | 1;
  HEAP32[$mask>>2] = $16;
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 8|0);
 HEAP32[$20>>2] = $13;
 STACKTOP = sp;return;
}
function _g_direct_hash($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $v;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _g_hash_table_insert_node($hash_table,$node_index,$key_hash,$new_key,$new_value,$keep_new_key,$reusing_key) {
 $hash_table = $hash_table|0;
 $node_index = $node_index|0;
 $key_hash = $key_hash|0;
 $new_key = $new_key|0;
 $new_value = $new_value|0;
 $keep_new_key = $keep_new_key|0;
 $reusing_key = $reusing_key|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $already_exists = 0, $key_to_free = 0, $old_hash = 0, $value_to_free = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $already_exists = sp + 12|0;
 $old_hash = sp + 8|0;
 $key_to_free = sp + 4|0;
 $value_to_free = sp;
 HEAP32[$0>>2] = $hash_table;
 HEAP32[$1>>2] = $node_index;
 HEAP32[$2>>2] = $key_hash;
 HEAP32[$3>>2] = $new_key;
 HEAP32[$4>>2] = $new_value;
 HEAP32[$5>>2] = $keep_new_key;
 HEAP32[$6>>2] = $reusing_key;
 HEAP32[$key_to_free>>2] = 0;
 HEAP32[$value_to_free>>2] = 0;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($7<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$old_hash>>2] = $12;
 $13 = HEAP32[$old_hash>>2]|0;
 $14 = ($13>>>0)>=(2);
 $15 = $14&1;
 HEAP32[$already_exists>>2] = $15;
 $16 = HEAP32[$already_exists>>2]|0;
 $17 = ($16|0)!=(0);
 do {
  if ($17) {
   $18 = HEAP32[$1>>2]|0;
   $19 = HEAP32[$0>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($18<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   HEAP32[$value_to_free>>2] = $23;
   $24 = HEAP32[$5>>2]|0;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = HEAP32[$1>>2]|0;
    $27 = HEAP32[$0>>2]|0;
    $28 = (($27) + 20|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + ($26<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    HEAP32[$key_to_free>>2] = $31;
    $32 = HEAP32[$3>>2]|0;
    $33 = HEAP32[$1>>2]|0;
    $34 = HEAP32[$0>>2]|0;
    $35 = (($34) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) + ($33<<2)|0);
    HEAP32[$37>>2] = $32;
    break;
   } else {
    $38 = HEAP32[$3>>2]|0;
    HEAP32[$key_to_free>>2] = $38;
    break;
   }
  } else {
   $39 = HEAP32[$2>>2]|0;
   $40 = HEAP32[$1>>2]|0;
   $41 = HEAP32[$0>>2]|0;
   $42 = (($41) + 24|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($40<<2)|0);
   HEAP32[$44>>2] = $39;
   $45 = HEAP32[$3>>2]|0;
   $46 = HEAP32[$1>>2]|0;
   $47 = HEAP32[$0>>2]|0;
   $48 = (($47) + 20|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($46<<2)|0);
   HEAP32[$50>>2] = $45;
  }
 } while(0);
 $51 = HEAP32[$0>>2]|0;
 $52 = (($51) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = HEAP32[$0>>2]|0;
 $55 = (($54) + 28|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($53|0)==($56|0);
 if ($57) {
  $58 = HEAP32[$1>>2]|0;
  $59 = HEAP32[$0>>2]|0;
  $60 = (($59) + 20|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($58<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$4>>2]|0;
  $65 = ($63|0)!=($64|0);
  if ($65) {
   $66 = HEAP32[$0>>2]|0;
   $67 = (($66) + 20|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = HEAP32[$0>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = $70<<2;
   $72 = (_g_memdup(($68|0),($71|0))|0);
   $73 = HEAP32[$0>>2]|0;
   $74 = (($73) + 28|0);
   HEAP32[$74>>2] = $72;
  }
 }
 $75 = HEAP32[$4>>2]|0;
 $76 = HEAP32[$1>>2]|0;
 $77 = HEAP32[$0>>2]|0;
 $78 = (($77) + 28|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + ($76<<2)|0);
 HEAP32[$80>>2] = $75;
 $81 = HEAP32[$already_exists>>2]|0;
 $82 = ($81|0)!=(0);
 if (!($82)) {
  $83 = HEAP32[$0>>2]|0;
  $84 = (($83) + 12|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + 1)|0;
  HEAP32[$84>>2] = $86;
  $87 = HEAP32[$old_hash>>2]|0;
  $88 = ($87|0)==(0);
  if ($88) {
   $89 = HEAP32[$0>>2]|0;
   $90 = (($89) + 16|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + 1)|0;
   HEAP32[$90>>2] = $92;
   $93 = HEAP32[$0>>2]|0;
   _g_hash_table_maybe_resize($93);
  }
  $94 = HEAP32[$0>>2]|0;
  $95 = (($94) + 44|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$95>>2] = $97;
 }
 $98 = HEAP32[$already_exists>>2]|0;
 $99 = ($98|0)!=(0);
 if (!($99)) {
  $118 = HEAP32[$already_exists>>2]|0;
  $119 = ($118|0)!=(0);
  $120 = $119 ^ 1;
  $121 = $120&1;
  STACKTOP = sp;return ($121|0);
 }
 $100 = HEAP32[$0>>2]|0;
 $101 = (($100) + 48|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0|0);
 if ($103) {
  $104 = HEAP32[$6>>2]|0;
  $105 = ($104|0)!=(0);
  if (!($105)) {
   $106 = HEAP32[$0>>2]|0;
   $107 = (($106) + 48|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = HEAP32[$key_to_free>>2]|0;
   FUNCTION_TABLE_vi[$108 & 1]($109);
  }
 }
 $110 = HEAP32[$0>>2]|0;
 $111 = (($110) + 52|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)!=(0|0);
 if (!($113)) {
  $118 = HEAP32[$already_exists>>2]|0;
  $119 = ($118|0)!=(0);
  $120 = $119 ^ 1;
  $121 = $120&1;
  STACKTOP = sp;return ($121|0);
 }
 $114 = HEAP32[$0>>2]|0;
 $115 = (($114) + 52|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$value_to_free>>2]|0;
 FUNCTION_TABLE_vi[$116 & 1]($117);
 $118 = HEAP32[$already_exists>>2]|0;
 $119 = ($118|0)!=(0);
 $120 = $119 ^ 1;
 $121 = $120&1;
 STACKTOP = sp;return ($121|0);
}
function _g_hash_table_unref($hash_table) {
 $hash_table = $hash_table|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $hash_table;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  _g_return_if_fail_warning((58056|0),(58088|0),(58064|0));
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 40|0);
 $5 = (_g_atomic_int_dec_and_test(($4|0))|0);
 $6 = ($5|0)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 _g_hash_table_remove_all_nodes($7,1);
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)!=($13|0);
 if ($14) {
  $15 = HEAP32[$0>>2]|0;
  $16 = (($15) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  _g_free(($17|0));
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 _g_free(($20|0));
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 _g_free(($23|0));
 $24 = HEAP32[$0>>2]|0;
 _g_slice_free1(56,$24);
 STACKTOP = sp;return;
}
function _g_hash_table_remove_all_nodes($hash_table,$notify) {
 $hash_table = $hash_table|0;
 $notify = $notify|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $key = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $i = sp + 8|0;
 $key = sp + 4|0;
 $value = sp;
 HEAP32[$0>>2] = $hash_table;
 HEAP32[$1>>2] = $notify;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)!=(0);
 do {
  if ($7) {
   $8 = HEAP32[$0>>2]|0;
   $9 = (($8) + 48|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP32[$0>>2]|0;
    $13 = (($12) + 52|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if ($15) {
     break;
    }
   }
   HEAP32[$i>>2] = 0;
   while(1) {
    $34 = HEAP32[$i>>2]|0;
    $35 = HEAP32[$0>>2]|0;
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)<($36|0);
    if (!($37)) {
     break;
    }
    $38 = HEAP32[$i>>2]|0;
    $39 = HEAP32[$0>>2]|0;
    $40 = (($39) + 24|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + ($38<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43>>>0)>=(2);
    $45 = HEAP32[$i>>2]|0;
    $46 = HEAP32[$0>>2]|0;
    if ($44) {
     $47 = (($46) + 20|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($48) + ($45<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     HEAP32[$key>>2] = $50;
     $51 = HEAP32[$i>>2]|0;
     $52 = HEAP32[$0>>2]|0;
     $53 = (($52) + 28|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($54) + ($51<<2)|0);
     $56 = HEAP32[$55>>2]|0;
     HEAP32[$value>>2] = $56;
     $57 = HEAP32[$i>>2]|0;
     $58 = HEAP32[$0>>2]|0;
     $59 = (($58) + 24|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (($60) + ($57<<2)|0);
     HEAP32[$61>>2] = 0;
     $62 = HEAP32[$i>>2]|0;
     $63 = HEAP32[$0>>2]|0;
     $64 = (($63) + 20|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($65) + ($62<<2)|0);
     HEAP32[$66>>2] = 0;
     $67 = HEAP32[$i>>2]|0;
     $68 = HEAP32[$0>>2]|0;
     $69 = (($68) + 28|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + ($67<<2)|0);
     HEAP32[$71>>2] = 0;
     $72 = HEAP32[$0>>2]|0;
     $73 = (($72) + 48|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($74|0)!=(0|0);
     if ($75) {
      $76 = HEAP32[$0>>2]|0;
      $77 = (($76) + 48|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = HEAP32[$key>>2]|0;
      FUNCTION_TABLE_vi[$78 & 1]($79);
     }
     $80 = HEAP32[$0>>2]|0;
     $81 = (($80) + 52|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)!=(0|0);
     if ($83) {
      $84 = HEAP32[$0>>2]|0;
      $85 = (($84) + 52|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = HEAP32[$value>>2]|0;
      FUNCTION_TABLE_vi[$86 & 1]($87);
     }
    } else {
     $88 = (($46) + 24|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = (($89) + ($45<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = HEAP32[$i>>2]|0;
      $94 = HEAP32[$0>>2]|0;
      $95 = (($94) + 24|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($96) + ($93<<2)|0);
      HEAP32[$97>>2] = 0;
     }
    }
    $98 = HEAP32[$i>>2]|0;
    $99 = (($98) + 1)|0;
    HEAP32[$i>>2] = $99;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = $20<<2;
 _memset(($18|0),0,($21|0))|0;
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$0>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = $26<<2;
 _memset(($24|0),0,($27|0))|0;
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$0>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = $32<<2;
 _memset(($30|0),0,($33|0))|0;
 STACKTOP = sp;return;
}
function _g_hash_table_destroy($hash_table) {
 $hash_table = $hash_table|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $hash_table;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$0>>2]|0;
  _g_hash_table_remove_all($3);
  $4 = HEAP32[$0>>2]|0;
  _g_hash_table_unref($4);
  STACKTOP = sp;return;
 } else {
  _g_return_if_fail_warning((58056|0),(58112|0),(58064|0));
  STACKTOP = sp;return;
 }
}
function _g_hash_table_remove_all($hash_table) {
 $hash_table = $hash_table|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $hash_table;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  _g_return_if_fail_warning((58056|0),(58160|0),(58064|0));
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$8>>2] = $10;
 }
 $11 = HEAP32[$0>>2]|0;
 _g_hash_table_remove_all_nodes($11,1);
 $12 = HEAP32[$0>>2]|0;
 _g_hash_table_maybe_resize($12);
 STACKTOP = sp;return;
}
function _g_hash_table_lookup($hash_table,$key) {
 $hash_table = $hash_table|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $node_hash = 0, $node_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $node_index = sp + 4|0;
 $node_hash = sp;
 HEAP32[$1>>2] = $hash_table;
 HEAP32[$2>>2] = $key;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  _g_return_if_fail_warning((58056|0),(58136|0),(58064|0));
  HEAP32[$0>>2] = 0;
  $22 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($22|0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (_g_hash_table_lookup_node($5,$6,$node_hash)|0);
 HEAP32[$node_index>>2] = $7;
 $8 = HEAP32[$node_index>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($8<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)>=(2);
 if ($14) {
  $15 = HEAP32[$node_index>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20;
 } else {
  $21 = 0;
 }
 HEAP32[$0>>2] = $21;
 $22 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($22|0);
}
function _g_hash_table_lookup_node($hash_table,$key,$hash_return) {
 $hash_table = $hash_table|0;
 $key = $key|0;
 $hash_return = $hash_return|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $first_tombstone = 0;
 var $hash_value = 0, $have_tombstone = 0, $node_hash = 0, $node_index = 0, $node_key = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $node_index = sp + 24|0;
 $node_hash = sp + 20|0;
 $hash_value = sp + 16|0;
 $first_tombstone = sp + 12|0;
 $have_tombstone = sp + 8|0;
 $step = sp + 4|0;
 $node_key = sp;
 HEAP32[$1>>2] = $hash_table;
 HEAP32[$2>>2] = $key;
 HEAP32[$3>>2] = $hash_return;
 HEAP32[$first_tombstone>>2] = 0;
 HEAP32[$have_tombstone>>2] = 0;
 HEAP32[$step>>2] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$6 & 3]($7)|0);
 HEAP32[$hash_value>>2] = $8;
 $9 = HEAP32[$hash_value>>2]|0;
 $10 = ($9>>>0)>=(2);
 $$ = $10 ? $8 : 2;
 HEAP32[$hash_value>>2] = $$;
 $11 = HEAP32[$hash_value>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$hash_value>>2]|0;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13>>>0) % ($16>>>0))&-1;
 HEAP32[$node_index>>2] = $17;
 $18 = HEAP32[$node_index>>2]|0;
 $19 = HEAP32[$1>>2]|0;
 $20 = (($19) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$node_hash>>2] = $23;
 L1: while(1) {
  $24 = HEAP32[$node_hash>>2]|0;
  $25 = ($24|0)==(0);
  $26 = $25 ^ 1;
  if (!($26)) {
   label = 13;
   break;
  }
  $27 = HEAP32[$node_hash>>2]|0;
  $28 = HEAP32[$hash_value>>2]|0;
  $29 = ($27|0)==($28|0);
  do {
   if ($29) {
    $30 = HEAP32[$node_index>>2]|0;
    $31 = HEAP32[$1>>2]|0;
    $32 = (($31) + 20|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + ($30<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    HEAP32[$node_key>>2] = $35;
    $36 = HEAP32[$1>>2]|0;
    $37 = (($36) + 36|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)!=(0|0);
    if ($39) {
     $40 = HEAP32[$1>>2]|0;
     $41 = (($40) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = HEAP32[$node_key>>2]|0;
     $44 = HEAP32[$2>>2]|0;
     $45 = (FUNCTION_TABLE_iii[$42 & 3]($43,$44)|0);
     $46 = ($45|0)!=(0);
     if ($46) {
      label = 6;
      break L1;
     } else {
      break;
     }
    } else {
     $48 = HEAP32[$node_key>>2]|0;
     $49 = HEAP32[$2>>2]|0;
     $50 = ($48|0)==($49|0);
     if ($50) {
      label = 8;
      break L1;
     } else {
      break;
     }
    }
   } else {
    $52 = HEAP32[$node_hash>>2]|0;
    $53 = ($52|0)==(1);
    if ($53) {
     $54 = HEAP32[$have_tombstone>>2]|0;
     $55 = ($54|0)!=(0);
     if (!($55)) {
      $56 = HEAP32[$node_index>>2]|0;
      HEAP32[$first_tombstone>>2] = $56;
      HEAP32[$have_tombstone>>2] = 1;
     }
    }
   }
  } while(0);
  $57 = HEAP32[$step>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$step>>2] = $58;
  $59 = HEAP32[$step>>2]|0;
  $60 = HEAP32[$node_index>>2]|0;
  $61 = (($60) + ($59))|0;
  HEAP32[$node_index>>2] = $61;
  $62 = HEAP32[$1>>2]|0;
  $63 = (($62) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = HEAP32[$node_index>>2]|0;
  $66 = $65 & $64;
  HEAP32[$node_index>>2] = $66;
  $67 = HEAP32[$node_index>>2]|0;
  $68 = HEAP32[$1>>2]|0;
  $69 = (($68) + 24|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + ($67<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  HEAP32[$node_hash>>2] = $72;
 }
 if ((label|0) == 6) {
  $47 = HEAP32[$node_index>>2]|0;
  HEAP32[$0>>2] = $47;
  $77 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 8) {
  $51 = HEAP32[$node_index>>2]|0;
  HEAP32[$0>>2] = $51;
  $77 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 13) {
  $73 = HEAP32[$have_tombstone>>2]|0;
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = HEAP32[$first_tombstone>>2]|0;
   HEAP32[$0>>2] = $75;
   $77 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($77|0);
  } else {
   $76 = HEAP32[$node_index>>2]|0;
   HEAP32[$0>>2] = $76;
   $77 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($77|0);
  }
 }
 return 0|0;
}
function _g_hash_table_insert($hash_table,$key,$value) {
 $hash_table = $hash_table|0;
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = $hash_table;
 HEAP32[$1>>2] = $key;
 HEAP32[$2>>2] = $value;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (_g_hash_table_insert_internal($3,$4,$5,0)|0);
 STACKTOP = sp;return ($6|0);
}
function _g_hash_table_insert_internal($hash_table,$key,$value,$keep_new_key) {
 $hash_table = $hash_table|0;
 $key = $key|0;
 $value = $value|0;
 $keep_new_key = $keep_new_key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key_hash = 0, $node_index = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $key_hash = sp + 4|0;
 $node_index = sp;
 HEAP32[$1>>2] = $hash_table;
 HEAP32[$2>>2] = $key;
 HEAP32[$3>>2] = $value;
 HEAP32[$4>>2] = $keep_new_key;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = (_g_hash_table_lookup_node($7,$8,$key_hash)|0);
  HEAP32[$node_index>>2] = $9;
  $10 = HEAP32[$1>>2]|0;
  $11 = HEAP32[$node_index>>2]|0;
  $12 = HEAP32[$key_hash>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = (_g_hash_table_insert_node($10,$11,$12,$13,$14,$15,0)|0);
  HEAP32[$0>>2] = $16;
  $17 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($17|0);
 } else {
  _g_return_if_fail_warning((58056|0),(58264|0),(58064|0));
  HEAP32[$0>>2] = 0;
  $17 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 return 0|0;
}
function _g_hash_table_maybe_resize($hash_table) {
 $hash_table = $hash_table|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $noccupied = 0, $or$cond = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $noccupied = sp + 4|0;
 $size = sp;
 HEAP32[$0>>2] = $hash_table;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$noccupied>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$size>>2] = $5;
 $6 = HEAP32[$size>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<2;
 $11 = ($6|0)>($10|0);
 $12 = HEAP32[$size>>2]|0;
 $13 = ($12|0)>(8);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  $14 = HEAP32[$size>>2]|0;
  $15 = HEAP32[$noccupied>>2]|0;
  $16 = HEAP32[$noccupied>>2]|0;
  $17 = (($16|0) / 16)&-1;
  $18 = (($15) + ($17))|0;
  $19 = ($14|0)<=($18|0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
 }
 $20 = HEAP32[$0>>2]|0;
 _g_hash_table_resize($20);
 STACKTOP = sp;return;
}
function _g_hash_table_find($hash_table,$predicate,$user_data) {
 $hash_table = $hash_table|0;
 $predicate = $predicate|0;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $match = 0, $node_hash = 0, $node_key = 0, $node_value = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $i = sp + 20|0;
 $version = sp + 16|0;
 $match = sp + 12|0;
 $node_hash = sp + 8|0;
 $node_key = sp + 4|0;
 $node_value = sp;
 HEAP32[$1>>2] = $hash_table;
 HEAP32[$2>>2] = $predicate;
 HEAP32[$3>>2] = $user_data;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  _g_return_if_fail_warning((58056|0),(58216|0),(58064|0));
  HEAP32[$0>>2] = 0;
  $50 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  _g_return_if_fail_warning((58056|0),(58216|0),(58240|0));
  HEAP32[$0>>2] = 0;
  $50 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$version>>2] = $10;
 HEAP32[$match>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)<($13|0);
  if (!($14)) {
   label = 14;
   break;
  }
  $15 = HEAP32[$i>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$node_hash>>2] = $20;
  $21 = HEAP32[$i>>2]|0;
  $22 = HEAP32[$1>>2]|0;
  $23 = (($22) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$node_key>>2] = $26;
  $27 = HEAP32[$i>>2]|0;
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + 28|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($27<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$node_value>>2] = $32;
  $33 = HEAP32[$node_hash>>2]|0;
  $34 = ($33>>>0)>=(2);
  if ($34) {
   $35 = HEAP32[$2>>2]|0;
   $36 = HEAP32[$node_key>>2]|0;
   $37 = HEAP32[$node_value>>2]|0;
   $38 = HEAP32[$3>>2]|0;
   $39 = (FUNCTION_TABLE_iiii[$35 & 3]($36,$37,$38)|0);
   HEAP32[$match>>2] = $39;
  }
  $40 = HEAP32[$version>>2]|0;
  $41 = HEAP32[$1>>2]|0;
  $42 = (($41) + 44|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($40|0)==($43|0);
  if (!($44)) {
   label = 10;
   break;
  }
  $45 = HEAP32[$match>>2]|0;
  $46 = ($45|0)!=(0);
  if ($46) {
   label = 12;
   break;
  }
  $48 = HEAP32[$i>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[$i>>2] = $49;
 }
 if ((label|0) == 10) {
  _g_return_if_fail_warning((58056|0),(58216|0),(58184|0));
  HEAP32[$0>>2] = 0;
  $50 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 12) {
  $47 = HEAP32[$node_value>>2]|0;
  HEAP32[$0>>2] = $47;
  $50 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 14) {
  HEAP32[$0>>2] = 0;
  $50 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 return 0|0;
}
function _g_str_equal($v1,$v2) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $string1 = 0, $string2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $string1 = sp + 4|0;
 $string2 = sp;
 HEAP32[$0>>2] = $v1;
 HEAP32[$1>>2] = $v2;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$string1>>2] = $2;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$string2>>2] = $3;
 $4 = HEAP32[$string1>>2]|0;
 $5 = HEAP32[$string2>>2]|0;
 $6 = (_strcmp($4,$5)|0);
 $7 = ($6|0)==(0);
 $8 = $7&1;
 STACKTOP = sp;return ($8|0);
}
function _g_str_hash($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $p = sp + 4|0;
 $h = sp;
 HEAP32[$0>>2] = $v;
 HEAP32[$h>>2] = 5381;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$p>>2] = $1;
 while(1) {
  $2 = HEAP32[$p>>2]|0;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  $6 = HEAP32[$h>>2]|0;
  if (!($5)) {
   break;
  }
  $7 = $6 << 5;
  $8 = HEAP32[$h>>2]|0;
  $9 = (($7) + ($8))|0;
  $10 = HEAP32[$p>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (($9) + ($12))|0;
  HEAP32[$h>>2] = $13;
  $14 = HEAP32[$p>>2]|0;
  $15 = (($14) + 1|0);
  HEAP32[$p>>2] = $15;
 }
 STACKTOP = sp;return ($6|0);
}
function _g_hash_table_resize($hash_table) {
 $hash_table = $hash_table|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $hash_val = 0, $i = 0, $new_hashes = 0, $new_keys = 0;
 var $new_values = 0, $node_hash = 0, $old_size = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $new_keys = sp + 28|0;
 $new_values = sp + 24|0;
 $new_hashes = sp + 20|0;
 $old_size = sp + 16|0;
 $i = sp + 12|0;
 $node_hash = sp + 8|0;
 $hash_val = sp + 4|0;
 $step = sp;
 HEAP32[$0>>2] = $hash_table;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$old_size>>2] = $2;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6<<1;
 _g_hash_table_set_shift_from_size($3,$7);
 $8 = HEAP32[$0>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (_g_malloc0_n(($9|0),4)|0);
 HEAP32[$new_keys>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = HEAP32[$new_keys>>2]|0;
  HEAP32[$new_values>>2] = $18;
 } else {
  $19 = HEAP32[$0>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = (_g_malloc0_n(($20|0),4)|0);
  HEAP32[$new_values>>2] = $21;
 }
 $22 = HEAP32[$0>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = (_g_malloc0_n(($23|0),4)|0);
 HEAP32[$new_hashes>>2] = $24;
 HEAP32[$i>>2] = 0;
 while(1) {
  $25 = HEAP32[$i>>2]|0;
  $26 = HEAP32[$old_size>>2]|0;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = HEAP32[$i>>2]|0;
  $29 = HEAP32[$0>>2]|0;
  $30 = (($29) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($28<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$node_hash>>2] = $33;
  HEAP32[$step>>2] = 0;
  $34 = HEAP32[$node_hash>>2]|0;
  $35 = ($34>>>0)>=(2);
  if ($35) {
   $36 = HEAP32[$node_hash>>2]|0;
   $37 = HEAP32[$0>>2]|0;
   $38 = (($37) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($36>>>0) % ($39>>>0))&-1;
   HEAP32[$hash_val>>2] = $40;
   while(1) {
    $41 = HEAP32[$hash_val>>2]|0;
    $42 = HEAP32[$new_hashes>>2]|0;
    $43 = (($42) + ($41<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(0);
    $46 = $45 ^ 1;
    if (!($46)) {
     break;
    }
    $47 = HEAP32[$step>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[$step>>2] = $48;
    $49 = HEAP32[$step>>2]|0;
    $50 = HEAP32[$hash_val>>2]|0;
    $51 = (($50) + ($49))|0;
    HEAP32[$hash_val>>2] = $51;
    $52 = HEAP32[$0>>2]|0;
    $53 = (($52) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = HEAP32[$hash_val>>2]|0;
    $56 = $55 & $54;
    HEAP32[$hash_val>>2] = $56;
   }
   $57 = HEAP32[$i>>2]|0;
   $58 = HEAP32[$0>>2]|0;
   $59 = (($58) + 24|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($57<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$hash_val>>2]|0;
   $64 = HEAP32[$new_hashes>>2]|0;
   $65 = (($64) + ($63<<2)|0);
   HEAP32[$65>>2] = $62;
   $66 = HEAP32[$i>>2]|0;
   $67 = HEAP32[$0>>2]|0;
   $68 = (($67) + 20|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + ($66<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = HEAP32[$hash_val>>2]|0;
   $73 = HEAP32[$new_keys>>2]|0;
   $74 = (($73) + ($72<<2)|0);
   HEAP32[$74>>2] = $71;
   $75 = HEAP32[$i>>2]|0;
   $76 = HEAP32[$0>>2]|0;
   $77 = (($76) + 28|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) + ($75<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = HEAP32[$hash_val>>2]|0;
   $82 = HEAP32[$new_values>>2]|0;
   $83 = (($82) + ($81<<2)|0);
   HEAP32[$83>>2] = $80;
  }
  $84 = HEAP32[$i>>2]|0;
  $85 = (($84) + 1)|0;
  HEAP32[$i>>2] = $85;
 }
 $86 = HEAP32[$0>>2]|0;
 $87 = (($86) + 20|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$0>>2]|0;
 $90 = (($89) + 28|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($88|0)!=($91|0);
 if (!($92)) {
  $96 = HEAP32[$0>>2]|0;
  $97 = (($96) + 20|0);
  $98 = HEAP32[$97>>2]|0;
  _g_free(($98|0));
  $99 = HEAP32[$0>>2]|0;
  $100 = (($99) + 24|0);
  $101 = HEAP32[$100>>2]|0;
  _g_free(($101|0));
  $102 = HEAP32[$new_keys>>2]|0;
  $103 = HEAP32[$0>>2]|0;
  $104 = (($103) + 20|0);
  HEAP32[$104>>2] = $102;
  $105 = HEAP32[$new_values>>2]|0;
  $106 = HEAP32[$0>>2]|0;
  $107 = (($106) + 28|0);
  HEAP32[$107>>2] = $105;
  $108 = HEAP32[$new_hashes>>2]|0;
  $109 = HEAP32[$0>>2]|0;
  $110 = (($109) + 24|0);
  HEAP32[$110>>2] = $108;
  $111 = HEAP32[$0>>2]|0;
  $112 = (($111) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = HEAP32[$0>>2]|0;
  $115 = (($114) + 16|0);
  HEAP32[$115>>2] = $113;
  STACKTOP = sp;return;
 }
 $93 = HEAP32[$0>>2]|0;
 $94 = (($93) + 28|0);
 $95 = HEAP32[$94>>2]|0;
 _g_free(($95|0));
 $96 = HEAP32[$0>>2]|0;
 $97 = (($96) + 20|0);
 $98 = HEAP32[$97>>2]|0;
 _g_free(($98|0));
 $99 = HEAP32[$0>>2]|0;
 $100 = (($99) + 24|0);
 $101 = HEAP32[$100>>2]|0;
 _g_free(($101|0));
 $102 = HEAP32[$new_keys>>2]|0;
 $103 = HEAP32[$0>>2]|0;
 $104 = (($103) + 20|0);
 HEAP32[$104>>2] = $102;
 $105 = HEAP32[$new_values>>2]|0;
 $106 = HEAP32[$0>>2]|0;
 $107 = (($106) + 28|0);
 HEAP32[$107>>2] = $105;
 $108 = HEAP32[$new_hashes>>2]|0;
 $109 = HEAP32[$0>>2]|0;
 $110 = (($109) + 24|0);
 HEAP32[$110>>2] = $108;
 $111 = HEAP32[$0>>2]|0;
 $112 = (($111) + 12|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = HEAP32[$0>>2]|0;
 $115 = (($114) + 16|0);
 HEAP32[$115>>2] = $113;
 STACKTOP = sp;return;
}
function _g_hash_table_set_shift_from_size($hash_table,$size) {
 $hash_table = $hash_table|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $shift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $shift = sp;
 HEAP32[$0>>2] = $hash_table;
 HEAP32[$1>>2] = $size;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_g_hash_table_find_closest_shift($2)|0);
 HEAP32[$shift>>2] = $3;
 $4 = HEAP32[$shift>>2]|0;
 $5 = ($4|0)>(3);
 $6 = HEAP32[$shift>>2]|0;
 $7 = $5 ? $6 : 3;
 HEAP32[$shift>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = HEAP32[$shift>>2]|0;
 _g_hash_table_set_shift($8,$9);
 STACKTOP = sp;return;
}
function _g_hash_table_find_closest_shift($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $n;
 HEAP32[$i>>2] = 0;
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)!=(0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = $3 >> 1;
  HEAP32[$0>>2] = $4;
  $5 = HEAP32[$i>>2]|0;
  $6 = (($5) + 1)|0;
  HEAP32[$i>>2] = $6;
 }
 $7 = HEAP32[$i>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _g_utf8_strlen($p,$max) {
 $p = $p|0;
 $max = $max|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $len = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $len = sp + 4|0;
 $start = sp;
 HEAP32[$1>>2] = $p;
 HEAP32[$2>>2] = $max;
 HEAP32[$len>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$start>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $6 = HEAP32[$2>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   _g_return_if_fail_warning((58688|0),(58696|0),(58712|0));
   HEAP32[$0>>2] = 0;
   $70 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($70|0);
  }
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ($8|0)<(0);
 L6: do {
  if ($9) {
   while(1) {
    $10 = HEAP32[$1>>2]|0;
    $11 = HEAP8[$10>>0]|0;
    $12 = ($11<<24>>24)!=(0);
    if (!($12)) {
     break L6;
    }
    $13 = HEAP32[$1>>2]|0;
    $14 = HEAP32[$1>>2]|0;
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = HEAP32[58680>>2]|0;
    $18 = (($17) + ($16)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 << 24 >> 24;
    $21 = (($13) + ($20)|0);
    HEAP32[$1>>2] = $21;
    $22 = HEAP32[$len>>2]|0;
    $23 = (($22) + 1)|0;
    HEAP32[$len>>2] = $23;
   }
  } else {
   $24 = HEAP32[$2>>2]|0;
   $25 = ($24|0)==(0);
   if (!($25)) {
    $26 = HEAP32[$1>>2]|0;
    $27 = HEAP8[$26>>0]|0;
    $28 = ($27<<24>>24)!=(0);
    if ($28) {
     $29 = HEAP32[$1>>2]|0;
     $30 = HEAP32[$1>>2]|0;
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = HEAP32[58680>>2]|0;
     $34 = (($33) + ($32)|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     $37 = (($29) + ($36)|0);
     HEAP32[$1>>2] = $37;
     while(1) {
      $38 = HEAP32[$1>>2]|0;
      $39 = HEAP32[$start>>2]|0;
      $40 = $38;
      $41 = $39;
      $42 = (($40) - ($41))|0;
      $43 = HEAP32[$2>>2]|0;
      $44 = ($42|0)<($43|0);
      if (!($44)) {
       break;
      }
      $45 = HEAP32[$1>>2]|0;
      $46 = HEAP8[$45>>0]|0;
      $47 = $46 << 24 >> 24;
      $48 = ($47|0)!=(0);
      if (!($48)) {
       break;
      }
      $49 = HEAP32[$len>>2]|0;
      $50 = (($49) + 1)|0;
      HEAP32[$len>>2] = $50;
      $51 = HEAP32[$1>>2]|0;
      $52 = HEAP32[$1>>2]|0;
      $53 = HEAP8[$52>>0]|0;
      $54 = $53&255;
      $55 = HEAP32[58680>>2]|0;
      $56 = (($55) + ($54)|0);
      $57 = HEAP8[$56>>0]|0;
      $58 = $57 << 24 >> 24;
      $59 = (($51) + ($58)|0);
      HEAP32[$1>>2] = $59;
     }
     $60 = HEAP32[$1>>2]|0;
     $61 = HEAP32[$start>>2]|0;
     $62 = $60;
     $63 = $61;
     $64 = (($62) - ($63))|0;
     $65 = HEAP32[$2>>2]|0;
     $66 = ($64|0)<=($65|0);
     if (!($66)) {
      break;
     }
     $67 = HEAP32[$len>>2]|0;
     $68 = (($67) + 1)|0;
     HEAP32[$len>>2] = $68;
     break;
    }
   }
   HEAP32[$0>>2] = 0;
   $70 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($70|0);
  }
 } while(0);
 $69 = HEAP32[$len>>2]|0;
 HEAP32[$0>>2] = $69;
 $70 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($70|0);
}
function _g_utf8_validate($str,$max_len,$end) {
 $str = $str|0;
 $max_len = $max_len|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $p = sp;
 HEAP32[$1>>2] = $str;
 HEAP32[$2>>2] = $max_len;
 HEAP32[$3>>2] = $end;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)<(0);
 $6 = HEAP32[$1>>2]|0;
 if ($5) {
  $7 = (_fast_validate($6)|0);
  HEAP32[$p>>2] = $7;
 } else {
  $8 = HEAP32[$2>>2]|0;
  $9 = (_fast_validate_len($6,$8)|0);
  HEAP32[$p>>2] = $9;
 }
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[$p>>2]|0;
  $13 = HEAP32[$3>>2]|0;
  HEAP32[$13>>2] = $12;
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = ($14|0)>=(0);
 if ($15) {
  $16 = HEAP32[$p>>2]|0;
  $17 = HEAP32[$1>>2]|0;
  $18 = HEAP32[$2>>2]|0;
  $19 = (($17) + ($18)|0);
  $20 = ($16|0)!=($19|0);
  if (!($20)) {
   label = 8;
  }
 } else {
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   $21 = HEAP32[$2>>2]|0;
   $22 = ($21|0)<(0);
   if ($22) {
    $23 = HEAP32[$p>>2]|0;
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)!=(0);
    if ($26) {
     break;
    }
   }
   HEAP32[$0>>2] = 1;
   $27 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($27|0);
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $27 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($27|0);
}
function _fast_validate($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $last = 0, $min = 0, $or$cond = 0, $p = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $val = sp + 12|0;
 $min = sp + 8|0;
 $p = sp + 4|0;
 $last = sp;
 HEAP32[$1>>2] = $str;
 HEAP32[$val>>2] = 0;
 HEAP32[$min>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$p>>2] = $2;
 L1: while(1) {
  $3 = HEAP32[$p>>2]|0;
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)!=(0);
  $6 = HEAP32[$p>>2]|0;
  if (!($5)) {
   label = 18;
   break;
  }
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)<(128);
  do {
   if (!($9)) {
    $10 = HEAP32[$p>>2]|0;
    HEAP32[$last>>2] = $10;
    $11 = HEAP32[$p>>2]|0;
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = $13 & 224;
    $15 = ($14|0)==(192);
    $16 = HEAP32[$p>>2]|0;
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    if ($15) {
     $19 = $18 & 30;
     $20 = ($19|0)==(0);
     if ($20) {
      label = 16;
      break L1;
     }
     $21 = HEAP32[$p>>2]|0;
     $22 = (($21) + 1|0);
     HEAP32[$p>>2] = $22;
     $23 = HEAP32[$p>>2]|0;
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = $25 & 192;
     $27 = ($26|0)!=(128);
     if ($27) {
      label = 16;
      break L1;
     } else {
      break;
     }
    }
    $28 = $18 & 240;
    $29 = ($28|0)==(224);
    if ($29) {
     HEAP32[$min>>2] = 2048;
     $30 = HEAP32[$p>>2]|0;
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $32 & 15;
     HEAP32[$val>>2] = $33;
    } else {
     $34 = HEAP32[$p>>2]|0;
     $35 = HEAP8[$34>>0]|0;
     $36 = $35&255;
     $37 = $36 & 248;
     $38 = ($37|0)==(240);
     if (!($38)) {
      label = 16;
      break L1;
     }
     HEAP32[$min>>2] = 65536;
     $39 = HEAP32[$p>>2]|0;
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = $41 & 7;
     HEAP32[$val>>2] = $42;
     $43 = HEAP32[$p>>2]|0;
     $44 = (($43) + 1|0);
     HEAP32[$p>>2] = $44;
     $45 = HEAP32[$p>>2]|0;
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = $47 & 192;
     $49 = ($48|0)!=(128);
     if ($49) {
      label = 16;
      break L1;
     }
     $50 = HEAP32[$val>>2]|0;
     $51 = $50 << 6;
     HEAP32[$val>>2] = $51;
     $52 = HEAP32[$p>>2]|0;
     $53 = HEAP8[$52>>0]|0;
     $54 = $53&255;
     $55 = $54 & 63;
     $56 = HEAP32[$val>>2]|0;
     $57 = $56 | $55;
     HEAP32[$val>>2] = $57;
    }
    $58 = HEAP32[$p>>2]|0;
    $59 = (($58) + 1|0);
    HEAP32[$p>>2] = $59;
    $60 = HEAP32[$p>>2]|0;
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = $62 & 192;
    $64 = ($63|0)!=(128);
    if ($64) {
     label = 16;
     break L1;
    }
    $65 = HEAP32[$val>>2]|0;
    $66 = $65 << 6;
    HEAP32[$val>>2] = $66;
    $67 = HEAP32[$p>>2]|0;
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = $69 & 63;
    $71 = HEAP32[$val>>2]|0;
    $72 = $71 | $70;
    HEAP32[$val>>2] = $72;
    $73 = HEAP32[$p>>2]|0;
    $74 = (($73) + 1|0);
    HEAP32[$p>>2] = $74;
    $75 = HEAP32[$p>>2]|0;
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = $77 & 192;
    $79 = ($78|0)!=(128);
    if ($79) {
     label = 16;
     break L1;
    }
    $80 = HEAP32[$val>>2]|0;
    $81 = $80 << 6;
    HEAP32[$val>>2] = $81;
    $82 = HEAP32[$p>>2]|0;
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = $84 & 63;
    $86 = HEAP32[$val>>2]|0;
    $87 = $86 | $85;
    HEAP32[$val>>2] = $87;
    $88 = HEAP32[$val>>2]|0;
    $89 = HEAP32[$min>>2]|0;
    $90 = ($88>>>0)>=($89>>>0);
    $91 = HEAP32[$val>>2]|0;
    $92 = ($91>>>0)<(1114112);
    $or$cond = $90 & $92;
    if (!($or$cond)) {
     label = 16;
     break L1;
    }
    $93 = HEAP32[$val>>2]|0;
    $94 = $93 & -2048;
    $95 = ($94|0)!=(55296);
    if (!($95)) {
     label = 16;
     break L1;
    }
   }
  } while(0);
  $97 = HEAP32[$p>>2]|0;
  $98 = (($97) + 1|0);
  HEAP32[$p>>2] = $98;
 }
 if ((label|0) == 16) {
  $96 = HEAP32[$last>>2]|0;
  HEAP32[$0>>2] = $96;
  $99 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 18) {
  HEAP32[$0>>2] = $6;
  $99 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($99|0);
 }
 return 0|0;
}
function _fast_validate_len($str,$max_len) {
 $str = $str|0;
 $max_len = $max_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $last = 0;
 var $min = 0, $or$cond = 0, $p = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $val = sp + 12|0;
 $min = sp + 8|0;
 $p = sp + 4|0;
 $last = sp;
 HEAP32[$1>>2] = $str;
 HEAP32[$2>>2] = $max_len;
 HEAP32[$val>>2] = 0;
 HEAP32[$min>>2] = 0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>=(0);
 if (!($4)) {
  _g_assertion_message_expr((58688|0),(58736|0),1528,(58744|0),(58768|0));
  // unreachable;
 }
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$p>>2] = $5;
 L4: while(1) {
  $6 = HEAP32[$p>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = $6;
  $9 = $7;
  $10 = (($8) - ($9))|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = ($10|0)<($11|0);
  if ($12) {
   $13 = HEAP32[$p>>2]|0;
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 << 24 >> 24;
   $16 = ($15|0)!=(0);
   $138 = $16;
  } else {
   $138 = 0;
  }
  $17 = HEAP32[$p>>2]|0;
  if (!($138)) {
   label = 25;
   break;
  }
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)<(128);
  do {
   if (!($20)) {
    $21 = HEAP32[$p>>2]|0;
    HEAP32[$last>>2] = $21;
    $22 = HEAP32[$p>>2]|0;
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = $24 & 224;
    $26 = ($25|0)==(192);
    if ($26) {
     $27 = HEAP32[$2>>2]|0;
     $28 = HEAP32[$p>>2]|0;
     $29 = HEAP32[$1>>2]|0;
     $30 = $28;
     $31 = $29;
     $32 = (($30) - ($31))|0;
     $33 = (($27) - ($32))|0;
     $34 = ($33|0)<(2);
     if ($34) {
      label = 23;
      break L4;
     }
     $35 = HEAP32[$p>>2]|0;
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = $37 & 30;
     $39 = ($38|0)==(0);
     if ($39) {
      label = 23;
      break L4;
     }
     $40 = HEAP32[$p>>2]|0;
     $41 = (($40) + 1|0);
     HEAP32[$p>>2] = $41;
     $42 = HEAP32[$p>>2]|0;
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $45 = $44 & 192;
     $46 = ($45|0)!=(128);
     if ($46) {
      label = 23;
      break L4;
     } else {
      break;
     }
    }
    $47 = HEAP32[$p>>2]|0;
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = $49 & 240;
    $51 = ($50|0)==(224);
    if ($51) {
     $52 = HEAP32[$2>>2]|0;
     $53 = HEAP32[$p>>2]|0;
     $54 = HEAP32[$1>>2]|0;
     $55 = $53;
     $56 = $54;
     $57 = (($55) - ($56))|0;
     $58 = (($52) - ($57))|0;
     $59 = ($58|0)<(3);
     if ($59) {
      label = 23;
      break L4;
     }
     HEAP32[$min>>2] = 2048;
     $60 = HEAP32[$p>>2]|0;
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = $62 & 15;
     HEAP32[$val>>2] = $63;
    } else {
     $64 = HEAP32[$p>>2]|0;
     $65 = HEAP8[$64>>0]|0;
     $66 = $65&255;
     $67 = $66 & 248;
     $68 = ($67|0)==(240);
     if (!($68)) {
      label = 23;
      break L4;
     }
     $69 = HEAP32[$2>>2]|0;
     $70 = HEAP32[$p>>2]|0;
     $71 = HEAP32[$1>>2]|0;
     $72 = $70;
     $73 = $71;
     $74 = (($72) - ($73))|0;
     $75 = (($69) - ($74))|0;
     $76 = ($75|0)<(4);
     if ($76) {
      label = 23;
      break L4;
     }
     HEAP32[$min>>2] = 65536;
     $77 = HEAP32[$p>>2]|0;
     $78 = HEAP8[$77>>0]|0;
     $79 = $78&255;
     $80 = $79 & 7;
     HEAP32[$val>>2] = $80;
     $81 = HEAP32[$p>>2]|0;
     $82 = (($81) + 1|0);
     HEAP32[$p>>2] = $82;
     $83 = HEAP32[$p>>2]|0;
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = $85 & 192;
     $87 = ($86|0)!=(128);
     if ($87) {
      label = 23;
      break L4;
     }
     $88 = HEAP32[$val>>2]|0;
     $89 = $88 << 6;
     HEAP32[$val>>2] = $89;
     $90 = HEAP32[$p>>2]|0;
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $93 = $92 & 63;
     $94 = HEAP32[$val>>2]|0;
     $95 = $94 | $93;
     HEAP32[$val>>2] = $95;
    }
    $96 = HEAP32[$p>>2]|0;
    $97 = (($96) + 1|0);
    HEAP32[$p>>2] = $97;
    $98 = HEAP32[$p>>2]|0;
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = $100 & 192;
    $102 = ($101|0)!=(128);
    if ($102) {
     label = 23;
     break L4;
    }
    $103 = HEAP32[$val>>2]|0;
    $104 = $103 << 6;
    HEAP32[$val>>2] = $104;
    $105 = HEAP32[$p>>2]|0;
    $106 = HEAP8[$105>>0]|0;
    $107 = $106&255;
    $108 = $107 & 63;
    $109 = HEAP32[$val>>2]|0;
    $110 = $109 | $108;
    HEAP32[$val>>2] = $110;
    $111 = HEAP32[$p>>2]|0;
    $112 = (($111) + 1|0);
    HEAP32[$p>>2] = $112;
    $113 = HEAP32[$p>>2]|0;
    $114 = HEAP8[$113>>0]|0;
    $115 = $114&255;
    $116 = $115 & 192;
    $117 = ($116|0)!=(128);
    if ($117) {
     label = 23;
     break L4;
    }
    $118 = HEAP32[$val>>2]|0;
    $119 = $118 << 6;
    HEAP32[$val>>2] = $119;
    $120 = HEAP32[$p>>2]|0;
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $123 = $122 & 63;
    $124 = HEAP32[$val>>2]|0;
    $125 = $124 | $123;
    HEAP32[$val>>2] = $125;
    $126 = HEAP32[$val>>2]|0;
    $127 = HEAP32[$min>>2]|0;
    $128 = ($126>>>0)>=($127>>>0);
    $129 = HEAP32[$val>>2]|0;
    $130 = ($129>>>0)<(1114112);
    $or$cond = $128 & $130;
    if (!($or$cond)) {
     label = 23;
     break L4;
    }
    $131 = HEAP32[$val>>2]|0;
    $132 = $131 & -2048;
    $133 = ($132|0)!=(55296);
    if (!($133)) {
     label = 23;
     break L4;
    }
   }
  } while(0);
  $135 = HEAP32[$p>>2]|0;
  $136 = (($135) + 1|0);
  HEAP32[$p>>2] = $136;
 }
 if ((label|0) == 23) {
  $134 = HEAP32[$last>>2]|0;
  HEAP32[$0>>2] = $134;
  $137 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($137|0);
 }
 else if ((label|0) == 25) {
  HEAP32[$0>>2] = $17;
  $137 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($137|0);
 }
 return 0|0;
}
function _allocator_get_magazine_threshold($allocator,$ix) {
 $allocator = $allocator|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk_size = 0, $contention_counter = 0, $threshold = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $chunk_size = sp + 8|0;
 $threshold = sp + 4|0;
 $contention_counter = sp;
 HEAP32[$0>>2] = $allocator;
 HEAP32[$1>>2] = $ix;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = $3<<3;
 HEAP32[$chunk_size>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$chunk_size>>2]|0;
 $9 = ($8*5)|0;
 $10 = ($9>>>0)>(160);
 if ($10) {
  $11 = HEAP32[$chunk_size>>2]|0;
  $12 = ($11*5)|0;
  $14 = $12;
 } else {
  $14 = 160;
 }
 $13 = (($7>>>0) / ($14>>>0))&-1;
 $15 = (4)>($13>>>0);
 if ($15) {
  $26 = 4;
 } else {
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$chunk_size>>2]|0;
  $20 = ($19*5)|0;
  $21 = ($20>>>0)>(160);
  if ($21) {
   $22 = HEAP32[$chunk_size>>2]|0;
   $23 = ($22*5)|0;
   $25 = $23;
  } else {
   $25 = 160;
  }
  $24 = (($18>>>0) / ($25>>>0))&-1;
  $26 = $24;
 }
 HEAP32[$threshold>>2] = $26;
 $27 = HEAP32[$1>>2]|0;
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($27<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$contention_counter>>2] = $32;
 $33 = HEAP32[$contention_counter>>2]|0;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $45 = HEAP32[$threshold>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 $35 = HEAP32[$contention_counter>>2]|0;
 $36 = $35<<6;
 $37 = HEAP32[$chunk_size>>2]|0;
 $38 = (($36>>>0) / ($37>>>0))&-1;
 HEAP32[$contention_counter>>2] = $38;
 $39 = HEAP32[$threshold>>2]|0;
 $40 = HEAP32[$contention_counter>>2]|0;
 $41 = ($39>>>0)>($40>>>0);
 $42 = HEAP32[$threshold>>2]|0;
 $43 = HEAP32[$contention_counter>>2]|0;
 $44 = $41 ? $42 : $43;
 HEAP32[$threshold>>2] = $44;
 $45 = HEAP32[$threshold>>2]|0;
 STACKTOP = sp;return ($45|0);
}
function _g_slice_alloc($mem_size) {
 $mem_size = $mem_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $acat = 0, $chunk_size = 0;
 var $ix = 0, $mem = 0, $tmem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $tmem = sp + 16|0;
 $chunk_size = sp + 12|0;
 $mem = sp + 8|0;
 $acat = sp + 4|0;
 $ix = sp;
 HEAP32[$0>>2] = $mem_size;
 $1 = (_thread_memory_from_self()|0);
 HEAP32[$tmem>>2] = $1;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 7)|0;
 $4 = $3 & -8;
 HEAP32[$chunk_size>>2] = $4;
 $5 = HEAP32[$chunk_size>>2]|0;
 $6 = (_allocator_categorize($5)|0);
 HEAP32[$acat>>2] = $6;
 $7 = HEAP32[$acat>>2]|0;
 $8 = ($7|0)==(1);
 do {
  if ($8) {
   $9 = HEAP32[$chunk_size>>2]|0;
   $10 = (($9>>>0) / 8)&-1;
   $11 = (($10) - 1)|0;
   HEAP32[$ix>>2] = $11;
   $12 = HEAP32[$tmem>>2]|0;
   $13 = HEAP32[$ix>>2]|0;
   $14 = (_thread_memory_magazine1_is_empty($12,$13)|0);
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = HEAP32[$tmem>>2]|0;
    $17 = HEAP32[$ix>>2]|0;
    _thread_memory_swap_magazines($16,$17);
    $18 = HEAP32[$tmem>>2]|0;
    $19 = HEAP32[$ix>>2]|0;
    $20 = (_thread_memory_magazine1_is_empty($18,$19)|0);
    $21 = ($20|0)!=(0);
    if ($21) {
     $22 = HEAP32[$tmem>>2]|0;
     $23 = HEAP32[$ix>>2]|0;
     _thread_memory_magazine1_reload($22,$23);
    }
   }
   $24 = HEAP32[$tmem>>2]|0;
   $25 = HEAP32[$ix>>2]|0;
   $26 = (_thread_memory_magazine1_alloc($24,$25)|0);
   HEAP32[$mem>>2] = $26;
  } else {
   $27 = HEAP32[$acat>>2]|0;
   $28 = ($27|0)==(2);
   if ($28) {
    _g_mutex_lock((((58840 + 60|0))|0));
    $29 = HEAP32[$chunk_size>>2]|0;
    $30 = (_slab_allocator_alloc_chunk($29)|0);
    HEAP32[$mem>>2] = $30;
    _g_mutex_unlock((((58840 + 60|0))|0));
    break;
   } else {
    $31 = HEAP32[$0>>2]|0;
    $32 = (_g_malloc(($31|0))|0);
    HEAP32[$mem>>2] = $32;
    break;
   }
  }
 } while(0);
 $33 = HEAP32[((58840 + 16|0))>>2]|0;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $37 = HEAP32[$mem>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 $35 = HEAP32[$mem>>2]|0;
 $36 = HEAP32[$0>>2]|0;
 _smc_notify_alloc($35,$36);
 $37 = HEAP32[$mem>>2]|0;
 STACKTOP = sp;return ($37|0);
}
function _thread_memory_from_self() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n_magazines = 0, $tmem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmem = sp + 4|0;
 $n_magazines = sp;
 $0 = (_g_private_get((59416|0))|0);
 HEAP32[$tmem>>2] = $0;
 $1 = HEAP32[$tmem>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $25 = HEAP32[$tmem>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 _g_mutex_lock((59432|0));
 $3 = HEAP32[58784>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _g_slice_init_nomessage();
 }
 _g_mutex_unlock((59432|0));
 $5 = HEAP32[((58840 + 4|0))>>2]|0;
 $6 = (($5) - 24)|0;
 $7 = (($6>>>0) / 8)&-1;
 $8 = (($7>>>0) / 8)&-1;
 $9 = (($8) - 1)|0;
 $10 = (($9) + 1)|0;
 HEAP32[$n_magazines>>2] = $10;
 $11 = HEAP32[$n_magazines>>2]|0;
 $12 = $11<<4;
 $13 = (8 + ($12))|0;
 $14 = (_g_malloc0(($13|0))|0);
 HEAP32[$tmem>>2] = $14;
 $15 = HEAP32[$tmem>>2]|0;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$tmem>>2]|0;
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$n_magazines>>2]|0;
 $19 = HEAP32[$tmem>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($18<<3)|0);
 $22 = HEAP32[$tmem>>2]|0;
 $23 = (($22) + 4|0);
 HEAP32[$23>>2] = $21;
 $24 = HEAP32[$tmem>>2]|0;
 _g_private_set((59416|0),($24|0));
 $25 = HEAP32[$tmem>>2]|0;
 STACKTOP = sp;return ($25|0);
}
function _allocator_categorize($aligned_chunk_size) {
 $aligned_chunk_size = $aligned_chunk_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $aligned_chunk_size;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[((58840 + 28|0))>>2]|0;
  $6 = ($4>>>0)<=($5>>>0);
  if ($6) {
   HEAP32[$0>>2] = 1;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $7 = HEAP32[((58840 + 8|0))>>2]|0;
   $8 = ($7|0)!=(0);
   if (!($8)) {
    $9 = HEAP32[$1>>2]|0;
    $10 = ($9|0)!=(0);
    if ($10) {
     $11 = HEAP32[$1>>2]|0;
     $12 = HEAP32[((58840 + 4|0))>>2]|0;
     $13 = (($12) - 24)|0;
     $14 = (($13>>>0) / 8)&-1;
     $15 = ($11>>>0)<=($14>>>0);
     if ($15) {
      $16 = HEAP32[((58840 + 12|0))>>2]|0;
      $17 = ($16|0)!=(0);
      if ($17) {
       HEAP32[$0>>2] = 2;
       break;
      } else {
       HEAP32[$0>>2] = 1;
       break;
      }
     }
    }
   }
   HEAP32[$0>>2] = 0;
  }
 } while(0);
 $18 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($18|0);
}
function _thread_memory_magazine1_is_empty($tmem,$ix) {
 $tmem = $tmem|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $tmem;
 HEAP32[$1>>2] = $ix;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<3)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 $8 = $7&1;
 STACKTOP = sp;return ($8|0);
}
function _thread_memory_swap_magazines($tmem,$ix) {
 $tmem = $tmem|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $xmag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $xmag = sp;
 HEAP32[$0>>2] = $tmem;
 HEAP32[$1>>2] = $ix;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<3)|0);
 ;HEAP32[$xmag+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$xmag+4>>2]=HEAP32[$5+4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<3)|0);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10<<3)|0);
 ;HEAP32[$9+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$9+4>>2]=HEAP32[$14+4>>2]|0;
 $15 = HEAP32[$1>>2]|0;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($15<<3)|0);
 ;HEAP32[$19+0>>2]=HEAP32[$xmag+0>>2]|0;HEAP32[$19+4>>2]=HEAP32[$xmag+4>>2]|0;
 STACKTOP = sp;return;
}
function _thread_memory_magazine1_reload($tmem,$ix) {
 $tmem = $tmem|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mag = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $mag = sp + 4|0;
 HEAP32[$0>>2] = $tmem;
 HEAP32[$1>>2] = $ix;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<3)|0);
 HEAP32[$mag>>2] = $5;
 $6 = HEAP32[$mag>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  HEAP32[$vararg_buffer>>2] = 59392;
  _mem_error(59104,$vararg_buffer);
 }
 $9 = HEAP32[$mag>>2]|0;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$mag>>2]|0;
 $13 = (($12) + 4|0);
 $14 = (_magazine_cache_pop_magazine($11,$13)|0);
 $15 = HEAP32[$mag>>2]|0;
 HEAP32[$15>>2] = $14;
 STACKTOP = sp;return;
}
function _thread_memory_magazine1_alloc($tmem,$ix) {
 $tmem = $tmem|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, $mag = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $mag = sp + 4|0;
 $chunk = sp;
 HEAP32[$0>>2] = $tmem;
 HEAP32[$1>>2] = $ix;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<3)|0);
 HEAP32[$mag>>2] = $5;
 $6 = HEAP32[$mag>>2]|0;
 $7 = (_magazine_chain_pop_head($6)|0);
 HEAP32[$chunk>>2] = $7;
 $8 = HEAP32[$mag>>2]|0;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10>>>0)>(0);
 if (!($11)) {
  $16 = HEAP32[$chunk>>2]|0;
  STACKTOP = sp;return ($16|0);
 }
 $12 = HEAP32[$mag>>2]|0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -1)|0;
 HEAP32[$13>>2] = $15;
 $16 = HEAP32[$chunk>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _slab_allocator_alloc_chunk($chunk_size) {
 $chunk_size = $chunk_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $chunk = sp + 4|0;
 $ix = sp;
 HEAP32[$0>>2] = $chunk_size;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1>>>0) / 8)&-1;
 $3 = (($2) - 1)|0;
 HEAP32[$ix>>2] = $3;
 $4 = HEAP32[$ix>>2]|0;
 $5 = HEAP32[((58840 + 68|0))>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = HEAP32[$ix>>2]|0;
  $10 = HEAP32[((58840 + 68|0))>>2]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $15 = HEAP32[$ix>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  _allocator_add_slab(58840,$15,$16);
 }
 $17 = HEAP32[$ix>>2]|0;
 $18 = HEAP32[((58840 + 68|0))>>2]|0;
 $19 = (($18) + ($17<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$chunk>>2] = $21;
 $22 = HEAP32[$chunk>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$ix>>2]|0;
 $25 = HEAP32[((58840 + 68|0))>>2]|0;
 $26 = (($25) + ($24<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$27>>2] = $23;
 $28 = HEAP32[$ix>>2]|0;
 $29 = HEAP32[((58840 + 68|0))>>2]|0;
 $30 = (($29) + ($28<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[$32>>2] = $34;
 $35 = HEAP32[$ix>>2]|0;
 $36 = HEAP32[((58840 + 68|0))>>2]|0;
 $37 = (($36) + ($35<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $50 = HEAP32[$chunk>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 $41 = HEAP32[$ix>>2]|0;
 $42 = HEAP32[((58840 + 68|0))>>2]|0;
 $43 = (($42) + ($41<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$ix>>2]|0;
 $48 = HEAP32[((58840 + 68|0))>>2]|0;
 $49 = (($48) + ($47<<2)|0);
 HEAP32[$49>>2] = $46;
 $50 = HEAP32[$chunk>>2]|0;
 STACKTOP = sp;return ($50|0);
}
function _smc_notify_alloc($pointer,$size) {
 $pointer = $pointer|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $adress = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $adress = sp;
 HEAP32[$0>>2] = $pointer;
 HEAP32[$1>>2] = $size;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2;
 HEAP32[$adress>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$adress>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 _smc_tree_insert($6,$7);
 STACKTOP = sp;return;
}
function _g_slice_free1($mem_size,$mem_block) {
 $mem_size = $mem_size|0;
 $mem_block = $mem_block|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $acat = 0, $chunk_size = 0, $ix = 0, $tmem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $chunk_size = sp + 12|0;
 $acat = sp + 8|0;
 $tmem = sp + 4|0;
 $ix = sp;
 HEAP32[$0>>2] = $mem_size;
 HEAP32[$1>>2] = $mem_block;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 7)|0;
 $4 = $3 & -8;
 HEAP32[$chunk_size>>2] = $4;
 $5 = HEAP32[$chunk_size>>2]|0;
 $6 = (_allocator_categorize($5)|0);
 HEAP32[$acat>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[((58840 + 16|0))>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = HEAP32[$1>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (_smc_notify_free($11,$12)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   _abort();
   // unreachable;
  }
 }
 $15 = HEAP32[$acat>>2]|0;
 $16 = ($15|0)==(1);
 if ($16) {
  $17 = (_thread_memory_from_self()|0);
  HEAP32[$tmem>>2] = $17;
  $18 = HEAP32[$chunk_size>>2]|0;
  $19 = (($18>>>0) / 8)&-1;
  $20 = (($19) - 1)|0;
  HEAP32[$ix>>2] = $20;
  $21 = HEAP32[$tmem>>2]|0;
  $22 = HEAP32[$ix>>2]|0;
  $23 = (_thread_memory_magazine2_is_full($21,$22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = HEAP32[$tmem>>2]|0;
   $26 = HEAP32[$ix>>2]|0;
   _thread_memory_swap_magazines($25,$26);
   $27 = HEAP32[$tmem>>2]|0;
   $28 = HEAP32[$ix>>2]|0;
   $29 = (_thread_memory_magazine2_is_full($27,$28)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = HEAP32[$tmem>>2]|0;
    $32 = HEAP32[$ix>>2]|0;
    _thread_memory_magazine2_unload($31,$32);
   }
  }
  $33 = HEAP32[_g_mem_gc_friendly>>2]|0;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = HEAP32[$1>>2]|0;
   $36 = HEAP32[$chunk_size>>2]|0;
   _memset(($35|0),0,($36|0))|0;
  }
  $37 = HEAP32[$tmem>>2]|0;
  $38 = HEAP32[$ix>>2]|0;
  $39 = HEAP32[$1>>2]|0;
  _thread_memory_magazine2_free($37,$38,$39);
  STACKTOP = sp;return;
 }
 $40 = HEAP32[$acat>>2]|0;
 $41 = ($40|0)==(2);
 $42 = HEAP32[_g_mem_gc_friendly>>2]|0;
 $43 = ($42|0)!=(0);
 if ($41) {
  if ($43) {
   $44 = HEAP32[$1>>2]|0;
   $45 = HEAP32[$chunk_size>>2]|0;
   _memset(($44|0),0,($45|0))|0;
  }
  _g_mutex_lock((((58840 + 60|0))|0));
  $46 = HEAP32[$chunk_size>>2]|0;
  $47 = HEAP32[$1>>2]|0;
  _slab_allocator_free_chunk($46,$47);
  _g_mutex_unlock((((58840 + 60|0))|0));
  STACKTOP = sp;return;
 } else {
  if ($43) {
   $48 = HEAP32[$1>>2]|0;
   $49 = HEAP32[$0>>2]|0;
   _memset(($48|0),0,($49|0))|0;
  }
  $50 = HEAP32[$1>>2]|0;
  _g_free(($50|0));
  STACKTOP = sp;return;
 }
}
function _smc_notify_free($pointer,$size) {
 $pointer = $pointer|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $adress = 0, $found_one = 0, $real_size = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $adress = sp + 20|0;
 $real_size = sp + 16|0;
 $found_one = sp + 12|0;
 HEAP32[$1>>2] = $pointer;
 HEAP32[$2>>2] = $size;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3;
 HEAP32[$adress>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  HEAP32[$0>>2] = 1;
  $31 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($31|0);
 }
 $7 = HEAP32[$adress>>2]|0;
 $8 = (_smc_tree_lookup($7,$real_size)|0);
 HEAP32[$found_one>>2] = $8;
 $9 = HEAP32[$found_one>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = HEAP32[_stderr>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $12;
  $vararg_ptr1 = (($vararg_buffer7) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  (_fprintf(($11|0),(58920|0),($vararg_buffer7|0))|0);
  HEAP32[$0>>2] = 0;
  $31 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($31|0);
 }
 $14 = HEAP32[$real_size>>2]|0;
 $15 = HEAP32[$2>>2]|0;
 $16 = ($14|0)!=($15|0);
 do {
  if ($16) {
   $17 = HEAP32[$real_size>>2]|0;
   $18 = ($17|0)!=(0);
   if (!($18)) {
    $19 = HEAP32[$2>>2]|0;
    $20 = ($19|0)!=(0);
    if (!($20)) {
     break;
    }
   }
   $21 = HEAP32[_stderr>>2]|0;
   $22 = HEAP32[$1>>2]|0;
   $23 = HEAP32[$real_size>>2]|0;
   $24 = HEAP32[$2>>2]|0;
   HEAP32[$vararg_buffer7>>2] = $22;
   $vararg_ptr5 = (($vararg_buffer7) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $23;
   $vararg_ptr6 = (($vararg_buffer7) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $24;
   (_fprintf(($21|0),(58992|0),($vararg_buffer7|0))|0);
   HEAP32[$0>>2] = 0;
   $31 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($31|0);
  }
 } while(0);
 $25 = HEAP32[$adress>>2]|0;
 $26 = (_smc_tree_remove($25)|0);
 $27 = ($26|0)!=(0);
 if ($27) {
  HEAP32[$0>>2] = 1;
  $31 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($31|0);
 } else {
  $28 = HEAP32[_stderr>>2]|0;
  $29 = HEAP32[$1>>2]|0;
  $30 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $29;
  $vararg_ptr10 = (($vararg_buffer7) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $30;
  (_fprintf(($28|0),(58920|0),($vararg_buffer7|0))|0);
  HEAP32[$0>>2] = 0;
  $31 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($31|0);
 }
 return 0|0;
}
function _thread_memory_magazine2_is_full($tmem,$ix) {
 $tmem = $tmem|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $tmem;
 HEAP32[$1>>2] = $ix;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<3)|0);
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = (_allocator_get_magazine_threshold(58840,$9)|0);
 $11 = ($8>>>0)>=($10>>>0);
 $12 = $11&1;
 STACKTOP = sp;return ($12|0);
}
function _thread_memory_magazine2_unload($tmem,$ix) {
 $tmem = $tmem|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $mag = sp;
 HEAP32[$0>>2] = $tmem;
 HEAP32[$1>>2] = $ix;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<3)|0);
 HEAP32[$mag>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$mag>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$mag>>2]|0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 _magazine_cache_push_magazine($7,$9,$12);
 $13 = HEAP32[$mag>>2]|0;
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$mag>>2]|0;
 $15 = (($14) + 4|0);
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return;
}
function _thread_memory_magazine2_free($tmem,$ix,$mem) {
 $tmem = $tmem|0;
 $ix = $ix|0;
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $chunk = 0, $mag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $mag = sp + 4|0;
 $chunk = sp;
 HEAP32[$0>>2] = $tmem;
 HEAP32[$1>>2] = $ix;
 HEAP32[$2>>2] = $mem;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3<<3)|0);
 HEAP32[$mag>>2] = $7;
 $8 = HEAP32[$2>>2]|0;
 HEAP32[$chunk>>2] = $8;
 $9 = HEAP32[$chunk>>2]|0;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = HEAP32[$mag>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$chunk>>2]|0;
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$chunk>>2]|0;
 $15 = HEAP32[$mag>>2]|0;
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$mag>>2]|0;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[$17>>2] = $19;
 STACKTOP = sp;return;
}
function _slab_allocator_free_chunk($chunk_size,$mem) {
 $chunk_size = $chunk_size|0;
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $addr = 0, $chunk = 0, $ix = 0, $next = 0, $next1 = 0, $page = 0, $page_size = 0, $prev = 0, $prev2 = 0, $sinfo = 0, $vararg_buffer = 0, $was_empty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $chunk = sp + 44|0;
 $was_empty = sp + 40|0;
 $ix = sp + 36|0;
 $page_size = sp + 32|0;
 $addr = sp + 28|0;
 $page = sp + 24|0;
 $sinfo = sp + 20|0;
 $next = sp + 16|0;
 $prev = sp + 12|0;
 $next1 = sp + 8|0;
 $prev2 = sp + 4|0;
 HEAP32[$0>>2] = $chunk_size;
 HEAP32[$1>>2] = $mem;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2>>>0) / 8)&-1;
 $4 = (($3) - 1)|0;
 HEAP32[$ix>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5<<3;
 $7 = (($6) + 24)|0;
 $8 = (_allocator_aligned_page_size(58840,$7)|0);
 HEAP32[$page_size>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = $9;
 $11 = HEAP32[$page_size>>2]|0;
 $12 = (($10>>>0) / ($11>>>0))&-1;
 $13 = HEAP32[$page_size>>2]|0;
 $14 = Math_imul($12, $13)|0;
 HEAP32[$addr>>2] = $14;
 $15 = HEAP32[$addr>>2]|0;
 $16 = $15;
 HEAP32[$page>>2] = $16;
 $17 = HEAP32[$page>>2]|0;
 $18 = HEAP32[$page_size>>2]|0;
 $19 = (($17) + ($18)|0);
 $20 = (($19) + -24|0);
 HEAP32[$sinfo>>2] = $20;
 $21 = HEAP32[$sinfo>>2]|0;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23>>>0)>(0);
 if (!($24)) {
  HEAP32[$vararg_buffer>>2] = 59272;
  _mem_error(59104,$vararg_buffer);
 }
 $25 = HEAP32[$sinfo>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 $28 = $27&1;
 HEAP32[$was_empty>>2] = $28;
 $29 = HEAP32[$1>>2]|0;
 HEAP32[$chunk>>2] = $29;
 $30 = HEAP32[$sinfo>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$chunk>>2]|0;
 HEAP32[$32>>2] = $31;
 $33 = HEAP32[$chunk>>2]|0;
 $34 = HEAP32[$sinfo>>2]|0;
 HEAP32[$34>>2] = $33;
 $35 = HEAP32[$sinfo>>2]|0;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + -1)|0;
 HEAP32[$36>>2] = $38;
 $39 = HEAP32[$was_empty>>2]|0;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = HEAP32[$sinfo>>2]|0;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$next>>2] = $43;
  $44 = HEAP32[$sinfo>>2]|0;
  $45 = (($44) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$prev>>2] = $46;
  $47 = HEAP32[$prev>>2]|0;
  $48 = HEAP32[$next>>2]|0;
  $49 = (($48) + 12|0);
  HEAP32[$49>>2] = $47;
  $50 = HEAP32[$next>>2]|0;
  $51 = HEAP32[$prev>>2]|0;
  $52 = (($51) + 8|0);
  HEAP32[$52>>2] = $50;
  $53 = HEAP32[$ix>>2]|0;
  $54 = HEAP32[((58840 + 68|0))>>2]|0;
  $55 = (($54) + ($53<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$sinfo>>2]|0;
  $58 = ($56|0)==($57|0);
  if ($58) {
   $59 = HEAP32[$next>>2]|0;
   $60 = HEAP32[$sinfo>>2]|0;
   $61 = ($59|0)==($60|0);
   $62 = HEAP32[$next>>2]|0;
   $63 = $61 ? 0 : $62;
   $64 = HEAP32[$ix>>2]|0;
   $65 = HEAP32[((58840 + 68|0))>>2]|0;
   $66 = (($65) + ($64<<2)|0);
   HEAP32[$66>>2] = $63;
  }
  $67 = HEAP32[$ix>>2]|0;
  $68 = HEAP32[$sinfo>>2]|0;
  _allocator_slab_stack_push(58840,$67,$68);
 }
 $69 = HEAP32[$sinfo>>2]|0;
 $70 = (($69) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)!=(0);
 if ($72) {
  STACKTOP = sp;return;
 }
 $73 = HEAP32[$sinfo>>2]|0;
 $74 = (($73) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$next1>>2] = $75;
 $76 = HEAP32[$sinfo>>2]|0;
 $77 = (($76) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 HEAP32[$prev2>>2] = $78;
 $79 = HEAP32[$prev2>>2]|0;
 $80 = HEAP32[$next1>>2]|0;
 $81 = (($80) + 12|0);
 HEAP32[$81>>2] = $79;
 $82 = HEAP32[$next1>>2]|0;
 $83 = HEAP32[$prev2>>2]|0;
 $84 = (($83) + 8|0);
 HEAP32[$84>>2] = $82;
 $85 = HEAP32[$ix>>2]|0;
 $86 = HEAP32[((58840 + 68|0))>>2]|0;
 $87 = (($86) + ($85<<2)|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$sinfo>>2]|0;
 $90 = ($88|0)==($89|0);
 if ($90) {
  $91 = HEAP32[$next1>>2]|0;
  $92 = HEAP32[$sinfo>>2]|0;
  $93 = ($91|0)==($92|0);
  $94 = HEAP32[$next1>>2]|0;
  $95 = $93 ? 0 : $94;
  $96 = HEAP32[$ix>>2]|0;
  $97 = HEAP32[((58840 + 68|0))>>2]|0;
  $98 = (($97) + ($96<<2)|0);
  HEAP32[$98>>2] = $95;
 }
 $99 = HEAP32[$page_size>>2]|0;
 $100 = HEAP32[$page>>2]|0;
 _allocator_memfree($99,$100);
 STACKTOP = sp;return;
}
function _smc_tree_lookup($key,$value_p) {
 $key = $key|0;
 $value_p = $value_p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, $found_one = 0, $ix0 = 0, $ix1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $entry = sp + 12|0;
 $ix0 = sp + 8|0;
 $ix1 = sp + 4|0;
 $found_one = sp;
 HEAP32[$0>>2] = $key;
 HEAP32[$1>>2] = $value_p;
 HEAP32[$entry>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2>>>0) / 1041929)&-1;
 $4 = (($3>>>0) % 4093)&-1;
 HEAP32[$ix0>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5>>>0) % 511)&-1;
 HEAP32[$ix1>>2] = $6;
 HEAP32[$found_one>>2] = 0;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$7>>2] = 0;
 _g_mutex_lock((59088|0));
 $8 = HEAP32[59096>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[$ix0>>2]|0;
  $11 = HEAP32[59096>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = HEAP32[$ix1>>2]|0;
   $16 = HEAP32[$ix0>>2]|0;
   $17 = HEAP32[59096>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($15<<3)|0);
   $21 = HEAP32[$0>>2]|0;
   $22 = (_smc_tree_branch_lookup_nearest_L($20,$21)|0);
   HEAP32[$entry>>2] = $22;
   $23 = HEAP32[$entry>>2]|0;
   $24 = ($23|0)!=(0|0);
   if ($24) {
    $25 = HEAP32[$entry>>2]|0;
    $26 = HEAP32[$ix1>>2]|0;
    $27 = HEAP32[$ix0>>2]|0;
    $28 = HEAP32[59096>>2]|0;
    $29 = (($28) + ($27<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + ($26<<3)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$ix1>>2]|0;
    $34 = HEAP32[$ix0>>2]|0;
    $35 = HEAP32[59096>>2]|0;
    $36 = (($35) + ($34<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($33<<3)|0);
    $39 = (($38) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($32) + ($40<<3)|0);
    $42 = ($25>>>0)<($41>>>0);
    if ($42) {
     $43 = HEAP32[$entry>>2]|0;
     $44 = HEAP32[$43>>2]|0;
     $45 = HEAP32[$0>>2]|0;
     $46 = ($44|0)==($45|0);
     if ($46) {
      HEAP32[$found_one>>2] = 1;
      $47 = HEAP32[$entry>>2]|0;
      $48 = (($47) + 4|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = HEAP32[$1>>2]|0;
      HEAP32[$50>>2] = $49;
     }
    }
   }
  }
 }
 _g_mutex_unlock((59088|0));
 $51 = HEAP32[$found_one>>2]|0;
 STACKTOP = sp;return ($51|0);
}
function _smc_tree_remove($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $entry = 0, $found_one = 0, $i = 0, $ix0 = 0, $ix1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $ix0 = sp + 16|0;
 $ix1 = sp + 12|0;
 $found_one = sp + 8|0;
 $entry = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $key;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1>>>0) / 1041929)&-1;
 $3 = (($2>>>0) % 4093)&-1;
 HEAP32[$ix0>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4>>>0) % 511)&-1;
 HEAP32[$ix1>>2] = $5;
 HEAP32[$found_one>>2] = 0;
 _g_mutex_lock((59088|0));
 $6 = HEAP32[59096>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  _g_mutex_unlock((59088|0));
  $102 = HEAP32[$found_one>>2]|0;
  STACKTOP = sp;return ($102|0);
 }
 $8 = HEAP32[$ix0>>2]|0;
 $9 = HEAP32[59096>>2]|0;
 $10 = (($9) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  _g_mutex_unlock((59088|0));
  $102 = HEAP32[$found_one>>2]|0;
  STACKTOP = sp;return ($102|0);
 }
 $13 = HEAP32[$ix1>>2]|0;
 $14 = HEAP32[$ix0>>2]|0;
 $15 = HEAP32[59096>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($13<<3)|0);
 $19 = HEAP32[$0>>2]|0;
 $20 = (_smc_tree_branch_lookup_nearest_L($18,$19)|0);
 HEAP32[$entry>>2] = $20;
 $21 = HEAP32[$entry>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  _g_mutex_unlock((59088|0));
  $102 = HEAP32[$found_one>>2]|0;
  STACKTOP = sp;return ($102|0);
 }
 $23 = HEAP32[$entry>>2]|0;
 $24 = HEAP32[$ix1>>2]|0;
 $25 = HEAP32[$ix0>>2]|0;
 $26 = HEAP32[59096>>2]|0;
 $27 = (($26) + ($25<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($24<<3)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$ix1>>2]|0;
 $32 = HEAP32[$ix0>>2]|0;
 $33 = HEAP32[59096>>2]|0;
 $34 = (($33) + ($32<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + ($31<<3)|0);
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($30) + ($38<<3)|0);
 $40 = ($23>>>0)<($39>>>0);
 if (!($40)) {
  _g_mutex_unlock((59088|0));
  $102 = HEAP32[$found_one>>2]|0;
  STACKTOP = sp;return ($102|0);
 }
 $41 = HEAP32[$entry>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$0>>2]|0;
 $44 = ($42|0)==($43|0);
 if (!($44)) {
  _g_mutex_unlock((59088|0));
  $102 = HEAP32[$found_one>>2]|0;
  STACKTOP = sp;return ($102|0);
 }
 $45 = HEAP32[$entry>>2]|0;
 $46 = HEAP32[$ix1>>2]|0;
 $47 = HEAP32[$ix0>>2]|0;
 $48 = HEAP32[59096>>2]|0;
 $49 = (($48) + ($47<<2)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + ($46<<3)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $45;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 8)&-1;
 HEAP32[$i>>2] = $56;
 $57 = HEAP32[$ix1>>2]|0;
 $58 = HEAP32[$ix0>>2]|0;
 $59 = HEAP32[59096>>2]|0;
 $60 = (($59) + ($58<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + ($57<<3)|0);
 $63 = (($62) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) - 1)|0;
 HEAP32[$63>>2] = $65;
 $66 = HEAP32[$entry>>2]|0;
 $67 = HEAP32[$entry>>2]|0;
 $68 = (($67) + 8|0);
 $69 = HEAP32[$ix1>>2]|0;
 $70 = HEAP32[$ix0>>2]|0;
 $71 = HEAP32[59096>>2]|0;
 $72 = (($71) + ($70<<2)|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73) + ($69<<3)|0);
 $75 = (($74) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP32[$i>>2]|0;
 $78 = (($76) - ($77))|0;
 $79 = $78<<3;
 _memmove(($66|0),($68|0),($79|0))|0;
 $80 = HEAP32[$ix1>>2]|0;
 $81 = HEAP32[$ix0>>2]|0;
 $82 = HEAP32[59096>>2]|0;
 $83 = (($82) + ($81<<2)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + ($80<<3)|0);
 $86 = (($85) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)!=(0);
 if (!($88)) {
  $89 = HEAP32[$ix1>>2]|0;
  $90 = HEAP32[$ix0>>2]|0;
  $91 = HEAP32[59096>>2]|0;
  $92 = (($91) + ($90<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + ($89<<3)|0);
  $95 = HEAP32[$94>>2]|0;
  _free($95);
  $96 = HEAP32[$ix1>>2]|0;
  $97 = HEAP32[$ix0>>2]|0;
  $98 = HEAP32[59096>>2]|0;
  $99 = (($98) + ($97<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + ($96<<3)|0);
  HEAP32[$101>>2] = 0;
 }
 HEAP32[$found_one>>2] = 1;
 _g_mutex_unlock((59088|0));
 $102 = HEAP32[$found_one>>2]|0;
 STACKTOP = sp;return ($102|0);
}
function _smc_tree_branch_lookup_nearest_L($branch,$key) {
 $branch = $branch|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $check = 0, $cmp = 0, $i = 0, $n_nodes = 0, $offs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $n_nodes = sp + 16|0;
 $offs = sp + 12|0;
 $check = sp + 8|0;
 $cmp = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $branch;
 HEAP32[$2>>2] = $key;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$n_nodes>>2] = $5;
 HEAP32[$offs>>2] = 0;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$check>>2] = $7;
 HEAP32[$cmp>>2] = 0;
 while(1) {
  $8 = HEAP32[$offs>>2]|0;
  $9 = HEAP32[$n_nodes>>2]|0;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   label = 10;
   break;
  }
  $11 = HEAP32[$offs>>2]|0;
  $12 = HEAP32[$n_nodes>>2]|0;
  $13 = (($11) + ($12))|0;
  $14 = $13 >>> 1;
  HEAP32[$i>>2] = $14;
  $15 = HEAP32[$1>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$i>>2]|0;
  $18 = (($16) + ($17<<3)|0);
  HEAP32[$check>>2] = $18;
  $19 = HEAP32[$2>>2]|0;
  $20 = HEAP32[$check>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($19>>>0)<($21>>>0);
  if ($22) {
   $28 = -1;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = HEAP32[$check>>2]|0;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)!=($25|0);
   $27 = $26&1;
   $28 = $27;
  }
  HEAP32[$cmp>>2] = $28;
  $29 = HEAP32[$cmp>>2]|0;
  $30 = ($29|0)==(0);
  if ($30) {
   label = 6;
   break;
  }
  $32 = HEAP32[$cmp>>2]|0;
  $33 = ($32|0)<(0);
  $34 = HEAP32[$i>>2]|0;
  if ($33) {
   HEAP32[$n_nodes>>2] = $34;
   continue;
  } else {
   $35 = (($34) + 1)|0;
   HEAP32[$offs>>2] = $35;
   continue;
  }
 }
 if ((label|0) == 6) {
  $31 = HEAP32[$check>>2]|0;
  HEAP32[$0>>2] = $31;
  $41 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 10) {
  $36 = HEAP32[$cmp>>2]|0;
  $37 = ($36|0)>(0);
  $38 = HEAP32[$check>>2]|0;
  $39 = (($38) + 8|0);
  $40 = $37 ? $39 : $38;
  HEAP32[$0>>2] = $40;
  $41 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 return 0|0;
}
function _smc_tree_insert($key,$value) {
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $entry = 0, $ix0 = 0, $ix1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $ix0 = sp + 8|0;
 $ix1 = sp + 4|0;
 $entry = sp;
 HEAP32[$0>>2] = $key;
 HEAP32[$1>>2] = $value;
 _g_mutex_lock((59088|0));
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2>>>0) / 1041929)&-1;
 $4 = (($3>>>0) % 4093)&-1;
 HEAP32[$ix0>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5>>>0) % 511)&-1;
 HEAP32[$ix1>>2] = $6;
 $7 = HEAP32[59096>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $9 = (_calloc(4093,4)|0);
  HEAP32[59096>>2] = $9;
  $10 = HEAP32[59096>>2]|0;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   $12 = (___errno_location()|0);
   $13 = HEAP32[$12>>2]|0;
   _smc_tree_abort($13);
  }
 }
 $14 = HEAP32[$ix0>>2]|0;
 $15 = HEAP32[59096>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $19 = (_calloc(511,8)|0);
  $20 = HEAP32[$ix0>>2]|0;
  $21 = HEAP32[59096>>2]|0;
  $22 = (($21) + ($20<<2)|0);
  HEAP32[$22>>2] = $19;
  $23 = HEAP32[$ix0>>2]|0;
  $24 = HEAP32[59096>>2]|0;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(0|0);
  if (!($27)) {
   $28 = (___errno_location()|0);
   $29 = HEAP32[$28>>2]|0;
   _smc_tree_abort($29);
  }
 }
 $30 = HEAP32[$ix1>>2]|0;
 $31 = HEAP32[$ix0>>2]|0;
 $32 = HEAP32[59096>>2]|0;
 $33 = (($32) + ($31<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($30<<3)|0);
 $36 = HEAP32[$0>>2]|0;
 $37 = (_smc_tree_branch_lookup_nearest_L($35,$36)|0);
 HEAP32[$entry>>2] = $37;
 $38 = HEAP32[$entry>>2]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = HEAP32[$entry>>2]|0;
  $41 = HEAP32[$ix1>>2]|0;
  $42 = HEAP32[$ix0>>2]|0;
  $43 = HEAP32[59096>>2]|0;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($41<<3)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$ix1>>2]|0;
  $49 = HEAP32[$ix0>>2]|0;
  $50 = HEAP32[59096>>2]|0;
  $51 = (($50) + ($49<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($48<<3)|0);
  $54 = (($53) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($47) + ($55<<3)|0);
  $57 = ($40>>>0)>=($56>>>0);
  if (!($57)) {
   $58 = HEAP32[$entry>>2]|0;
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$0>>2]|0;
   $61 = ($59|0)!=($60|0);
   if (!($61)) {
    $81 = HEAP32[$0>>2]|0;
    $82 = HEAP32[$entry>>2]|0;
    HEAP32[$82>>2] = $81;
    $83 = HEAP32[$1>>2]|0;
    $84 = HEAP32[$entry>>2]|0;
    $85 = (($84) + 4|0);
    HEAP32[$85>>2] = $83;
    _g_mutex_unlock((59088|0));
    STACKTOP = sp;return;
   }
  }
 }
 $62 = HEAP32[$ix1>>2]|0;
 $63 = HEAP32[$ix0>>2]|0;
 $64 = HEAP32[59096>>2]|0;
 $65 = (($64) + ($63<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + ($62<<3)|0);
 $68 = HEAP32[$entry>>2]|0;
 $69 = HEAP32[$ix1>>2]|0;
 $70 = HEAP32[$ix0>>2]|0;
 $71 = HEAP32[59096>>2]|0;
 $72 = (($71) + ($70<<2)|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73) + ($69<<3)|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $68;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 8)&-1;
 $80 = (_smc_tree_branch_grow_L($67,$79)|0);
 HEAP32[$entry>>2] = $80;
 $81 = HEAP32[$0>>2]|0;
 $82 = HEAP32[$entry>>2]|0;
 HEAP32[$82>>2] = $81;
 $83 = HEAP32[$1>>2]|0;
 $84 = HEAP32[$entry>>2]|0;
 $85 = (($84) + 4|0);
 HEAP32[$85>>2] = $83;
 _g_mutex_unlock((59088|0));
 STACKTOP = sp;return;
}
function _smc_tree_abort($errval) {
 $errval = $errval|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $syserr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 $syserr = sp + 4|0;
 HEAP32[$0>>2] = $errval;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strerror(($1|0))|0);
 HEAP32[$syserr>>2] = $2;
 $3 = HEAP32[$syserr>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 _mem_error(59224,$vararg_buffer);
 STACKTOP = sp;return;
}
function _smc_tree_branch_grow_L($branch,$index) {
 $branch = $branch|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $entry = 0, $new_size = 0, $old_size = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $old_size = sp + 12|0;
 $new_size = sp + 8|0;
 $entry = sp + 4|0;
 HEAP32[$0>>2] = $branch;
 HEAP32[$1>>2] = $index;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4<<3;
 HEAP32[$old_size>>2] = $5;
 $6 = HEAP32[$old_size>>2]|0;
 $7 = (($6) + 8)|0;
 HEAP32[$new_size>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)<=($11>>>0);
 if (!($12)) {
  HEAP32[$vararg_buffer>>2] = 59128;
  _mem_error(59104,$vararg_buffer);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$new_size>>2]|0;
 $16 = (_realloc($14,$15)|0);
 $17 = HEAP32[$0>>2]|0;
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$0>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $21 = (___errno_location()|0);
  $22 = HEAP32[$21>>2]|0;
  _smc_tree_abort($22);
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$1>>2]|0;
 $26 = (($24) + ($25<<3)|0);
 HEAP32[$entry>>2] = $26;
 $27 = HEAP32[$entry>>2]|0;
 $28 = (($27) + 8|0);
 $29 = HEAP32[$entry>>2]|0;
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$1>>2]|0;
 $34 = (($32) - ($33))|0;
 $35 = $34<<3;
 _memmove(($28|0),($29|0),($35|0))|0;
 $36 = HEAP32[$0>>2]|0;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 1)|0;
 HEAP32[$37>>2] = $39;
 $40 = HEAP32[$entry>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function _mem_error($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $pname = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 28|0;
 $pname = sp + 24|0;
 $args = sp + 8|0;
 HEAP32[$0>>2] = $format;
 $1 = HEAP32[_stderr>>2]|0;
 (_fputs((59160|0),($1|0))|0);
 $2 = (_g_get_prgname()|0);
 HEAP32[$pname>>2] = $2;
 $3 = HEAP32[_stderr>>2]|0;
 $4 = HEAP32[$pname>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = HEAP32[$pname>>2]|0;
 $7 = $5 ? $6 : 59208;
 $8 = (_getpid()|0);
 HEAP32[$vararg_buffer>>2] = $7;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 (_fprintf(($3|0),(59184|0),($vararg_buffer|0))|0);
 HEAP32[$args>>2] = $varargs;
 $9 = HEAP32[_stderr>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 (_vfprintf(($9|0),($10|0),($args|0))|0);
 $11 = HEAP32[_stderr>>2]|0;
 (_fputs((59216|0),($11|0))|0);
 _abort();
 // unreachable;
}
function _allocator_aligned_page_size($allocator,$n_bytes) {
 $allocator = $allocator|0;
 $n_bytes = $n_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $val = sp;
 HEAP32[$0>>2] = $allocator;
 HEAP32[$1>>2] = $n_bytes;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) - 1)|0;
 $4 = (_g_bit_storage($3)|0);
 $5 = 1 << $4;
 HEAP32[$val>>2] = $5;
 $6 = HEAP32[$val>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  $10 = HEAP32[$val>>2]|0;
  $13 = $10;
  HEAP32[$val>>2] = $13;
  $14 = HEAP32[$val>>2]|0;
  STACKTOP = sp;return ($14|0);
 } else {
  $11 = HEAP32[$0>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12;
  HEAP32[$val>>2] = $13;
  $14 = HEAP32[$val>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 return 0|0;
}
function _allocator_slab_stack_push($allocator,$ix,$sinfo) {
 $allocator = $allocator|0;
 $ix = $ix|0;
 $sinfo = $sinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $next = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $next = sp + 4|0;
 $prev = sp;
 HEAP32[$0>>2] = $allocator;
 HEAP32[$1>>2] = $ix;
 HEAP32[$2>>2] = $sinfo;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $16 = HEAP32[$1>>2]|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + 68|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$next>>2] = $21;
  $22 = HEAP32[$next>>2]|0;
  $23 = (($22) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$prev>>2] = $24;
  $25 = HEAP32[$2>>2]|0;
  $26 = HEAP32[$next>>2]|0;
  $27 = (($26) + 12|0);
  HEAP32[$27>>2] = $25;
  $28 = HEAP32[$2>>2]|0;
  $29 = HEAP32[$prev>>2]|0;
  $30 = (($29) + 8|0);
  HEAP32[$30>>2] = $28;
  $31 = HEAP32[$next>>2]|0;
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 8|0);
  HEAP32[$33>>2] = $31;
  $34 = HEAP32[$prev>>2]|0;
  $35 = HEAP32[$2>>2]|0;
  $36 = (($35) + 12|0);
  HEAP32[$36>>2] = $34;
  $37 = HEAP32[$2>>2]|0;
  $38 = HEAP32[$1>>2]|0;
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 68|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<2)|0);
  HEAP32[$42>>2] = $37;
  STACKTOP = sp;return;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = (($11) + 8|0);
  HEAP32[$12>>2] = $10;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) + 12|0);
  HEAP32[$15>>2] = $13;
  $37 = HEAP32[$2>>2]|0;
  $38 = HEAP32[$1>>2]|0;
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 68|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<2)|0);
  HEAP32[$42>>2] = $37;
  STACKTOP = sp;return;
 }
}
function _allocator_memfree($memsize,$mem) {
 $memsize = $memsize|0;
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $memsize;
 HEAP32[$1>>2] = $mem;
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 STACKTOP = sp;return;
}
function _g_bit_storage($number) {
 $number = $number|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $n_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $n_bits = sp;
 HEAP32[$0>>2] = $number;
 HEAP32[$n_bits>>2] = 0;
 while(1) {
  $1 = HEAP32[$n_bits>>2]|0;
  $2 = (($1) + 1)|0;
  HEAP32[$n_bits>>2] = $2;
  $3 = HEAP32[$0>>2]|0;
  $4 = $3 >>> 1;
  HEAP32[$0>>2] = $4;
  $5 = HEAP32[$0>>2]|0;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   break;
  }
 }
 $7 = HEAP32[$n_bits>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _allocator_add_slab($allocator,$ix,$chunk_size) {
 $allocator = $allocator|0;
 $ix = $ix|0;
 $chunk_size = $chunk_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $addr = 0, $aligned_memory = 0, $chunk = 0, $color = 0, $i = 0, $mem = 0, $n_chunks = 0, $padding = 0, $page_size = 0;
 var $sinfo = 0, $syserr = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer3 = sp;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $chunk = sp + 52|0;
 $sinfo = sp + 48|0;
 $addr = sp + 44|0;
 $padding = sp + 40|0;
 $n_chunks = sp + 36|0;
 $color = sp + 32|0;
 $page_size = sp + 28|0;
 $aligned_memory = sp + 24|0;
 $mem = sp + 20|0;
 $i = sp + 16|0;
 $syserr = sp + 12|0;
 HEAP32[$0>>2] = $allocator;
 HEAP32[$1>>2] = $ix;
 HEAP32[$2>>2] = $chunk_size;
 HEAP32[$color>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = $4<<3;
 $6 = (($5) + 24)|0;
 $7 = (_allocator_aligned_page_size($3,$6)|0);
 HEAP32[$page_size>>2] = $7;
 $8 = HEAP32[$page_size>>2]|0;
 $9 = HEAP32[$page_size>>2]|0;
 $10 = (($9) - 8)|0;
 $11 = (_allocator_memalign($8,$10)|0);
 HEAP32[$aligned_memory>>2] = $11;
 $12 = HEAP32[$aligned_memory>>2]|0;
 HEAP32[$mem>>2] = $12;
 $13 = HEAP32[$mem>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = (___errno_location()|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_strerror(($16|0))|0);
  HEAP32[$syserr>>2] = $17;
  $18 = HEAP32[$page_size>>2]|0;
  $19 = (($18) - 8)|0;
  $20 = HEAP32[$page_size>>2]|0;
  $21 = HEAP32[$syserr>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $19;
  $vararg_ptr1 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $20;
  $vararg_ptr2 = (($vararg_buffer3) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $21;
  _mem_error(59296,$vararg_buffer3);
 }
 $22 = HEAP32[$mem>>2]|0;
 $23 = $22;
 $24 = HEAP32[$page_size>>2]|0;
 $25 = (($23>>>0) / ($24>>>0))&-1;
 $26 = HEAP32[$page_size>>2]|0;
 $27 = Math_imul($25, $26)|0;
 HEAP32[$addr>>2] = $27;
 $28 = HEAP32[$aligned_memory>>2]|0;
 $29 = HEAP32[$addr>>2]|0;
 $30 = $29;
 $31 = ($28|0)==($30|0);
 if (!($31)) {
  HEAP32[$vararg_buffer3>>2] = 59352;
  _mem_error(59104,$vararg_buffer3);
 }
 $32 = HEAP32[$mem>>2]|0;
 $33 = HEAP32[$page_size>>2]|0;
 $34 = (($32) + ($33)|0);
 $35 = (($34) + -24|0);
 HEAP32[$sinfo>>2] = $35;
 $36 = HEAP32[$sinfo>>2]|0;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = HEAP32[$sinfo>>2]|0;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$sinfo>>2]|0;
 $40 = HEAP32[$mem>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = HEAP32[$2>>2]|0;
 $45 = (($43>>>0) / ($44>>>0))&-1;
 HEAP32[$n_chunks>>2] = $45;
 $46 = HEAP32[$sinfo>>2]|0;
 $47 = HEAP32[$mem>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = HEAP32[$n_chunks>>2]|0;
 $52 = HEAP32[$2>>2]|0;
 $53 = Math_imul($51, $52)|0;
 $54 = (($50) - ($53))|0;
 HEAP32[$padding>>2] = $54;
 $55 = HEAP32[$padding>>2]|0;
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = HEAP32[$0>>2]|0;
  $58 = (($57) + 72|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59<<3;
  $61 = HEAP32[$padding>>2]|0;
  $62 = (($60>>>0) % ($61>>>0))&-1;
  HEAP32[$color>>2] = $62;
  $63 = HEAP32[$0>>2]|0;
  $64 = (($63) + 8|0);
  $65 = (($64) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP32[$0>>2]|0;
  $68 = (($67) + 72|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + ($66))|0;
  HEAP32[$68>>2] = $70;
 }
 $71 = HEAP32[$mem>>2]|0;
 $72 = HEAP32[$color>>2]|0;
 $73 = (($71) + ($72)|0);
 HEAP32[$chunk>>2] = $73;
 $74 = HEAP32[$chunk>>2]|0;
 $75 = HEAP32[$sinfo>>2]|0;
 HEAP32[$75>>2] = $74;
 HEAP32[$i>>2] = 0;
 while(1) {
  $76 = HEAP32[$i>>2]|0;
  $77 = HEAP32[$n_chunks>>2]|0;
  $78 = (($77) - 1)|0;
  $79 = ($76>>>0)<($78>>>0);
  $80 = HEAP32[$chunk>>2]|0;
  if (!($79)) {
   break;
  }
  $81 = HEAP32[$2>>2]|0;
  $82 = (($80) + ($81)|0);
  $83 = HEAP32[$chunk>>2]|0;
  HEAP32[$83>>2] = $82;
  $84 = HEAP32[$chunk>>2]|0;
  $85 = HEAP32[$84>>2]|0;
  HEAP32[$chunk>>2] = $85;
  $86 = HEAP32[$i>>2]|0;
  $87 = (($86) + 1)|0;
  HEAP32[$i>>2] = $87;
 }
 HEAP32[$80>>2] = 0;
 $88 = HEAP32[$0>>2]|0;
 $89 = HEAP32[$1>>2]|0;
 $90 = HEAP32[$sinfo>>2]|0;
 _allocator_slab_stack_push($88,$89,$90);
 STACKTOP = sp;return;
}
function _allocator_memalign($alignment,$memsize) {
 $alignment = $alignment|0;
 $memsize = $memsize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aligned_memory = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $aligned_memory = sp + 4|0;
 $err = sp;
 HEAP32[$0>>2] = $alignment;
 HEAP32[$1>>2] = $memsize;
 HEAP32[$aligned_memory>>2] = 0;
 HEAP32[$err>>2] = 12;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_posix_memalign($aligned_memory,$2,$3)|0);
 HEAP32[$err>>2] = $4;
 $5 = HEAP32[$aligned_memory>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $9 = HEAP32[$aligned_memory>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 $7 = HEAP32[$err>>2]|0;
 $8 = (___errno_location()|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$aligned_memory>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function _magazine_cache_push_magazine($ix,$magazine_chunks,$count) {
 $ix = $ix|0;
 $magazine_chunks = $magazine_chunks|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current = 0, $next = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $current = sp + 8|0;
 $next = sp + 4|0;
 $prev = sp;
 HEAP32[$0>>2] = $ix;
 HEAP32[$1>>2] = $magazine_chunks;
 HEAP32[$2>>2] = $count;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_magazine_chain_prepare_fields($3)|0);
 HEAP32[$current>>2] = $4;
 _g_mutex_lock((((58840 + 32|0))|0));
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[((58840 + 40|0))>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$next>>2] = $8;
 $9 = HEAP32[$next>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = HEAP32[$next>>2]|0;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$prev>>2] = $13;
 } else {
  $14 = HEAP32[$current>>2]|0;
  HEAP32[$prev>>2] = $14;
  HEAP32[$next>>2] = $14;
 }
 $15 = HEAP32[$current>>2]|0;
 $16 = HEAP32[$prev>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 4|0);
 HEAP32[$19>>2] = $15;
 $20 = HEAP32[$current>>2]|0;
 $21 = HEAP32[$next>>2]|0;
 $22 = (($21) + 4|0);
 HEAP32[$22>>2] = $20;
 $23 = HEAP32[$prev>>2]|0;
 $24 = HEAP32[$current>>2]|0;
 $25 = (($24) + 4|0);
 HEAP32[$25>>2] = $23;
 $26 = HEAP32[$next>>2]|0;
 $27 = HEAP32[$current>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 4|0);
 HEAP32[$30>>2] = $26;
 $31 = HEAP32[$2>>2]|0;
 $32 = $31;
 $33 = HEAP32[$current>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = $32;
 _magazine_cache_update_stamp();
 $38 = HEAP32[((58840 + 56|0))>>2]|0;
 $39 = $38;
 $40 = HEAP32[$current>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 4|0);
 HEAP32[$42>>2] = $39;
 $43 = HEAP32[$current>>2]|0;
 $44 = HEAP32[$0>>2]|0;
 $45 = HEAP32[((58840 + 40|0))>>2]|0;
 $46 = (($45) + ($44<<2)|0);
 HEAP32[$46>>2] = $43;
 $47 = HEAP32[$0>>2]|0;
 $48 = HEAP32[((58840 + 56|0))>>2]|0;
 _magazine_cache_trim(58840,$47,$48);
 STACKTOP = sp;return;
}
function _magazine_chain_prepare_fields($magazine_chunks) {
 $magazine_chunks = $magazine_chunks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk1 = 0, $chunk2 = 0, $chunk3 = 0, $chunk4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $chunk1 = sp + 12|0;
 $chunk2 = sp + 8|0;
 $chunk3 = sp + 4|0;
 $chunk4 = sp;
 HEAP32[$0>>2] = $magazine_chunks;
 $1 = (_magazine_chain_pop_head($0)|0);
 HEAP32[$chunk1>>2] = $1;
 $2 = (_magazine_chain_pop_head($0)|0);
 HEAP32[$chunk2>>2] = $2;
 $3 = (_magazine_chain_pop_head($0)|0);
 HEAP32[$chunk3>>2] = $3;
 $4 = (_magazine_chain_pop_head($0)|0);
 HEAP32[$chunk4>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$chunk4>>2]|0;
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$chunk4>>2]|0;
 $8 = HEAP32[$chunk3>>2]|0;
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$chunk3>>2]|0;
 $10 = HEAP32[$chunk2>>2]|0;
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$chunk2>>2]|0;
 $12 = HEAP32[$chunk1>>2]|0;
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$chunk1>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _magazine_cache_update_stamp() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tv = sp;
 $0 = HEAP32[((58840 + 52|0))>>2]|0;
 $1 = ($0>>>0)>=(7);
 if ($1) {
  _g_get_current_time(($tv|0));
  $2 = HEAP32[$tv>>2]|0;
  $3 = ($2*1000)|0;
  $4 = (($tv) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5|0) / 1000)&-1;
  $7 = (($3) + ($6))|0;
  HEAP32[((58840 + 56|0))>>2] = $7;
  HEAP32[((58840 + 52|0))>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $8 = HEAP32[((58840 + 52|0))>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[((58840 + 52|0))>>2] = $9;
  STACKTOP = sp;return;
 }
}
function _magazine_cache_trim($allocator,$ix,$stamp) {
 $allocator = $allocator|0;
 $ix = $ix|0;
 $stamp = $stamp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $chunk = 0, $chunk_size = 0, $current = 0, $next = 0, $prev = 0, $trash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $current = sp + 20|0;
 $trash = sp + 16|0;
 $prev = sp + 12|0;
 $next = sp + 8|0;
 $chunk_size = sp + 4|0;
 $chunk = sp;
 HEAP32[$0>>2] = $allocator;
 HEAP32[$1>>2] = $ix;
 HEAP32[$2>>2] = $stamp;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$current>>2] = $10;
 HEAP32[$trash>>2] = 0;
 while(1) {
  $11 = HEAP32[$2>>2]|0;
  $12 = HEAP32[$current>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15;
  $17 = (($11) - ($16))|0;
  $18 = ($17>>>0)<(0);
  $19 = HEAP32[$2>>2]|0;
  $20 = HEAP32[$current>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
  $25 = (($19) - ($24))|0;
  $26 = (0 - ($25))|0;
  $27 = $18 ? $26 : $25;
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + 8|0);
  $30 = (($29) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($27>>>0)>=($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = HEAP32[$current>>2]|0;
  $34 = (($33) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$prev>>2] = $35;
  $36 = HEAP32[$current>>2]|0;
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$next>>2] = $40;
  $41 = HEAP32[$next>>2]|0;
  $42 = HEAP32[$prev>>2]|0;
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 4|0);
  HEAP32[$45>>2] = $41;
  $46 = HEAP32[$prev>>2]|0;
  $47 = HEAP32[$next>>2]|0;
  $48 = (($47) + 4|0);
  HEAP32[$48>>2] = $46;
  $49 = HEAP32[$current>>2]|0;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + 4|0);
  HEAP32[$52>>2] = 0;
  $53 = HEAP32[$current>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 4|0);
  HEAP32[$57>>2] = 0;
  $58 = HEAP32[$current>>2]|0;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 4|0);
  HEAP32[$60>>2] = 0;
  $61 = HEAP32[$trash>>2]|0;
  $62 = HEAP32[$current>>2]|0;
  $63 = (($62) + 4|0);
  HEAP32[$63>>2] = $61;
  $64 = HEAP32[$current>>2]|0;
  HEAP32[$trash>>2] = $64;
  $65 = HEAP32[$current>>2]|0;
  $66 = HEAP32[$1>>2]|0;
  $67 = HEAP32[$0>>2]|0;
  $68 = (($67) + 40|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + ($66<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($65|0)==($71|0);
  if ($72) {
   label = 4;
   break;
  }
  $78 = HEAP32[$prev>>2]|0;
  HEAP32[$current>>2] = $78;
 }
 if ((label|0) == 4) {
  $73 = HEAP32[$1>>2]|0;
  $74 = HEAP32[$0>>2]|0;
  $75 = (($74) + 40|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + ($73<<2)|0);
  HEAP32[$77>>2] = 0;
 }
 $79 = HEAP32[$0>>2]|0;
 $80 = (($79) + 32|0);
 _g_mutex_unlock(($80|0));
 $81 = HEAP32[$trash>>2]|0;
 $82 = ($81|0)!=(0|0);
 if (!($82)) {
  STACKTOP = sp;return;
 }
 $83 = HEAP32[$1>>2]|0;
 $84 = (($83) + 1)|0;
 $85 = $84<<3;
 HEAP32[$chunk_size>>2] = $85;
 $86 = HEAP32[$0>>2]|0;
 $87 = (($86) + 60|0);
 _g_mutex_lock(($87|0));
 L11: while(1) {
  $88 = HEAP32[$trash>>2]|0;
  $89 = ($88|0)!=(0|0);
  if (!($89)) {
   break;
  }
  $90 = HEAP32[$trash>>2]|0;
  HEAP32[$current>>2] = $90;
  $91 = HEAP32[$current>>2]|0;
  $92 = (($91) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  HEAP32[$trash>>2] = $93;
  $94 = HEAP32[$current>>2]|0;
  $95 = (($94) + 4|0);
  HEAP32[$95>>2] = 0;
  while(1) {
   $96 = HEAP32[$current>>2]|0;
   $97 = ($96|0)!=(0|0);
   if (!($97)) {
    continue L11;
   }
   $98 = (_magazine_chain_pop_head($current)|0);
   HEAP32[$chunk>>2] = $98;
   $99 = HEAP32[$chunk_size>>2]|0;
   $100 = HEAP32[$chunk>>2]|0;
   _slab_allocator_free_chunk($99,$100);
  }
 }
 $101 = HEAP32[$0>>2]|0;
 $102 = (($101) + 60|0);
 _g_mutex_unlock(($102|0));
 STACKTOP = sp;return;
}
function _magazine_chain_pop_head($magazine_chunks) {
 $magazine_chunks = $magazine_chunks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $chunk = sp;
 HEAP32[$0>>2] = $magazine_chunks;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$chunk>>2] = $4;
 $5 = HEAP32[$chunk>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$chunk>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 4|0);
  HEAP32[$11>>2] = $8;
  $17 = HEAP32[$chunk>>2]|0;
  STACKTOP = sp;return ($17|0);
 } else {
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$chunk>>2] = $13;
  $14 = HEAP32[$chunk>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  HEAP32[$16>>2] = $15;
  $17 = HEAP32[$chunk>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 return 0|0;
}
function _magazine_cache_pop_magazine($ix,$countp) {
 $ix = $ix|0;
 $countp = $countp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $chunk = 0, $chunk_size = 0, $current = 0, $head = 0, $i = 0, $magazine_threshold = 0, $next = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $magazine_threshold = sp + 28|0;
 $i = sp + 24|0;
 $chunk_size = sp + 20|0;
 $chunk = sp + 16|0;
 $head = sp + 12|0;
 $current = sp + 8|0;
 $prev = sp + 4|0;
 $next = sp;
 HEAP32[$1>>2] = $ix;
 HEAP32[$2>>2] = $countp;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[((58840 + 44|0))>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 _g_mutex_lock_a(((58840 + 32|0)),$5);
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[((58840 + 40|0))>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 $11 = HEAP32[$1>>2]|0;
 if ($10) {
  $37 = HEAP32[((58840 + 40|0))>>2]|0;
  $38 = (($37) + ($11<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$current>>2] = $39;
  $40 = HEAP32[$current>>2]|0;
  $41 = (($40) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$prev>>2] = $42;
  $43 = HEAP32[$current>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$next>>2] = $47;
  $48 = HEAP32[$next>>2]|0;
  $49 = HEAP32[$prev>>2]|0;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + 4|0);
  HEAP32[$52>>2] = $48;
  $53 = HEAP32[$prev>>2]|0;
  $54 = HEAP32[$next>>2]|0;
  $55 = (($54) + 4|0);
  HEAP32[$55>>2] = $53;
  $56 = HEAP32[$next>>2]|0;
  $57 = HEAP32[$current>>2]|0;
  $58 = ($56|0)==($57|0);
  $59 = HEAP32[$next>>2]|0;
  $60 = $58 ? 0 : $59;
  $61 = HEAP32[$1>>2]|0;
  $62 = HEAP32[((58840 + 40|0))>>2]|0;
  $63 = (($62) + ($61<<2)|0);
  HEAP32[$63>>2] = $60;
  _g_mutex_unlock((((58840 + 32|0))|0));
  $64 = HEAP32[$current>>2]|0;
  $65 = HEAP32[$64>>2]|0;
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $69;
  $71 = HEAP32[$2>>2]|0;
  HEAP32[$71>>2] = $70;
  $72 = HEAP32[$current>>2]|0;
  $73 = (($72) + 4|0);
  HEAP32[$73>>2] = 0;
  $74 = HEAP32[$current>>2]|0;
  $75 = HEAP32[$74>>2]|0;
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 4|0);
  HEAP32[$77>>2] = 0;
  $78 = HEAP32[$current>>2]|0;
  $79 = HEAP32[$78>>2]|0;
  $80 = HEAP32[$79>>2]|0;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + 4|0);
  HEAP32[$82>>2] = 0;
  $83 = HEAP32[$current>>2]|0;
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 4|0);
  HEAP32[$85>>2] = 0;
  $86 = HEAP32[$current>>2]|0;
  HEAP32[$0>>2] = $86;
  $87 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($87|0);
 }
 $12 = (_allocator_get_magazine_threshold(58840,$11)|0);
 HEAP32[$magazine_threshold>>2] = $12;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 1)|0;
 $15 = $14<<3;
 HEAP32[$chunk_size>>2] = $15;
 _g_mutex_unlock((((58840 + 32|0))|0));
 _g_mutex_lock((((58840 + 60|0))|0));
 $16 = HEAP32[$chunk_size>>2]|0;
 $17 = (_slab_allocator_alloc_chunk($16)|0);
 HEAP32[$head>>2] = $17;
 $18 = HEAP32[$head>>2]|0;
 $19 = (($18) + 4|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$head>>2]|0;
 HEAP32[$chunk>>2] = $20;
 HEAP32[$i>>2] = 1;
 while(1) {
  $21 = HEAP32[$i>>2]|0;
  $22 = HEAP32[$magazine_threshold>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = HEAP32[$chunk_size>>2]|0;
  $25 = (_slab_allocator_alloc_chunk($24)|0);
  $26 = HEAP32[$chunk>>2]|0;
  HEAP32[$26>>2] = $25;
  $27 = HEAP32[$chunk>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$chunk>>2] = $28;
  $29 = HEAP32[$chunk>>2]|0;
  $30 = (($29) + 4|0);
  HEAP32[$30>>2] = 0;
  $31 = HEAP32[$i>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$i>>2] = $32;
 }
 $33 = HEAP32[$chunk>>2]|0;
 HEAP32[$33>>2] = 0;
 _g_mutex_unlock((((58840 + 60|0))|0));
 $34 = HEAP32[$i>>2]|0;
 $35 = HEAP32[$2>>2]|0;
 HEAP32[$35>>2] = $34;
 $36 = HEAP32[$head>>2]|0;
 HEAP32[$0>>2] = $36;
 $87 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($87|0);
}
function _g_mutex_lock_a($mutex,$contention_counter) {
 $mutex = $mutex|0;
 $contention_counter = $contention_counter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $contention = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $contention = sp;
 HEAP32[$0>>2] = $mutex;
 HEAP32[$1>>2] = $contention_counter;
 HEAP32[$contention>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_g_mutex_trylock(($2|0))|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $5 = HEAP32[$0>>2]|0;
  _g_mutex_lock(($5|0));
  HEAP32[$contention>>2] = 1;
 }
 $6 = HEAP32[$contention>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = HEAP32[((58840 + 48|0))>>2]|0;
 if ($7) {
  $9 = (($8) + 1)|0;
  HEAP32[((58840 + 48|0))>>2] = $9;
  $10 = HEAP32[((58840 + 48|0))>>2]|0;
  $11 = ($10|0)>=(1);
  if (!($11)) {
   STACKTOP = sp;return;
  }
  HEAP32[((58840 + 48|0))>>2] = 0;
  $12 = HEAP32[$1>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  $15 = ($14>>>0)<(256);
  if ($15) {
   $16 = HEAP32[$1>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + 1)|0;
   $20 = $18;
  } else {
   $20 = 256;
  }
  $19 = HEAP32[$1>>2]|0;
  HEAP32[$19>>2] = $20;
  STACKTOP = sp;return;
 } else {
  $21 = (($8) + -1)|0;
  HEAP32[((58840 + 48|0))>>2] = $21;
  $22 = HEAP32[((58840 + 48|0))>>2]|0;
  $23 = ($22|0)<(-11);
  if (!($23)) {
   STACKTOP = sp;return;
  }
  HEAP32[((58840 + 48|0))>>2] = 0;
  $24 = HEAP32[$1>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25>>>0)>(1);
  if ($26) {
   $27 = HEAP32[$1>>2]|0;
   $28 = HEAP32[$27>>2]|0;
   $30 = $28;
  } else {
   $30 = 1;
  }
  $29 = (($30) - 1)|0;
  $31 = HEAP32[$1>>2]|0;
  HEAP32[$31>>2] = $29;
  STACKTOP = sp;return;
 }
}
function _g_slice_init_nomessage() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer5 = sp;
 $0 = HEAP32[58784>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  HEAP32[$vararg_buffer5>>2] = 58792;
  _mem_error(59104,$vararg_buffer5);
 }
 $2 = (_sysconf(30)|0);
 HEAP32[58784>>2] = $2;
 $3 = HEAP32[58784>>2]|0;
 $4 = ($3>>>0)>=(512);
 if (!($4)) {
  HEAP32[$vararg_buffer5>>2] = 59440;
  _mem_error(59104,$vararg_buffer5);
 }
 $5 = HEAP32[58784>>2]|0;
 $6 = HEAP32[58784>>2]|0;
 $7 = (($6) - 1)|0;
 $8 = $5 & $7;
 $9 = ($8|0)==(0);
 if (!($9)) {
  HEAP32[$vararg_buffer5>>2] = 59480;
  _mem_error(59104,$vararg_buffer5);
 }
 _slice_config_init(((58840 + 8|0)));
 $10 = HEAP32[58784>>2]|0;
 HEAP32[58840>>2] = $10;
 $11 = HEAP32[58840>>2]|0;
 $12 = ($11>>>0)>(4096);
 $13 = HEAP32[58840>>2]|0;
 $14 = $12 ? $13 : 4096;
 HEAP32[58840>>2] = $14;
 $15 = HEAP32[58840>>2]|0;
 $16 = ($15>>>0)>(8192);
 $17 = HEAP32[58840>>2]|0;
 $18 = $16 ? $17 : 8192;
 HEAP32[((58840 + 4|0))>>2] = $18;
 $19 = HEAP32[58840>>2]|0;
 $20 = ($19>>>0)<(128);
 $21 = HEAP32[58840>>2]|0;
 $22 = $20 ? $21 : 128;
 HEAP32[58840>>2] = $22;
 $23 = HEAP32[((58840 + 8|0))>>2]|0;
 $24 = ($23|0)!=(0);
 if ($24) {
  HEAP32[((58840 + 44|0))>>2] = 0;
  HEAP32[((58840 + 40|0))>>2] = 0;
  HEAP32[((58840 + 68|0))>>2] = 0;
 } else {
  $25 = HEAP32[((58840 + 4|0))>>2]|0;
  $26 = (($25) - 24)|0;
  $27 = (($26>>>0) / 8)&-1;
  $28 = (($27>>>0) / 8)&-1;
  $29 = (($28) - 1)|0;
  $30 = (($29) + 1)|0;
  $31 = (_g_malloc0_n(($30|0),4)|0);
  HEAP32[((58840 + 44|0))>>2] = $31;
  $32 = HEAP32[((58840 + 4|0))>>2]|0;
  $33 = (($32) - 24)|0;
  $34 = (($33>>>0) / 8)&-1;
  $35 = (($34>>>0) / 8)&-1;
  $36 = (($35) - 1)|0;
  $37 = (($36) + 1)|0;
  $38 = (_g_malloc0_n(($37|0),4)|0);
  HEAP32[((58840 + 40|0))>>2] = $38;
  $39 = HEAP32[((58840 + 4|0))>>2]|0;
  $40 = (($39) - 24)|0;
  $41 = (($40>>>0) / 8)&-1;
  $42 = (($41>>>0) / 8)&-1;
  $43 = (($42) - 1)|0;
  $44 = (($43) + 1)|0;
  $45 = (_g_malloc0_n(($44|0),4)|0);
  HEAP32[((58840 + 68|0))>>2] = $45;
 }
 HEAP32[((58840 + 48|0))>>2] = 0;
 HEAP32[((58840 + 52|0))>>2] = 7;
 HEAP32[((58840 + 56|0))>>2] = 0;
 HEAP32[((58840 + 72|0))>>2] = 0;
 _magazine_cache_update_stamp();
 $46 = HEAP32[((58840 + 4|0))>>2]|0;
 $47 = (($46) - 24)|0;
 $48 = (($47>>>0) / 8)&-1;
 HEAP32[((58840 + 28|0))>>2] = $48;
 $49 = HEAP32[((58840 + 8|0))>>2]|0;
 $50 = ($49|0)!=(0);
 $51 = HEAP32[((58840 + 12|0))>>2]|0;
 $52 = ($51|0)!=(0);
 $or$cond = $50 | $52;
 $$ = $or$cond ? 0 : $48;
 HEAP32[((58840 + 28|0))>>2] = $$;
 STACKTOP = sp;return;
}
function _slice_config_init($config) {
 $config = $config|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $val = sp + 4|0;
 $flags = sp;
 HEAP32[$0>>2] = $config;
 $1 = HEAP32[$0>>2]|0;
 ;HEAP32[$1+0>>2]=HEAP32[58816+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[58816+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[58816+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[58816+12>>2]|0;HEAP32[$1+16>>2]=HEAP32[58816+16>>2]|0;
 $2 = (_getenv((59528|0))|0);
 HEAP32[$val>>2] = $2;
 $3 = HEAP32[$val>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$val>>2]|0;
 $6 = (_g_parse_debug_string(($5|0),(59536|0),2)|0);
 HEAP32[$flags>>2] = $6;
 $7 = HEAP32[$flags>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  HEAP32[$10>>2] = 1;
 }
 $11 = HEAP32[$flags>>2]|0;
 $12 = $11 & 2;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 8|0);
 HEAP32[$15>>2] = 1;
 STACKTOP = sp;return;
}
function _private_thread_memory_cleanup($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, $chunk_size = 0, $ix = 0, $j = 0, $mag = 0, $mags = 0, $n_magazines = 0, $tmem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $tmem = sp + 32|0;
 $n_magazines = sp + 28|0;
 $ix = sp + 24|0;
 $mags = sp + 16|0;
 $j = sp + 12|0;
 $mag = sp + 8|0;
 $chunk_size = sp + 4|0;
 $chunk = sp;
 HEAP32[$0>>2] = $data;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$tmem>>2] = $1;
 $2 = HEAP32[((58840 + 4|0))>>2]|0;
 $3 = (($2) - 24)|0;
 $4 = (($3>>>0) / 8)&-1;
 $5 = (($4>>>0) / 8)&-1;
 $6 = (($5) - 1)|0;
 $7 = (($6) + 1)|0;
 HEAP32[$n_magazines>>2] = $7;
 HEAP32[$ix>>2] = 0;
 while(1) {
  $8 = HEAP32[$ix>>2]|0;
  $9 = HEAP32[$n_magazines>>2]|0;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$ix>>2]|0;
  $12 = HEAP32[$tmem>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11<<3)|0);
  HEAP32[$mags>>2] = $14;
  $15 = HEAP32[$ix>>2]|0;
  $16 = HEAP32[$tmem>>2]|0;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<3)|0);
  $20 = (($mags) + 4|0);
  HEAP32[$20>>2] = $19;
  HEAP32[$j>>2] = 0;
  while(1) {
   $21 = HEAP32[$j>>2]|0;
   $22 = ($21>>>0)<(2);
   if (!($22)) {
    break;
   }
   $23 = HEAP32[$j>>2]|0;
   $24 = (($mags) + ($23<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$mag>>2] = $25;
   $26 = HEAP32[$mag>>2]|0;
   $27 = (($26) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28>>>0)>=(4);
   $30 = HEAP32[$ix>>2]|0;
   if ($29) {
    $31 = HEAP32[$mag>>2]|0;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$mag>>2]|0;
    $34 = (($33) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    _magazine_cache_push_magazine($30,$32,$35);
   } else {
    $36 = (($30) + 1)|0;
    $37 = $36<<3;
    HEAP32[$chunk_size>>2] = $37;
    _g_mutex_lock((((58840 + 60|0))|0));
    while(1) {
     $38 = HEAP32[$mag>>2]|0;
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)!=(0|0);
     if (!($40)) {
      break;
     }
     $41 = HEAP32[$mag>>2]|0;
     $42 = (_magazine_chain_pop_head($41)|0);
     HEAP32[$chunk>>2] = $42;
     $43 = HEAP32[$chunk_size>>2]|0;
     $44 = HEAP32[$chunk>>2]|0;
     _slab_allocator_free_chunk($43,$44);
    }
    _g_mutex_unlock((((58840 + 60|0))|0));
   }
   $45 = HEAP32[$j>>2]|0;
   $46 = (($45) + 1)|0;
   HEAP32[$j>>2] = $46;
  }
  $47 = HEAP32[$ix>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$ix>>2] = $48;
 }
 $49 = HEAP32[$tmem>>2]|0;
 _g_free(($49|0));
 STACKTOP = sp;return;
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 59792 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (59584 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L19: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L19;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$4 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$lcssa18 = 0, $$matches$0 = 0, $$not = 0, $$pre = 0, $$pre$phi213Z2D = 0, $$pre193 = 0, $$pre206 = 0, $$pre207 = 0, $$pre208 = 0, $$pre209 = 0, $$pre210 = 0, $$pre211 = 0, $$pre212 = 0, $$size$0 = 0;
 var $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$027 = 0, $dest$0 = 0, $factor = 0;
 var $factor14 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph46 = 0, $i$0$ph46$lcssa = 0, $i$0$ph46$us53 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit3 = 0, $isdigit320 = 0, $isdigittmp = 0, $isdigittmp2 = 0, $isdigittmp219 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0116 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond5 = 0, $or$cond6 = 0, $p$0122 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$321 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0;
 var $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0121 = 0, $pos$1 = 0, $pos$2 = 0, $s$0114 = 0, $s$1$ph = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0115 = 0;
 var $wcs$1 = 0, $wcs$2$ph = 0, $wcs$2$ph146 = 0, $wcs$3 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $width$0$lcssa = 0, $width$022 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0116 = 0;$p$0122 = $fmt;$pos$0121 = 0;$s$0114 = 0;$wcs$0115 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0122>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L8: do {
     if ($43) {
      $44 = (($p$0122) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 37)) {
        break L8;
       } else if ((($45<<24>>24) == 42)) {
        $65 = (($p$0122) + 2|0);
        $dest$0 = 0;$p$2 = $65;
       } else {
        $66 = $45&255;
        $isdigittmp = (($66) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $67 = (($p$0122) + 2|0);
         $68 = HEAP8[$67>>0]|0;
         $69 = ($68<<24>>24)==(36);
         if ($69) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $70 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $71 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $72 = (($i$0$i) + -1)|0;
           if ($70) {
            $i$0$i = $72;
           } else {
            break;
           }
          }
          $73 = (($p$0122) + 3|0);
          $dest$0 = $71;$p$2 = $73;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $74 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $74;$p$2 = $44;
       }
      } while(0);
      $75 = HEAP8[$p$2>>0]|0;
      $76 = $75&255;
      $isdigittmp219 = (($76) + -48)|0;
      $isdigit320 = ($isdigittmp219>>>0)<(10);
      if ($isdigit320) {
       $80 = $76;$p$321 = $p$2;$width$022 = 0;
       while(1) {
        $77 = ($width$022*10)|0;
        $78 = (($77) + -48)|0;
        $79 = (($78) + ($80))|0;
        $81 = (($p$321) + 1|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = $82&255;
        $isdigittmp2 = (($83) + -48)|0;
        $isdigit3 = ($isdigittmp2>>>0)<(10);
        if ($isdigit3) {
         $80 = $83;$p$321 = $81;$width$022 = $79;
        } else {
         $$lcssa18 = $82;$p$3$lcssa = $81;$width$0$lcssa = $79;
         break;
        }
       }
      } else {
       $$lcssa18 = $75;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $84 = ($$lcssa18<<24>>24)==(109);
      if ($84) {
       $85 = ($dest$0|0)!=(0|0);
       $86 = $85&1;
       $87 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$87>>0]|0;
       $90 = $$pre;$alloc$0 = $86;$p$4 = $87;
      } else {
       $90 = $$lcssa18;$alloc$0 = 0;$p$4 = $p$3$lcssa;
      }
      $88 = (($p$4) + 1|0);
      $89 = $90&255;
      switch ($89|0) {
      case 104:  {
       $91 = HEAP8[$88>>0]|0;
       $92 = ($91<<24>>24)==(104);
       $93 = (($p$4) + 2|0);
       $$7 = $92 ? $93 : $88;
       $$8 = $92 ? -2 : -1;
       $p$5 = $$7;$size$0 = $$8;
       break;
      }
      case 108:  {
       $94 = HEAP8[$88>>0]|0;
       $95 = ($94<<24>>24)==(108);
       $96 = (($p$4) + 2|0);
       $$9 = $95 ? $96 : $88;
       $$10 = $95 ? 3 : 1;
       $p$5 = $$9;$size$0 = $$10;
       break;
      }
      case 106:  {
       $p$5 = $88;$size$0 = 3;
       break;
      }
      case 116: case 122:  {
       $p$5 = $88;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $88;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      default: {
       $alloc$1 = $alloc$0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
       label = 162;
       break L4;
      }
      }
      $97 = HEAP8[$p$5>>0]|0;
      $98 = $97&255;
      $99 = $98 & 47;
      $100 = ($99|0)==(3);
      $101 = $98 | 32;
      $$ = $100 ? $101 : $98;
      $$size$0 = $100 ? 1 : $size$0;
      if ((($$|0) == 99)) {
       $102 = ($width$0$lcssa|0)<(1);
       $$width$0 = $102 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0121;$width$1 = $$width$0;
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0121;$width$1 = $width$0$lcssa;
      } else if ((($$|0) == 110)) {
       $103 = ($pos$0121|0)<(0);
       $104 = $103 << 31 >> 31;
       $105 = ($dest$0|0)==(0|0);
       if ($105) {
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
       }
       switch ($$size$0|0) {
       case 3:  {
        $108 = $dest$0;
        $109 = $108;
        HEAP32[$109>>2] = $pos$0121;
        $110 = (($108) + 4)|0;
        $111 = $110;
        HEAP32[$111>>2] = $104;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case -1:  {
        $107 = $pos$0121&65535;
        HEAP16[$dest$0>>1] = $107;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0121;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case -2:  {
        $106 = $pos$0121&255;
        HEAP8[$dest$0>>0] = $106;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0121;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
       }
       }
      } else {
       ___shlim($f,0);
       while(1) {
        $112 = HEAP32[$3>>2]|0;
        $113 = HEAP32[$4>>2]|0;
        $114 = ($112>>>0)<($113>>>0);
        if ($114) {
         $115 = (($112) + 1|0);
         HEAP32[$3>>2] = $115;
         $116 = HEAP8[$112>>0]|0;
         $117 = $116&255;
         $119 = $117;
        } else {
         $118 = (___shgetc($f)|0);
         $119 = $118;
        }
        $120 = (_isspace($119)|0);
        $121 = ($120|0)==(0);
        if ($121) {
         break;
        }
       }
       $122 = HEAP32[$4>>2]|0;
       $123 = ($122|0)==(0|0);
       $$pre206 = HEAP32[$3>>2]|0;
       if ($123) {
        $127 = $$pre206;
       } else {
        $124 = (($$pre206) + -1|0);
        HEAP32[$3>>2] = $124;
        $127 = $124;
       }
       $125 = HEAP32[$5>>2]|0;
       $126 = HEAP32[$6>>2]|0;
       $128 = $127;
       $129 = $126;
       $130 = (($125) + ($pos$0121))|0;
       $131 = (($130) + ($128))|0;
       $132 = (($131) - ($129))|0;
       $pos$1 = $132;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $133 = HEAP32[$3>>2]|0;
      $134 = HEAP32[$4>>2]|0;
      $135 = ($133>>>0)<($134>>>0);
      if ($135) {
       $136 = (($133) + 1|0);
       HEAP32[$3>>2] = $136;
       $139 = $134;
      } else {
       $137 = (___shgetc($f)|0);
       $138 = ($137|0)<(0);
       if ($138) {
        $alloc$1 = $alloc$0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
        label = 162;
        break L4;
       }
       $$pre207 = HEAP32[$4>>2]|0;
       $139 = $$pre207;
      }
      $140 = ($139|0)==(0|0);
      if (!($140)) {
       $141 = HEAP32[$3>>2]|0;
       $142 = (($141) + -1|0);
       HEAP32[$3>>2] = $142;
      }
      L65: do {
       switch ($$|0) {
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $322 = (+___floatscan($f,$$size$0,0));
        $323 = HEAP32[$5>>2]|0;
        $324 = HEAP32[$3>>2]|0;
        $325 = HEAP32[$6>>2]|0;
        $326 = $324;
        $327 = $325;
        $328 = (($327) - ($326))|0;
        $329 = ($323|0)==($328|0);
        if ($329) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$0114;$wcs$7 = $wcs$0115;
         break L4;
        }
        $330 = ($dest$0|0)==(0|0);
        if ($330) {
         $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
        } else {
         if ((($$size$0|0) == 0)) {
          $331 = $322;
          HEAPF32[$dest$0>>2] = $331;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L65;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L65;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L65;
         } else {
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L65;
         }
        }
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       case 91: case 99: case 115:  {
        $143 = ($$|0)==(99);
        $144 = $$ & 239;
        $145 = ($144|0)==(99);
        L77: do {
         if ($145) {
          $146 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($146) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $147 = (($p$5) + 1|0);
          $148 = HEAP8[$147>>0]|0;
          $149 = ($148<<24>>24)==(94);
          $150 = (($p$5) + 2|0);
          $invert$0 = $149&1;
          $p$6 = $149 ? $150 : $147;
          $151 = $149&1;
          _memset(($scanset|0),($151|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $152 = HEAP8[$p$6>>0]|0;
          if ((($152<<24>>24) == 93)) {
           $156 = (($p$6) + 1|0);
           $157 = $invert$0 ^ 1;
           $158 = $157&255;
           HEAP8[$11>>0] = $158;
           $$pre$phi213Z2D = $158;$p$7$ph = $156;
          } else if ((($152<<24>>24) == 45)) {
           $153 = (($p$6) + 1|0);
           $154 = $invert$0 ^ 1;
           $155 = $154&255;
           HEAP8[$10>>0] = $155;
           $$pre$phi213Z2D = $155;$p$7$ph = $153;
          } else {
           $$pre211 = $invert$0 ^ 1;
           $$pre212 = $$pre211&255;
           $$pre$phi213Z2D = $$pre212;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $159 = HEAP8[$p$7>>0]|0;
           if ((($159<<24>>24) == 45)) {
            $160 = (($p$7) + 1|0);
            $161 = HEAP8[$160>>0]|0;
            if ((($161<<24>>24) == 93) | (($161<<24>>24) == 0)) {
             $172 = 45;$p$8 = $p$7;
            } else {
             $162 = (($p$7) + -1|0);
             $163 = HEAP8[$162>>0]|0;
             $164 = ($163&255)<($161&255);
             if ($164) {
              $165 = $163&255;
              $c$027 = $165;
              while(1) {
               $166 = (($c$027) + 1)|0;
               $167 = (($scanset) + ($166)|0);
               HEAP8[$167>>0] = $$pre$phi213Z2D;
               $168 = HEAP8[$160>>0]|0;
               $169 = $168&255;
               $170 = ($166|0)<($169|0);
               if ($170) {
                $c$027 = $166;
               } else {
                $172 = $168;$p$8 = $160;
                break;
               }
              }
             } else {
              $172 = $161;$p$8 = $160;
             }
            }
           } else if ((($159<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L77;
           } else if ((($159<<24>>24) == 0)) {
            $alloc$1 = $alloc$0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
            label = 162;
            break L4;
           } else {
            $172 = $159;$p$8 = $p$7;
           }
           $171 = $172&255;
           $173 = (($171) + 1)|0;
           $174 = (($scanset) + ($173)|0);
           HEAP8[$174>>0] = $$pre$phi213Z2D;
           $175 = (($p$8) + 1|0);
           $p$7 = $175;
          }
         }
        } while(0);
        $176 = (($width$1) + 1)|0;
        $$4 = $143 ? $176 : 31;
        $177 = ($$size$0|0)==(1);
        $178 = ($alloc$0|0)!=(0);
        L96: do {
         if ($177) {
          if ($178) {
           $179 = $$4 << 2;
           $180 = (_malloc($179)|0);
           $181 = ($180|0)==(0|0);
           if ($181) {
            $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $180;
            label = 162;
            break L4;
           } else {
            $wcs$1 = $180;
           }
          } else {
           $wcs$1 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$4;$wcs$2$ph = $wcs$1;
          L102: while(1) {
           $182 = ($wcs$2$ph|0)==(0|0);
           if ($182) {
            while(1) {
             $185 = HEAP32[$3>>2]|0;
             $196 = HEAP32[$4>>2]|0;
             $197 = ($185>>>0)<($196>>>0);
             if ($197) {
              $184 = (($185) + 1|0);
              HEAP32[$3>>2] = $184;
              $186 = HEAP8[$185>>0]|0;
              $187 = $186&255;
              $189 = $187;
             } else {
              $183 = (___shgetc($f)|0);
              $189 = $183;
             }
             $188 = (($189) + 1)|0;
             $190 = (($scanset) + ($188)|0);
             $191 = HEAP8[$190>>0]|0;
             $192 = ($191<<24>>24)==(0);
             if ($192) {
              $i$0$ph46$lcssa = $i$0$ph;$wcs$2$ph146 = 0;
              break L102;
             }
             $193 = $189&255;
             HEAP8[$0>>0] = $193;
             $194 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($194|0) == -2)) {
              continue;
             } else if ((($194|0) == -1)) {
              $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = 0;
              label = 162;
              break L4;
             }
             $195 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $178 & $195;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($178) {
             $i$0$ph46$us53 = $i$0$ph;
            } else {
             $i$0$ph46 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $200 = HEAP32[$3>>2]|0;
              $214 = HEAP32[$4>>2]|0;
              $215 = ($200>>>0)<($214>>>0);
              if ($215) {
               $199 = (($200) + 1|0);
               HEAP32[$3>>2] = $199;
               $201 = HEAP8[$200>>0]|0;
               $202 = $201&255;
               $204 = $202;
              } else {
               $198 = (___shgetc($f)|0);
               $204 = $198;
              }
              $203 = (($204) + 1)|0;
              $205 = (($scanset) + ($203)|0);
              $206 = HEAP8[$205>>0]|0;
              $207 = ($206<<24>>24)==(0);
              if ($207) {
               $i$0$ph46$lcssa = $i$0$ph46$us53;$wcs$2$ph146 = $wcs$2$ph;
               break L102;
              }
              $208 = $204&255;
              HEAP8[$0>>0] = $208;
              $209 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($209|0) == -1)) {
               $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $wcs$2$ph;
               label = 162;
               break L4;
              } else if (!((($209|0) == -2))) {
               break;
              }
             }
             $210 = HEAP32[$wc>>2]|0;
             $211 = (($i$0$ph46$us53) + 1)|0;
             $212 = (($wcs$2$ph) + ($i$0$ph46$us53<<2)|0);
             HEAP32[$212>>2] = $210;
             $213 = ($211|0)==($k$0$ph|0);
             if ($213) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph46$us53 = $211;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $233 = $factor | 1;
           $234 = $233 << 2;
           $235 = (_realloc($wcs$2$ph,$234)|0);
           $236 = ($235|0)==(0|0);
           if ($236) {
            $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $wcs$2$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $233;$wcs$2$ph = $235;
          }
          L126: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $216 = HEAP32[$3>>2]|0;
              $217 = HEAP32[$4>>2]|0;
              $218 = ($216>>>0)<($217>>>0);
              if ($218) {
               $219 = (($216) + 1|0);
               HEAP32[$3>>2] = $219;
               $220 = HEAP8[$216>>0]|0;
               $221 = $220&255;
               $224 = $221;
              } else {
               $222 = (___shgetc($f)|0);
               $224 = $222;
              }
              $223 = (($224) + 1)|0;
              $225 = (($scanset) + ($223)|0);
              $226 = HEAP8[$225>>0]|0;
              $227 = ($226<<24>>24)==(0);
              if ($227) {
               $i$0$ph46$lcssa = $i$0$ph46;$wcs$2$ph146 = $wcs$2$ph;
               break L126;
              }
              $228 = $224&255;
              HEAP8[$0>>0] = $228;
              $229 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($229|0) == -1)) {
               $alloc$1 = 0;$s$5 = 0;$wcs$6 = $wcs$2$ph;
               label = 162;
               break L4;
              } else if (!((($229|0) == -2))) {
               break;
              }
             }
             $230 = HEAP32[$wc>>2]|0;
             $231 = (($i$0$ph46) + 1)|0;
             $232 = (($wcs$2$ph) + ($i$0$ph46<<2)|0);
             HEAP32[$232>>2] = $230;
             $i$0$ph46 = $231;
             label = 98;
            }
           }
          } while(0);
          $237 = (_mbsinit($st)|0);
          $238 = ($237|0)==(0);
          if ($238) {
           $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $wcs$2$ph146;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph46$lcssa;$s$2 = 0;$wcs$3 = $wcs$2$ph146;
          }
         } else {
          if ($178) {
           $239 = (_malloc($$4)|0);
           $240 = ($239|0)==(0|0);
           if ($240) {
            $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$4;$s$1$ph = $239;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $241 = HEAP32[$3>>2]|0;
             $242 = HEAP32[$4>>2]|0;
             $243 = ($241>>>0)<($242>>>0);
             if ($243) {
              $244 = (($241) + 1|0);
              HEAP32[$3>>2] = $244;
              $245 = HEAP8[$241>>0]|0;
              $246 = $245&255;
              $249 = $246;
             } else {
              $247 = (___shgetc($f)|0);
              $249 = $247;
             }
             $248 = (($249) + 1)|0;
             $250 = (($scanset) + ($248)|0);
             $251 = HEAP8[$250>>0]|0;
             $252 = ($251<<24>>24)==(0);
             if ($252) {
              $i$4 = $i$2;$s$2 = $s$1$ph;$wcs$3 = 0;
              break L96;
             }
             $253 = $249&255;
             $254 = (($i$2) + 1)|0;
             $255 = (($s$1$ph) + ($i$2)|0);
             HEAP8[$255>>0] = $253;
             $256 = ($254|0)==($k$1$ph|0);
             if ($256) {
              break;
             } else {
              $i$2 = $254;
             }
            }
            $factor14 = $k$1$ph << 1;
            $257 = $factor14 | 1;
            $258 = (_realloc($s$1$ph,$257)|0);
            $259 = ($258|0)==(0|0);
            if ($259) {
             $alloc$1 = $alloc$0;$s$5 = $s$1$ph;$wcs$6 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $257;$s$1$ph = $258;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $260 = ($dest$0|0)==(0|0);
          if ($260) {
           $278 = $139;
           while(1) {
            $276 = HEAP32[$3>>2]|0;
            $277 = ($276>>>0)<($278>>>0);
            if ($277) {
             $279 = (($276) + 1|0);
             HEAP32[$3>>2] = $279;
             $280 = HEAP8[$276>>0]|0;
             $281 = $280&255;
             $284 = $281;
            } else {
             $282 = (___shgetc($f)|0);
             $284 = $282;
            }
            $283 = (($284) + 1)|0;
            $285 = (($scanset) + ($283)|0);
            $286 = HEAP8[$285>>0]|0;
            $287 = ($286<<24>>24)==(0);
            if ($287) {
             $i$4 = 0;$s$2 = 0;$wcs$3 = 0;
             break L96;
            }
            $$pre209 = HEAP32[$4>>2]|0;
            $278 = $$pre209;
           }
          } else {
           $263 = $139;$i$3 = 0;
           while(1) {
            $261 = HEAP32[$3>>2]|0;
            $262 = ($261>>>0)<($263>>>0);
            if ($262) {
             $264 = (($261) + 1|0);
             HEAP32[$3>>2] = $264;
             $265 = HEAP8[$261>>0]|0;
             $266 = $265&255;
             $269 = $266;
            } else {
             $267 = (___shgetc($f)|0);
             $269 = $267;
            }
            $268 = (($269) + 1)|0;
            $270 = (($scanset) + ($268)|0);
            $271 = HEAP8[$270>>0]|0;
            $272 = ($271<<24>>24)==(0);
            if ($272) {
             $i$4 = $i$3;$s$2 = $dest$0;$wcs$3 = 0;
             break L96;
            }
            $273 = $269&255;
            $274 = (($i$3) + 1)|0;
            $275 = (($dest$0) + ($i$3)|0);
            HEAP8[$275>>0] = $273;
            $$pre193 = HEAP32[$4>>2]|0;
            $263 = $$pre193;$i$3 = $274;
           }
          }
         }
        } while(0);
        $288 = HEAP32[$4>>2]|0;
        $289 = ($288|0)==(0|0);
        $$pre208 = HEAP32[$3>>2]|0;
        if ($289) {
         $293 = $$pre208;
        } else {
         $290 = (($$pre208) + -1|0);
         HEAP32[$3>>2] = $290;
         $293 = $290;
        }
        $291 = HEAP32[$5>>2]|0;
        $292 = HEAP32[$6>>2]|0;
        $294 = $293;
        $295 = $292;
        $296 = (($294) - ($295))|0;
        $297 = (($296) + ($291))|0;
        $298 = ($297|0)==(0);
        if ($298) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$2;$wcs$7 = $wcs$3;
         break L4;
        }
        $$not = $143 ^ 1;
        $299 = ($297|0)==($width$1|0);
        $or$cond5 = $299 | $$not;
        if (!($or$cond5)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$2;$wcs$7 = $wcs$3;
         break L4;
        }
        do {
         if ($178) {
          if ($177) {
           HEAP32[$dest$0>>2] = $wcs$3;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$2;
           break;
          }
         }
        } while(0);
        if ($143) {
         $p$10 = $p$9;$s$3 = $s$2;$wcs$4 = $wcs$3;
        } else {
         $300 = ($wcs$3|0)==(0|0);
         if (!($300)) {
          $301 = (($wcs$3) + ($i$4<<2)|0);
          HEAP32[$301>>2] = 0;
         }
         $302 = ($s$2|0)==(0|0);
         if ($302) {
          $p$10 = $p$9;$s$3 = 0;$wcs$4 = $wcs$3;
         } else {
          $303 = (($s$2) + ($i$4)|0);
          HEAP8[$303>>0] = 0;
          $p$10 = $p$9;$s$3 = $s$2;$wcs$4 = $wcs$3;
         }
        }
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       default: {
        $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
       }
       }
      } while(0);
      L184: do {
       if ((label|0) == 144) {
        label = 0;
        $304 = (___intscan($f,$base$0,0,-1,-1)|0);
        $305 = tempRet0;
        $306 = HEAP32[$5>>2]|0;
        $307 = HEAP32[$3>>2]|0;
        $308 = HEAP32[$6>>2]|0;
        $309 = $307;
        $310 = $308;
        $311 = (($310) - ($309))|0;
        $312 = ($306|0)==($311|0);
        if ($312) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$0114;$wcs$7 = $wcs$0115;
         break L4;
        }
        $313 = ($$|0)!=(112);
        $314 = ($dest$0|0)==(0|0);
        $or$cond6 = $313 | $314;
        if (!($or$cond6)) {
         $315 = $304;
         HEAP32[$dest$0>>2] = $315;
         $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
         break;
        }
        if ($314) {
         $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $316 = $304&255;
          HEAP8[$dest$0>>0] = $316;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L184;
          break;
         }
         case -1:  {
          $317 = $304&65535;
          HEAP16[$dest$0>>1] = $317;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L184;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L184;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L184;
          break;
         }
         case 3:  {
          $318 = $dest$0;
          $319 = $318;
          HEAP32[$319>>2] = $304;
          $320 = (($318) + 4)|0;
          $321 = $320;
          HEAP32[$321>>2] = $305;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L184;
          break;
         }
         default: {
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L184;
         }
         }
        }
       }
      } while(0);
      $332 = HEAP32[$5>>2]|0;
      $333 = HEAP32[$3>>2]|0;
      $334 = HEAP32[$6>>2]|0;
      $335 = $333;
      $336 = $334;
      $337 = (($332) + ($pos$1))|0;
      $338 = (($337) + ($335))|0;
      $339 = (($338) - ($336))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $340 = $not$&1;
      $matches$0$ = (($340) + ($matches$0116))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $339;$s$4 = $s$3;$wcs$5 = $wcs$4;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0122) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $57 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $57 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $58 = ($57|0)==($56|0);
    if (!($58)) {
     label = 19;
     break L4;
    }
    $64 = (($pos$0121) + 1)|0;
    $matches$1 = $matches$0116;$p$11 = $47;$pos$2 = $64;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
   } else {
    $p$1 = $p$0122;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre210 = HEAP32[$3>>2]|0;
    if ($32) {
     $36 = $$pre210;
    } else {
     $33 = (($$pre210) + -1|0);
     HEAP32[$3>>2] = $33;
     $36 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $37 = $36;
    $38 = $35;
    $39 = (($34) + ($pos$0121))|0;
    $40 = (($39) + ($37))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0116;$p$11 = $p$1;$pos$2 = $41;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
   }
  } while(0);
  $341 = (($p$11) + 1|0);
  $342 = HEAP8[$341>>0]|0;
  $343 = ($342<<24>>24)==(0);
  if ($343) {
   $matches$3 = $matches$1;
   label = 165;
   break;
  } else {
   $13 = $342;$matches$0116 = $matches$1;$p$0122 = $341;$pos$0121 = $pos$2;$s$0114 = $s$4;$wcs$0115 = $wcs$5;
  }
 }
 if ((label|0) == 165) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($57|0)<(0);
  if ($63) {
   $alloc$1 = 0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
   label = 162;
  } else {
   $matches$3 = $matches$0116;
   STACKTOP = sp;return ($matches$3|0);
  }
 }
 if ((label|0) == 162) {
  $344 = ($matches$0116|0)==(0);
  $345 = $344 << 31 >> 31;
  $$matches$0 = (($345) + ($matches$0116))|0;
  $alloc$2 = $alloc$1;$matches$2 = $$matches$0;$s$6 = $s$5;$wcs$7 = $wcs$6;
 }
 $346 = ($alloc$2|0)==(0);
 if ($346) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$6);
 _free($wcs$7);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 3;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$$i = 0, $$0$be$i = 0, $$0$be$i20 = 0, $$0$i50 = 0, $$01$be$i = 0, $$01$be$i19 = 0, $$01$i5$i = 0, $$012$i = 0, $$012$i16 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$i3469 = 0, $$02$i72 = 0, $$02$us$i = 0, $$02$us$i32 = 0, $$03$i = 0, $$03$i15 = 0, $$66 = 0, $$67 = 0;
 var $$lcssa75 = 0, $$lcssa76 = 0, $$pre = 0, $$pre$i = 0, $$pre$i22 = 0, $$pre$i28 = 0, $$pre$i9 = 0, $$sum = 0, $$sum$i = 0, $$sum$i18 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i31 = 0, $head$0$lcssa = 0, $head$077 = 0;
 var $head$1 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i24 = 0, $i$01$us$i = 0, $i$01$us$i30 = 0, $i$04$i = 0, $i$04$i14 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $pshift$0$lcssa = 0, $pshift$078 = 0, $pshift$1 = 0, $pshift$2 = 0, $sum = 0, $sum$i = 0, $sum$i17 = 0, $tmp$i = 0, $tmp$i26 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0;
 $tmp$i26 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = (($lp) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = ($width>>>0)>(256);
  $15 = $14 ? 256 : $width;
  $16 = ($15|0)==($width|0);
  $17 = $11;
  $19 = 1;$61 = 0;$head$077 = $base;$pshift$078 = 1;
  while(1) {
   $18 = $19 & 3;
   $20 = ($18|0)==(3);
   do {
    if ($20) {
     HEAP32[$ar$i>>2] = $head$077;
     $21 = ($pshift$078|0)>(1);
     L13: do {
      if ($21) {
       $$012$i = $pshift$078;$$03$i = $head$077;$27 = $head$077;$i$04$i = 1;
       while(1) {
        $22 = (($$03$i) + ($10)|0);
        $23 = (($$012$i) + -2)|0;
        $24 = (($lp) + ($23<<2)|0);
        $25 = HEAP32[$24>>2]|0;
        $sum$i = (($25) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $26 = (($$03$i) + ($$sum$i)|0);
        $28 = (FUNCTION_TABLE_iii[$cmp & 3]($27,$26)|0);
        $29 = ($28|0)>(-1);
        if ($29) {
         $30 = (FUNCTION_TABLE_iii[$cmp & 3]($27,$22)|0);
         $31 = ($30|0)>(-1);
         if ($31) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $32 = (FUNCTION_TABLE_iii[$cmp & 3]($26,$22)|0);
        $33 = ($32|0)>(-1);
        $34 = (($i$04$i) + 1)|0;
        $35 = (($ar$i) + ($i$04$i<<2)|0);
        if ($33) {
         HEAP32[$35>>2] = $26;
         $36 = (($$012$i) + -1)|0;
         $$0$be$i = $26;$$01$be$i = $36;
        } else {
         HEAP32[$35>>2] = $22;
         $$0$be$i = $22;$$01$be$i = $23;
        }
        $37 = ($$01$be$i|0)>(1);
        if (!($37)) {
         $i$0$lcssa$i = $34;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$27 = $$pre$i;$i$04$i = $34;
       }
       $38 = ($i$0$lcssa$i|0)<(2);
       if (!($38)) {
        $39 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$39>>2] = $tmp$i;
        if (!($13)) {
         $40 = ($i$0$lcssa$i|0)>(0);
         if ($40) {
          $$02$us$i = $width;$53 = $tmp$i;
         } else {
          $41 = HEAP32[$ar$i>>2]|0;
          _memcpy(($tmp$i|0),($41|0),($15|0))|0;
          if ($16) {
           break;
          } else {
           $$02$i72 = $width;$55 = $15;
          }
          while(1) {
           $54 = (($$02$i72) - ($55))|0;
           $56 = ($54>>>0)>(256);
           $57 = $56 ? 256 : $54;
           _memcpy(($tmp$i|0),($41|0),($57|0))|0;
           $58 = ($54|0)==($57|0);
           if ($58) {
            break L13;
           } else {
            $$02$i72 = $54;$55 = $57;
           }
          }
         }
         while(1) {
          $51 = ($$02$us$i>>>0)>(256);
          $43 = $51 ? 256 : $$02$us$i;
          $52 = HEAP32[$ar$i>>2]|0;
          _memcpy(($53|0),($52|0),($43|0))|0;
          $49 = $52;$i$01$us$i = 0;
          while(1) {
           $45 = (($ar$i) + ($i$01$us$i<<2)|0);
           $46 = (($i$01$us$i) + 1)|0;
           $47 = (($ar$i) + ($46<<2)|0);
           $48 = HEAP32[$47>>2]|0;
           _memcpy(($49|0),($48|0),($43|0))|0;
           $50 = (($49) + ($43)|0);
           HEAP32[$45>>2] = $50;
           $exitcond$i = ($46|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $49 = $48;$i$01$us$i = $46;
           }
          }
          $42 = ($$02$us$i|0)==($43|0);
          if ($42) {
           break L13;
          }
          $44 = (($$02$us$i) - ($43))|0;
          $$pre$i9 = HEAP32[$39>>2]|0;
          $$02$us$i = $44;$53 = $$pre$i9;
         }
        }
       }
      }
     } while(0);
     $59 = $19 >>> 2;
     $60 = $61 << 30;
     $62 = $59 | $60;
     $63 = $61 >>> 2;
     $64 = (($pshift$078) + 2)|0;
     $122 = $62;$182 = $63;$pshift$1 = $64;
    } else {
     $65 = (($pshift$078) + -1)|0;
     $66 = (($lp) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $head$077;
     $69 = (($17) - ($68))|0;
     $70 = ($67>>>0)<($69>>>0);
     L39: do {
      if ($70) {
       HEAP32[$ar$i>>2] = $head$077;
       $71 = ($pshift$078|0)>(1);
       if ($71) {
        $$012$i16 = $pshift$078;$$03$i15 = $head$077;$77 = $head$077;$i$04$i14 = 1;
        while(1) {
         $72 = (($$03$i15) + ($10)|0);
         $73 = (($$012$i16) + -2)|0;
         $74 = (($lp) + ($73<<2)|0);
         $75 = HEAP32[$74>>2]|0;
         $sum$i17 = (($75) + ($width))|0;
         $$sum$i18 = (0 - ($sum$i17))|0;
         $76 = (($$03$i15) + ($$sum$i18)|0);
         $78 = (FUNCTION_TABLE_iii[$cmp & 3]($77,$76)|0);
         $79 = ($78|0)>(-1);
         if ($79) {
          $80 = (FUNCTION_TABLE_iii[$cmp & 3]($77,$72)|0);
          $81 = ($80|0)>(-1);
          if ($81) {
           $i$0$lcssa$i24 = $i$04$i14;
           break;
          }
         }
         $82 = (FUNCTION_TABLE_iii[$cmp & 3]($76,$72)|0);
         $83 = ($82|0)>(-1);
         $84 = (($i$04$i14) + 1)|0;
         $85 = (($ar$i) + ($i$04$i14<<2)|0);
         if ($83) {
          HEAP32[$85>>2] = $76;
          $86 = (($$012$i16) + -1)|0;
          $$0$be$i20 = $76;$$01$be$i19 = $86;
         } else {
          HEAP32[$85>>2] = $72;
          $$0$be$i20 = $72;$$01$be$i19 = $73;
         }
         $87 = ($$01$be$i19|0)>(1);
         if (!($87)) {
          $i$0$lcssa$i24 = $84;
          break;
         }
         $$pre$i22 = HEAP32[$ar$i>>2]|0;
         $$012$i16 = $$01$be$i19;$$03$i15 = $$0$be$i20;$77 = $$pre$i22;$i$04$i14 = $84;
        }
        $88 = ($i$0$lcssa$i24|0)<(2);
        if (!($88)) {
         $89 = (($ar$i) + ($i$0$lcssa$i24<<2)|0);
         HEAP32[$89>>2] = $tmp$i26;
         if (!($13)) {
          $90 = ($i$0$lcssa$i24|0)>(0);
          if ($90) {
           $$02$us$i32 = $width;$103 = $tmp$i26;
          } else {
           $91 = HEAP32[$ar$i>>2]|0;
           _memcpy(($tmp$i26|0),($91|0),($15|0))|0;
           if ($16) {
            break;
           } else {
            $$02$i3469 = $width;$105 = $15;
           }
           while(1) {
            $104 = (($$02$i3469) - ($105))|0;
            $106 = ($104>>>0)>(256);
            $107 = $106 ? 256 : $104;
            _memcpy(($tmp$i26|0),($91|0),($107|0))|0;
            $108 = ($104|0)==($107|0);
            if ($108) {
             break L39;
            } else {
             $$02$i3469 = $104;$105 = $107;
            }
           }
          }
          while(1) {
           $101 = ($$02$us$i32>>>0)>(256);
           $93 = $101 ? 256 : $$02$us$i32;
           $102 = HEAP32[$ar$i>>2]|0;
           _memcpy(($103|0),($102|0),($93|0))|0;
           $99 = $102;$i$01$us$i30 = 0;
           while(1) {
            $95 = (($ar$i) + ($i$01$us$i30<<2)|0);
            $96 = (($i$01$us$i30) + 1)|0;
            $97 = (($ar$i) + ($96<<2)|0);
            $98 = HEAP32[$97>>2]|0;
            _memcpy(($99|0),($98|0),($93|0))|0;
            $100 = (($99) + ($93)|0);
            HEAP32[$95>>2] = $100;
            $exitcond$i31 = ($96|0)==($i$0$lcssa$i24|0);
            if ($exitcond$i31) {
             break;
            } else {
             $99 = $98;$i$01$us$i30 = $96;
            }
           }
           $92 = ($$02$us$i32|0)==($93|0);
           if ($92) {
            break L39;
           }
           $94 = (($$02$us$i32) - ($93))|0;
           $$pre$i28 = HEAP32[$89>>2]|0;
           $$02$us$i32 = $94;$103 = $$pre$i28;
          }
         }
        }
       }
      } else {
       _trinkle($head$077,$width,$cmp,$19,$61,$pshift$078,0,$lp);
      }
     } while(0);
     $109 = ($pshift$078|0)==(1);
     if ($109) {
      $110 = $61 << 1;
      $111 = $19 >>> 31;
      $112 = $111 | $110;
      $113 = $19 << 1;
      $122 = $113;$182 = $112;$pshift$1 = 0;
      break;
     } else {
      $114 = ($65>>>0)>(31);
      $115 = (($pshift$078) + -33)|0;
      $$ = $114 ? 0 : $19;
      $$66 = $114 ? $19 : $61;
      $$67 = $114 ? $115 : $65;
      $116 = $$66 << $$67;
      $117 = (32 - ($$67))|0;
      $118 = $$ >>> $117;
      $119 = $118 | $116;
      $120 = $$ << $$67;
      $122 = $120;$182 = $119;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $121 = $122 | 1;
   $123 = (($head$077) + ($width)|0);
   $124 = ($123>>>0)<($11>>>0);
   if ($124) {
    $19 = $121;$61 = $182;$head$077 = $123;$pshift$078 = $pshift$1;
   } else {
    $$lcssa75 = $182;$$lcssa76 = $121;$head$0$lcssa = $123;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa75 = 0;$$lcssa76 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa76,$$lcssa75,$pshift$0$lcssa,0,$lp);
 $126 = $$lcssa76;$128 = $$lcssa75;$head$1 = $head$0$lcssa;$pshift$2 = $pshift$0$lcssa;
 while(1) {
  $125 = ($pshift$2|0)==(1);
  if ($125) {
   $127 = ($126|0)==(1);
   if ($127) {
    $129 = ($128|0)==(0);
    if ($129) {
     break;
    } else {
     label = 52;
    }
   }
  } else {
   label = 52;
  }
  if ((label|0) == 52) {
   label = 0;
   $130 = ($pshift$2|0)<(2);
   if (!($130)) {
    $162 = $128 << 2;
    $163 = $126 >>> 30;
    $164 = $163 | $162;
    $165 = (($pshift$2) + -2)|0;
    $166 = $126 << 1;
    $167 = $166 & 2147483646;
    $168 = $163 << 31;
    $169 = $167 | $168;
    $170 = $169 ^ 3;
    $171 = $164 >>> 1;
    $172 = (($lp) + ($165<<2)|0);
    $173 = HEAP32[$172>>2]|0;
    $sum = (($173) + ($width))|0;
    $$sum2 = (0 - ($sum))|0;
    $174 = (($head$1) + ($$sum2)|0);
    $175 = (($pshift$2) + -1)|0;
    _trinkle($174,$width,$cmp,$170,$171,$175,1,$lp);
    $176 = $171 << 1;
    $177 = $163 & 1;
    $178 = $176 | $177;
    $179 = $170 << 1;
    $180 = $179 | 1;
    $181 = (($head$1) + ($10)|0);
    _trinkle($181,$width,$cmp,$180,$178,$165,1,$lp);
    $126 = $180;$128 = $178;$head$1 = $181;$pshift$2 = $165;
    continue;
   }
  }
  $131 = (($126) + -1)|0;
  $132 = ($131|0)==(0);
  if ($132) {
   $152 = 32;
   label = 62;
  } else {
   $133 = $131 & 1;
   $134 = ($133|0)==(0);
   if ($134) {
    $$02$i$i = $131;$nTrailingZeros$03$i$i = 0;
    while(1) {
     $135 = (($nTrailingZeros$03$i$i) + 1)|0;
     $136 = $$02$i$i >>> 1;
     $137 = $136 & 1;
     $138 = ($137|0)==(0);
     if ($138) {
      $$02$i$i = $136;$nTrailingZeros$03$i$i = $135;
     } else {
      break;
     }
    }
    $139 = ($135|0)==(0);
    if ($139) {
     label = 57;
    } else {
     $149 = $135;
    }
   } else {
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $140 = ($128|0)==(0);
    if ($140) {
     $$01$i5$i = 32;
    } else {
     $141 = $128 & 1;
     $142 = ($141|0)==(0);
     if ($142) {
      $$02$i3$i = $128;$nTrailingZeros$03$i2$i = 0;
      while(1) {
       $143 = (($nTrailingZeros$03$i2$i) + 1)|0;
       $144 = $$02$i3$i >>> 1;
       $145 = $144 & 1;
       $146 = ($145|0)==(0);
       if ($146) {
        $$02$i3$i = $144;$nTrailingZeros$03$i2$i = $143;
       } else {
        $$01$i5$i = $143;
        break;
       }
      }
     } else {
      $$01$i5$i = 0;
     }
    }
    $147 = (($$01$i5$i) + 32)|0;
    $148 = ($$01$i5$i|0)==(0);
    $$$i = $148 ? 0 : $147;
    $149 = $$$i;
   }
   $150 = ($149>>>0)>(31);
   if ($150) {
    $152 = $149;
    label = 62;
   } else {
    $$0$i50 = $149;$154 = $126;$157 = $128;$161 = $149;
   }
  }
  if ((label|0) == 62) {
   label = 0;
   $151 = (($152) + -32)|0;
   $$0$i50 = $151;$154 = $128;$157 = 0;$161 = $152;
  }
  $153 = $154 >>> $$0$i50;
  $155 = (32 - ($$0$i50))|0;
  $156 = $157 << $155;
  $158 = $156 | $153;
  $159 = $157 >>> $$0$i50;
  $160 = (($161) + ($pshift$2))|0;
  $$pre = (($head$1) + ($10)|0);
  $126 = $158;$128 = $159;$head$1 = $$pre;$pshift$2 = $160;
 }
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$$i = 0, $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa26 = 0, $$01$be$i = 0, $$01$i5$i = 0, $$01$lcssa = 0, $$01$lcssa28 = 0, $$0110 = 0, $$012 = 0, $$012$i = 0, $$02$i$i = 0, $$02$i146 = 0, $$02$i3 = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$us$i = 0, $$02$us$i12 = 0, $$029 = 0;
 var $$03$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i3 = 0, $$pre$i8 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i11 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0;
 var $i$0$lcssa27 = 0, $i$01$us$i = 0, $i$01$us$i10 = 0, $i$011 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $or$cond1 = 0, $or$cond18 = 0, $sum = 0, $sum$i = 0, $tmp$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0;
 $tmp$i6 = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)==(1);
 $2 = ($pp$1$val|0)==(0);
 $or$cond18 = $1 & $2;
 L1: do {
  if ($or$cond18) {
   $$0$lcssa = $head;$$01$lcssa = $pshift;$$02$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  } else {
   $$0110 = $pshift;$$012 = $head;$$029 = $trusty;$24 = $pp$val;$33 = $pp$1$val;$7 = $head;$i$011 = 1;
   while(1) {
    $3 = (($lp) + ($$0110<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (0 - ($4))|0;
    $6 = (($$012) + ($5)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 3]($6,$7)|0);
    $9 = ($8|0)<(1);
    if ($9) {
     $$0$lcssa = $$012;$$01$lcssa = $$0110;$$02$lcssa = $$029;$i$0$lcssa = $i$011;
     label = 18;
     break L1;
    }
    $10 = ($$029|0)==(0);
    $11 = ($$0110|0)>(1);
    $or$cond = $10 & $11;
    if ($or$cond) {
     $12 = (($$012) + ($0)|0);
     $13 = (($$0110) + -2)|0;
     $14 = (($lp) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_iii[$cmp & 3]($12,$6)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
     $sum = (($15) + ($width))|0;
     $$sum = (0 - ($sum))|0;
     $18 = (($$012) + ($$sum)|0);
     $19 = (FUNCTION_TABLE_iii[$cmp & 3]($18,$6)|0);
     $20 = ($19|0)>(-1);
     if ($20) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
    }
    $21 = (($i$011) + 1)|0;
    $22 = (($ar) + ($i$011<<2)|0);
    HEAP32[$22>>2] = $6;
    $23 = (($24) + -1)|0;
    $25 = ($23|0)==(0);
    if ($25) {
     $46 = 32;
     label = 15;
    } else {
     $26 = $23 & 1;
     $27 = ($26|0)==(0);
     if ($27) {
      $$02$i$i = $23;$nTrailingZeros$03$i$i = 0;
      while(1) {
       $28 = (($nTrailingZeros$03$i$i) + 1)|0;
       $29 = $$02$i$i >>> 1;
       $30 = $29 & 1;
       $31 = ($30|0)==(0);
       if ($31) {
        $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
       } else {
        break;
       }
      }
      $32 = ($28|0)==(0);
      if ($32) {
       label = 10;
      } else {
       $43 = $28;
      }
     } else {
      label = 10;
     }
     if ((label|0) == 10) {
      label = 0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$01$i5$i = 32;
      } else {
       $35 = $33 & 1;
       $36 = ($35|0)==(0);
       if ($36) {
        $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$01$i5$i = $37;
          break;
         }
        }
       } else {
        $$01$i5$i = 0;
       }
      }
      $41 = (($$01$i5$i) + 32)|0;
      $42 = ($$01$i5$i|0)==(0);
      $$$i = $42 ? 0 : $41;
      $43 = $$$i;
     }
     $44 = ($43>>>0)>(31);
     if ($44) {
      $46 = $43;
      label = 15;
     } else {
      $$0$i = $43;$48 = $24;$51 = $33;$55 = $43;
     }
    }
    if ((label|0) == 15) {
     label = 0;
     $45 = (($46) + -32)|0;
     $$0$i = $45;$48 = $33;$51 = 0;$55 = $46;
    }
    $47 = $48 >>> $$0$i;
    $49 = (32 - ($$0$i))|0;
    $50 = $51 << $49;
    $52 = $50 | $47;
    $53 = $51 >>> $$0$i;
    $54 = (($55) + ($$0110))|0;
    $56 = ($52|0)==(1);
    $57 = ($53|0)==(0);
    $or$cond1 = $56 & $57;
    if ($or$cond1) {
     $$0$lcssa26 = $6;$$01$lcssa28 = $54;$i$0$lcssa27 = $21;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$0110 = $54;$$012 = $6;$$029 = 0;$24 = $52;$33 = $53;$7 = $$pre;$i$011 = $21;
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $58 = ($$02$lcssa|0)==(0);
  if ($58) {
   $$0$lcssa26 = $$0$lcssa;$$01$lcssa28 = $$01$lcssa;$i$0$lcssa27 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $59 = ($i$0$lcssa27|0)<(2);
 L31: do {
  if (!($59)) {
   $60 = (($ar) + ($i$0$lcssa27<<2)|0);
   HEAP32[$60>>2] = $tmp$i6;
   $61 = ($width|0)==(0);
   if (!($61)) {
    $62 = ($i$0$lcssa27|0)>(0);
    if ($62) {
     $$02$us$i12 = $width;$78 = $tmp$i6;
    } else {
     $63 = ($width>>>0)>(256);
     $64 = $63 ? 256 : $width;
     $65 = HEAP32[$ar>>2]|0;
     _memcpy(($tmp$i6|0),($65|0),($64|0))|0;
     $66 = ($64|0)==($width|0);
     if ($66) {
      break;
     } else {
      $$02$i146 = $width;$80 = $64;
     }
     while(1) {
      $79 = (($$02$i146) - ($80))|0;
      $81 = ($79>>>0)>(256);
      $82 = $81 ? 256 : $79;
      _memcpy(($tmp$i6|0),($65|0),($82|0))|0;
      $83 = ($79|0)==($82|0);
      if ($83) {
       break L31;
      } else {
       $$02$i146 = $79;$80 = $82;
      }
     }
    }
    while(1) {
     $76 = ($$02$us$i12>>>0)>(256);
     $68 = $76 ? 256 : $$02$us$i12;
     $77 = HEAP32[$ar>>2]|0;
     _memcpy(($78|0),($77|0),($68|0))|0;
     $74 = $77;$i$01$us$i10 = 0;
     while(1) {
      $70 = (($ar) + ($i$01$us$i10<<2)|0);
      $71 = (($i$01$us$i10) + 1)|0;
      $72 = (($ar) + ($71<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      _memcpy(($74|0),($73|0),($68|0))|0;
      $75 = (($74) + ($68)|0);
      HEAP32[$70>>2] = $75;
      $exitcond$i11 = ($71|0)==($i$0$lcssa27|0);
      if ($exitcond$i11) {
       break;
      } else {
       $74 = $73;$i$01$us$i10 = $71;
      }
     }
     $67 = ($$02$us$i12|0)==($68|0);
     if ($67) {
      break L31;
     }
     $69 = (($$02$us$i12) - ($68))|0;
     $$pre$i8 = HEAP32[$60>>2]|0;
     $$02$us$i12 = $69;$78 = $$pre$i8;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa26;
 $84 = ($$01$lcssa28|0)>(1);
 L45: do {
  if ($84) {
   $$012$i = $$01$lcssa28;$$03$i = $$0$lcssa26;$90 = $$0$lcssa26;$i$04$i = 1;
   while(1) {
    $85 = (($$03$i) + ($0)|0);
    $86 = (($$012$i) + -2)|0;
    $87 = (($lp) + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $sum$i = (($88) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $89 = (($$03$i) + ($$sum$i)|0);
    $91 = (FUNCTION_TABLE_iii[$cmp & 3]($90,$89)|0);
    $92 = ($91|0)>(-1);
    if ($92) {
     $93 = (FUNCTION_TABLE_iii[$cmp & 3]($90,$85)|0);
     $94 = ($93|0)>(-1);
     if ($94) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $95 = (FUNCTION_TABLE_iii[$cmp & 3]($89,$85)|0);
    $96 = ($95|0)>(-1);
    $97 = (($i$04$i) + 1)|0;
    $98 = (($ar$i) + ($i$04$i<<2)|0);
    if ($96) {
     HEAP32[$98>>2] = $89;
     $99 = (($$012$i) + -1)|0;
     $$0$be$i = $89;$$01$be$i = $99;
    } else {
     HEAP32[$98>>2] = $85;
     $$0$be$i = $85;$$01$be$i = $86;
    }
    $100 = ($$01$be$i|0)>(1);
    if (!($100)) {
     $i$0$lcssa$i = $97;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$90 = $$pre$i;$i$04$i = $97;
   }
   $101 = ($i$0$lcssa$i|0)<(2);
   if ($101) {
    $126 = $tmp$i6;
   } else {
    $102 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$102>>2] = $tmp$i6;
    $103 = ($width|0)==(0);
    if ($103) {
     $126 = $tmp$i6;
    } else {
     $104 = ($i$0$lcssa$i|0)>(0);
     if ($104) {
      $$02$us$i = $width;$120 = $tmp$i6;
     } else {
      $105 = ($width>>>0)>(256);
      $106 = $105 ? 256 : $width;
      $107 = HEAP32[$ar$i>>2]|0;
      _memcpy(($tmp$i6|0),($107|0),($106|0))|0;
      $108 = ($106|0)==($width|0);
      if ($108) {
       $126 = $tmp$i6;
       break;
      } else {
       $$02$i3 = $width;$122 = $106;
      }
      while(1) {
       $121 = (($$02$i3) - ($122))|0;
       $123 = ($121>>>0)>(256);
       $124 = $123 ? 256 : $121;
       _memcpy(($tmp$i6|0),($107|0),($124|0))|0;
       $125 = ($121|0)==($124|0);
       if ($125) {
        $126 = $tmp$i6;
        break L45;
       } else {
        $$02$i3 = $121;$122 = $124;
       }
      }
     }
     while(1) {
      $118 = ($$02$us$i>>>0)>(256);
      $110 = $118 ? 256 : $$02$us$i;
      $119 = HEAP32[$ar$i>>2]|0;
      _memcpy(($120|0),($119|0),($110|0))|0;
      $116 = $119;$i$01$us$i = 0;
      while(1) {
       $112 = (($ar$i) + ($i$01$us$i<<2)|0);
       $113 = (($i$01$us$i) + 1)|0;
       $114 = (($ar$i) + ($113<<2)|0);
       $115 = HEAP32[$114>>2]|0;
       _memcpy(($116|0),($115|0),($110|0))|0;
       $117 = (($116) + ($110)|0);
       HEAP32[$112>>2] = $117;
       $exitcond$i = ($113|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $116 = $115;$i$01$us$i = $113;
       }
      }
      $109 = ($$02$us$i|0)==($110|0);
      if ($109) {
       $126 = $tmp$i6;
       break L45;
      }
      $111 = (($$02$us$i) - ($110))|0;
      $$pre$i3 = HEAP32[$102>>2]|0;
      $$02$us$i = $111;$120 = $$pre$i3;
     }
    }
   }
  } else {
   $126 = $tmp$i6;
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$026 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $w$0$lcssa = 0, $w$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$026 = $s;
   while(1) {
    $12 = HEAP8[$$026>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $14 = ($12<<24>>24)==($5<<24>>24);
    $8 = (($$026) + 1|0);
    if ($14) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $9 = $8;
    $10 = $9 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$02$lcssa = $8;
     break L5;
    } else {
     $$026 = $8;
    }
   }
   if ((label|0) == 13) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L15: do {
  if ($21) {
   $30 = $16;$w$03 = $$02$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$03) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$03;
     break L15;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$03 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$025 = 0, $$03$lcssa = 0, $$034 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = (($c) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$025 = $c;$13 = $0;
   while(1) {
    $12 = $13&255;
    $14 = $12 & 31;
    $15 = 1 << $14;
    $16 = $12 >>> 5;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = (($$025) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$025 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$034 = $s;$27 = $10;
     while(1) {
      $26 = $27&255;
      $28 = $26 >>> 5;
      $29 = (($byteset) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $26 & 31;
      $32 = 1 << $31;
      $33 = $30 & $32;
      $34 = ($33|0)==(0);
      $24 = (($$034) + 1|0);
      if (!($34)) {
       $$03$lcssa = $$034;
       break L7;
      }
      $23 = HEAP8[$24>>0]|0;
      $25 = ($23<<24>>24)==(0);
      if ($25) {
       $$03$lcssa = $24;
       break;
      } else {
       $$034 = $24;$27 = $23;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = $0 << 24 >> 24;
 $6 = (___strchrnul($s,$5)|0);
 $7 = $6;
 $8 = $s;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($d|0))|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP8[$$023>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = (($$023) + 1|0);
    $7 = (($$05) + 1|0);
    HEAP8[$$05>>0] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 STACKTOP = sp;return ($d|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$026 = 0, $$03 = 0, $$1$lcssa = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $byteset = sp;
 ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($c) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$03 = $s;
  while(1) {
   $5 = HEAP8[$$03>>0]|0;
   $6 = ($5<<24>>24)==($0<<24>>24);
   $7 = (($$03) + 1|0);
   if ($6) {
    $$03 = $7;
   } else {
    break;
   }
  }
  $8 = $$03;
  $9 = $s;
  $10 = (($8) - ($9))|0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$026 = $c;$14 = $0;
 }
 while(1) {
  $13 = $14&255;
  $15 = $13 & 31;
  $16 = 1 << $15;
  $17 = $13 >>> 5;
  $18 = (($byteset) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = (($$026) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   break;
  } else {
   $$026 = $21;$14 = $22;
  }
 }
 $11 = HEAP8[$s>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L12: do {
  if ($12) {
   $$1$lcssa = $s;
  } else {
   $$14 = $s;$28 = $11;
   while(1) {
    $27 = $28&255;
    $29 = $27 >>> 5;
    $30 = (($byteset) + ($29<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $27 & 31;
    $33 = 1 << $32;
    $34 = $31 & $33;
    $35 = ($34|0)==(0);
    $25 = (($$14) + 1|0);
    if ($35) {
     $$1$lcssa = $$14;
     break L12;
    }
    $24 = HEAP8[$25>>0]|0;
    $26 = ($24<<24>>24)==(0);
    if ($26) {
     $$1$lcssa = $25;
     break;
    } else {
     $$14 = $25;$28 = $24;
    }
   }
  }
 } while(0);
 $36 = $$1$lcssa;
 $37 = $s;
 $38 = (($36) - ($37))|0;
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i16 = 0, $$$i8 = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i15 = 0, $$0$lcssa$i7 = 0, $$01$i = 0, $$02$i = 0, $$02$i11 = 0, $$02$i5 = 0, $$02$us$i = 0, $$lcssa$i = 0, $$lcssa$i14 = 0, $$mem$0$us$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i10 = 0, $ip$0$ph76$i = 0;
 var $ip$0$ph76142$i = 0, $ip$0$ph79$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph56$i = 0, $ip$1$ph59$i = 0, $jp$0$ph19$ph70$i = 0, $jp$0$ph1964$i = 0, $jp$0$ph80$i = 0, $jp$1$ph60$i = 0, $jp$1$ph8$ph50$i = 0, $jp$1$ph844$i = 0, $k$027$i = 0, $k$114$i = 0, $k$2$us$i = 0, $k$36$i = 0, $k$36$us$i = 0, $k$4$i = 0, $k$4$us$i = 0, $l$037$i = 0;
 var $mem$0$us$i = 0, $notlhs$i = 0, $notrhs$us$i = 0, $or$cond$i = 0, $or$cond$i12 = 0, $or$cond3$us$i = 0, $p$0$ph$ph68$i = 0, $p$0$ph$ph68146$i = 0, $p$0$ph$ph71$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph48$i = 0, $p$1$ph$ph51$i = 0, $p$3151$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $9&255;
  $21 = $19 << 8;
  $22 = $21 | $20;
  $$01$i = $8;$271 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$0$lcssa$i = $$01$i;$31 = $271;
    break;
   }
   $25 = $23 << 8;
   $26 = (($$01$i) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 | $25;
   $30 = ($27<<24>>24)==(0);
   if ($30) {
    $$0$lcssa$i = $26;$31 = 0;
    break;
   } else {
    $$01$i = $26;$271 = $27;$hw$0$in2$i = $29;
   }
  }
  $32 = ($31<<24>>24)==(0);
  $33 = (($$0$lcssa$i) + -1|0);
  $$$i = $32 ? 0 : $33;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i7 = $34;$$lcssa$i = 0;
  } else {
   $$02$i5 = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i5) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$0$lcssa$i7 = $58;$$lcssa$i = $63;
     break;
    } else {
     $$02$i5 = $58;$hw$03$i = $62;
    }
   }
  }
  $65 = (($$0$lcssa$i7) + -2|0);
  $$$i8 = $$lcssa$i ? 0 : $65;
  $$0 = $$$i8;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i15 = $66;$$lcssa$i14 = 0;
  } else {
   $$02$i11 = $66;$hw$03$i10 = $92;
   while(1) {
    $94 = $hw$03$i10 << 8;
    $95 = (($$02$i11) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i12 = $99 | $100;
    if ($or$cond$i12) {
     $$0$lcssa$i15 = $95;$$lcssa$i14 = $99;
     break;
    } else {
     $$02$i11 = $95;$hw$03$i10 = $98;
    }
   }
  }
  $101 = (($$0$lcssa$i15) + -3|0);
  $$$i16 = $$lcssa$i14 ? 0 : $101;
  $$0 = $$$i16;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$037$i = 0;
 while(1) {
  $102 = (($3) + ($l$037$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   $$0 = 0;
   label = 80;
   break;
  }
  $105 = $106&255;
  $107 = $105 & 31;
  $108 = 1 << $107;
  $109 = $105 >>> 5;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$037$i) + 1)|0;
  $114 = (($shift$i) + ($105<<2)|0);
  HEAP32[$114>>2] = $113;
  $115 = (($n) + ($113)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = ($116<<24>>24)==(0);
  if ($117) {
   break;
  } else {
   $106 = $116;$l$037$i = $113;
  }
 }
 if ((label|0) == 80) {
  STACKTOP = sp;return ($$0|0);
 }
 $118 = ($113>>>0)>(1);
 L49: do {
  if ($118) {
   $272 = 1;$ip$0$ph79$i = -1;$jp$0$ph80$i = 0;
   L50: while(1) {
    $273 = $272;$jp$0$ph19$ph70$i = $jp$0$ph80$i;$p$0$ph$ph71$i = 1;
    while(1) {
     $274 = $273;$jp$0$ph1964$i = $jp$0$ph19$ph70$i;
     L54: while(1) {
      $120 = $274;$k$027$i = 1;
      while(1) {
       $125 = (($k$027$i) + ($ip$0$ph79$i))|0;
       $126 = (($n) + ($125)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = (($n) + ($120)|0);
       $129 = HEAP8[$128>>0]|0;
       $130 = ($127<<24>>24)==($129<<24>>24);
       if (!($130)) {
        break L54;
       }
       $131 = ($k$027$i|0)==($p$0$ph$ph71$i|0);
       $123 = (($k$027$i) + 1)|0;
       if ($131) {
        break;
       }
       $122 = (($123) + ($jp$0$ph1964$i))|0;
       $124 = ($122>>>0)<($113>>>0);
       if ($124) {
        $120 = $122;$k$027$i = $123;
       } else {
        $ip$0$ph76$i = $ip$0$ph79$i;$p$0$ph$ph68$i = $p$0$ph$ph71$i;
        break L50;
       }
      }
      $132 = (($jp$0$ph1964$i) + ($p$0$ph$ph71$i))|0;
      $133 = (($132) + 1)|0;
      $134 = ($133>>>0)<($113>>>0);
      if ($134) {
       $274 = $133;$jp$0$ph1964$i = $132;
      } else {
       $ip$0$ph76$i = $ip$0$ph79$i;$p$0$ph$ph68$i = $p$0$ph$ph71$i;
       break L50;
      }
     }
     $135 = ($127&255)>($129&255);
     $136 = (($120) - ($ip$0$ph79$i))|0;
     if (!($135)) {
      break;
     }
     $119 = (($120) + 1)|0;
     $121 = ($119>>>0)<($113>>>0);
     if ($121) {
      $273 = $119;$jp$0$ph19$ph70$i = $120;$p$0$ph$ph71$i = $136;
     } else {
      $ip$0$ph76$i = $ip$0$ph79$i;$p$0$ph$ph68$i = $136;
      break L50;
     }
    }
    $137 = (($jp$0$ph1964$i) + 1)|0;
    $138 = (($jp$0$ph1964$i) + 2)|0;
    $139 = ($138>>>0)<($113>>>0);
    if ($139) {
     $272 = $138;$ip$0$ph79$i = $jp$0$ph1964$i;$jp$0$ph80$i = $137;
    } else {
     $ip$0$ph76$i = $jp$0$ph1964$i;$p$0$ph$ph68$i = 1;
     break;
    }
   }
   $275 = 1;$ip$1$ph59$i = -1;$jp$1$ph60$i = 0;
   while(1) {
    $277 = $275;$jp$1$ph8$ph50$i = $jp$1$ph60$i;$p$1$ph$ph51$i = 1;
    while(1) {
     $276 = $277;$jp$1$ph844$i = $jp$1$ph8$ph50$i;
     L69: while(1) {
      $147 = $276;$k$114$i = 1;
      while(1) {
       $143 = (($k$114$i) + ($ip$1$ph59$i))|0;
       $144 = (($n) + ($143)|0);
       $145 = HEAP8[$144>>0]|0;
       $146 = (($n) + ($147)|0);
       $148 = HEAP8[$146>>0]|0;
       $149 = ($145<<24>>24)==($148<<24>>24);
       if (!($149)) {
        break L69;
       }
       $150 = ($k$114$i|0)==($p$1$ph$ph51$i|0);
       $141 = (($k$114$i) + 1)|0;
       if ($150) {
        break;
       }
       $140 = (($141) + ($jp$1$ph844$i))|0;
       $142 = ($140>>>0)<($113>>>0);
       if ($142) {
        $147 = $140;$k$114$i = $141;
       } else {
        $ip$0$ph76142$i = $ip$0$ph76$i;$ip$1$ph56$i = $ip$1$ph59$i;$p$0$ph$ph68146$i = $p$0$ph$ph68$i;$p$1$ph$ph48$i = $p$1$ph$ph51$i;
        break L49;
       }
      }
      $151 = (($jp$1$ph844$i) + ($p$1$ph$ph51$i))|0;
      $152 = (($151) + 1)|0;
      $153 = ($152>>>0)<($113>>>0);
      if ($153) {
       $276 = $152;$jp$1$ph844$i = $151;
      } else {
       $ip$0$ph76142$i = $ip$0$ph76$i;$ip$1$ph56$i = $ip$1$ph59$i;$p$0$ph$ph68146$i = $p$0$ph$ph68$i;$p$1$ph$ph48$i = $p$1$ph$ph51$i;
       break L49;
      }
     }
     $154 = ($145&255)<($148&255);
     $155 = (($147) - ($ip$1$ph59$i))|0;
     if (!($154)) {
      break;
     }
     $156 = (($147) + 1)|0;
     $157 = ($156>>>0)<($113>>>0);
     if ($157) {
      $277 = $156;$jp$1$ph8$ph50$i = $147;$p$1$ph$ph51$i = $155;
     } else {
      $ip$0$ph76142$i = $ip$0$ph76$i;$ip$1$ph56$i = $ip$1$ph59$i;$p$0$ph$ph68146$i = $p$0$ph$ph68$i;$p$1$ph$ph48$i = $155;
      break L49;
     }
    }
    $158 = (($jp$1$ph844$i) + 1)|0;
    $159 = (($jp$1$ph844$i) + 2)|0;
    $160 = ($159>>>0)<($113>>>0);
    if ($160) {
     $275 = $159;$ip$1$ph59$i = $jp$1$ph844$i;$jp$1$ph60$i = $158;
    } else {
     $ip$0$ph76142$i = $ip$0$ph76$i;$ip$1$ph56$i = $jp$1$ph844$i;$p$0$ph$ph68146$i = $p$0$ph$ph68$i;$p$1$ph$ph48$i = 1;
     break;
    }
   }
  } else {
   $ip$0$ph76142$i = -1;$ip$1$ph56$i = -1;$p$0$ph$ph68146$i = 1;$p$1$ph$ph48$i = 1;
  }
 } while(0);
 $161 = (($ip$1$ph56$i) + 1)|0;
 $162 = (($ip$0$ph76142$i) + 1)|0;
 $163 = ($161>>>0)>($162>>>0);
 $p$1$p$0$i = $163 ? $p$1$ph$ph48$i : $p$0$ph$ph68146$i;
 $ip$1$ip$0$i = $163 ? $ip$1$ph56$i : $ip$0$ph76142$i;
 $164 = (($n) + ($p$1$p$0$i)|0);
 $165 = (($ip$1$ip$0$i) + 1)|0;
 $166 = (_memcmp($n,$164,$165)|0);
 $167 = ($166|0)==(0);
 if ($167) {
  $173 = (($113) - ($p$1$p$0$i))|0;
  $174 = $113 | 63;
  $notlhs$i = ($113|0)==($p$1$p$0$i|0);
  if ($notlhs$i) {
   $229 = $174;$p$3151$i = $113;
  } else {
   $$02$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
   L83: while(1) {
    $176 = $z$0$us$i;
    $177 = $$02$us$i;
    $178 = (($176) - ($177))|0;
    $179 = ($178>>>0)<($113>>>0);
    do {
     if ($179) {
      $180 = (_memchr($z$0$us$i,0,$174)|0);
      $181 = ($180|0)==(0|0);
      if ($181) {
       $185 = (($z$0$us$i) + ($174)|0);
       $z$1$us$i = $185;
       break;
      } else {
       $182 = $180;
       $183 = (($182) - ($177))|0;
       $184 = ($183>>>0)<($113>>>0);
       if ($184) {
        $$0 = 0;
        label = 80;
        break L83;
       } else {
        $z$1$us$i = $180;
        break;
       }
      }
     } else {
      $z$1$us$i = $z$0$us$i;
     }
    } while(0);
    $186 = (($$02$us$i) + ($l$037$i)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = $188 >>> 5;
    $190 = (($byteset$i) + ($189<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $188 & 31;
    $193 = 1 << $192;
    $194 = $193 & $191;
    $195 = ($194|0)==(0);
    if ($195) {
     $224 = (($$02$us$i) + ($113)|0);
     $$02$us$i = $224;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $196 = (($shift$i) + ($188<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (($113) - ($197))|0;
    $199 = ($113|0)==($197|0);
    if (!($199)) {
     $notrhs$us$i = ($mem$0$us$i|0)!=(0);
     $200 = ($198>>>0)<($p$1$p$0$i>>>0);
     $or$cond3$us$i = $notrhs$us$i & $200;
     $k$2$us$i = $or$cond3$us$i ? $173 : $198;
     $201 = (($$02$us$i) + ($k$2$us$i)|0);
     $$02$us$i = $201;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $202 = ($165>>>0)>($mem$0$us$i>>>0);
    $$mem$0$us$i = $202 ? $165 : $mem$0$us$i;
    $203 = (($n) + ($$mem$0$us$i)|0);
    $204 = HEAP8[$203>>0]|0;
    $205 = ($204<<24>>24)==(0);
    L97: do {
     if ($205) {
      $k$4$us$i = $165;
     } else {
      $$pr$us$i = $204;$k$36$us$i = $$mem$0$us$i;
      while(1) {
       $210 = (($$02$us$i) + ($k$36$us$i)|0);
       $211 = HEAP8[$210>>0]|0;
       $212 = ($$pr$us$i<<24>>24)==($211<<24>>24);
       $207 = (($k$36$us$i) + 1)|0;
       if (!($212)) {
        break;
       }
       $206 = (($n) + ($207)|0);
       $208 = HEAP8[$206>>0]|0;
       $209 = ($208<<24>>24)==(0);
       if ($209) {
        $k$4$us$i = $165;
        break L97;
       } else {
        $$pr$us$i = $208;$k$36$us$i = $207;
       }
      }
      $213 = (($k$36$us$i) - ($ip$1$ip$0$i))|0;
      $214 = (($$02$us$i) + ($213)|0);
      $$02$us$i = $214;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
      continue L83;
     }
    } while(0);
    while(1) {
     $215 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
     if (!($215)) {
      break;
     }
     $216 = (($k$4$us$i) + -1)|0;
     $217 = (($n) + ($216)|0);
     $218 = HEAP8[$217>>0]|0;
     $219 = (($$02$us$i) + ($216)|0);
     $220 = HEAP8[$219>>0]|0;
     $221 = ($218<<24>>24)==($220<<24>>24);
     if ($221) {
      $k$4$us$i = $216;
     } else {
      break;
     }
    }
    $222 = ($k$4$us$i|0)==($mem$0$us$i|0);
    if ($222) {
     $$0 = $$02$us$i;
     label = 80;
     break;
    }
    $223 = (($$02$us$i) + ($p$1$p$0$i)|0);
    $$02$us$i = $223;$mem$0$us$i = $173;$z$0$us$i = $z$1$us$i;
   }
   if ((label|0) == 80) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $168 = (($113) - ($ip$1$ip$0$i))|0;
  $169 = (($168) + -1)|0;
  $170 = ($ip$1$ip$0$i>>>0)>($169>>>0);
  $ip$1$ip$0$$i = $170 ? $ip$1$ip$0$i : $169;
  $171 = (($ip$1$ip$0$$i) + 1)|0;
  $172 = $113 | 63;
  $229 = $172;$p$3151$i = $171;
 }
 $175 = (($n) + ($165)|0);
 $$02$i = $3;$z$0$i = $3;
 L111: while(1) {
  $225 = $z$0$i;
  $226 = $$02$i;
  $227 = (($225) - ($226))|0;
  $228 = ($227>>>0)<($113>>>0);
  do {
   if ($228) {
    $230 = (_memchr($z$0$i,0,$229)|0);
    $231 = ($230|0)==(0|0);
    if ($231) {
     $235 = (($z$0$i) + ($229)|0);
     $z$1$i = $235;
     break;
    } else {
     $232 = $230;
     $233 = (($232) - ($226))|0;
     $234 = ($233>>>0)<($113>>>0);
     if ($234) {
      $$0 = 0;
      label = 80;
      break L111;
     } else {
      $z$1$i = $230;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $236 = (($$02$i) + ($l$037$i)|0);
  $237 = HEAP8[$236>>0]|0;
  $238 = $237&255;
  $239 = $238 >>> 5;
  $240 = (($byteset$i) + ($239<<2)|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = $238 & 31;
  $243 = 1 << $242;
  $244 = $243 & $241;
  $245 = ($244|0)==(0);
  if ($245) {
   $251 = (($$02$i) + ($113)|0);
   $$02$i = $251;$z$0$i = $z$1$i;
   continue;
  }
  $246 = (($shift$i) + ($238<<2)|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = ($113|0)==($247|0);
  if (!($248)) {
   $249 = (($113) - ($247))|0;
   $250 = (($$02$i) + ($249)|0);
   $$02$i = $250;$z$0$i = $z$1$i;
   continue;
  }
  $252 = HEAP8[$175>>0]|0;
  $253 = ($252<<24>>24)==(0);
  L125: do {
   if ($253) {
    $k$4$i = $165;
   } else {
    $$pr$i = $252;$k$36$i = $165;
    while(1) {
     $258 = (($$02$i) + ($k$36$i)|0);
     $259 = HEAP8[$258>>0]|0;
     $260 = ($$pr$i<<24>>24)==($259<<24>>24);
     $255 = (($k$36$i) + 1)|0;
     if (!($260)) {
      break;
     }
     $254 = (($n) + ($255)|0);
     $256 = HEAP8[$254>>0]|0;
     $257 = ($256<<24>>24)==(0);
     if ($257) {
      $k$4$i = $165;
      break L125;
     } else {
      $$pr$i = $256;$k$36$i = $255;
     }
    }
    $261 = (($k$36$i) - ($ip$1$ip$0$i))|0;
    $262 = (($$02$i) + ($261)|0);
    $$02$i = $262;$z$0$i = $z$1$i;
    continue L111;
   }
  } while(0);
  while(1) {
   $263 = ($k$4$i|0)==(0);
   if ($263) {
    $$0 = $$02$i;
    label = 80;
    break L111;
   }
   $264 = (($k$4$i) + -1)|0;
   $265 = (($n) + ($264)|0);
   $266 = HEAP8[$265>>0]|0;
   $267 = (($$02$i) + ($264)|0);
   $268 = HEAP8[$267>>0]|0;
   $269 = ($266<<24>>24)==($268<<24>>24);
   if ($269) {
    $k$4$i = $264;
   } else {
    break;
   }
  }
  $270 = (($$02$i) + ($p$3151$i)|0);
  $$02$i = $270;$z$0$i = $z$1$i;
 }
 if ((label|0) == 80) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[59800>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((59800 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((59800 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[59800>>2] = $22;
     } else {
      $23 = HEAP32[((59800 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((59800 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((59800 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((59800 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[59800>>2] = $74;
      } else {
       $75 = HEAP32[((59800 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((59800 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((59800 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((59800 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[59800>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[59800>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((59800 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((59800 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((59800 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((59800 + 8|0))>>2] = $81;
     HEAP32[((59800 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((59800 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((59800 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((59800 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((59800 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((59800 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((59800 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((59800 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((59800 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((59800 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((59800 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((59800 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((59800 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((59800 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[59800>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[59800>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((59800 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((59800 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((59800 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((59800 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((59800 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((59800 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((59800 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((59800 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((59800 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((59800 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((59800 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((59800 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((59800 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((59800 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((59800 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((59800 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((59800 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((59800 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[59800>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[59800>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((59800 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((59800 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((59800 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((59800 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((59800 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((59800 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L224: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L224;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((59800 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((59800 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((59800 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((59800 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((59800 + 20|0))>>2] = $516;
   HEAP32[((59800 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((59800 + 8|0))>>2] = 0;
   HEAP32[((59800 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((59800 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((59800 + 12|0))>>2] = $530;
  $531 = HEAP32[((59800 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((59800 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[60272>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((60272 + 8|0))>>2] = $540;
    HEAP32[((60272 + 4|0))>>2] = $540;
    HEAP32[((60272 + 12|0))>>2] = -1;
    HEAP32[((60272 + 16|0))>>2] = -1;
    HEAP32[((60272 + 20|0))>>2] = 0;
    HEAP32[((59800 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[60272>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((60272 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((59800 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((59800 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((59800 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((59800 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((59800 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((59800 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((60272 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((59800 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((59800 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((60272 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((59800 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((59800 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((59800 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((59800 + 432|0))>>2] = $633;
  $634 = HEAP32[((59800 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((59800 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((59800 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((59800 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((59800 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((59800 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((59800 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((59800 + 460|0))>>2] = 0;
    $641 = HEAP32[60272>>2]|0;
    HEAP32[((59800 + 36|0))>>2] = $641;
    HEAP32[((59800 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((59800 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((59800 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((59800 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((59800 + 24|0))>>2] = $654;
    HEAP32[((59800 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((60272 + 16|0))>>2]|0;
    HEAP32[((59800 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((59800 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((59800 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((59800 + 24|0))>>2] = $684;
       HEAP32[((59800 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((60272 + 16|0))>>2]|0;
       HEAP32[((59800 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((59800 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((59800 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((59800 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((59800 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((59800 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((59800 + 12|0))>>2] = $732;
        HEAP32[((59800 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((59800 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((59800 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((59800 + 8|0))>>2] = $738;
         HEAP32[((59800 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L356: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((59800 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((59800 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[59800>>2]|0;
            $765 = $764 & $763;
            HEAP32[59800>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((59800 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((59800 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((59800 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((59800 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((59800 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((59800 + 4|0))>>2] = $811;
             break L356;
            } else {
             $812 = HEAP32[((59800 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L356;
             }
            }
           } while(0);
           $819 = HEAP32[((59800 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((59800 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((59800 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((59800 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[59800>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[59800>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((59800 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((59800 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((59800 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((59800 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((59800 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((59800 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((59800 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((59800 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((59800 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((59800 + 24|0))>>2] = $958;
    HEAP32[((59800 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((60272 + 16|0))>>2]|0;
    HEAP32[((59800 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((59800 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((59800 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((59800 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((59800 + 448|0))+12>>2]|0;
    HEAP32[((59800 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((59800 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((59800 + 460|0))>>2] = 0;
    HEAP32[((59800 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((59800 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[59800>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[59800>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((59800 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((59800 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((59800 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((59800 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((59800 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((59800 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((59800 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((59800 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((59800 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((59800 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((59800 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((59800 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((59800 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((59800 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((59800 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((59800 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[59800>>2]|0;
     $36 = $35 & $34;
     HEAP32[59800>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((59800 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((59800 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((59800 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((59800 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((59800 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((59800 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((59800 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((59800 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((59800 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((59800 + 12|0))>>2] = $122;
   HEAP32[((59800 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((59800 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((59800 + 20|0))>>2] = 0;
   HEAP32[((59800 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((59800 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((59800 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((59800 + 8|0))>>2] = $130;
   HEAP32[((59800 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((59800 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((59800 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[59800>>2]|0;
     $154 = $153 & $152;
     HEAP32[59800>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((59800 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((59800 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((59800 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((59800 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((59800 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((59800 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((59800 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((59800 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((59800 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((59800 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((59800 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((59800 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((59800 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[59800>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[59800>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((59800 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((59800 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((59800 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((59800 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((59800 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((59800 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L204: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L204;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((59800 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((59800 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((59800 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((59800 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((59800 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((59800 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 STACKTOP = sp;return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((59800 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((60272 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((59800 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((59800 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((59800 + 24|0))>>2] = $38;
  HEAP32[((59800 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((59800 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((59800 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((59800 + 8|0))>>2] = $storemerge21;
  HEAP32[((59800 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((59800 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[59800>>2]|0;
    $90 = $89 & $88;
    HEAP32[59800>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((59800 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((59800 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((59800 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((59800 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((59800 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((59800 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((59800 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _internal_memalign($alignment,$bytes) {
 $alignment = $alignment|0;
 $bytes = $bytes|0;
 var $$1 = 0, $$alignment = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $a$0 = 0, $mem$0 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($alignment>>>0)<(16);
 $$alignment = $0 ? 16 : $alignment;
 $1 = (($$alignment) + -1)|0;
 $2 = $1 & $$alignment;
 $3 = ($2|0)==(0);
 if ($3) {
  $$1 = $$alignment;
 } else {
  $a$0 = 16;
  while(1) {
   $4 = ($a$0>>>0)<($$alignment>>>0);
   $5 = $a$0 << 1;
   if ($4) {
    $a$0 = $5;
   } else {
    $$1 = $a$0;
    break;
   }
  }
 }
 $6 = (-64 - ($$1))|0;
 $7 = ($6>>>0)>($bytes>>>0);
 if (!($7)) {
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 12;
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $9 = ($bytes>>>0)<(11);
 if ($9) {
  $14 = 16;
 } else {
  $10 = (($bytes) + 11)|0;
  $11 = $10 & -8;
  $14 = $11;
 }
 $12 = (($$1) + 12)|0;
 $13 = (($12) + ($14))|0;
 $15 = (_malloc($13)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $17 = (($15) + -8|0);
 $18 = $15;
 $19 = (($$1) + -1)|0;
 $20 = $18 & $19;
 $21 = ($20|0)==(0);
 do {
  if ($21) {
   $p$0 = $17;
  } else {
   $22 = (($15) + ($19)|0);
   $23 = $22;
   $24 = (0 - ($$1))|0;
   $25 = $23 & $24;
   $26 = $25;
   $27 = (($26) + -8|0);
   $28 = $27;
   $29 = $17;
   $30 = (($28) - ($29))|0;
   $31 = ($30>>>0)>(15);
   if ($31) {
    $33 = $27;
   } else {
    $$sum3 = (($$1) + -8)|0;
    $32 = (($26) + ($$sum3)|0);
    $33 = $32;
   }
   $34 = $33;
   $35 = (($34) - ($29))|0;
   $36 = (($15) + -4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 & -8;
   $39 = (($38) - ($35))|0;
   $40 = $37 & 3;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = HEAP32[$17>>2]|0;
    $43 = (($42) + ($35))|0;
    HEAP32[$33>>2] = $43;
    $44 = (($33) + 4|0);
    HEAP32[$44>>2] = $39;
    $p$0 = $33;
    break;
   } else {
    $45 = (($33) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46 & 1;
    $48 = $39 | $47;
    $49 = $48 | 2;
    HEAP32[$45>>2] = $49;
    $$sum4 = (($39) + 4)|0;
    $50 = (($33) + ($$sum4)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $51 | 1;
    HEAP32[$50>>2] = $52;
    $53 = HEAP32[$36>>2]|0;
    $54 = $53 & 1;
    $55 = $35 | $54;
    $56 = $55 | 2;
    HEAP32[$36>>2] = $56;
    $$sum6 = (($35) + -4)|0;
    $57 = (($15) + ($$sum6)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $58 | 1;
    HEAP32[$57>>2] = $59;
    _dispose_chunk($17,$35);
    $p$0 = $33;
    break;
   }
  }
 } while(0);
 $60 = (($p$0) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61 & 3;
 $63 = ($62|0)==(0);
 if (!($63)) {
  $64 = $61 & -8;
  $65 = (($14) + 16)|0;
  $66 = ($64>>>0)>($65>>>0);
  if ($66) {
   $67 = (($64) - ($14))|0;
   $68 = (($p$0) + ($14)|0);
   $69 = $61 & 1;
   $70 = $14 | $69;
   $71 = $70 | 2;
   HEAP32[$60>>2] = $71;
   $$sum1 = $14 | 4;
   $72 = (($p$0) + ($$sum1)|0);
   $73 = $67 | 3;
   HEAP32[$72>>2] = $73;
   $$sum2 = $64 | 4;
   $74 = (($p$0) + ($$sum2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75 | 1;
   HEAP32[$74>>2] = $76;
   _dispose_chunk($68,$67);
  }
 }
 $77 = (($p$0) + 8|0);
 $mem$0 = $77;
 STACKTOP = sp;return ($mem$0|0);
}
function _posix_memalign($pp,$alignment,$bytes) {
 $pp = $pp|0;
 $alignment = $alignment|0;
 $bytes = $bytes|0;
 var $$0 = 0, $$alignment = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($alignment|0)==(8);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  label = 7;
 } else {
  $2 = $alignment >>> 2;
  $3 = $alignment & 3;
  $4 = ($3|0)!=(0);
  $5 = ($2|0)==(0);
  $or$cond = $4 | $5;
  if ($or$cond) {
   $$0 = 22;
  } else {
   $6 = (($2) + 1073741823)|0;
   $7 = $6 & $2;
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = (-64 - ($alignment))|0;
    $10 = ($9>>>0)<($bytes>>>0);
    if ($10) {
     $$0 = 12;
    } else {
     $11 = ($alignment>>>0)<(16);
     $$alignment = $11 ? 16 : $alignment;
     $12 = (_internal_memalign($$alignment,$bytes)|0);
     $mem$0 = $12;
     label = 7;
    }
   } else {
    $$0 = 22;
   }
  }
 }
 if ((label|0) == 7) {
  $13 = ($mem$0|0)==(0|0);
  if ($13) {
   $$0 = 12;
  } else {
   HEAP32[$pp>>2] = $mem$0;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((59800 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((59800 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((59800 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((59800 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[59800>>2]|0;
     $32 = $31 & $30;
     HEAP32[59800>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((59800 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((59800 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((59800 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((59800 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((59800 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((59800 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((59800 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((59800 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((59800 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((59800 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((59800 + 12|0))>>2] = $117;
   HEAP32[((59800 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((59800 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((59800 + 20|0))>>2] = 0;
   HEAP32[((59800 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((59800 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((59800 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((59800 + 8|0))>>2] = $125;
   HEAP32[((59800 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((59800 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[59800>>2]|0;
     $148 = $147 & $146;
     HEAP32[59800>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((59800 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((59800 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((59800 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((59800 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((59800 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((59800 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((59800 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((59800 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((59800 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((59800 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[59800>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[59800>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((59800 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((59800 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((59800 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((59800 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((59800 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((59800 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((59800 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((59800 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0;
 var $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $278 = 0;$279 = 0;
  tempRet0 = $278;
  STACKTOP = sp;return ($279|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond = $27 & $28;
 do {
  if ($or$cond) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    $$base = $25 ? 8 : $base;
    $$1 = $$base;$c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum15 = (($46) + 1)|0;
   $47 = (60296 + ($$sum15)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    if ($51) {
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   } else {
    $$122 = 16;$c$123 = $46;
    label = 47;
   }
  } else {
   $$base16 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (60296 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base16>>>0);
   if ($60) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $70 = $67;$x$068 = 0;
    while(1) {
     $69 = (($x$068) + ($70))|0;
     $71 = HEAP32[$3>>2]|0;
     $72 = HEAP32[$4>>2]|0;
     $73 = ($71>>>0)<($72>>>0);
     if ($73) {
      $74 = (($71) + 1|0);
      HEAP32[$3>>2] = $74;
      $75 = HEAP8[$71>>0]|0;
      $76 = $75&255;
      $c$2$be = $76;
     } else {
      $77 = (___shgetc($f)|0);
      $c$2$be = $77;
     }
     $78 = (($c$2$be) + -48)|0;
     $79 = ($78>>>0)<(10);
     $80 = ($69>>>0)<(429496729);
     $$ = $79 & $80;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($69*10)|0;
     $70 = $78;$x$068 = $phitmp93;
    }
    $280 = $69;$281 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $280 = 0;$281 = 0;$c$2$lcssa = $c$1;
   }
   $81 = (($c$2$lcssa) + -48)|0;
   $82 = ($81>>>0)<(10);
   if ($82) {
    $83 = $280;$84 = $281;$87 = $81;$c$359 = $c$2$lcssa;
    while(1) {
     $85 = (___muldi3(($83|0),($84|0),10,0)|0);
     $86 = tempRet0;
     $88 = ($87|0)<(0);
     $89 = $88 << 31 >> 31;
     $90 = $87 ^ -1;
     $91 = $89 ^ -1;
     $92 = ($86>>>0)>($91>>>0);
     $93 = ($86|0)==($91|0);
     $94 = ($85>>>0)>($90>>>0);
     $95 = $93 & $94;
     $96 = $92 | $95;
     if ($96) {
      $$lcssa = $87;$282 = $83;$283 = $84;$c$3$lcssa = $c$359;
      break;
     }
     $97 = (_i64Add(($85|0),($86|0),($87|0),($89|0))|0);
     $98 = tempRet0;
     $99 = HEAP32[$3>>2]|0;
     $100 = HEAP32[$4>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      $102 = (($99) + 1|0);
      HEAP32[$3>>2] = $102;
      $103 = HEAP8[$99>>0]|0;
      $104 = $103&255;
      $c$3$be = $104;
     } else {
      $105 = (___shgetc($f)|0);
      $c$3$be = $105;
     }
     $106 = (($c$3$be) + -48)|0;
     $107 = ($106>>>0)<(10);
     $108 = ($98>>>0)<(429496729);
     $109 = ($98|0)==(429496729);
     $110 = ($97>>>0)<(2576980378);
     $111 = $109 & $110;
     $112 = $108 | $111;
     $or$cond17 = $107 & $112;
     if ($or$cond17) {
      $83 = $97;$84 = $98;$87 = $106;$c$359 = $c$3$be;
     } else {
      $$lcssa = $106;$282 = $97;$283 = $98;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $113 = ($$lcssa>>>0)>(9);
    if ($113) {
     $251 = $283;$254 = $282;
    } else {
     $$121 = 10;$284 = $282;$285 = $283;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $251 = $281;$254 = $280;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $114 = (($$122) + -1)|0;
   $115 = $114 & $$122;
   $116 = ($115|0)==(0);
   if ($116) {
    $121 = ($$122*23)|0;
    $122 = $121 >>> 5;
    $123 = $122 & 7;
    $124 = (60560 + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $127 = (60296 + ($$sum934)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129>>>0)<($$122>>>0);
    if ($130) {
     $133 = $129;$x$135 = 0;
     while(1) {
      $131 = $x$135 << $126;
      $132 = $133 | $131;
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $138 = HEAP8[$134>>0]|0;
       $139 = $138&255;
       $c$4$be = $139;
      } else {
       $140 = (___shgetc($f)|0);
       $c$4$be = $140;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $141 = (60296 + ($$sum9)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = ($143>>>0)<($$122>>>0);
      $145 = ($132>>>0)<(134217728);
      $$18 = $144 & $145;
      if ($$18) {
       $133 = $143;$x$135 = $132;
      } else {
       break;
      }
     }
     $149 = $142;$151 = 0;$154 = $132;$c$4$lcssa = $c$4$be;
    } else {
     $149 = $128;$151 = 0;$154 = 0;$c$4$lcssa = $c$123;
    }
    $146 = (_bitshift64Lshr(-1,-1,($126|0))|0);
    $147 = tempRet0;
    $148 = $149&255;
    $150 = ($148>>>0)>=($$122>>>0);
    $152 = ($151>>>0)>($147>>>0);
    $153 = ($151|0)==($147|0);
    $155 = ($154>>>0)>($146>>>0);
    $156 = $153 & $155;
    $157 = $152 | $156;
    $or$cond2628 = $150 | $157;
    if ($or$cond2628) {
     $$121 = $$122;$284 = $154;$285 = $151;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $158 = $154;$159 = $151;$163 = $149;
    }
    while(1) {
     $160 = (_bitshift64Shl(($158|0),($159|0),($126|0))|0);
     $161 = tempRet0;
     $162 = $163&255;
     $164 = $162 | $160;
     $165 = HEAP32[$3>>2]|0;
     $166 = HEAP32[$4>>2]|0;
     $167 = ($165>>>0)<($166>>>0);
     if ($167) {
      $168 = (($165) + 1|0);
      HEAP32[$3>>2] = $168;
      $169 = HEAP8[$165>>0]|0;
      $170 = $169&255;
      $c$5$be = $170;
     } else {
      $171 = (___shgetc($f)|0);
      $c$5$be = $171;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $172 = (60296 + ($$sum10)|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = ($174>>>0)>=($$122>>>0);
     $176 = ($161>>>0)>($147>>>0);
     $177 = ($161|0)==($147|0);
     $178 = ($164>>>0)>($146>>>0);
     $179 = $177 & $178;
     $180 = $176 | $179;
     $or$cond26 = $175 | $180;
     if ($or$cond26) {
      $$121 = $$122;$284 = $164;$285 = $161;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $158 = $164;$159 = $161;$163 = $173;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $117 = (60296 + ($$sum1352)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119>>>0)<($$122>>>0);
   if ($120) {
    $183 = $119;$x$253 = 0;
    while(1) {
     $181 = Math_imul($x$253, $$122)|0;
     $182 = (($183) + ($181))|0;
     $184 = HEAP32[$3>>2]|0;
     $185 = HEAP32[$4>>2]|0;
     $186 = ($184>>>0)<($185>>>0);
     if ($186) {
      $187 = (($184) + 1|0);
      HEAP32[$3>>2] = $187;
      $188 = HEAP8[$184>>0]|0;
      $189 = $188&255;
      $c$6$be = $189;
     } else {
      $190 = (___shgetc($f)|0);
      $c$6$be = $190;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $191 = (60296 + ($$sum13)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = ($193>>>0)<($$122>>>0);
     $195 = ($182>>>0)<(119304647);
     $$19 = $194 & $195;
     if ($$19) {
      $183 = $193;$x$253 = $182;
     } else {
      break;
     }
    }
    $197 = $192;$286 = $182;$287 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $197 = $118;$286 = 0;$287 = 0;$c$6$lcssa = $c$123;
   }
   $196 = $197&255;
   $198 = ($196>>>0)<($$122>>>0);
   if ($198) {
    $199 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $200 = tempRet0;
    $201 = $287;$204 = $286;$211 = $197;$c$744 = $c$6$lcssa;
    while(1) {
     $202 = ($201>>>0)>($200>>>0);
     $203 = ($201|0)==($200|0);
     $205 = ($204>>>0)>($199>>>0);
     $206 = $203 & $205;
     $207 = $202 | $206;
     if ($207) {
      $$121 = $$122;$284 = $204;$285 = $201;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $208 = (___muldi3(($204|0),($201|0),($$122|0),0)|0);
     $209 = tempRet0;
     $210 = $211&255;
     $212 = $210 ^ -1;
     $213 = ($209>>>0)>(4294967295);
     $214 = ($209|0)==(-1);
     $215 = ($208>>>0)>($212>>>0);
     $216 = $214 & $215;
     $217 = $213 | $216;
     if ($217) {
      $$121 = $$122;$284 = $204;$285 = $201;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $218 = (_i64Add(($210|0),0,($208|0),($209|0))|0);
     $219 = tempRet0;
     $220 = HEAP32[$3>>2]|0;
     $221 = HEAP32[$4>>2]|0;
     $222 = ($220>>>0)<($221>>>0);
     if ($222) {
      $223 = (($220) + 1|0);
      HEAP32[$3>>2] = $223;
      $224 = HEAP8[$220>>0]|0;
      $225 = $224&255;
      $c$7$be = $225;
     } else {
      $226 = (___shgetc($f)|0);
      $c$7$be = $226;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $227 = (60296 + ($$sum14)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = ($229>>>0)<($$122>>>0);
     if ($230) {
      $201 = $219;$204 = $218;$211 = $228;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$284 = $218;$285 = $219;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$284 = $286;$285 = $287;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $231 = (60296 + ($$sum11)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = ($233>>>0)<($$121>>>0);
  if ($234) {
   while(1) {
    $235 = HEAP32[$3>>2]|0;
    $236 = HEAP32[$4>>2]|0;
    $237 = ($235>>>0)<($236>>>0);
    if ($237) {
     $238 = (($235) + 1|0);
     HEAP32[$3>>2] = $238;
     $239 = HEAP8[$235>>0]|0;
     $240 = $239&255;
     $c$9$be = $240;
    } else {
     $241 = (___shgetc($f)|0);
     $c$9$be = $241;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $242 = (60296 + ($$sum12)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = ($244>>>0)<($$121>>>0);
    if (!($245)) {
     break;
    }
   }
   $246 = (___errno_location()|0);
   HEAP32[$246>>2] = 34;
   $251 = $1;$254 = $0;
  } else {
   $251 = $285;$254 = $284;
  }
 }
 $247 = HEAP32[$4>>2]|0;
 $248 = ($247|0)==(0|0);
 if (!($248)) {
  $249 = HEAP32[$3>>2]|0;
  $250 = (($249) + -1|0);
  HEAP32[$3>>2] = $250;
 }
 $252 = ($251>>>0)<($1>>>0);
 $253 = ($251|0)==($1|0);
 $255 = ($254>>>0)<($0>>>0);
 $256 = $253 & $255;
 $257 = $252 | $256;
 if (!($257)) {
  $258 = $0 & 1;
  $259 = ($258|0)==(0);
  $260 = (0)==(0);
  $261 = $259 & $260;
  $262 = ($neg$0|0)==(0);
  $or$cond20 = $261 & $262;
  if ($or$cond20) {
   $263 = (___errno_location()|0);
   HEAP32[$263>>2] = 34;
   $264 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $265 = tempRet0;
   $278 = $265;$279 = $264;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
  $266 = ($251>>>0)>($1>>>0);
  $267 = ($251|0)==($1|0);
  $268 = ($254>>>0)>($0>>>0);
  $269 = $267 & $268;
  $270 = $266 | $269;
  if ($270) {
   $271 = (___errno_location()|0);
   HEAP32[$271>>2] = 34;
   $278 = $1;$279 = $0;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
 }
 $272 = ($neg$0|0)<(0);
 $273 = $272 << 31 >> 31;
 $274 = $254 ^ $neg$0;
 $275 = $251 ^ $273;
 $276 = (_i64Subtract(($274|0),($275|0),($neg$0|0),($273|0))|0);
 $277 = tempRet0;
 $278 = $277;$279 = $276;
 tempRet0 = $278;
 STACKTOP = sp;return ($279|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (60576 + ($i$068)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (60592 + ($i$263)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59>>0]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114>>0]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124>>0]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $168 = 0;$171 = 0;$211 = 0;$213 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131>>0]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L66: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138>>0]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146>>0]|0;
           $151 = $150&255;
           $153 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $153 = $152;
          }
          $154 = ($153|0)==(48);
          if (!($154)) {
           $168 = 0;$171 = 0;$211 = $155;$213 = $156;$c$2$i = $153;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L66;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $168 = 0;$171 = 0;$211 = 0;$213 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L79: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L79;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $171;$713 = $168;$714 = $171;$715 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L79;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $169 = ($168|0)<(0);
        $170 = ($168|0)==(0);
        $172 = ($171>>>0)<(8);
        $173 = $170 & $172;
        $174 = $169 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($168|0)<(0);
          $178 = ($168|0)==(0);
          $179 = ($171>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($171|0),($168|0),1,0)|0);
        $191 = tempRet0;
        $712 = $211;$713 = $213;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192>>0]|0;
        $197 = $196&255;
        $168 = $715;$171 = $714;$211 = $712;$213 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $168 = $715;$171 = $714;$211 = $712;$213 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $212 = $210 ? $171 : $211;
      $214 = $210 ? $168 : $213;
      $215 = ($168|0)<(0);
      $216 = ($168|0)==(0);
      $217 = ($171>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $171;$222 = $168;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($212|0),($214|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.79769313486231570815E+308;
       $265 = $264 * 1.79769313486231570815E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.22507385850720138309E-308;
       $278 = $277 * 2.22507385850720138309E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      do {
       if ($302) {
        $303 = (84 - ($$02$i))|0;
        $304 = (+_scalbn(1.0,$303));
        $305 = (+($sign$0|0));
        $306 = (+_copysignl((+$304),(+$305)));
        $307 = ($$02$i|0)<(32);
        $308 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $307 & $308;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326>>0]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L168: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333>>0]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341>>0]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L168;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L182: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L182;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374>>0]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$385 = $722;$386 = $724;$388 = $723;$389 = $725;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$385 = $716;$386 = 0;$388 = $717;$389 = 0;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $387 = $384 ? $386 : $385;
     $390 = $384 ? $389 : $388;
     $$388$i = $$3$lcssa$i;$405 = $387;$406 = $390;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $419 = $407;$422 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $419 = $405;$422 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $419 = $405;$422 = $406;
      }
     } else {
      $419 = $405;$422 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $420 = ($419|0)==($421|0);
    $423 = ($422|0)==($424|0);
    $425 = $420 & $423;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($422|0)>($439|0);
    $441 = ($422|0)==($439|0);
    $442 = ($419>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.79769313486231570815E+308;
     $448 = $447 * 1.79769313486231570815E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($422|0)<($451|0);
    $453 = ($422|0)==($451|0);
    $454 = ($419>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.22507385850720138309E-308;
     $460 = $459 * 2.22507385850720138309E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($419|0);
      $470 = ($419|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($419|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($419|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($419))|0;
        $482 = (60608 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($419, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($419) + -10)|0;
       $495 = (60608 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($419|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $419;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($419|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (60608 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $419;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $419;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L280: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L280;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L311: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $626 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (60600 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $593 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $594 = ($593|0)<(2);
        if ($594) {
         $i$025$i = $593;
        } else {
         $i$1$i = $593;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L311;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $627 = ($626|0)==($a$5$i|0);
      if (!($627)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $626;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($626) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $626;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $644 = (($687) - ($emin$0$ph))|0;
    $711 = ($644|0)<($bits$0$ph|0);
    if ($711) {
     $645 = ($644|0)<(0);
     $$$i22 = $645 ? 0 : $644;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysignl((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmodl((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    do {
     if ($658) {
      $frac$2$i = $frac$0$i;
     } else {
      $659 = (($x$i) + ($657<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ($660>>>0)<(500000000);
      do {
       if ($661) {
        $662 = ($660|0)==(0);
        if ($662) {
         $663 = (($a$3$i) + 3)|0;
         $664 = $663 & 127;
         $665 = ($664|0)==($z$7$1$i|0);
         if ($665) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $666 = $667 * 0.25;
        $668 = $666 + $frac$0$i;
        $frac$1$i = $668;
       } else {
        $669 = ($660>>>0)>(500000000);
        if ($669) {
         $670 = $667 * 0.75;
         $671 = $670 + $frac$0$i;
         $frac$1$i = $671;
         break;
        }
        $672 = (($a$3$i) + 3)|0;
        $673 = $672 & 127;
        $674 = ($673|0)==($z$7$1$i|0);
        if ($674) {
         $675 = $667 * 0.5;
         $676 = $675 + $frac$0$i;
         $frac$1$i = $676;
         break;
        } else {
         $677 = $667 * 0.75;
         $678 = $677 + $frac$0$i;
         $frac$1$i = $678;
         break;
        }
       }
      } while(0);
      $679 = (53 - ($$09$i))|0;
      $680 = ($679|0)>(1);
      if (!($680)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $681 = (+_fmodl((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $683 = $frac$1$i + 1.0;
      $frac$2$i = $683;
     }
    } while(0);
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($644|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $75 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $75 = $74;
    }
    $76 = ($75|0)==(40);
    if ($76) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81>>0]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61>>0]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75>>0]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 18446744073709551616.0;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.98846567431157953864E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.98846567431157953864E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.22507385850720138309E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.22507385850720138309E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 3]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 3]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $7 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 3]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 3]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 3]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i38 = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i44 = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i49$i = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i60 = 0, $$0$lcssa$i63$i = 0;
 var $$0$lcssa$i67 = 0, $$0$lcssa$i69$i = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i78 = 0, $$0$lcssa$i85$i = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i36 = 0, $$01$i37$i = 0, $$01$i44$i = 0, $$01$i51 = 0, $$01$i54$i = 0, $$01$i58 = 0, $$01$i61$i = 0, $$01$i65 = 0, $$01$i67$i = 0;
 var $$01$i74$i = 0, $$01$i76 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i86$i = 0, $$012$i = 0, $$012$i73 = 0, $$03$i41 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i80$i = 0, $$06$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i113$i = 0, $$113$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i111$i = 0;
 var $$12$i120$i = 0, $$12$i135$i = 0, $$12$i88$i = 0, $$14 = 0, $$15 = 0, $$16 = 0, $$18 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us160$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$22$i = 0.0, $$24$i = 0, $$26$i = 0, $$29$$24$i = 0, $$29$$26$i = 0, $$29$i = 0;
 var $$3$i = 0.0, $$310$i = 0, $$32$i = 0, $$4$i = 0.0, $$411$lcssa$i = 0, $$411176$i = 0, $$5194$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us319$i = 0, $$a$3$us320$i = 0, $$a$3321$i = 0, $$a$3322$i = 0, $$fl$4 = 0, $$lcssa94 = 0, $$mask$i = 0, $$mask$i31 = 0, $$mask1$i = 0, $$mask1$i30 = 0, $$neg152$i = 0;
 var $$neg153$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr147$i = 0, $$pre = 0, $$pre$i = 0, $$pre291 = 0, $$pre292 = 0, $$pre312$i = 0, $$sink = 0, $$sum$i = 0, $$sum14$i = 0, $$sum15$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0.0, $104 = 0, $1040 = 0.0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1048$phi = 0, $1049 = 0, $1049$phi = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0;
 var $510 = 0.0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0.0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0.0, $728 = 0.0, $729 = 0, $73 = 0, $730 = 0.0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1257$i = 0, $a$2 = 0, $a$2$i = 0, $a$3$lcssa$i = 0, $a$3245$i = 0, $a$3245$us$i = 0, $a$6$i = 0, $a$7$i = 0, $arglist_current = 0, $arglist_current12 = 0, $arglist_current15 = 0, $arglist_current18 = 0, $arglist_current21 = 0, $arglist_current24 = 0, $arglist_current27 = 0;
 var $arglist_current3 = 0, $arglist_current30 = 0, $arglist_current33 = 0, $arglist_current36 = 0, $arglist_current39 = 0, $arglist_current42 = 0, $arglist_current45 = 0, $arglist_current48 = 0, $arglist_current51 = 0, $arglist_current54 = 0, $arglist_current57 = 0, $arglist_current6 = 0, $arglist_current60 = 0, $arglist_current63 = 0, $arglist_current9 = 0, $arglist_next = 0, $arglist_next10 = 0, $arglist_next13 = 0, $arglist_next16 = 0, $arglist_next19 = 0;
 var $arglist_next22 = 0, $arglist_next25 = 0, $arglist_next28 = 0, $arglist_next31 = 0, $arglist_next34 = 0, $arglist_next37 = 0, $arglist_next4 = 0, $arglist_next40 = 0, $arglist_next43 = 0, $arglist_next46 = 0, $arglist_next49 = 0, $arglist_next52 = 0, $arglist_next55 = 0, $arglist_next58 = 0, $arglist_next61 = 0, $arglist_next64 = 0, $arglist_next7 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0239$i = 0, $carry3$0239$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0251$i = 0, $d$1238$i = 0, $d$1238$us$i = 0, $d$2$a$3$i = 0, $d$2$lcssa$i = 0, $d$2220$i = 0, $d$3$i = 0, $d$4184$i = 0, $d$5175$i = 0, $d$6193$i = 0, $e$0233$i = 0, $e$1$i = 0, $e$2215$i = 0;
 var $e$3$i = 0, $e$4$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0102 = 0, $fl$0106 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0167 = 0, $i$0169 = 0;
 var $i$0234$i = 0, $i$03$i = 0, $i$03$i23 = 0, $i$1$lcssa$i = 0, $i$1175 = 0, $i$1226$i = 0, $i$2216$i = 0, $i$291 = 0, $i$3210$i = 0, $i$390 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i25 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i22 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i24 = 0;
 var $isdigittmp1$i = 0, $isdigittmp1$i21 = 0, $isdigittmp11 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0225$i = 0, $j$0227$i = 0, $j$1211$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1168 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0;
 var $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i36$i = 0, $or$cond$i43$i = 0, $or$cond$i50 = 0, $or$cond$i53$i = 0, $or$cond$i57 = 0, $or$cond$i60$i = 0, $or$cond$i64 = 0, $or$cond$i72 = 0, $or$cond$i73$i = 0, $or$cond$i75 = 0, $or$cond$i94$i = 0, $or$cond19$i = 0, $or$cond19315$i = 0, $or$cond23$i = 0, $or$cond29$i = 0, $or$cond29174$i = 0;
 var $or$cond3$i = 0, $or$cond30$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$7$i = 0;
 var $re$0$i = 0, $re$1166$i = 0, $round$0165$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us159$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us161$i = 0, $s1$0$i = 0, $s7$0181$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0170$i = 0, $s9$0$i = 0, $s9$1189$i = 0;
 var $s9$2$i = 0, $sext = 0, $sext86 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8100 = 0, $storemerge8105 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$31$i = 0, $wc = 0, $ws$0170 = 0;
 var $ws$1176 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i110$i = 0, $y$03$i119$i = 0, $y$03$i134$i = 0, $y$03$i87$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$095 = 0, $z$1$lcssa$i = 0, $z$1256$i = 0, $z$2 = 0, $z$2$i = 0, $z$2316$i = 0, $z$2317$i = 0, $z$3$lcssa$i = 0, $z$3244$i = 0, $z$3244$us$i = 0, $z$4$i = 0;
 var $z$4$us$i = 0, $z$5$i = 0, $z$6$i = 0, $z$7$$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 848|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 812|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 800|0;
 $pad$i = sp + 544|0;
 $buf = sp + 504|0;
 $wc = sp;
 $mb = sp + 496|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 264|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1048 = 0;$1049 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 339;
   break;
  } else {
   $1050 = $21;$25 = $22;
  }
  while(1) {
   if ((($1050<<24>>24) == 0)) {
    $$lcssa94 = $25;$z$0$lcssa = $25;
    break;
   } else if ((($1050<<24>>24) == 37)) {
    $27 = $25;$z$095 = $25;
    label = 9;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1050 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa94 = $27;$z$0$lcssa = $z$095;
      break L12;
     }
     $30 = (($z$095) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$095 = $30;
      label = 9;
     } else {
      $$lcssa94 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1049$phi = $1049;$1048$phi = $1048;$22 = $$lcssa94;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1049 = $1049$phi;$1048 = $1048$phi;
   continue;
  }
  $38 = (($$lcssa94) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa94) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa94) + 3|0);
    $$pre291 = HEAP8[$44>>0]|0;
    $46 = $$pre291;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0106 = 0;$storemerge8105 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $64 = $55;$fl$0102 = $fl$0106;$storemerge8100 = $storemerge8105;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0106;
     $59 = (($storemerge8105) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0106 = $58;$storemerge8105 = $59;
     } else {
      $64 = $60;$fl$0102 = $58;$storemerge8100 = $59;
      break;
     }
    }
   } else {
    $64 = $46;$fl$0102 = 0;$storemerge8100 = $storemerge;
   }
  } while(0);
  $65 = ($64<<24>>24)==(42);
  do {
   if ($65) {
    $66 = (($storemerge8100) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp11 = (($68) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $69 = (($storemerge8100) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge8100) + 3|0);
      $l10n$2 = 1;$storemerge13 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 357;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0102;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0102 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge13;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge13;$fl$1 = $fl$0102;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $64 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge8100;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 357;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0102;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge8100;$fl$1 = $fl$0102;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i21 = (($125) + -48)|0;
     $isdigit2$i22 = ($isdigittmp1$i21>>>0)<(10);
     if ($isdigit2$i22) {
      $128 = $125;$131 = $102;$i$03$i23 = 0;
     } else {
      $1051 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i23*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i24 = (($133) + -48)|0;
      $isdigit$i25 = ($isdigittmp$i24>>>0)<(10);
      if ($isdigit$i25) {
       $128 = $133;$131 = $130;$i$03$i23 = $129;
      } else {
       $1051 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp9 = (($107) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1051 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 357;
     break L1;
    }
    if ($1) {
     $arglist_current3 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current3>>2]|0;
     $arglist_next4 = (($arglist_current3) + 4|0);
     HEAP32[$ap>>2] = $arglist_next4;
     $1051 = $105;$p$0 = $124;
    } else {
     $1051 = $105;$p$0 = 0;
    }
   } else {
    $1051 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1051;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 357;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((60640 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 357;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 357;
     break L1;
    }
    if ($1) {
     $198 = $134;$206 = $1049;$227 = $1048;
    } else {
     $1049$phi = $1049;$1048$phi = $1048;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;$1049 = $1049$phi;$1048 = $1048$phi;
     continue L1;
    }
   } else {
    L69: do {
     if ($147) {
      $148 = (($nl_type) + ($argpos$0<<2)|0);
      HEAP32[$148>>2] = $142;
      $149 = (($nl_arg) + ($argpos$0<<3)|0);
      $150 = $149;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = (($150) + 4)|0;
      $154 = $153;
      $155 = HEAP32[$154>>2]|0;
      $$sink = $152;$1052 = $152;$1053 = $155;
      label = 64;
     } else {
      if (!($1)) {
       $$0 = 0;
       label = 357;
       break L1;
      }
      $156 = ($141&255)>(20);
      if ($156) {
       $198 = $134;$206 = $1049;$227 = $1048;
       break L65;
      }
      do {
       switch ($142|0) {
       case 9:  {
        $arglist_current6 = HEAP32[$ap>>2]|0;
        $157 = HEAP32[$arglist_current6>>2]|0;
        $arglist_next7 = (($arglist_current6) + 4|0);
        HEAP32[$ap>>2] = $arglist_next7;
        $1054 = $157;$1055 = $1048;
        break L69;
        break;
       }
       case 13:  {
        $arglist_current18 = HEAP32[$ap>>2]|0;
        $171 = HEAP32[$arglist_current18>>2]|0;
        $arglist_next19 = (($arglist_current18) + 4|0);
        HEAP32[$ap>>2] = $arglist_next19;
        $172 = $171&65535;
        $173 = $172 << 16 >> 16;
        $174 = ($173|0)<(0);
        $175 = $174 << 31 >> 31;
        $sext86 = $171 << 16;
        $176 = $sext86 >> 16;
        $177 = $176;
        $1054 = $177;$1055 = $175;
        break L69;
        break;
       }
       case 18:  {
        $arglist_current33 = HEAP32[$ap>>2]|0;
        HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current33>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current33+4>>2];$193 = +HEAPF64[tempDoublePtr>>3];
        $arglist_next34 = (($arglist_current33) + 8|0);
        HEAP32[$ap>>2] = $arglist_next34;
        HEAPF64[tempDoublePtr>>3] = $193;$194 = HEAP32[tempDoublePtr>>2]|0;
        $195 = HEAP32[tempDoublePtr+4>>2]|0;
        $$sink = $194;$1052 = $194;$1053 = $195;
        label = 64;
        break L69;
        break;
       }
       case 17:  {
        $arglist_current30 = HEAP32[$ap>>2]|0;
        HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current30>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current30+4>>2];$189 = +HEAPF64[tempDoublePtr>>3];
        $arglist_next31 = (($arglist_current30) + 8|0);
        HEAP32[$ap>>2] = $arglist_next31;
        HEAPF64[tempDoublePtr>>3] = $189;$190 = HEAP32[tempDoublePtr>>2]|0;
        $191 = HEAP32[tempDoublePtr+4>>2]|0;
        $192 = $190;
        $1054 = $192;$1055 = $191;
        break L69;
        break;
       }
       case 11:  {
        $arglist_current12 = HEAP32[$ap>>2]|0;
        $162 = HEAP32[$arglist_current12>>2]|0;
        $arglist_next13 = (($arglist_current12) + 4|0);
        HEAP32[$ap>>2] = $arglist_next13;
        $163 = $162;
        $1054 = $163;$1055 = 0;
        break L69;
        break;
       }
       case 14:  {
        $arglist_current21 = HEAP32[$ap>>2]|0;
        $178 = HEAP32[$arglist_current21>>2]|0;
        $arglist_next22 = (($arglist_current21) + 4|0);
        HEAP32[$ap>>2] = $arglist_next22;
        $$mask1$i30 = $178 & 65535;
        $179 = $$mask1$i30;
        $1054 = $179;$1055 = 0;
        break L69;
        break;
       }
       case 12:  {
        $arglist_current15 = HEAP32[$ap>>2]|0;
        $164 = $arglist_current15;
        $165 = $164;
        $166 = HEAP32[$165>>2]|0;
        $167 = (($164) + 4)|0;
        $168 = $167;
        $169 = HEAP32[$168>>2]|0;
        $arglist_next16 = (($arglist_current15) + 8|0);
        HEAP32[$ap>>2] = $arglist_next16;
        $170 = $166;
        $1054 = $170;$1055 = $169;
        break L69;
        break;
       }
       case 10:  {
        $arglist_current9 = HEAP32[$ap>>2]|0;
        $158 = HEAP32[$arglist_current9>>2]|0;
        $arglist_next10 = (($arglist_current9) + 4|0);
        HEAP32[$ap>>2] = $arglist_next10;
        $159 = ($158|0)<(0);
        $160 = $159 << 31 >> 31;
        $161 = $158;
        $1054 = $161;$1055 = $160;
        break L69;
        break;
       }
       case 16:  {
        $arglist_current27 = HEAP32[$ap>>2]|0;
        $187 = HEAP32[$arglist_current27>>2]|0;
        $arglist_next28 = (($arglist_current27) + 4|0);
        HEAP32[$ap>>2] = $arglist_next28;
        $$mask$i31 = $187 & 255;
        $188 = $$mask$i31;
        $1054 = $188;$1055 = 0;
        break L69;
        break;
       }
       case 15:  {
        $arglist_current24 = HEAP32[$ap>>2]|0;
        $180 = HEAP32[$arglist_current24>>2]|0;
        $arglist_next25 = (($arglist_current24) + 4|0);
        HEAP32[$ap>>2] = $arglist_next25;
        $181 = $180&255;
        $182 = $181 << 24 >> 24;
        $183 = ($182|0)<(0);
        $184 = $183 << 31 >> 31;
        $sext = $180 << 24;
        $185 = $sext >> 24;
        $186 = $185;
        $1054 = $186;$1055 = $184;
        break L69;
        break;
       }
       default: {
        $1054 = $1049;$1055 = $1048;
        break L69;
       }
       }
      } while(0);
     }
    } while(0);
    if ((label|0) == 64) {
     label = 0;
     $196 = $$sink;
     if ($1) {
      $1054 = $196;$1055 = $1053;
     } else {
      $1048 = $1053;$1049 = $196;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
      continue L1;
     }
    }
    $$pre292 = HEAP8[$135>>0]|0;
    $198 = $$pre292;$206 = $1054;$227 = $1055;
   }
  } while(0);
  $197 = $198 << 24 >> 24;
  $199 = ($st$0|0)==(0);
  if ($199) {
   $t$0 = $197;
  } else {
   $200 = $197 & 15;
   $201 = ($200|0)==(3);
   $202 = $197 & -33;
   $$ = $201 ? $202 : $197;
   $t$0 = $$;
  }
  $203 = $fl$1 & 8192;
  $204 = ($203|0)==(0);
  $205 = $fl$1 & -65537;
  $fl$1$ = $204 ? $fl$1 : $205;
  L92: do {
   switch ($t$0|0) {
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 78;
    break;
   }
   case 115:  {
    $323 = ($206|0)==(0|0);
    $$18 = $323 ? 61120 : $206;
    $a$1 = $$18;
    label = 100;
    break;
   }
   case 109:  {
    $320 = (___errno_location()|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = (_strerror(($321|0))|0);
    $a$1 = $322;
    label = 100;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 2:  {
     $207 = ($cnt$1|0)<(0);
     $208 = $207 << 31 >> 31;
     $209 = $206;
     $210 = $209;
     HEAP32[$210>>2] = $cnt$1;
     $211 = (($209) + 4)|0;
     $212 = $211;
     HEAP32[$212>>2] = $208;
     $1048 = $227;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $213 = $cnt$1&65535;
     HEAP16[$206>>1] = $213;
     $1048 = $227;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $214 = $cnt$1&255;
     HEAP8[$206>>0] = $214;
     $1048 = $227;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $227;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $215 = ($cnt$1|0)<(0);
     $216 = $215 << 31 >> 31;
     $217 = $206;
     $218 = $217;
     HEAP32[$218>>2] = $cnt$1;
     $219 = (($217) + 4)|0;
     $220 = $219;
     HEAP32[$220>>2] = $216;
     $1048 = $227;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $227;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $227;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1048 = $227;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 99:  {
    $318 = $206;
    $319 = $318&255;
    HEAP8[$4>>0] = $319;
    $1056 = $227;$1057 = $206;$a$2 = $4;$fl$6 = $205;$p$5 = 1;$pl$2 = 0;$prefix$2 = 61104;$z$2 = $2;
    break;
   }
   case 111:  {
    $248 = $206;
    $249 = ($248|0)==(0);
    $250 = ($227|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i44 = $2;
    } else {
     $$03$i41 = $2;$253 = $248;$257 = $227;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = (($$03$i41) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i44 = $256;
       break;
      } else {
       $$03$i41 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $306 = $206;$309 = $227;$a$0 = $$0$lcssa$i44;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 61104;
     label = 95;
    } else {
     $$14 = $251 ? 61104 : ((61104 + 5|0));
     $265 = $251&1;
     $$15 = $265 ^ 1;
     $306 = $206;$309 = $227;$a$0 = $$0$lcssa$i44;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$15;$prefix$1 = $$14;
     label = 95;
    }
    break;
   }
   case 105: case 100:  {
    $266 = $206;
    $267 = ($227|0)<(0);
    if ($267) {
     $268 = (_i64Subtract(0,0,($266|0),($227|0))|0);
     $269 = tempRet0;
     $270 = $268;
     $275 = $270;$277 = $269;$pl$0 = 1;$prefix$0 = 61104;
     label = 90;
     break L92;
    }
    $271 = $fl$1$ & 2048;
    $272 = ($271|0)==(0);
    if ($272) {
     $273 = $fl$1$ & 1;
     $274 = ($273|0)==(0);
     $$16 = $274 ? 61104 : ((61104 + 2|0));
     $275 = $206;$277 = $227;$pl$0 = $273;$prefix$0 = $$16;
     label = 90;
    } else {
     $275 = $206;$277 = $227;$pl$0 = 1;$prefix$0 = ((61104 + 1|0));
     label = 90;
    }
    break;
   }
   case 117:  {
    $275 = $206;$277 = $227;$pl$0 = 0;$prefix$0 = 61104;
    label = 90;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $367 = $206;
    HEAP32[tempDoublePtr>>2] = $367;HEAP32[tempDoublePtr+4>>2] = $227;$368 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $369 = ($227|0)<(0);
    if ($369) {
     $370 = -$368;
     $$06$i = $370;$pl$0$i = 1;$prefix$0$i = 61128;
    } else {
     $371 = $fl$1$ & 2048;
     $372 = ($371|0)==(0);
     if ($372) {
      $373 = $fl$1$ & 1;
      $374 = ($373|0)==(0);
      $$$i = $374 ? ((61128 + 1|0)) : ((61128 + 6|0));
      $$06$i = $368;$pl$0$i = $373;$prefix$0$i = $$$i;
     } else {
      $$06$i = $368;$pl$0$i = 1;$prefix$0$i = ((61128 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$06$i;$375 = HEAP32[tempDoublePtr>>2]|0;
    $376 = HEAP32[tempDoublePtr+4>>2]|0;
    $377 = $376 & 2146435072;
    $378 = ($377>>>0)<(2146435072);
    $379 = ($377|0)==(2146435072);
    $380 = (0)<(0);
    $381 = $379 & $380;
    $382 = $378 | $381;
    if (!($382)) {
     $383 = $t$0 & 32;
     $384 = ($383|0)!=(0);
     $385 = $384 ? 61152 : 61160;
     $386 = ($$06$i != $$06$i) | (0.0 != 0.0);
     if ($386) {
      $387 = $384 ? 61168 : 61176;
      $pl$1$i = 0;$s1$0$i = $387;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $385;
     }
     $388 = (($pl$1$i) + 3)|0;
     $389 = $fl$1$ & 8192;
     $390 = ($389|0)==(0);
     $391 = ($388|0)<($w$1|0);
     $or$cond$i36$i = $390 & $391;
     if ($or$cond$i36$i) {
      $392 = (($w$1) - ($388))|0;
      $393 = ($392>>>0)>(256);
      $394 = $393 ? 256 : $392;
      _memset(($pad$i|0),32,($394|0))|0;
      $395 = ($392>>>0)>(255);
      if ($395) {
       $$01$i37$i = $392;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $396 = (($$01$i37$i) + -256)|0;
        $397 = ($396>>>0)>(255);
        if ($397) {
         $$01$i37$i = $396;
        } else {
         $$0$lcssa$i39$i = $396;
         break;
        }
       }
      } else {
       $$0$lcssa$i39$i = $392;
      }
      (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $398 = $fl$1$ & 73728;
     $399 = ($398|0)==(8192);
     $or$cond$i43$i = $399 & $391;
     if ($or$cond$i43$i) {
      $400 = (($w$1) - ($388))|0;
      $401 = ($400>>>0)>(256);
      $402 = $401 ? 256 : $400;
      _memset(($pad$i|0),32,($402|0))|0;
      $403 = ($400>>>0)>(255);
      if ($403) {
       $$01$i44$i = $400;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $404 = (($$01$i44$i) + -256)|0;
        $405 = ($404>>>0)>(255);
        if ($405) {
         $$01$i44$i = $404;
        } else {
         $$0$lcssa$i46$i = $404;
         break;
        }
       }
      } else {
       $$0$lcssa$i46$i = $400;
      }
      (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
     }
     $w$$i = $391 ? $w$1 : $388;
     $1048 = $227;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $406 = (+_frexpl($$06$i,$e2$i));
    $407 = $406 * 2.0;
    $408 = $407 != 0.0;
    if ($408) {
     $409 = HEAP32[$e2$i>>2]|0;
     $410 = (($409) + -1)|0;
     HEAP32[$e2$i>>2] = $410;
    }
    $411 = $t$0 | 32;
    $412 = ($411|0)==(97);
    if ($412) {
     $413 = $t$0 & 32;
     $414 = ($413|0)==(0);
     $415 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $414 ? $prefix$0$i : $415;
     $416 = $pl$0$i | 2;
     $417 = ($p$0>>>0)>(11);
     $418 = (12 - ($p$0))|0;
     $re$0$i = $417 ? 0 : $418;
     $419 = ($re$0$i|0)==(0);
     do {
      if ($419) {
       $$1$i = $407;
      } else {
       $re$1166$i = $re$0$i;$round$0165$i = 8.0;
       while(1) {
        $420 = (($re$1166$i) + -1)|0;
        $421 = $round$0165$i * 16.0;
        $422 = ($420|0)==(0);
        if ($422) {
         break;
        } else {
         $re$1166$i = $420;$round$0165$i = $421;
        }
       }
       $423 = HEAP8[$prefix$0$$i>>0]|0;
       $424 = ($423<<24>>24)==(45);
       if ($424) {
        $425 = -$407;
        $426 = $425 - $421;
        $427 = $421 + $426;
        $428 = -$427;
        $$1$i = $428;
        break;
       } else {
        $429 = $407 + $421;
        $430 = $429 - $421;
        $$1$i = $430;
        break;
       }
      }
     } while(0);
     $431 = HEAP32[$e2$i>>2]|0;
     $432 = ($431|0)<(0);
     $433 = (0 - ($431))|0;
     $434 = $432 ? $433 : $431;
     $435 = ($434|0)<(0);
     if ($435) {
      $436 = ($434|0)<(0);
      $437 = $436 << 31 >> 31;
      $$05$i$i = $6;$438 = $434;$439 = $437;
      while(1) {
       $440 = (___uremdi3(($438|0),($439|0),10,0)|0);
       $441 = tempRet0;
       $442 = $440 | 48;
       $443 = $442&255;
       $444 = (($$05$i$i) + -1|0);
       HEAP8[$444>>0] = $443;
       $445 = (___udivdi3(($438|0),($439|0),10,0)|0);
       $446 = tempRet0;
       $447 = ($439>>>0)>(9);
       $448 = ($439|0)==(9);
       $449 = ($438>>>0)>(4294967295);
       $450 = $448 & $449;
       $451 = $447 | $450;
       if ($451) {
        $$05$i$i = $444;$438 = $445;$439 = $446;
       } else {
        break;
       }
      }
      $$0$lcssa$i49$i = $444;$$01$lcssa$off0$i$i = $445;
     } else {
      $$0$lcssa$i49$i = $6;$$01$lcssa$off0$i$i = $434;
     }
     $452 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($452) {
      $$1$lcssa$i$i = $$0$lcssa$i49$i;
     } else {
      $$12$i$i = $$0$lcssa$i49$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $453 = (($y$03$i$i>>>0) % 10)&-1;
       $454 = $453 | 48;
       $455 = $454&255;
       $456 = (($$12$i$i) + -1|0);
       HEAP8[$456>>0] = $455;
       $457 = (($y$03$i$i>>>0) / 10)&-1;
       $458 = ($y$03$i$i>>>0)<(10);
       if ($458) {
        $$1$lcssa$i$i = $456;
        break;
       } else {
        $$12$i$i = $456;$y$03$i$i = $457;
       }
      }
     }
     $459 = ($$1$lcssa$i$i|0)==($6|0);
     if ($459) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $460 = HEAP32[$e2$i>>2]|0;
     $461 = $460 >> 31;
     $462 = $461 & 2;
     $463 = (($462) + 43)|0;
     $464 = $463&255;
     $465 = (($estr$0$i) + -1|0);
     HEAP8[$465>>0] = $464;
     $466 = (($t$0) + 15)|0;
     $467 = $466&255;
     $468 = (($estr$0$i) + -2|0);
     HEAP8[$468>>0] = $467;
     $469 = ($p$0|0)>(0);
     $470 = $fl$1$ & 8;
     $471 = ($470|0)==(0);
     if ($469) {
      if ($471) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $472 = (~~(($$2$us$us$i)));
        $473 = (61184 + ($472)|0);
        $474 = HEAP8[$473>>0]|0;
        $475 = $474&255;
        $476 = $475 | $413;
        $477 = $476&255;
        $478 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $477;
        $479 = (+($472|0));
        $480 = $$2$us$us$i - $479;
        $481 = $480 * 16.0;
        $482 = $478;
        $483 = (($482) - ($0))|0;
        $484 = ($483|0)==(1);
        if ($484) {
         $485 = (($s$0$us$us$i) + 2|0);
         HEAP8[$478>>0] = 46;
         $s$1$us$us$i = $485;
        } else {
         $s$1$us$us$i = $478;
        }
        $486 = $481 != 0.0;
        if ($486) {
         $$2$us$us$i = $481;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $487 = (~~(($$2$us$i)));
        $488 = (61184 + ($487)|0);
        $489 = HEAP8[$488>>0]|0;
        $490 = $489&255;
        $491 = $490 | $413;
        $492 = $491&255;
        $493 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $492;
        $494 = (+($487|0));
        $495 = $$2$us$i - $494;
        $496 = $495 * 16.0;
        $497 = $493;
        $498 = (($497) - ($0))|0;
        $499 = ($498|0)==(1);
        if ($499) {
         $500 = (($s$0$us$i) + 2|0);
         HEAP8[$493>>0] = 46;
         $s$1$us$i = $500;
        } else {
         $s$1$us$i = $493;
        }
        $501 = $496 != 0.0;
        if ($501) {
         $$2$us$i = $496;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($471) {
       $$2$us160$i = $$1$i;$s$0$us159$i = $buf$i;
       while(1) {
        $502 = (~~(($$2$us160$i)));
        $503 = (61184 + ($502)|0);
        $504 = HEAP8[$503>>0]|0;
        $505 = $504&255;
        $506 = $505 | $413;
        $507 = $506&255;
        $508 = (($s$0$us159$i) + 1|0);
        HEAP8[$s$0$us159$i>>0] = $507;
        $509 = (+($502|0));
        $510 = $$2$us160$i - $509;
        $511 = $510 * 16.0;
        $512 = $508;
        $513 = (($512) - ($0))|0;
        $514 = ($513|0)==(1);
        $515 = $511 != 0.0;
        $or$cond$i72 = $514 & $515;
        if ($or$cond$i72) {
         $516 = (($s$0$us159$i) + 2|0);
         HEAP8[$508>>0] = 46;
         $s$1$us161$i = $516;
        } else {
         $s$1$us161$i = $508;
        }
        if ($515) {
         $$2$us160$i = $511;$s$0$us159$i = $s$1$us161$i;
        } else {
         $s$1$lcssa$i = $s$1$us161$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $517 = (~~(($$2$i)));
        $518 = (61184 + ($517)|0);
        $519 = HEAP8[$518>>0]|0;
        $520 = $519&255;
        $521 = $520 | $413;
        $522 = $521&255;
        $523 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $522;
        $524 = (+($517|0));
        $525 = $$2$i - $524;
        $526 = $525 * 16.0;
        $527 = $523;
        $528 = (($527) - ($0))|0;
        $529 = ($528|0)==(1);
        if ($529) {
         $530 = (($s$0$i) + 2|0);
         HEAP8[$523>>0] = 46;
         $s$1$i = $530;
        } else {
         $s$1$i = $523;
        }
        $531 = $526 != 0.0;
        if ($531) {
         $$2$i = $526;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $532 = ($p$0|0)==(0);
     $$pre312$i = $s$1$lcssa$i;
     do {
      if ($532) {
       label = 174;
      } else {
       $533 = (($10) + ($$pre312$i))|0;
       $534 = ($533|0)<($p$0|0);
       if (!($534)) {
        label = 174;
        break;
       }
       $535 = $468;
       $536 = (($11) + ($p$0))|0;
       $537 = (($536) - ($535))|0;
       $l$0$i = $537;
      }
     } while(0);
     if ((label|0) == 174) {
      label = 0;
      $538 = $468;
      $539 = (($9) - ($538))|0;
      $540 = (($539) + ($$pre312$i))|0;
      $l$0$i = $540;
     }
     $541 = (($l$0$i) + ($416))|0;
     $542 = $fl$1$ & 73728;
     $543 = ($542|0)==(0);
     $544 = ($541|0)<($w$1|0);
     $or$cond$i53$i = $543 & $544;
     if ($or$cond$i53$i) {
      $545 = (($w$1) - ($541))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i54$i = $545;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $549 = (($$01$i54$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i54$i = $549;
        } else {
         $$0$lcssa$i56$i = $549;
         break;
        }
       }
      } else {
       $$0$lcssa$i56$i = $545;
      }
      (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$416,$f)|0);
     $551 = ($542|0)==(65536);
     $or$cond$i60$i = $551 & $544;
     if ($or$cond$i60$i) {
      $552 = (($w$1) - ($541))|0;
      $553 = ($552>>>0)>(256);
      $554 = $553 ? 256 : $552;
      _memset(($pad$i|0),48,($554|0))|0;
      $555 = ($552>>>0)>(255);
      if ($555) {
       $$01$i61$i = $552;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $556 = (($$01$i61$i) + -256)|0;
        $557 = ($556>>>0)>(255);
        if ($557) {
         $$01$i61$i = $556;
        } else {
         $$0$lcssa$i63$i = $556;
         break;
        }
       }
      } else {
       $$0$lcssa$i63$i = $552;
      }
      (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
     }
     $558 = (($$pre312$i) - ($0))|0;
     (___fwritex($buf$i,$558,$f)|0);
     $559 = $468;
     $560 = (($8) - ($559))|0;
     $561 = (($l$0$i) - ($560))|0;
     $562 = (($561) - ($558))|0;
     $563 = ($562|0)>(0);
     if ($563) {
      $564 = ($562>>>0)>(256);
      $565 = $564 ? 256 : $562;
      _memset(($pad$i|0),48,($565|0))|0;
      $566 = ($562>>>0)>(255);
      if ($566) {
       $$01$i67$i = $562;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $567 = (($$01$i67$i) + -256)|0;
        $568 = ($567>>>0)>(255);
        if ($568) {
         $$01$i67$i = $567;
        } else {
         $$0$lcssa$i69$i = $567;
         break;
        }
       }
      } else {
       $$0$lcssa$i69$i = $562;
      }
      (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
     }
     (___fwritex($468,$560,$f)|0);
     $569 = ($542|0)==(8192);
     $or$cond$i73$i = $569 & $544;
     if ($or$cond$i73$i) {
      $570 = (($w$1) - ($541))|0;
      $571 = ($570>>>0)>(256);
      $572 = $571 ? 256 : $570;
      _memset(($pad$i|0),32,($572|0))|0;
      $573 = ($570>>>0)>(255);
      if ($573) {
       $$01$i74$i = $570;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $574 = (($$01$i74$i) + -256)|0;
        $575 = ($574>>>0)>(255);
        if ($575) {
         $$01$i74$i = $574;
        } else {
         $$0$lcssa$i76$i = $574;
         break;
        }
       }
      } else {
       $$0$lcssa$i76$i = $570;
      }
      (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
     }
     $w$18$i = $544 ? $w$1 : $541;
     $1048 = $227;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $576 = ($p$0|0)<(0);
    $$p$i = $576 ? 6 : $p$0;
    if ($408) {
     $577 = $407 * 268435456.0;
     $578 = HEAP32[$e2$i>>2]|0;
     $579 = (($578) + -28)|0;
     HEAP32[$e2$i>>2] = $579;
     $$3$i = $577;$580 = $579;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $407;$580 = $$pre$i;
    }
    $581 = ($580|0)<(0);
    $$32$i = $581 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$32$i;
    while(1) {
     $582 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $582;
     $583 = (($z$0$i) + 4|0);
     $584 = (+($582>>>0));
     $585 = $$4$i - $584;
     $586 = $585 * 1.0E+9;
     $587 = $586 != 0.0;
     if ($587) {
      $$4$i = $586;$z$0$i = $583;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $588 = ($$pr$i|0)>(0);
    if ($588) {
     $589 = $$pr$i;$a$1257$i = $$32$i;$z$1256$i = $583;
     while(1) {
      $590 = ($589|0)>(29);
      $591 = $590 ? 29 : $589;
      $592 = (($z$1256$i) + -4|0);
      $593 = ($592>>>0)<($a$1257$i>>>0);
      do {
       if ($593) {
        $594 = HEAP32[$592>>2]|0;
        $595 = ($594|0)==(0);
        $596 = ($z$1256$i>>>0)>($a$1257$i>>>0);
        $or$cond19315$i = $595 & $596;
        $z$2316$i = $or$cond19315$i ? $592 : $z$1256$i;
        $a$2$i = $a$1257$i;$z$2317$i = $z$2316$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $592;
        while(1) {
         $597 = HEAP32[$d$0251$i>>2]|0;
         $598 = (_bitshift64Shl(($597|0),0,($591|0))|0);
         $599 = tempRet0;
         $600 = (_i64Add(($598|0),($599|0),($carry$0250$i|0),0)|0);
         $601 = tempRet0;
         $602 = (___uremdi3(($600|0),($601|0),1000000000,0)|0);
         $603 = tempRet0;
         HEAP32[$d$0251$i>>2] = $602;
         $604 = (___udivdi3(($600|0),($601|0),1000000000,0)|0);
         $605 = tempRet0;
         $606 = (($d$0251$i) + -4|0);
         $607 = ($606>>>0)<($a$1257$i>>>0);
         if ($607) {
          break;
         } else {
          $carry$0250$i = $604;$d$0251$i = $606;
         }
        }
        $608 = HEAP32[$592>>2]|0;
        $609 = ($608|0)==(0);
        $610 = ($z$1256$i>>>0)>($a$1257$i>>>0);
        $or$cond19$i = $609 & $610;
        $z$2$i = $or$cond19$i ? $592 : $z$1256$i;
        $611 = ($604|0)==(0);
        if ($611) {
         $a$2$i = $a$1257$i;$z$2317$i = $z$2$i;
         break;
        }
        $612 = (($a$1257$i) + -4|0);
        HEAP32[$612>>2] = $604;
        $a$2$i = $612;$z$2317$i = $z$2$i;
       }
      } while(0);
      $613 = HEAP32[$e2$i>>2]|0;
      $614 = (($613) - ($591))|0;
      HEAP32[$e2$i>>2] = $614;
      $615 = ($614|0)>(0);
      if ($615) {
       $589 = $614;$a$1257$i = $a$2$i;$z$1256$i = $z$2317$i;
      } else {
       $$pr147$i = $614;$a$1$lcssa$i = $a$2$i;$z$1$lcssa$i = $z$2317$i;
       break;
      }
     }
    } else {
     $$pr147$i = $$pr$i;$a$1$lcssa$i = $$32$i;$z$1$lcssa$i = $583;
    }
    $616 = ($$pr147$i|0)<(0);
    L248: do {
     if ($616) {
      $617 = ($411|0)==(102);
      $618 = (($$p$i|0) / 9)&-1;
      $619 = (($618) + 2)|0;
      if ($617) {
       $620 = $$32$i;
       $621 = (($$32$i) + ($619<<2)|0);
       $623 = $$pr147$i;$a$3245$us$i = $a$1$lcssa$i;$z$3244$us$i = $z$1$lcssa$i;
       while(1) {
        $622 = (0 - ($623))|0;
        $624 = ($622|0)>(9);
        $$20$us$i = $624 ? 9 : $622;
        $625 = ($a$3245$us$i>>>0)<($z$3244$us$i>>>0);
        do {
         if ($625) {
          $650 = 1 << $$20$us$i;
          $644 = (($650) + -1)|0;
          $647 = 1000000000 >>> $$20$us$i;
          $carry3$0239$us$i = 0;$d$1238$us$i = $a$3245$us$i;
          while(1) {
           $642 = HEAP32[$d$1238$us$i>>2]|0;
           $643 = $642 & $644;
           $645 = $642 >>> $$20$us$i;
           $646 = (($645) + ($carry3$0239$us$i))|0;
           HEAP32[$d$1238$us$i>>2] = $646;
           $632 = Math_imul($643, $647)|0;
           $648 = (($d$1238$us$i) + 4|0);
           $649 = ($648>>>0)<($z$3244$us$i>>>0);
           if ($649) {
            $carry3$0239$us$i = $632;$d$1238$us$i = $648;
           } else {
            break;
           }
          }
          $629 = HEAP32[$a$3245$us$i>>2]|0;
          $630 = ($629|0)==(0);
          $631 = (($a$3245$us$i) + 4|0);
          $$a$3$us$i = $630 ? $631 : $a$3245$us$i;
          $633 = ($632|0)==(0);
          if ($633) {
           $$a$3$us320$i = $$a$3$us$i;$z$4$us$i = $z$3244$us$i;
           break;
          }
          $634 = (($z$3244$us$i) + 4|0);
          HEAP32[$z$3244$us$i>>2] = $632;
          $$a$3$us320$i = $$a$3$us$i;$z$4$us$i = $634;
         } else {
          $626 = HEAP32[$a$3245$us$i>>2]|0;
          $627 = ($626|0)==(0);
          $628 = (($a$3245$us$i) + 4|0);
          $$a$3$us319$i = $627 ? $628 : $a$3245$us$i;
          $$a$3$us320$i = $$a$3$us319$i;$z$4$us$i = $z$3244$us$i;
         }
        } while(0);
        $635 = $z$4$us$i;
        $636 = (($635) - ($620))|0;
        $637 = $636 >> 2;
        $638 = ($637|0)>($619|0);
        $$z$4$us$i = $638 ? $621 : $z$4$us$i;
        $639 = HEAP32[$e2$i>>2]|0;
        $640 = (($639) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $640;
        $641 = ($640|0)<(0);
        if ($641) {
         $623 = $640;$a$3245$us$i = $$a$3$us320$i;$z$3244$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us320$i;$z$3$lcssa$i = $$z$4$us$i;
         break L248;
        }
       }
      } else {
       $652 = $$pr147$i;$a$3245$i = $a$1$lcssa$i;$z$3244$i = $z$1$lcssa$i;
      }
      while(1) {
       $651 = (0 - ($652))|0;
       $653 = ($651|0)>(9);
       $$20$i = $653 ? 9 : $651;
       $654 = ($a$3245$i>>>0)<($z$3244$i>>>0);
       do {
        if ($654) {
         $658 = 1 << $$20$i;
         $659 = (($658) + -1)|0;
         $660 = 1000000000 >>> $$20$i;
         $carry3$0239$i = 0;$d$1238$i = $a$3245$i;
         while(1) {
          $661 = HEAP32[$d$1238$i>>2]|0;
          $662 = $661 & $659;
          $663 = $661 >>> $$20$i;
          $664 = (($663) + ($carry3$0239$i))|0;
          HEAP32[$d$1238$i>>2] = $664;
          $665 = Math_imul($662, $660)|0;
          $666 = (($d$1238$i) + 4|0);
          $667 = ($666>>>0)<($z$3244$i>>>0);
          if ($667) {
           $carry3$0239$i = $665;$d$1238$i = $666;
          } else {
           break;
          }
         }
         $668 = HEAP32[$a$3245$i>>2]|0;
         $669 = ($668|0)==(0);
         $670 = (($a$3245$i) + 4|0);
         $$a$3$i = $669 ? $670 : $a$3245$i;
         $671 = ($665|0)==(0);
         if ($671) {
          $$a$3322$i = $$a$3$i;$z$4$i = $z$3244$i;
          break;
         }
         $672 = (($z$3244$i) + 4|0);
         HEAP32[$z$3244$i>>2] = $665;
         $$a$3322$i = $$a$3$i;$z$4$i = $672;
        } else {
         $655 = HEAP32[$a$3245$i>>2]|0;
         $656 = ($655|0)==(0);
         $657 = (($a$3245$i) + 4|0);
         $$a$3321$i = $656 ? $657 : $a$3245$i;
         $$a$3322$i = $$a$3321$i;$z$4$i = $z$3244$i;
        }
       } while(0);
       $673 = $z$4$i;
       $674 = $$a$3322$i;
       $675 = (($673) - ($674))|0;
       $676 = $675 >> 2;
       $677 = ($676|0)>($619|0);
       if ($677) {
        $678 = (($$a$3322$i) + ($619<<2)|0);
        $z$5$i = $678;
       } else {
        $z$5$i = $z$4$i;
       }
       $679 = HEAP32[$e2$i>>2]|0;
       $680 = (($679) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $680;
       $681 = ($680|0)<(0);
       if ($681) {
        $652 = $680;$a$3245$i = $$a$3322$i;$z$3244$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3322$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $682 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $683 = $$32$i;
    do {
     if ($682) {
      $684 = $a$3$lcssa$i;
      $685 = (($683) - ($684))|0;
      $686 = $685 >> 2;
      $687 = ($686*9)|0;
      $688 = HEAP32[$a$3$lcssa$i>>2]|0;
      $689 = ($688>>>0)<(10);
      if ($689) {
       $e$1$i = $687;
       break;
      } else {
       $e$0233$i = $687;$i$0234$i = 10;
      }
      while(1) {
       $690 = ($i$0234$i*10)|0;
       $691 = (($e$0233$i) + 1)|0;
       $692 = ($688>>>0)<($690>>>0);
       if ($692) {
        $e$1$i = $691;
        break;
       } else {
        $e$0233$i = $691;$i$0234$i = $690;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $693 = ($411|0)!=(102);
    $694 = $693 ? $e$1$i : 0;
    $695 = (($$p$i) - ($694))|0;
    $696 = ($411|0)==(103);
    $697 = ($$p$i|0)!=(0);
    $$21$i = $696 & $697;
    $$neg152$i = $$21$i << 31 >> 31;
    $698 = (($695) + ($$neg152$i))|0;
    $699 = $z$3$lcssa$i;
    $700 = (($699) - ($683))|0;
    $701 = $700 >> 2;
    $702 = ($701*9)|0;
    $703 = (($702) + -9)|0;
    $704 = ($698|0)<($703|0);
    if ($704) {
     $705 = (($698) + 9216)|0;
     $706 = (($705|0) / 9)&-1;
     $$sum$i = (($706) + -1023)|0;
     $707 = (($$32$i) + ($$sum$i<<2)|0);
     $708 = (($705|0) % 9)&-1;
     $j$0225$i = (($708) + 1)|0;
     $709 = ($j$0225$i|0)<(9);
     if ($709) {
      $i$1226$i = 10;$j$0227$i = $j$0225$i;
      while(1) {
       $710 = ($i$1226$i*10)|0;
       $j$0$i = (($j$0227$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $710;
        break;
       } else {
        $i$1226$i = $710;$j$0227$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $711 = HEAP32[$707>>2]|0;
     $712 = (($711>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $713 = ($712|0)==(0);
     if ($713) {
      $$sum14$i = (($706) + -1022)|0;
      $714 = (($$32$i) + ($$sum14$i<<2)|0);
      $715 = ($714|0)==($z$3$lcssa$i|0);
      if ($715) {
       $a$6$i = $a$3$lcssa$i;$d$3$i = $707;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $716 = (($711>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $717 = $716 & 1;
       $718 = ($717|0)==(0);
       $$22$i = $718 ? 9007199254740992.0 : 9007199254740994.0;
       $719 = (($i$1$lcssa$i|0) / 2)&-1;
       $720 = ($712>>>0)<($719>>>0);
       do {
        if ($720) {
         $small$0$i = 0.5;
        } else {
         $721 = ($712|0)==($719|0);
         if ($721) {
          $$sum15$i = (($706) + -1022)|0;
          $722 = (($$32$i) + ($$sum15$i<<2)|0);
          $723 = ($722|0)==($z$3$lcssa$i|0);
          if ($723) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $724 = ($pl$0$i|0)==(0);
       do {
        if ($724) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $725 = HEAP8[$prefix$0$i>>0]|0;
         $726 = ($725<<24>>24)==(45);
         if (!($726)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $727 = $$22$i * -1.0;
         $728 = $small$0$i * -1.0;
         $round6$1$i = $727;$small$1$i = $728;
        }
       } while(0);
       $729 = (($711) - ($712))|0;
       HEAP32[$707>>2] = $729;
       $730 = $round6$1$i + $small$1$i;
       $731 = $730 != $round6$1$i;
       if (!($731)) {
        $a$6$i = $a$3$lcssa$i;$d$3$i = $707;$e$3$i = $e$1$i;
        break;
       }
       $732 = (($729) + ($i$1$lcssa$i))|0;
       HEAP32[$707>>2] = $732;
       $733 = ($732>>>0)>(999999999);
       if ($733) {
        $d$2220$i = $707;
        while(1) {
         $734 = (($d$2220$i) + -4|0);
         HEAP32[$d$2220$i>>2] = 0;
         $735 = HEAP32[$734>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$734>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $d$2220$i = $734;
         } else {
          $d$2$lcssa$i = $734;
          break;
         }
        }
       } else {
        $d$2$lcssa$i = $707;
       }
       $738 = ($d$2$lcssa$i>>>0)<($a$3$lcssa$i>>>0);
       $d$2$a$3$i = $738 ? $d$2$lcssa$i : $a$3$lcssa$i;
       $739 = $d$2$a$3$i;
       $740 = (($683) - ($739))|0;
       $741 = $740 >> 2;
       $742 = ($741*9)|0;
       $743 = HEAP32[$d$2$a$3$i>>2]|0;
       $744 = ($743>>>0)<(10);
       if ($744) {
        $a$6$i = $d$2$a$3$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $742;
        break;
       } else {
        $e$2215$i = $742;$i$2216$i = 10;
       }
       while(1) {
        $745 = ($i$2216$i*10)|0;
        $746 = (($e$2215$i) + 1)|0;
        $747 = ($743>>>0)<($745>>>0);
        if ($747) {
         $a$6$i = $d$2$a$3$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $746;
         break;
        } else {
         $e$2215$i = $746;$i$2216$i = $745;
        }
       }
      }
     } while(0);
     $748 = (($d$3$i) + 4|0);
     $749 = ($z$3$lcssa$i>>>0)>($748>>>0);
     $$z$3$i = $749 ? $748 : $z$3$lcssa$i;
     $z$6$i = $$z$3$i;
     while(1) {
      $750 = (($z$6$i) + -4|0);
      $751 = HEAP32[$750>>2]|0;
      $752 = ($751|0)==(0);
      $753 = ($z$6$i>>>0)>($a$6$i>>>0);
      $or$cond23$i = $752 & $753;
      if ($or$cond23$i) {
       $z$6$i = $750;
      } else {
       $a$7$i = $a$6$i;$e$4$i = $e$3$i;$z$7$i = $z$6$i;
       break;
      }
     }
    } else {
     $a$7$i = $a$3$lcssa$i;$e$4$i = $e$1$i;$z$7$i = $z$3$lcssa$i;
    }
    $754 = (0 - ($e$4$i))|0;
    do {
     if ($696) {
      $755 = ($$p$i|0)==(0);
      $756 = $755&1;
      $$$p$i = (($756) + ($$p$i))|0;
      $757 = ($$$p$i|0)>($e$4$i|0);
      $758 = ($e$4$i|0)>(-5);
      $or$cond3$i = $757 & $758;
      if ($or$cond3$i) {
       $759 = (($t$0) + -1)|0;
       $$neg153$i = (($$$p$i) + -1)|0;
       $760 = (($$neg153$i) - ($e$4$i))|0;
       $$012$i73 = $759;$$29$i = $760;
      } else {
       $761 = (($t$0) + -2)|0;
       $762 = (($$$p$i) + -1)|0;
       $$012$i73 = $761;$$29$i = $762;
      }
      $763 = $fl$1$ & 8;
      $764 = ($763|0)==(0);
      if (!($764)) {
       $$113$i = $$012$i73;$$310$i = $$29$i;
       break;
      }
      $765 = ($z$7$i>>>0)>($a$7$i>>>0);
      do {
       if ($765) {
        $766 = (($z$7$i) + -4|0);
        $767 = HEAP32[$766>>2]|0;
        $768 = ($767|0)==(0);
        if ($768) {
         $j$2$i = 9;
         break;
        }
        $769 = (($767>>>0) % 10)&-1;
        $770 = ($769|0)==(0);
        if ($770) {
         $i$3210$i = 10;$j$1211$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $771 = ($i$3210$i*10)|0;
         $772 = (($j$1211$i) + 1)|0;
         $773 = (($767>>>0) % ($771>>>0))&-1;
         $774 = ($773|0)==(0);
         if ($774) {
          $i$3210$i = $771;$j$1211$i = $772;
         } else {
          $j$2$i = $772;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $775 = $$012$i73 | 32;
      $776 = ($775|0)==(102);
      $777 = $z$7$i;
      $778 = (($777) - ($683))|0;
      $779 = $778 >> 2;
      $780 = ($779*9)|0;
      $781 = (($780) + -9)|0;
      if ($776) {
       $782 = (($781) - ($j$2$i))|0;
       $783 = ($782|0)<(0);
       $$24$i = $783 ? 0 : $782;
       $784 = ($$29$i|0)<($$24$i|0);
       $$29$$24$i = $784 ? $$29$i : $$24$i;
       $$113$i = $$012$i73;$$310$i = $$29$$24$i;
       break;
      } else {
       $785 = (($781) + ($e$4$i))|0;
       $786 = (($785) - ($j$2$i))|0;
       $787 = ($786|0)<(0);
       $$26$i = $787 ? 0 : $786;
       $788 = ($$29$i|0)<($$26$i|0);
       $$29$$26$i = $788 ? $$29$i : $$26$i;
       $$113$i = $$012$i73;$$310$i = $$29$$26$i;
       break;
      }
     } else {
      $$113$i = $t$0;$$310$i = $$p$i;
     }
    } while(0);
    $789 = ($$310$i|0)!=(0);
    if ($789) {
     $793 = 1;
    } else {
     $790 = $fl$1$ & 8;
     $791 = ($790|0)!=(0);
     $793 = $791;
    }
    $792 = $793&1;
    $794 = $$113$i | 32;
    $795 = ($794|0)==(102);
    if ($795) {
     $796 = ($e$4$i|0)>(0);
     $797 = $796 ? $e$4$i : 0;
     $$pn$i = $797;$estr$2$i = 0;
    } else {
     $798 = ($e$4$i|0)<(0);
     $799 = $798 ? $754 : $e$4$i;
     $800 = ($799|0)<(0);
     if ($800) {
      $801 = ($799|0)<(0);
      $802 = $801 << 31 >> 31;
      $$05$i80$i = $6;$803 = $799;$804 = $802;
      while(1) {
       $805 = (___uremdi3(($803|0),($804|0),10,0)|0);
       $806 = tempRet0;
       $807 = $805 | 48;
       $808 = $807&255;
       $809 = (($$05$i80$i) + -1|0);
       HEAP8[$809>>0] = $808;
       $810 = (___udivdi3(($803|0),($804|0),10,0)|0);
       $811 = tempRet0;
       $812 = ($804>>>0)>(9);
       $813 = ($804|0)==(9);
       $814 = ($803>>>0)>(4294967295);
       $815 = $813 & $814;
       $816 = $812 | $815;
       if ($816) {
        $$05$i80$i = $809;$803 = $810;$804 = $811;
       } else {
        break;
       }
      }
      $$0$lcssa$i85$i = $809;$$01$lcssa$off0$i86$i = $810;
     } else {
      $$0$lcssa$i85$i = $6;$$01$lcssa$off0$i86$i = $799;
     }
     $817 = ($$01$lcssa$off0$i86$i|0)==(0);
     if ($817) {
      $estr$1$ph$i = $$0$lcssa$i85$i;
     } else {
      $$12$i88$i = $$0$lcssa$i85$i;$y$03$i87$i = $$01$lcssa$off0$i86$i;
      while(1) {
       $818 = (($y$03$i87$i>>>0) % 10)&-1;
       $819 = $818 | 48;
       $820 = $819&255;
       $821 = (($$12$i88$i) + -1|0);
       HEAP8[$821>>0] = $820;
       $822 = (($y$03$i87$i>>>0) / 10)&-1;
       $823 = ($y$03$i87$i>>>0)<(10);
       if ($823) {
        $estr$1$ph$i = $821;
        break;
       } else {
        $$12$i88$i = $821;$y$03$i87$i = $822;
       }
      }
     }
     $824 = $estr$1$ph$i;
     $825 = (($8) - ($824))|0;
     $826 = ($825|0)<(2);
     if ($826) {
      $estr$1201$i = $estr$1$ph$i;
      while(1) {
       $827 = (($estr$1201$i) + -1|0);
       HEAP8[$827>>0] = 48;
       $828 = $827;
       $829 = (($8) - ($828))|0;
       $830 = ($829|0)<(2);
       if ($830) {
        $estr$1201$i = $827;
       } else {
        $estr$1$lcssa$i = $827;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $831 = $e$4$i >> 31;
     $832 = $831 & 2;
     $833 = (($832) + 43)|0;
     $834 = $833&255;
     $835 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$835>>0] = $834;
     $836 = $$113$i&255;
     $837 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$837>>0] = $836;
     $838 = $837;
     $839 = (($8) - ($838))|0;
     $$pn$i = $839;$estr$2$i = $837;
    }
    $840 = (($pl$0$i) + 1)|0;
    $841 = (($840) + ($$310$i))|0;
    $l$1$i = (($841) + ($792))|0;
    $842 = (($l$1$i) + ($$pn$i))|0;
    $843 = $fl$1$ & 73728;
    $844 = ($843|0)==(0);
    $845 = ($842|0)<($w$1|0);
    $or$cond$i94$i = $844 & $845;
    if ($or$cond$i94$i) {
     $846 = (($w$1) - ($842))|0;
     $847 = ($846>>>0)>(256);
     $848 = $847 ? 256 : $846;
     _memset(($pad$i|0),32,($848|0))|0;
     $849 = ($846>>>0)>(255);
     if ($849) {
      $$01$i95$i = $846;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $850 = (($$01$i95$i) + -256)|0;
       $851 = ($850>>>0)>(255);
       if ($851) {
        $$01$i95$i = $850;
       } else {
        $$0$lcssa$i97$i = $850;
        break;
       }
      }
     } else {
      $$0$lcssa$i97$i = $846;
     }
     (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $852 = ($843|0)==(65536);
    $or$cond$i101$i = $852 & $845;
    if ($or$cond$i101$i) {
     $853 = (($w$1) - ($842))|0;
     $854 = ($853>>>0)>(256);
     $855 = $854 ? 256 : $853;
     _memset(($pad$i|0),48,($855|0))|0;
     $856 = ($853>>>0)>(255);
     if ($856) {
      $$01$i102$i = $853;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $857 = (($$01$i102$i) + -256)|0;
       $858 = ($857>>>0)>(255);
       if ($858) {
        $$01$i102$i = $857;
       } else {
        $$0$lcssa$i104$i = $857;
        break;
       }
      }
     } else {
      $$0$lcssa$i104$i = $853;
     }
     (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
    }
    do {
     if ($795) {
      $859 = ($a$7$i>>>0)>($$32$i>>>0);
      $r$0$a$7$i = $859 ? $$32$i : $a$7$i;
      $d$4184$i = $r$0$a$7$i;
      while(1) {
       $860 = HEAP32[$d$4184$i>>2]|0;
       $861 = ($860|0)==(0);
       if ($861) {
        $$1$lcssa$i113$i = $13;
       } else {
        $$12$i111$i = $13;$y$03$i110$i = $860;
        while(1) {
         $862 = (($y$03$i110$i>>>0) % 10)&-1;
         $863 = $862 | 48;
         $864 = $863&255;
         $865 = (($$12$i111$i) + -1|0);
         HEAP8[$865>>0] = $864;
         $866 = (($y$03$i110$i>>>0) / 10)&-1;
         $867 = ($y$03$i110$i>>>0)<(10);
         if ($867) {
          $$1$lcssa$i113$i = $865;
          break;
         } else {
          $$12$i111$i = $865;$y$03$i110$i = $866;
         }
        }
       }
       $868 = ($d$4184$i|0)==($r$0$a$7$i|0);
       do {
        if ($868) {
         $872 = ($$1$lcssa$i113$i|0)==($13|0);
         if (!($872)) {
          $s7$1$i = $$1$lcssa$i113$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $869 = ($$1$lcssa$i113$i>>>0)>($buf$i>>>0);
         if ($869) {
          $s7$0181$i = $$1$lcssa$i113$i;
         } else {
          $s7$1$i = $$1$lcssa$i113$i;
          break;
         }
         while(1) {
          $870 = (($s7$0181$i) + -1|0);
          HEAP8[$870>>0] = 48;
          $871 = ($870>>>0)>($buf$i>>>0);
          if ($871) {
           $s7$0181$i = $870;
          } else {
           $s7$1$i = $870;
           break;
          }
         }
        }
       } while(0);
       $873 = $s7$1$i;
       $874 = (($14) - ($873))|0;
       (___fwritex($s7$1$i,$874,$f)|0);
       $875 = (($d$4184$i) + 4|0);
       $876 = ($875>>>0)>($$32$i>>>0);
       if ($876) {
        break;
       } else {
        $d$4184$i = $875;
       }
      }
      if (!($789)) {
       $877 = $fl$1$ & 8;
       $878 = ($877|0)==(0);
       if ($878) {
        break;
       }
      }
      (___fwritex(61200,1,$f)|0);
      $879 = ($875>>>0)<($z$7$i>>>0);
      $880 = ($$310$i|0)>(0);
      $or$cond29174$i = $879 & $880;
      if ($or$cond29174$i) {
       $$411176$i = $$310$i;$d$5175$i = $875;
       while(1) {
        $881 = HEAP32[$d$5175$i>>2]|0;
        $882 = ($881|0)==(0);
        if ($882) {
         $s8$0170$i = $13;
         label = 295;
        } else {
         $$12$i120$i = $13;$y$03$i119$i = $881;
         while(1) {
          $883 = (($y$03$i119$i>>>0) % 10)&-1;
          $884 = $883 | 48;
          $885 = $884&255;
          $886 = (($$12$i120$i) + -1|0);
          HEAP8[$886>>0] = $885;
          $887 = (($y$03$i119$i>>>0) / 10)&-1;
          $888 = ($y$03$i119$i>>>0)<(10);
          if ($888) {
           break;
          } else {
           $$12$i120$i = $886;$y$03$i119$i = $887;
          }
         }
         $889 = ($886>>>0)>($buf$i>>>0);
         if ($889) {
          $s8$0170$i = $886;
          label = 295;
         } else {
          $s8$0$lcssa$i = $886;
         }
        }
        if ((label|0) == 295) {
         while(1) {
          label = 0;
          $890 = (($s8$0170$i) + -1|0);
          HEAP8[$890>>0] = 48;
          $891 = ($890>>>0)>($buf$i>>>0);
          if ($891) {
           $s8$0170$i = $890;
           label = 295;
          } else {
           $s8$0$lcssa$i = $890;
           break;
          }
         }
        }
        $892 = ($$411176$i|0)>(9);
        $893 = $892 ? 9 : $$411176$i;
        (___fwritex($s8$0$lcssa$i,$893,$f)|0);
        $894 = (($d$5175$i) + 4|0);
        $895 = (($$411176$i) + -9)|0;
        $896 = ($894>>>0)<($z$7$i>>>0);
        $897 = ($895|0)>(0);
        $or$cond29$i = $896 & $897;
        if ($or$cond29$i) {
         $$411176$i = $895;$d$5175$i = $894;
        } else {
         $$411$lcssa$i = $895;
         break;
        }
       }
      } else {
       $$411$lcssa$i = $$310$i;
      }
      $898 = ($$411$lcssa$i|0)>(0);
      if (!($898)) {
       break;
      }
      $899 = ($$411$lcssa$i>>>0)>(256);
      $900 = $899 ? 256 : $$411$lcssa$i;
      _memset(($pad$i|0),48,($900|0))|0;
      $901 = ($$411$lcssa$i>>>0)>(255);
      if ($901) {
       $$01$i126$i = $$411$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $902 = (($$01$i126$i) + -256)|0;
        $903 = ($902>>>0)>(255);
        if ($903) {
         $$01$i126$i = $902;
        } else {
         $$0$lcssa$i128$i = $902;
         break;
        }
       }
      } else {
       $$0$lcssa$i128$i = $$411$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
     } else {
      $904 = ($z$7$i>>>0)>($a$7$i>>>0);
      $905 = (($a$7$i) + 4|0);
      $z$7$$i = $904 ? $z$7$i : $905;
      $906 = ($$310$i|0)>(-1);
      do {
       if ($906) {
        $907 = $fl$1$ & 8;
        $$not$i = ($907|0)!=(0);
        $$5194$i = $$310$i;$d$6193$i = $a$7$i;
        while(1) {
         $908 = HEAP32[$d$6193$i>>2]|0;
         $909 = ($908|0)==(0);
         if ($909) {
          label = 306;
         } else {
          $$12$i135$i = $13;$y$03$i134$i = $908;
          while(1) {
           $910 = (($y$03$i134$i>>>0) % 10)&-1;
           $911 = $910 | 48;
           $912 = $911&255;
           $913 = (($$12$i135$i) + -1|0);
           HEAP8[$913>>0] = $912;
           $914 = (($y$03$i134$i>>>0) / 10)&-1;
           $915 = ($y$03$i134$i>>>0)<(10);
           if ($915) {
            break;
           } else {
            $$12$i135$i = $913;$y$03$i134$i = $914;
           }
          }
          $916 = ($913|0)==($13|0);
          if ($916) {
           label = 306;
          } else {
           $s9$0$i = $913;
          }
         }
         if ((label|0) == 306) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $917 = ($d$6193$i|0)==($a$7$i|0);
         do {
          if ($917) {
           $921 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $922 = ($$5194$i|0)>(0);
           $brmerge$i = $922 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $921;
            break;
           }
           (___fwritex(61200,1,$f)|0);
           $s9$2$i = $921;
          } else {
           $918 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($918) {
            $s9$1189$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $919 = (($s9$1189$i) + -1|0);
            HEAP8[$919>>0] = 48;
            $920 = ($919>>>0)>($buf$i>>>0);
            if ($920) {
             $s9$1189$i = $919;
            } else {
             $s9$2$i = $919;
             break;
            }
           }
          }
         } while(0);
         $923 = $s9$2$i;
         $924 = (($14) - ($923))|0;
         $925 = ($924|0)<($$5194$i|0);
         $$$5$i = $925 ? $924 : $$5194$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $926 = (($$5194$i) - ($924))|0;
         $927 = (($d$6193$i) + 4|0);
         $928 = ($927>>>0)<($z$7$$i>>>0);
         $929 = ($926|0)>(-1);
         $or$cond30$i = $928 & $929;
         if ($or$cond30$i) {
          $$5194$i = $926;$d$6193$i = $927;
         } else {
          break;
         }
        }
        $930 = ($926|0)>(0);
        if (!($930)) {
         break;
        }
        $931 = ($926>>>0)>(256);
        $932 = $931 ? 256 : $926;
        _memset(($pad$i|0),48,($932|0))|0;
        $933 = ($926>>>0)>(255);
        if ($933) {
         $$01$i141$i = $926;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $934 = (($$01$i141$i) + -256)|0;
          $935 = ($934>>>0)>(255);
          if ($935) {
           $$01$i141$i = $934;
          } else {
           $$0$lcssa$i143$i = $934;
           break;
          }
         }
        } else {
         $$0$lcssa$i143$i = $926;
        }
        (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
       }
      } while(0);
      $936 = $estr$2$i;
      $937 = (($8) - ($936))|0;
      (___fwritex($estr$2$i,$937,$f)|0);
     }
    } while(0);
    $938 = ($843|0)==(8192);
    $or$cond$i$i = $938 & $845;
    if ($or$cond$i$i) {
     $939 = (($w$1) - ($842))|0;
     $940 = ($939>>>0)>(256);
     $941 = $940 ? 256 : $939;
     _memset(($pad$i|0),32,($941|0))|0;
     $942 = ($939>>>0)>(255);
     if ($942) {
      $$01$i$i = $939;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $943 = (($$01$i$i) + -256)|0;
       $944 = ($943>>>0)>(255);
       if ($944) {
        $$01$i$i = $943;
       } else {
        $$0$lcssa$i$i = $943;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $939;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$31$i = $845 ? $w$1 : $842;
    $1048 = $227;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$31$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 112:  {
    $221 = ($p$0>>>0)>(8);
    $222 = $221 ? $p$0 : 8;
    $223 = $fl$1$ | 8;
    $fl$3 = $223;$p$1 = $222;$t$1 = 120;
    label = 78;
    break;
   }
   case 67:  {
    $330 = $206;
    HEAP32[$wc>>2] = $330;
    HEAP32[$5>>2] = 0;
    $1058 = $wc;$1059 = $wc;$p$4296 = -1;
    label = 105;
    break;
   }
   case 83:  {
    $331 = ($p$0|0)==(0);
    if ($331) {
     $1060 = $206;$1061 = $206;$i$0167 = 0;
     label = 111;
    } else {
     $1058 = $206;$1059 = $206;$p$4296 = $p$0;
     label = 105;
    }
    break;
   }
   default: {
    $1056 = $227;$1057 = $206;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 61104;$z$2 = $2;
   }
   }
  } while(0);
  L437: do {
   if ((label|0) == 78) {
    label = 0;
    $224 = $206;
    $225 = $t$1 & 32;
    $226 = ($224|0)==(0);
    $228 = ($227|0)==(0);
    $229 = $226 & $228;
    if ($229) {
     $306 = $206;$309 = $227;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 61104;
     label = 95;
    } else {
     $$012$i = $2;$231 = $224;$238 = $227;
     while(1) {
      $230 = $231 & 15;
      $232 = (61184 + ($230)|0);
      $233 = HEAP8[$232>>0]|0;
      $234 = $233&255;
      $235 = $234 | $225;
      $236 = $235&255;
      $237 = (($$012$i) + -1|0);
      HEAP8[$237>>0] = $236;
      $239 = (_bitshift64Lshr(($231|0),($238|0),4)|0);
      $240 = tempRet0;
      $241 = ($239|0)==(0);
      $242 = ($240|0)==(0);
      $243 = $241 & $242;
      if ($243) {
       break;
      } else {
       $$012$i = $237;$231 = $239;$238 = $240;
      }
     }
     $244 = $fl$3 & 8;
     $245 = ($244|0)==(0);
     if ($245) {
      $306 = $206;$309 = $227;$a$0 = $237;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 61104;
      label = 95;
     } else {
      $246 = $t$1 >> 4;
      $247 = (61104 + ($246)|0);
      $306 = $206;$309 = $227;$a$0 = $237;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $247;
      label = 95;
     }
    }
   }
   else if ((label|0) == 90) {
    label = 0;
    $276 = $275;
    $278 = ($277>>>0)>(0);
    $279 = ($277|0)==(0);
    $280 = ($276>>>0)>(4294967295);
    $281 = $279 & $280;
    $282 = $278 | $281;
    if ($282) {
     $$05$i = $2;$283 = $276;$284 = $277;
     while(1) {
      $285 = (___uremdi3(($283|0),($284|0),10,0)|0);
      $286 = tempRet0;
      $287 = $285 | 48;
      $288 = $287&255;
      $289 = (($$05$i) + -1|0);
      HEAP8[$289>>0] = $288;
      $290 = (___udivdi3(($283|0),($284|0),10,0)|0);
      $291 = tempRet0;
      $292 = ($284>>>0)>(9);
      $293 = ($284|0)==(9);
      $294 = ($283>>>0)>(4294967295);
      $295 = $293 & $294;
      $296 = $292 | $295;
      if ($296) {
       $$05$i = $289;$283 = $290;$284 = $291;
      } else {
       break;
      }
     }
     $$0$lcssa$i46 = $289;$$01$lcssa$off0$i = $290;
    } else {
     $$0$lcssa$i46 = $2;$$01$lcssa$off0$i = $276;
    }
    $297 = ($$01$lcssa$off0$i|0)==(0);
    if ($297) {
     $306 = $275;$309 = $277;$a$0 = $$0$lcssa$i46;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 95;
    } else {
     $$12$i = $$0$lcssa$i46;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $298 = (($y$03$i>>>0) % 10)&-1;
      $299 = $298 | 48;
      $300 = $299&255;
      $301 = (($$12$i) + -1|0);
      HEAP8[$301>>0] = $300;
      $302 = (($y$03$i>>>0) / 10)&-1;
      $303 = ($y$03$i>>>0)<(10);
      if ($303) {
       $306 = $275;$309 = $277;$a$0 = $301;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 95;
       break;
      } else {
       $$12$i = $301;$y$03$i = $302;
      }
     }
    }
   }
   else if ((label|0) == 100) {
    label = 0;
    $324 = (_memchr($a$1,0,$p$0)|0);
    $325 = ($324|0)==(0|0);
    if ($325) {
     $326 = (($a$1) + ($p$0)|0);
     $1056 = $227;$1057 = $206;$a$2 = $a$1;$fl$6 = $205;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 61104;$z$2 = $326;
     break;
    } else {
     $327 = $324;
     $328 = $a$1;
     $329 = (($327) - ($328))|0;
     $1056 = $227;$1057 = $206;$a$2 = $a$1;$fl$6 = $205;$p$5 = $329;$pl$2 = 0;$prefix$2 = 61104;$z$2 = $324;
     break;
    }
   }
   else if ((label|0) == 105) {
    label = 0;
    $i$0169 = 0;$l$1168 = 0;$ws$0170 = $1058;
    while(1) {
     $335 = HEAP32[$ws$0170>>2]|0;
     $336 = ($335|0)==(0);
     if ($336) {
      $i$0$lcssa = $i$0169;$l$1$lcssa = $l$1168;
      break;
     }
     $337 = (_wctomb($mb,$335)|0);
     $338 = ($337|0)>(-1);
     if (!($338)) {
      $$0 = -1;
      label = 357;
      break L1;
     }
     $339 = (($p$4296) - ($i$0169))|0;
     $340 = ($337>>>0)>($339>>>0);
     $333 = (($337) + ($i$0169))|0;
     if ($340) {
      $1060 = $1058;$1061 = $1059;$i$0167 = $i$0169;
      label = 111;
      break L437;
     }
     $332 = (($ws$0170) + 4|0);
     $334 = ($333>>>0)<($p$4296>>>0);
     if ($334) {
      $i$0169 = $333;$l$1168 = $337;$ws$0170 = $332;
     } else {
      $i$0$lcssa = $333;$l$1$lcssa = $337;
      break;
     }
    }
    $341 = ($l$1$lcssa|0)<(0);
    if ($341) {
     $$0 = -1;
     label = 357;
     break L1;
    } else {
     $1060 = $1058;$1061 = $1059;$i$0167 = $i$0$lcssa;
     label = 111;
    }
   }
  } while(0);
  if ((label|0) == 95) {
   label = 0;
   $304 = ($p$2|0)>(-1);
   $305 = $fl$4 & -65537;
   $$fl$4 = $304 ? $305 : $fl$4;
   $307 = $306;
   $308 = ($307|0)==(0);
   $310 = ($309|0)==(0);
   $311 = $308 & $310;
   $312 = ($p$2|0)==(0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $1056 = $309;$1057 = $306;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $313 = $a$0;
    $314 = (($3) - ($313))|0;
    $315 = $311&1;
    $316 = (($315) + ($314))|0;
    $317 = ($p$2|0)>($316|0);
    $p$2$ = $317 ? $p$2 : $316;
    $1056 = $309;$1057 = $306;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 111) {
   label = 0;
   $342 = $fl$1$ & 73728;
   $343 = ($342|0)==(0);
   $344 = ($i$0167|0)<($w$1|0);
   $or$cond$i57 = $343 & $344;
   if ($or$cond$i57) {
    $345 = (($w$1) - ($i$0167))|0;
    $346 = ($345>>>0)>(256);
    $347 = $346 ? 256 : $345;
    _memset(($pad$i|0),32,($347|0))|0;
    $348 = ($345>>>0)>(255);
    if ($348) {
     $$01$i58 = $345;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $349 = (($$01$i58) + -256)|0;
      $350 = ($349>>>0)>(255);
      if ($350) {
       $$01$i58 = $349;
      } else {
       $$0$lcssa$i60 = $349;
       break;
      }
     }
    } else {
     $$0$lcssa$i60 = $345;
    }
    (___fwritex($pad$i,$$0$lcssa$i60,$f)|0);
   }
   $351 = ($i$0167|0)==(0);
   L471: do {
    if (!($351)) {
     $i$1175 = 0;$ws$1176 = $1060;
     while(1) {
      $352 = HEAP32[$ws$1176>>2]|0;
      $353 = ($352|0)==(0);
      if ($353) {
       break L471;
      }
      $354 = (_wctomb($mb,$352)|0);
      $355 = (($354) + ($i$1175))|0;
      $356 = ($355|0)>($i$0167|0);
      if ($356) {
       break L471;
      }
      $357 = (($ws$1176) + 4|0);
      (___fwritex($mb,$354,$f)|0);
      $358 = ($355>>>0)<($i$0167>>>0);
      if ($358) {
       $i$1175 = $355;$ws$1176 = $357;
      } else {
       break;
      }
     }
    }
   } while(0);
   $359 = ($342|0)==(8192);
   $or$cond$i64 = $359 & $344;
   if ($or$cond$i64) {
    $360 = (($w$1) - ($i$0167))|0;
    $361 = ($360>>>0)>(256);
    $362 = $361 ? 256 : $360;
    _memset(($pad$i|0),32,($362|0))|0;
    $363 = ($360>>>0)>(255);
    if ($363) {
     $$01$i65 = $360;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $364 = (($$01$i65) + -256)|0;
      $365 = ($364>>>0)>(255);
      if ($365) {
       $$01$i65 = $364;
      } else {
       $$0$lcssa$i67 = $364;
       break;
      }
     }
    } else {
     $$0$lcssa$i67 = $360;
    }
    (___fwritex($pad$i,$$0$lcssa$i67,$f)|0);
   }
   $366 = $344 ? $w$1 : $i$0167;
   $1048 = $227;$1049 = $1061;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $366;$l10n$0 = $l10n$3;
   continue;
  }
  $945 = $z$2;
  $946 = $a$2;
  $947 = (($945) - ($946))|0;
  $948 = ($p$5|0)<($947|0);
  $$p$5 = $948 ? $947 : $p$5;
  $949 = (($pl$2) + ($$p$5))|0;
  $950 = ($w$1|0)<($949|0);
  $w$2 = $950 ? $949 : $w$1;
  $951 = $fl$6 & 73728;
  $952 = ($951|0)==(0);
  $953 = ($949|0)<($w$2|0);
  $or$cond$i75 = $952 & $953;
  if ($or$cond$i75) {
   $954 = (($w$2) - ($949))|0;
   $955 = ($954>>>0)>(256);
   $956 = $955 ? 256 : $954;
   _memset(($pad$i|0),32,($956|0))|0;
   $957 = ($954>>>0)>(255);
   if ($957) {
    $$01$i76 = $954;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $958 = (($$01$i76) + -256)|0;
     $959 = ($958>>>0)>(255);
     if ($959) {
      $$01$i76 = $958;
     } else {
      $$0$lcssa$i78 = $958;
      break;
     }
    }
   } else {
    $$0$lcssa$i78 = $954;
   }
   (___fwritex($pad$i,$$0$lcssa$i78,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $960 = ($951|0)==(65536);
  $or$cond$i50 = $960 & $953;
  if ($or$cond$i50) {
   $961 = (($w$2) - ($949))|0;
   $962 = ($961>>>0)>(256);
   $963 = $962 ? 256 : $961;
   _memset(($pad$i|0),48,($963|0))|0;
   $964 = ($961>>>0)>(255);
   if ($964) {
    $$01$i51 = $961;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $965 = (($$01$i51) + -256)|0;
     $966 = ($965>>>0)>(255);
     if ($966) {
      $$01$i51 = $965;
     } else {
      $$0$lcssa$i53 = $965;
      break;
     }
    }
   } else {
    $$0$lcssa$i53 = $961;
   }
   (___fwritex($pad$i,$$0$lcssa$i53,$f)|0);
  }
  $967 = ($947|0)<($$p$5|0);
  if ($967) {
   $968 = (($$p$5) - ($947))|0;
   $969 = ($968>>>0)>(256);
   $970 = $969 ? 256 : $968;
   _memset(($pad$i|0),48,($970|0))|0;
   $971 = ($968>>>0)>(255);
   if ($971) {
    $$01$i36 = $968;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $972 = (($$01$i36) + -256)|0;
     $973 = ($972>>>0)>(255);
     if ($973) {
      $$01$i36 = $972;
     } else {
      $$0$lcssa$i38 = $972;
      break;
     }
    }
   } else {
    $$0$lcssa$i38 = $968;
   }
   (___fwritex($pad$i,$$0$lcssa$i38,$f)|0);
  }
  (___fwritex($a$2,$947,$f)|0);
  $974 = ($951|0)==(8192);
  $or$cond$i = $974 & $953;
  if (!($or$cond$i)) {
   $1048 = $1056;$1049 = $1057;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $975 = (($w$2) - ($949))|0;
  $976 = ($975>>>0)>(256);
  $977 = $976 ? 256 : $975;
  _memset(($pad$i|0),32,($977|0))|0;
  $978 = ($975>>>0)>(255);
  if ($978) {
   $$01$i = $975;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $979 = (($$01$i) + -256)|0;
    $980 = ($979>>>0)>(255);
    if ($980) {
     $$01$i = $979;
    } else {
     $$0$lcssa$i = $979;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $975;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1048 = $1056;$1049 = $1057;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 339) {
  $981 = ($f|0)==(0|0);
  if (!($981)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $982 = ($l10n$0|0)==(0);
  if ($982) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$291 = 1;
  }
  while(1) {
   $983 = (($nl_type) + ($i$291<<2)|0);
   $984 = HEAP32[$983>>2]|0;
   $985 = ($984|0)==(0);
   if ($985) {
    $i$390 = $i$291;
    break;
   }
   $986 = (($nl_arg) + ($i$291<<3)|0);
   $987 = ($984>>>0)>(20);
   L523: do {
    if (!($987)) {
     do {
      switch ($984|0) {
      case 9:  {
       $arglist_current36 = HEAP32[$ap>>2]|0;
       $988 = HEAP32[$arglist_current36>>2]|0;
       $arglist_next37 = (($arglist_current36) + 4|0);
       HEAP32[$ap>>2] = $arglist_next37;
       HEAP32[$986>>2] = $988;
       break L523;
       break;
      }
      case 10:  {
       $arglist_current39 = HEAP32[$ap>>2]|0;
       $989 = HEAP32[$arglist_current39>>2]|0;
       $arglist_next40 = (($arglist_current39) + 4|0);
       HEAP32[$ap>>2] = $arglist_next40;
       $990 = ($989|0)<(0);
       $991 = $990 << 31 >> 31;
       $992 = $986;
       $993 = $992;
       HEAP32[$993>>2] = $989;
       $994 = (($992) + 4)|0;
       $995 = $994;
       HEAP32[$995>>2] = $991;
       break L523;
       break;
      }
      case 11:  {
       $arglist_current42 = HEAP32[$ap>>2]|0;
       $996 = HEAP32[$arglist_current42>>2]|0;
       $arglist_next43 = (($arglist_current42) + 4|0);
       HEAP32[$ap>>2] = $arglist_next43;
       $997 = $986;
       $998 = $997;
       HEAP32[$998>>2] = $996;
       $999 = (($997) + 4)|0;
       $1000 = $999;
       HEAP32[$1000>>2] = 0;
       break L523;
       break;
      }
      case 12:  {
       $arglist_current45 = HEAP32[$ap>>2]|0;
       $1001 = $arglist_current45;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $1004 = (($1001) + 4)|0;
       $1005 = $1004;
       $1006 = HEAP32[$1005>>2]|0;
       $arglist_next46 = (($arglist_current45) + 8|0);
       HEAP32[$ap>>2] = $arglist_next46;
       $1007 = $986;
       $1008 = $1007;
       HEAP32[$1008>>2] = $1003;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = $1006;
       break L523;
       break;
      }
      case 13:  {
       $arglist_current48 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current48>>2]|0;
       $arglist_next49 = (($arglist_current48) + 4|0);
       HEAP32[$ap>>2] = $arglist_next49;
       $1012 = $1011&65535;
       $1013 = $1012 << 16 >> 16;
       $1014 = ($1013|0)<(0);
       $1015 = $1014 << 31 >> 31;
       $1016 = $986;
       $1017 = $1016;
       HEAP32[$1017>>2] = $1013;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = $1015;
       break L523;
       break;
      }
      case 14:  {
       $arglist_current51 = HEAP32[$ap>>2]|0;
       $1020 = HEAP32[$arglist_current51>>2]|0;
       $arglist_next52 = (($arglist_current51) + 4|0);
       HEAP32[$ap>>2] = $arglist_next52;
       $$mask1$i = $1020 & 65535;
       $1021 = $986;
       $1022 = $1021;
       HEAP32[$1022>>2] = $$mask1$i;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = 0;
       break L523;
       break;
      }
      case 15:  {
       $arglist_current54 = HEAP32[$ap>>2]|0;
       $1025 = HEAP32[$arglist_current54>>2]|0;
       $arglist_next55 = (($arglist_current54) + 4|0);
       HEAP32[$ap>>2] = $arglist_next55;
       $1026 = $1025&255;
       $1027 = $1026 << 24 >> 24;
       $1028 = ($1027|0)<(0);
       $1029 = $1028 << 31 >> 31;
       $1030 = $986;
       $1031 = $1030;
       HEAP32[$1031>>2] = $1027;
       $1032 = (($1030) + 4)|0;
       $1033 = $1032;
       HEAP32[$1033>>2] = $1029;
       break L523;
       break;
      }
      case 16:  {
       $arglist_current57 = HEAP32[$ap>>2]|0;
       $1034 = HEAP32[$arglist_current57>>2]|0;
       $arglist_next58 = (($arglist_current57) + 4|0);
       HEAP32[$ap>>2] = $arglist_next58;
       $$mask$i = $1034 & 255;
       $1035 = $986;
       $1036 = $1035;
       HEAP32[$1036>>2] = $$mask$i;
       $1037 = (($1035) + 4)|0;
       $1038 = $1037;
       HEAP32[$1038>>2] = 0;
       break L523;
       break;
      }
      case 17:  {
       $arglist_current60 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current60>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current60+4>>2];$1039 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next61 = (($arglist_current60) + 8|0);
       HEAP32[$ap>>2] = $arglist_next61;
       HEAPF64[$986>>3] = $1039;
       break L523;
       break;
      }
      case 18:  {
       $arglist_current63 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current63>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current63+4>>2];$1040 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next64 = (($arglist_current63) + 8|0);
       HEAP32[$ap>>2] = $arglist_next64;
       HEAPF64[$986>>3] = $1040;
       break L523;
       break;
      }
      default: {
       break L523;
      }
      }
     } while(0);
    }
   } while(0);
   $1041 = (($i$291) + 1)|0;
   $1042 = ($1041|0)<(10);
   if ($1042) {
    $i$291 = $1041;
   } else {
    $$0 = 1;
    label = 357;
    break;
   }
  }
  if ((label|0) == 357) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1045 = (($nl_type) + ($i$390<<2)|0);
   $1046 = HEAP32[$1045>>2]|0;
   $1047 = ($1046|0)==(0);
   $1043 = (($i$390) + 1)|0;
   if (!($1047)) {
    $$0 = -1;
    label = 357;
    break;
   }
   $1044 = ($1043|0)<(10);
   if ($1044) {
    $i$390 = $1043;
   } else {
    $$0 = 1;
    label = 357;
    break;
   }
  }
  if ((label|0) == 357) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 357) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=61208+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$1$ph = 0, $$12 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$4>>0]|0;
  $$1$ph = $4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  STACKTOP = sp;return ($22|0);
 } else {
  $$12 = $$1$ph;$n$03 = 0;
 }
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $n$0$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 STACKTOP = sp;return ($22|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$027 = 0, $$08 = 0, $$lcssa = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond36 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond5 = $2 | $3;
 $4 = ($1<<24>>24)==(0);
 $or$cond36 = $or$cond5 | $4;
 if ($or$cond36) {
  $$lcssa = $0;$$lcssa4 = $1;
  $12 = $$lcssa&255;
  $13 = $$lcssa4&255;
  $14 = (($12) - ($13))|0;
  STACKTOP = sp;return ($14|0);
 } else {
  $$027 = $l;$$08 = $r;
 }
 while(1) {
  $5 = (($$027) + 1|0);
  $6 = (($$08) + 1|0);
  $7 = HEAP8[$5>>0]|0;
  $8 = HEAP8[$6>>0]|0;
  $9 = ($7<<24>>24)!=($8<<24>>24);
  $10 = ($7<<24>>24)==(0);
  $or$cond = $9 | $10;
  $11 = ($8<<24>>24)==(0);
  $or$cond3 = $or$cond | $11;
  if ($or$cond3) {
   $$lcssa = $7;$$lcssa4 = $8;
   break;
  } else {
   $$027 = $5;$$08 = $6;
  }
 }
 $12 = $$lcssa&255;
 $13 = $$lcssa4&255;
 $14 = (($12) - ($13))|0;
 STACKTOP = sp;return ($14|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$4 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $5 = ($4<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $5;
    if (!($or$cond4)) {
     $11 = $4;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$4 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa>>0]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&3](a1|0)|0;
    }
  

    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&3](a1|0,a2|0,a3|0)|0;
    }
  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&3](a1|0,a2|0)|0;
    }
  

    function dynCall_vi(index,a1) {
      index = index|0;
      a1=a1|0;
      FUNCTION_TABLE_vi[index&1](a1|0);
    }
  
function b0(p0) { p0 = p0|0; abort(0);return 0; }
  function b1(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(1);return 0; }
  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; abort(2);return 0; }
  function b3(p0) { p0 = p0|0; abort(3); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_ii = [b0,_g_str_hash,_g_direct_hash,b0];
  var FUNCTION_TABLE_iiii = [b1,_sn_write,_match_by_data,_do_read];
  var FUNCTION_TABLE_iii = [b2,_g_str_equal,_gretl_compare_doubles,b2];
  var FUNCTION_TABLE_vi = [b3,_private_thread_memory_cleanup];

    return { _i64Subtract: _i64Subtract, _strcat: _strcat, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_iii: dynCall_iii, dynCall_vi: dynCall_vi };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_iii": invoke_iii, "invoke_vi": invoke_vi, "_fabs": _fabs, "_exp": _exp, "_g_mutex_unlock": _g_mutex_unlock, "_dlsym": _dlsym, "_fread": _fread, "_g_mutex_lock": _g_mutex_lock, "_fmodl": _fmodl, "___assert_fail": ___assert_fail, "__addDays": __addDays, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_close": _close, "_g_get_current_time": _g_get_current_time, "_cos": _cos, "_g_malloc": _g_malloc, "_g_mutex_trylock": _g_mutex_trylock, "_write": _write, "__isLeapYear": __isLeapYear, "_fsync": _fsync, "_dgemm_": _dgemm_, "_g_memdup": _g_memdup, "_send": _send, "_atan2": _atan2, "_g_strdup_printf": _g_strdup_printf, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_getpid": _getpid, "_creat": _creat, "_unlink": _unlink, "_dlclose": _dlclose, "_g_parse_debug_string": _g_parse_debug_string, "_floor": _floor, "_dgeqrf_": _dgeqrf_, "_mktemp": _mktemp, "_printf": _printf, "_dtrcon_": _dtrcon_, "_g_strdup": _g_strdup, "_g_assertion_message_expr": _g_assertion_message_expr, "_g_error_free": _g_error_free, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_log10": _log10, "_dlopen": _dlopen, "_exit": _exit, "_dsyrk_": _dsyrk_, "_dlerror": _dlerror, "_g_private_set": _g_private_set, "_llvm_pow_f64": _llvm_pow_f64, "_fmod": _fmod, "_g_locale_from_utf8": _g_locale_from_utf8, "_vfprintf": _vfprintf, "_rmdir": _rmdir, "_dpotrf_": _dpotrf_, "___buildEnvironment": ___buildEnvironment, "_pwrite": _pwrite, "_open": _open, "_remove": _remove, "_g_return_if_fail_warning": _g_return_if_fail_warning, "_strftime": _strftime, "_g_free": _g_free, "_fdopen": _fdopen, "_g_locale_to_utf8": _g_locale_to_utf8, "_getenv": _getenv, "_fclose": _fclose, "_log": _log, "_recv": _recv, "_fgetc": _fgetc, "_abort": _abort, "_g_malloc0": _g_malloc0, "_ceil": _ceil, "_fopen": _fopen, "_read": _read, "_getgid": _getgid, "_sin": _sin, "_dgeev_": _dgeev_, "_dorgqr_": _dorgqr_, "_mkstemp": _mkstemp, "_g_malloc0_n": _g_malloc0_n, "_times": _times, "__reallyNegative": __reallyNegative, "_dtrtri_": _dtrtri_, "_dpotri_": _dpotri_, "_fileno": _fileno, "__exit": __exit, "_g_private_get": _g_private_get, "__arraySum": __arraySum, "_fgets": _fgets, "_atan": _atan, "_g_get_prgname": _g_get_prgname, "_pread": _pread, "_mkport": _mkport, "_genrand_mt": _genrand_mt, "_g_atomic_int_dec_and_test": _g_atomic_int_dec_and_test, "_fflush": _fflush, "___errno_location": ___errno_location, "_puts": _puts, "_copysign": _copysign, "_fputc": _fputc, "_copysignl": _copysignl, "_free_mt_struct": _free_mt_struct, "_strerror": _strerror, "__formatString": __formatString, "_fputs": _fputs, "_sqrt": _sqrt, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_g_mem_gc_friendly": _g_mem_gc_friendly, "_stderr": _stderr, "_stdout": _stdout }, buffer);
  var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



